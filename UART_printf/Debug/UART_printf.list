
UART_printf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000073f4  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000051c  080074b0  080074b0  000174b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080079cc  080079cc  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  080079cc  080079cc  000179cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080079d4  080079d4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080079d4  080079d4  000179d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080079d8  080079d8  000179d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080079dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  200001dc  08007bb8  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a8  08007bb8  000202a8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ab77  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d4d  00000000  00000000  0002ad7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008d8  00000000  00000000  0002cac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000820  00000000  00000000  0002d3a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018621  00000000  00000000  0002dbc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a156  00000000  00000000  000461e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096612  00000000  00000000  00050337  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e6949  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ef0  00000000  00000000  000e699c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200001dc 	.word	0x200001dc
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08007498 	.word	0x08007498

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200001e0 	.word	0x200001e0
 8000100:	08007498 	.word	0x08007498

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			; (mov r8, r8)

08000128 <__gnu_thumb1_case_shi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5e09      	ldrsh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	1c10      	adds	r0, r2, #0
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	1c19      	adds	r1, r3, #0
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f001 f81f 	bl	800147c <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f000 ff69 	bl	8001320 <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 f811 	bl	800147c <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 f807 	bl	800147c <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f000 ff8b 	bl	8001398 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f000 ff81 	bl	8001398 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_uldivmod>:
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d111      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004a8:	2a00      	cmp	r2, #0
 80004aa:	d10f      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004ac:	2900      	cmp	r1, #0
 80004ae:	d100      	bne.n	80004b2 <__aeabi_uldivmod+0xe>
 80004b0:	2800      	cmp	r0, #0
 80004b2:	d002      	beq.n	80004ba <__aeabi_uldivmod+0x16>
 80004b4:	2100      	movs	r1, #0
 80004b6:	43c9      	mvns	r1, r1
 80004b8:	1c08      	adds	r0, r1, #0
 80004ba:	b407      	push	{r0, r1, r2}
 80004bc:	4802      	ldr	r0, [pc, #8]	; (80004c8 <__aeabi_uldivmod+0x24>)
 80004be:	a102      	add	r1, pc, #8	; (adr r1, 80004c8 <__aeabi_uldivmod+0x24>)
 80004c0:	1840      	adds	r0, r0, r1
 80004c2:	9002      	str	r0, [sp, #8]
 80004c4:	bd03      	pop	{r0, r1, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	ffffff5d 	.word	0xffffff5d
 80004cc:	b403      	push	{r0, r1}
 80004ce:	4668      	mov	r0, sp
 80004d0:	b501      	push	{r0, lr}
 80004d2:	9802      	ldr	r0, [sp, #8]
 80004d4:	f000 f806 	bl	80004e4 <__udivmoddi4>
 80004d8:	9b01      	ldr	r3, [sp, #4]
 80004da:	469e      	mov	lr, r3
 80004dc:	b002      	add	sp, #8
 80004de:	bc0c      	pop	{r2, r3}
 80004e0:	4770      	bx	lr
 80004e2:	46c0      	nop			; (mov r8, r8)

080004e4 <__udivmoddi4>:
 80004e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004e6:	4657      	mov	r7, sl
 80004e8:	464e      	mov	r6, r9
 80004ea:	4645      	mov	r5, r8
 80004ec:	46de      	mov	lr, fp
 80004ee:	b5e0      	push	{r5, r6, r7, lr}
 80004f0:	0004      	movs	r4, r0
 80004f2:	000d      	movs	r5, r1
 80004f4:	4692      	mov	sl, r2
 80004f6:	4699      	mov	r9, r3
 80004f8:	b083      	sub	sp, #12
 80004fa:	428b      	cmp	r3, r1
 80004fc:	d830      	bhi.n	8000560 <__udivmoddi4+0x7c>
 80004fe:	d02d      	beq.n	800055c <__udivmoddi4+0x78>
 8000500:	4649      	mov	r1, r9
 8000502:	4650      	mov	r0, sl
 8000504:	f001 ff38 	bl	8002378 <__clzdi2>
 8000508:	0029      	movs	r1, r5
 800050a:	0006      	movs	r6, r0
 800050c:	0020      	movs	r0, r4
 800050e:	f001 ff33 	bl	8002378 <__clzdi2>
 8000512:	1a33      	subs	r3, r6, r0
 8000514:	4698      	mov	r8, r3
 8000516:	3b20      	subs	r3, #32
 8000518:	469b      	mov	fp, r3
 800051a:	d433      	bmi.n	8000584 <__udivmoddi4+0xa0>
 800051c:	465a      	mov	r2, fp
 800051e:	4653      	mov	r3, sl
 8000520:	4093      	lsls	r3, r2
 8000522:	4642      	mov	r2, r8
 8000524:	001f      	movs	r7, r3
 8000526:	4653      	mov	r3, sl
 8000528:	4093      	lsls	r3, r2
 800052a:	001e      	movs	r6, r3
 800052c:	42af      	cmp	r7, r5
 800052e:	d83a      	bhi.n	80005a6 <__udivmoddi4+0xc2>
 8000530:	42af      	cmp	r7, r5
 8000532:	d100      	bne.n	8000536 <__udivmoddi4+0x52>
 8000534:	e078      	b.n	8000628 <__udivmoddi4+0x144>
 8000536:	465b      	mov	r3, fp
 8000538:	1ba4      	subs	r4, r4, r6
 800053a:	41bd      	sbcs	r5, r7
 800053c:	2b00      	cmp	r3, #0
 800053e:	da00      	bge.n	8000542 <__udivmoddi4+0x5e>
 8000540:	e075      	b.n	800062e <__udivmoddi4+0x14a>
 8000542:	2200      	movs	r2, #0
 8000544:	2300      	movs	r3, #0
 8000546:	9200      	str	r2, [sp, #0]
 8000548:	9301      	str	r3, [sp, #4]
 800054a:	2301      	movs	r3, #1
 800054c:	465a      	mov	r2, fp
 800054e:	4093      	lsls	r3, r2
 8000550:	9301      	str	r3, [sp, #4]
 8000552:	2301      	movs	r3, #1
 8000554:	4642      	mov	r2, r8
 8000556:	4093      	lsls	r3, r2
 8000558:	9300      	str	r3, [sp, #0]
 800055a:	e028      	b.n	80005ae <__udivmoddi4+0xca>
 800055c:	4282      	cmp	r2, r0
 800055e:	d9cf      	bls.n	8000500 <__udivmoddi4+0x1c>
 8000560:	2200      	movs	r2, #0
 8000562:	2300      	movs	r3, #0
 8000564:	9200      	str	r2, [sp, #0]
 8000566:	9301      	str	r3, [sp, #4]
 8000568:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800056a:	2b00      	cmp	r3, #0
 800056c:	d001      	beq.n	8000572 <__udivmoddi4+0x8e>
 800056e:	601c      	str	r4, [r3, #0]
 8000570:	605d      	str	r5, [r3, #4]
 8000572:	9800      	ldr	r0, [sp, #0]
 8000574:	9901      	ldr	r1, [sp, #4]
 8000576:	b003      	add	sp, #12
 8000578:	bcf0      	pop	{r4, r5, r6, r7}
 800057a:	46bb      	mov	fp, r7
 800057c:	46b2      	mov	sl, r6
 800057e:	46a9      	mov	r9, r5
 8000580:	46a0      	mov	r8, r4
 8000582:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000584:	4642      	mov	r2, r8
 8000586:	2320      	movs	r3, #32
 8000588:	1a9b      	subs	r3, r3, r2
 800058a:	4652      	mov	r2, sl
 800058c:	40da      	lsrs	r2, r3
 800058e:	4641      	mov	r1, r8
 8000590:	0013      	movs	r3, r2
 8000592:	464a      	mov	r2, r9
 8000594:	408a      	lsls	r2, r1
 8000596:	0017      	movs	r7, r2
 8000598:	4642      	mov	r2, r8
 800059a:	431f      	orrs	r7, r3
 800059c:	4653      	mov	r3, sl
 800059e:	4093      	lsls	r3, r2
 80005a0:	001e      	movs	r6, r3
 80005a2:	42af      	cmp	r7, r5
 80005a4:	d9c4      	bls.n	8000530 <__udivmoddi4+0x4c>
 80005a6:	2200      	movs	r2, #0
 80005a8:	2300      	movs	r3, #0
 80005aa:	9200      	str	r2, [sp, #0]
 80005ac:	9301      	str	r3, [sp, #4]
 80005ae:	4643      	mov	r3, r8
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d0d9      	beq.n	8000568 <__udivmoddi4+0x84>
 80005b4:	07fb      	lsls	r3, r7, #31
 80005b6:	0872      	lsrs	r2, r6, #1
 80005b8:	431a      	orrs	r2, r3
 80005ba:	4646      	mov	r6, r8
 80005bc:	087b      	lsrs	r3, r7, #1
 80005be:	e00e      	b.n	80005de <__udivmoddi4+0xfa>
 80005c0:	42ab      	cmp	r3, r5
 80005c2:	d101      	bne.n	80005c8 <__udivmoddi4+0xe4>
 80005c4:	42a2      	cmp	r2, r4
 80005c6:	d80c      	bhi.n	80005e2 <__udivmoddi4+0xfe>
 80005c8:	1aa4      	subs	r4, r4, r2
 80005ca:	419d      	sbcs	r5, r3
 80005cc:	2001      	movs	r0, #1
 80005ce:	1924      	adds	r4, r4, r4
 80005d0:	416d      	adcs	r5, r5
 80005d2:	2100      	movs	r1, #0
 80005d4:	3e01      	subs	r6, #1
 80005d6:	1824      	adds	r4, r4, r0
 80005d8:	414d      	adcs	r5, r1
 80005da:	2e00      	cmp	r6, #0
 80005dc:	d006      	beq.n	80005ec <__udivmoddi4+0x108>
 80005de:	42ab      	cmp	r3, r5
 80005e0:	d9ee      	bls.n	80005c0 <__udivmoddi4+0xdc>
 80005e2:	3e01      	subs	r6, #1
 80005e4:	1924      	adds	r4, r4, r4
 80005e6:	416d      	adcs	r5, r5
 80005e8:	2e00      	cmp	r6, #0
 80005ea:	d1f8      	bne.n	80005de <__udivmoddi4+0xfa>
 80005ec:	9800      	ldr	r0, [sp, #0]
 80005ee:	9901      	ldr	r1, [sp, #4]
 80005f0:	465b      	mov	r3, fp
 80005f2:	1900      	adds	r0, r0, r4
 80005f4:	4169      	adcs	r1, r5
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	db24      	blt.n	8000644 <__udivmoddi4+0x160>
 80005fa:	002b      	movs	r3, r5
 80005fc:	465a      	mov	r2, fp
 80005fe:	4644      	mov	r4, r8
 8000600:	40d3      	lsrs	r3, r2
 8000602:	002a      	movs	r2, r5
 8000604:	40e2      	lsrs	r2, r4
 8000606:	001c      	movs	r4, r3
 8000608:	465b      	mov	r3, fp
 800060a:	0015      	movs	r5, r2
 800060c:	2b00      	cmp	r3, #0
 800060e:	db2a      	blt.n	8000666 <__udivmoddi4+0x182>
 8000610:	0026      	movs	r6, r4
 8000612:	409e      	lsls	r6, r3
 8000614:	0033      	movs	r3, r6
 8000616:	0026      	movs	r6, r4
 8000618:	4647      	mov	r7, r8
 800061a:	40be      	lsls	r6, r7
 800061c:	0032      	movs	r2, r6
 800061e:	1a80      	subs	r0, r0, r2
 8000620:	4199      	sbcs	r1, r3
 8000622:	9000      	str	r0, [sp, #0]
 8000624:	9101      	str	r1, [sp, #4]
 8000626:	e79f      	b.n	8000568 <__udivmoddi4+0x84>
 8000628:	42a3      	cmp	r3, r4
 800062a:	d8bc      	bhi.n	80005a6 <__udivmoddi4+0xc2>
 800062c:	e783      	b.n	8000536 <__udivmoddi4+0x52>
 800062e:	4642      	mov	r2, r8
 8000630:	2320      	movs	r3, #32
 8000632:	2100      	movs	r1, #0
 8000634:	1a9b      	subs	r3, r3, r2
 8000636:	2200      	movs	r2, #0
 8000638:	9100      	str	r1, [sp, #0]
 800063a:	9201      	str	r2, [sp, #4]
 800063c:	2201      	movs	r2, #1
 800063e:	40da      	lsrs	r2, r3
 8000640:	9201      	str	r2, [sp, #4]
 8000642:	e786      	b.n	8000552 <__udivmoddi4+0x6e>
 8000644:	4642      	mov	r2, r8
 8000646:	2320      	movs	r3, #32
 8000648:	1a9b      	subs	r3, r3, r2
 800064a:	002a      	movs	r2, r5
 800064c:	4646      	mov	r6, r8
 800064e:	409a      	lsls	r2, r3
 8000650:	0023      	movs	r3, r4
 8000652:	40f3      	lsrs	r3, r6
 8000654:	4644      	mov	r4, r8
 8000656:	4313      	orrs	r3, r2
 8000658:	002a      	movs	r2, r5
 800065a:	40e2      	lsrs	r2, r4
 800065c:	001c      	movs	r4, r3
 800065e:	465b      	mov	r3, fp
 8000660:	0015      	movs	r5, r2
 8000662:	2b00      	cmp	r3, #0
 8000664:	dad4      	bge.n	8000610 <__udivmoddi4+0x12c>
 8000666:	4642      	mov	r2, r8
 8000668:	002f      	movs	r7, r5
 800066a:	2320      	movs	r3, #32
 800066c:	0026      	movs	r6, r4
 800066e:	4097      	lsls	r7, r2
 8000670:	1a9b      	subs	r3, r3, r2
 8000672:	40de      	lsrs	r6, r3
 8000674:	003b      	movs	r3, r7
 8000676:	4333      	orrs	r3, r6
 8000678:	e7cd      	b.n	8000616 <__udivmoddi4+0x132>
 800067a:	46c0      	nop			; (mov r8, r8)

0800067c <__aeabi_dadd>:
 800067c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800067e:	464f      	mov	r7, r9
 8000680:	46d6      	mov	lr, sl
 8000682:	4646      	mov	r6, r8
 8000684:	000d      	movs	r5, r1
 8000686:	0001      	movs	r1, r0
 8000688:	0018      	movs	r0, r3
 800068a:	b5c0      	push	{r6, r7, lr}
 800068c:	0017      	movs	r7, r2
 800068e:	032b      	lsls	r3, r5, #12
 8000690:	0a5a      	lsrs	r2, r3, #9
 8000692:	0f4b      	lsrs	r3, r1, #29
 8000694:	4313      	orrs	r3, r2
 8000696:	00ca      	lsls	r2, r1, #3
 8000698:	4691      	mov	r9, r2
 800069a:	0302      	lsls	r2, r0, #12
 800069c:	006e      	lsls	r6, r5, #1
 800069e:	0041      	lsls	r1, r0, #1
 80006a0:	0a52      	lsrs	r2, r2, #9
 80006a2:	0fec      	lsrs	r4, r5, #31
 80006a4:	0f7d      	lsrs	r5, r7, #29
 80006a6:	4315      	orrs	r5, r2
 80006a8:	0d76      	lsrs	r6, r6, #21
 80006aa:	0d49      	lsrs	r1, r1, #21
 80006ac:	0fc0      	lsrs	r0, r0, #31
 80006ae:	4682      	mov	sl, r0
 80006b0:	46ac      	mov	ip, r5
 80006b2:	00ff      	lsls	r7, r7, #3
 80006b4:	1a72      	subs	r2, r6, r1
 80006b6:	4284      	cmp	r4, r0
 80006b8:	d100      	bne.n	80006bc <__aeabi_dadd+0x40>
 80006ba:	e098      	b.n	80007ee <__aeabi_dadd+0x172>
 80006bc:	2a00      	cmp	r2, #0
 80006be:	dc00      	bgt.n	80006c2 <__aeabi_dadd+0x46>
 80006c0:	e081      	b.n	80007c6 <__aeabi_dadd+0x14a>
 80006c2:	2900      	cmp	r1, #0
 80006c4:	d100      	bne.n	80006c8 <__aeabi_dadd+0x4c>
 80006c6:	e0b6      	b.n	8000836 <__aeabi_dadd+0x1ba>
 80006c8:	49c9      	ldr	r1, [pc, #804]	; (80009f0 <__aeabi_dadd+0x374>)
 80006ca:	428e      	cmp	r6, r1
 80006cc:	d100      	bne.n	80006d0 <__aeabi_dadd+0x54>
 80006ce:	e172      	b.n	80009b6 <__aeabi_dadd+0x33a>
 80006d0:	2180      	movs	r1, #128	; 0x80
 80006d2:	0028      	movs	r0, r5
 80006d4:	0409      	lsls	r1, r1, #16
 80006d6:	4308      	orrs	r0, r1
 80006d8:	4684      	mov	ip, r0
 80006da:	2a38      	cmp	r2, #56	; 0x38
 80006dc:	dd00      	ble.n	80006e0 <__aeabi_dadd+0x64>
 80006de:	e15e      	b.n	800099e <__aeabi_dadd+0x322>
 80006e0:	2a1f      	cmp	r2, #31
 80006e2:	dd00      	ble.n	80006e6 <__aeabi_dadd+0x6a>
 80006e4:	e1ee      	b.n	8000ac4 <__aeabi_dadd+0x448>
 80006e6:	2020      	movs	r0, #32
 80006e8:	0039      	movs	r1, r7
 80006ea:	4665      	mov	r5, ip
 80006ec:	1a80      	subs	r0, r0, r2
 80006ee:	4087      	lsls	r7, r0
 80006f0:	40d1      	lsrs	r1, r2
 80006f2:	4085      	lsls	r5, r0
 80006f4:	430d      	orrs	r5, r1
 80006f6:	0039      	movs	r1, r7
 80006f8:	1e4f      	subs	r7, r1, #1
 80006fa:	41b9      	sbcs	r1, r7
 80006fc:	4667      	mov	r7, ip
 80006fe:	40d7      	lsrs	r7, r2
 8000700:	4329      	orrs	r1, r5
 8000702:	1bdb      	subs	r3, r3, r7
 8000704:	464a      	mov	r2, r9
 8000706:	1a55      	subs	r5, r2, r1
 8000708:	45a9      	cmp	r9, r5
 800070a:	4189      	sbcs	r1, r1
 800070c:	4249      	negs	r1, r1
 800070e:	1a5b      	subs	r3, r3, r1
 8000710:	4698      	mov	r8, r3
 8000712:	4643      	mov	r3, r8
 8000714:	021b      	lsls	r3, r3, #8
 8000716:	d400      	bmi.n	800071a <__aeabi_dadd+0x9e>
 8000718:	e0cc      	b.n	80008b4 <__aeabi_dadd+0x238>
 800071a:	4643      	mov	r3, r8
 800071c:	025b      	lsls	r3, r3, #9
 800071e:	0a5b      	lsrs	r3, r3, #9
 8000720:	4698      	mov	r8, r3
 8000722:	4643      	mov	r3, r8
 8000724:	2b00      	cmp	r3, #0
 8000726:	d100      	bne.n	800072a <__aeabi_dadd+0xae>
 8000728:	e12c      	b.n	8000984 <__aeabi_dadd+0x308>
 800072a:	4640      	mov	r0, r8
 800072c:	f001 fe06 	bl	800233c <__clzsi2>
 8000730:	0001      	movs	r1, r0
 8000732:	3908      	subs	r1, #8
 8000734:	2220      	movs	r2, #32
 8000736:	0028      	movs	r0, r5
 8000738:	4643      	mov	r3, r8
 800073a:	1a52      	subs	r2, r2, r1
 800073c:	408b      	lsls	r3, r1
 800073e:	40d0      	lsrs	r0, r2
 8000740:	408d      	lsls	r5, r1
 8000742:	4303      	orrs	r3, r0
 8000744:	428e      	cmp	r6, r1
 8000746:	dd00      	ble.n	800074a <__aeabi_dadd+0xce>
 8000748:	e117      	b.n	800097a <__aeabi_dadd+0x2fe>
 800074a:	1b8e      	subs	r6, r1, r6
 800074c:	1c72      	adds	r2, r6, #1
 800074e:	2a1f      	cmp	r2, #31
 8000750:	dd00      	ble.n	8000754 <__aeabi_dadd+0xd8>
 8000752:	e1a7      	b.n	8000aa4 <__aeabi_dadd+0x428>
 8000754:	2120      	movs	r1, #32
 8000756:	0018      	movs	r0, r3
 8000758:	002e      	movs	r6, r5
 800075a:	1a89      	subs	r1, r1, r2
 800075c:	408d      	lsls	r5, r1
 800075e:	4088      	lsls	r0, r1
 8000760:	40d6      	lsrs	r6, r2
 8000762:	40d3      	lsrs	r3, r2
 8000764:	1e69      	subs	r1, r5, #1
 8000766:	418d      	sbcs	r5, r1
 8000768:	4330      	orrs	r0, r6
 800076a:	4698      	mov	r8, r3
 800076c:	2600      	movs	r6, #0
 800076e:	4305      	orrs	r5, r0
 8000770:	076b      	lsls	r3, r5, #29
 8000772:	d009      	beq.n	8000788 <__aeabi_dadd+0x10c>
 8000774:	230f      	movs	r3, #15
 8000776:	402b      	ands	r3, r5
 8000778:	2b04      	cmp	r3, #4
 800077a:	d005      	beq.n	8000788 <__aeabi_dadd+0x10c>
 800077c:	1d2b      	adds	r3, r5, #4
 800077e:	42ab      	cmp	r3, r5
 8000780:	41ad      	sbcs	r5, r5
 8000782:	426d      	negs	r5, r5
 8000784:	44a8      	add	r8, r5
 8000786:	001d      	movs	r5, r3
 8000788:	4643      	mov	r3, r8
 800078a:	021b      	lsls	r3, r3, #8
 800078c:	d400      	bmi.n	8000790 <__aeabi_dadd+0x114>
 800078e:	e094      	b.n	80008ba <__aeabi_dadd+0x23e>
 8000790:	4b97      	ldr	r3, [pc, #604]	; (80009f0 <__aeabi_dadd+0x374>)
 8000792:	1c72      	adds	r2, r6, #1
 8000794:	429a      	cmp	r2, r3
 8000796:	d100      	bne.n	800079a <__aeabi_dadd+0x11e>
 8000798:	e09d      	b.n	80008d6 <__aeabi_dadd+0x25a>
 800079a:	4641      	mov	r1, r8
 800079c:	4b95      	ldr	r3, [pc, #596]	; (80009f4 <__aeabi_dadd+0x378>)
 800079e:	08ed      	lsrs	r5, r5, #3
 80007a0:	4019      	ands	r1, r3
 80007a2:	000b      	movs	r3, r1
 80007a4:	0552      	lsls	r2, r2, #21
 80007a6:	0749      	lsls	r1, r1, #29
 80007a8:	025b      	lsls	r3, r3, #9
 80007aa:	4329      	orrs	r1, r5
 80007ac:	0b1b      	lsrs	r3, r3, #12
 80007ae:	0d52      	lsrs	r2, r2, #21
 80007b0:	0512      	lsls	r2, r2, #20
 80007b2:	4313      	orrs	r3, r2
 80007b4:	07e4      	lsls	r4, r4, #31
 80007b6:	4323      	orrs	r3, r4
 80007b8:	0008      	movs	r0, r1
 80007ba:	0019      	movs	r1, r3
 80007bc:	bce0      	pop	{r5, r6, r7}
 80007be:	46ba      	mov	sl, r7
 80007c0:	46b1      	mov	r9, r6
 80007c2:	46a8      	mov	r8, r5
 80007c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007c6:	2a00      	cmp	r2, #0
 80007c8:	d043      	beq.n	8000852 <__aeabi_dadd+0x1d6>
 80007ca:	1b8a      	subs	r2, r1, r6
 80007cc:	2e00      	cmp	r6, #0
 80007ce:	d000      	beq.n	80007d2 <__aeabi_dadd+0x156>
 80007d0:	e12a      	b.n	8000a28 <__aeabi_dadd+0x3ac>
 80007d2:	464c      	mov	r4, r9
 80007d4:	431c      	orrs	r4, r3
 80007d6:	d100      	bne.n	80007da <__aeabi_dadd+0x15e>
 80007d8:	e1d1      	b.n	8000b7e <__aeabi_dadd+0x502>
 80007da:	1e54      	subs	r4, r2, #1
 80007dc:	2a01      	cmp	r2, #1
 80007de:	d100      	bne.n	80007e2 <__aeabi_dadd+0x166>
 80007e0:	e21f      	b.n	8000c22 <__aeabi_dadd+0x5a6>
 80007e2:	4d83      	ldr	r5, [pc, #524]	; (80009f0 <__aeabi_dadd+0x374>)
 80007e4:	42aa      	cmp	r2, r5
 80007e6:	d100      	bne.n	80007ea <__aeabi_dadd+0x16e>
 80007e8:	e272      	b.n	8000cd0 <__aeabi_dadd+0x654>
 80007ea:	0022      	movs	r2, r4
 80007ec:	e123      	b.n	8000a36 <__aeabi_dadd+0x3ba>
 80007ee:	2a00      	cmp	r2, #0
 80007f0:	dc00      	bgt.n	80007f4 <__aeabi_dadd+0x178>
 80007f2:	e098      	b.n	8000926 <__aeabi_dadd+0x2aa>
 80007f4:	2900      	cmp	r1, #0
 80007f6:	d042      	beq.n	800087e <__aeabi_dadd+0x202>
 80007f8:	497d      	ldr	r1, [pc, #500]	; (80009f0 <__aeabi_dadd+0x374>)
 80007fa:	428e      	cmp	r6, r1
 80007fc:	d100      	bne.n	8000800 <__aeabi_dadd+0x184>
 80007fe:	e0da      	b.n	80009b6 <__aeabi_dadd+0x33a>
 8000800:	2180      	movs	r1, #128	; 0x80
 8000802:	0028      	movs	r0, r5
 8000804:	0409      	lsls	r1, r1, #16
 8000806:	4308      	orrs	r0, r1
 8000808:	4684      	mov	ip, r0
 800080a:	2a38      	cmp	r2, #56	; 0x38
 800080c:	dd00      	ble.n	8000810 <__aeabi_dadd+0x194>
 800080e:	e129      	b.n	8000a64 <__aeabi_dadd+0x3e8>
 8000810:	2a1f      	cmp	r2, #31
 8000812:	dc00      	bgt.n	8000816 <__aeabi_dadd+0x19a>
 8000814:	e187      	b.n	8000b26 <__aeabi_dadd+0x4aa>
 8000816:	0011      	movs	r1, r2
 8000818:	4665      	mov	r5, ip
 800081a:	3920      	subs	r1, #32
 800081c:	40cd      	lsrs	r5, r1
 800081e:	2a20      	cmp	r2, #32
 8000820:	d004      	beq.n	800082c <__aeabi_dadd+0x1b0>
 8000822:	2040      	movs	r0, #64	; 0x40
 8000824:	4661      	mov	r1, ip
 8000826:	1a82      	subs	r2, r0, r2
 8000828:	4091      	lsls	r1, r2
 800082a:	430f      	orrs	r7, r1
 800082c:	0039      	movs	r1, r7
 800082e:	1e4f      	subs	r7, r1, #1
 8000830:	41b9      	sbcs	r1, r7
 8000832:	430d      	orrs	r5, r1
 8000834:	e11b      	b.n	8000a6e <__aeabi_dadd+0x3f2>
 8000836:	0029      	movs	r1, r5
 8000838:	4339      	orrs	r1, r7
 800083a:	d100      	bne.n	800083e <__aeabi_dadd+0x1c2>
 800083c:	e0b5      	b.n	80009aa <__aeabi_dadd+0x32e>
 800083e:	1e51      	subs	r1, r2, #1
 8000840:	2a01      	cmp	r2, #1
 8000842:	d100      	bne.n	8000846 <__aeabi_dadd+0x1ca>
 8000844:	e1ab      	b.n	8000b9e <__aeabi_dadd+0x522>
 8000846:	486a      	ldr	r0, [pc, #424]	; (80009f0 <__aeabi_dadd+0x374>)
 8000848:	4282      	cmp	r2, r0
 800084a:	d100      	bne.n	800084e <__aeabi_dadd+0x1d2>
 800084c:	e1b2      	b.n	8000bb4 <__aeabi_dadd+0x538>
 800084e:	000a      	movs	r2, r1
 8000850:	e743      	b.n	80006da <__aeabi_dadd+0x5e>
 8000852:	4969      	ldr	r1, [pc, #420]	; (80009f8 <__aeabi_dadd+0x37c>)
 8000854:	1c75      	adds	r5, r6, #1
 8000856:	420d      	tst	r5, r1
 8000858:	d000      	beq.n	800085c <__aeabi_dadd+0x1e0>
 800085a:	e0cf      	b.n	80009fc <__aeabi_dadd+0x380>
 800085c:	2e00      	cmp	r6, #0
 800085e:	d000      	beq.n	8000862 <__aeabi_dadd+0x1e6>
 8000860:	e193      	b.n	8000b8a <__aeabi_dadd+0x50e>
 8000862:	4649      	mov	r1, r9
 8000864:	4319      	orrs	r1, r3
 8000866:	d100      	bne.n	800086a <__aeabi_dadd+0x1ee>
 8000868:	e1d1      	b.n	8000c0e <__aeabi_dadd+0x592>
 800086a:	4661      	mov	r1, ip
 800086c:	4339      	orrs	r1, r7
 800086e:	d000      	beq.n	8000872 <__aeabi_dadd+0x1f6>
 8000870:	e1e3      	b.n	8000c3a <__aeabi_dadd+0x5be>
 8000872:	4649      	mov	r1, r9
 8000874:	0758      	lsls	r0, r3, #29
 8000876:	08c9      	lsrs	r1, r1, #3
 8000878:	4301      	orrs	r1, r0
 800087a:	08db      	lsrs	r3, r3, #3
 800087c:	e026      	b.n	80008cc <__aeabi_dadd+0x250>
 800087e:	0029      	movs	r1, r5
 8000880:	4339      	orrs	r1, r7
 8000882:	d100      	bne.n	8000886 <__aeabi_dadd+0x20a>
 8000884:	e091      	b.n	80009aa <__aeabi_dadd+0x32e>
 8000886:	1e51      	subs	r1, r2, #1
 8000888:	2a01      	cmp	r2, #1
 800088a:	d005      	beq.n	8000898 <__aeabi_dadd+0x21c>
 800088c:	4858      	ldr	r0, [pc, #352]	; (80009f0 <__aeabi_dadd+0x374>)
 800088e:	4282      	cmp	r2, r0
 8000890:	d100      	bne.n	8000894 <__aeabi_dadd+0x218>
 8000892:	e18f      	b.n	8000bb4 <__aeabi_dadd+0x538>
 8000894:	000a      	movs	r2, r1
 8000896:	e7b8      	b.n	800080a <__aeabi_dadd+0x18e>
 8000898:	003d      	movs	r5, r7
 800089a:	444d      	add	r5, r9
 800089c:	454d      	cmp	r5, r9
 800089e:	4189      	sbcs	r1, r1
 80008a0:	4463      	add	r3, ip
 80008a2:	4698      	mov	r8, r3
 80008a4:	4249      	negs	r1, r1
 80008a6:	4488      	add	r8, r1
 80008a8:	4643      	mov	r3, r8
 80008aa:	2602      	movs	r6, #2
 80008ac:	021b      	lsls	r3, r3, #8
 80008ae:	d500      	bpl.n	80008b2 <__aeabi_dadd+0x236>
 80008b0:	e0eb      	b.n	8000a8a <__aeabi_dadd+0x40e>
 80008b2:	3e01      	subs	r6, #1
 80008b4:	076b      	lsls	r3, r5, #29
 80008b6:	d000      	beq.n	80008ba <__aeabi_dadd+0x23e>
 80008b8:	e75c      	b.n	8000774 <__aeabi_dadd+0xf8>
 80008ba:	4643      	mov	r3, r8
 80008bc:	08e9      	lsrs	r1, r5, #3
 80008be:	075a      	lsls	r2, r3, #29
 80008c0:	4311      	orrs	r1, r2
 80008c2:	0032      	movs	r2, r6
 80008c4:	08db      	lsrs	r3, r3, #3
 80008c6:	484a      	ldr	r0, [pc, #296]	; (80009f0 <__aeabi_dadd+0x374>)
 80008c8:	4282      	cmp	r2, r0
 80008ca:	d021      	beq.n	8000910 <__aeabi_dadd+0x294>
 80008cc:	031b      	lsls	r3, r3, #12
 80008ce:	0552      	lsls	r2, r2, #21
 80008d0:	0b1b      	lsrs	r3, r3, #12
 80008d2:	0d52      	lsrs	r2, r2, #21
 80008d4:	e76c      	b.n	80007b0 <__aeabi_dadd+0x134>
 80008d6:	2300      	movs	r3, #0
 80008d8:	2100      	movs	r1, #0
 80008da:	e769      	b.n	80007b0 <__aeabi_dadd+0x134>
 80008dc:	002a      	movs	r2, r5
 80008de:	433a      	orrs	r2, r7
 80008e0:	d069      	beq.n	80009b6 <__aeabi_dadd+0x33a>
 80008e2:	464a      	mov	r2, r9
 80008e4:	0758      	lsls	r0, r3, #29
 80008e6:	08d1      	lsrs	r1, r2, #3
 80008e8:	08da      	lsrs	r2, r3, #3
 80008ea:	2380      	movs	r3, #128	; 0x80
 80008ec:	031b      	lsls	r3, r3, #12
 80008ee:	4308      	orrs	r0, r1
 80008f0:	421a      	tst	r2, r3
 80008f2:	d007      	beq.n	8000904 <__aeabi_dadd+0x288>
 80008f4:	0029      	movs	r1, r5
 80008f6:	08ed      	lsrs	r5, r5, #3
 80008f8:	421d      	tst	r5, r3
 80008fa:	d103      	bne.n	8000904 <__aeabi_dadd+0x288>
 80008fc:	002a      	movs	r2, r5
 80008fe:	08ff      	lsrs	r7, r7, #3
 8000900:	0748      	lsls	r0, r1, #29
 8000902:	4338      	orrs	r0, r7
 8000904:	0f43      	lsrs	r3, r0, #29
 8000906:	00c1      	lsls	r1, r0, #3
 8000908:	075b      	lsls	r3, r3, #29
 800090a:	08c9      	lsrs	r1, r1, #3
 800090c:	4319      	orrs	r1, r3
 800090e:	0013      	movs	r3, r2
 8000910:	000a      	movs	r2, r1
 8000912:	431a      	orrs	r2, r3
 8000914:	d100      	bne.n	8000918 <__aeabi_dadd+0x29c>
 8000916:	e213      	b.n	8000d40 <__aeabi_dadd+0x6c4>
 8000918:	2280      	movs	r2, #128	; 0x80
 800091a:	0312      	lsls	r2, r2, #12
 800091c:	4313      	orrs	r3, r2
 800091e:	031b      	lsls	r3, r3, #12
 8000920:	4a33      	ldr	r2, [pc, #204]	; (80009f0 <__aeabi_dadd+0x374>)
 8000922:	0b1b      	lsrs	r3, r3, #12
 8000924:	e744      	b.n	80007b0 <__aeabi_dadd+0x134>
 8000926:	2a00      	cmp	r2, #0
 8000928:	d04b      	beq.n	80009c2 <__aeabi_dadd+0x346>
 800092a:	1b8a      	subs	r2, r1, r6
 800092c:	2e00      	cmp	r6, #0
 800092e:	d100      	bne.n	8000932 <__aeabi_dadd+0x2b6>
 8000930:	e0e7      	b.n	8000b02 <__aeabi_dadd+0x486>
 8000932:	482f      	ldr	r0, [pc, #188]	; (80009f0 <__aeabi_dadd+0x374>)
 8000934:	4281      	cmp	r1, r0
 8000936:	d100      	bne.n	800093a <__aeabi_dadd+0x2be>
 8000938:	e195      	b.n	8000c66 <__aeabi_dadd+0x5ea>
 800093a:	2080      	movs	r0, #128	; 0x80
 800093c:	0400      	lsls	r0, r0, #16
 800093e:	4303      	orrs	r3, r0
 8000940:	2a38      	cmp	r2, #56	; 0x38
 8000942:	dd00      	ble.n	8000946 <__aeabi_dadd+0x2ca>
 8000944:	e143      	b.n	8000bce <__aeabi_dadd+0x552>
 8000946:	2a1f      	cmp	r2, #31
 8000948:	dd00      	ble.n	800094c <__aeabi_dadd+0x2d0>
 800094a:	e1db      	b.n	8000d04 <__aeabi_dadd+0x688>
 800094c:	2020      	movs	r0, #32
 800094e:	001d      	movs	r5, r3
 8000950:	464e      	mov	r6, r9
 8000952:	1a80      	subs	r0, r0, r2
 8000954:	4085      	lsls	r5, r0
 8000956:	40d6      	lsrs	r6, r2
 8000958:	4335      	orrs	r5, r6
 800095a:	464e      	mov	r6, r9
 800095c:	4086      	lsls	r6, r0
 800095e:	0030      	movs	r0, r6
 8000960:	40d3      	lsrs	r3, r2
 8000962:	1e46      	subs	r6, r0, #1
 8000964:	41b0      	sbcs	r0, r6
 8000966:	449c      	add	ip, r3
 8000968:	4305      	orrs	r5, r0
 800096a:	19ed      	adds	r5, r5, r7
 800096c:	42bd      	cmp	r5, r7
 800096e:	419b      	sbcs	r3, r3
 8000970:	425b      	negs	r3, r3
 8000972:	4463      	add	r3, ip
 8000974:	4698      	mov	r8, r3
 8000976:	000e      	movs	r6, r1
 8000978:	e07f      	b.n	8000a7a <__aeabi_dadd+0x3fe>
 800097a:	4a1e      	ldr	r2, [pc, #120]	; (80009f4 <__aeabi_dadd+0x378>)
 800097c:	1a76      	subs	r6, r6, r1
 800097e:	4013      	ands	r3, r2
 8000980:	4698      	mov	r8, r3
 8000982:	e6f5      	b.n	8000770 <__aeabi_dadd+0xf4>
 8000984:	0028      	movs	r0, r5
 8000986:	f001 fcd9 	bl	800233c <__clzsi2>
 800098a:	0001      	movs	r1, r0
 800098c:	3118      	adds	r1, #24
 800098e:	291f      	cmp	r1, #31
 8000990:	dc00      	bgt.n	8000994 <__aeabi_dadd+0x318>
 8000992:	e6cf      	b.n	8000734 <__aeabi_dadd+0xb8>
 8000994:	002b      	movs	r3, r5
 8000996:	3808      	subs	r0, #8
 8000998:	4083      	lsls	r3, r0
 800099a:	2500      	movs	r5, #0
 800099c:	e6d2      	b.n	8000744 <__aeabi_dadd+0xc8>
 800099e:	4662      	mov	r2, ip
 80009a0:	433a      	orrs	r2, r7
 80009a2:	0011      	movs	r1, r2
 80009a4:	1e4f      	subs	r7, r1, #1
 80009a6:	41b9      	sbcs	r1, r7
 80009a8:	e6ac      	b.n	8000704 <__aeabi_dadd+0x88>
 80009aa:	4649      	mov	r1, r9
 80009ac:	0758      	lsls	r0, r3, #29
 80009ae:	08c9      	lsrs	r1, r1, #3
 80009b0:	4301      	orrs	r1, r0
 80009b2:	08db      	lsrs	r3, r3, #3
 80009b4:	e787      	b.n	80008c6 <__aeabi_dadd+0x24a>
 80009b6:	4649      	mov	r1, r9
 80009b8:	075a      	lsls	r2, r3, #29
 80009ba:	08c9      	lsrs	r1, r1, #3
 80009bc:	4311      	orrs	r1, r2
 80009be:	08db      	lsrs	r3, r3, #3
 80009c0:	e7a6      	b.n	8000910 <__aeabi_dadd+0x294>
 80009c2:	490d      	ldr	r1, [pc, #52]	; (80009f8 <__aeabi_dadd+0x37c>)
 80009c4:	1c70      	adds	r0, r6, #1
 80009c6:	4208      	tst	r0, r1
 80009c8:	d000      	beq.n	80009cc <__aeabi_dadd+0x350>
 80009ca:	e0bb      	b.n	8000b44 <__aeabi_dadd+0x4c8>
 80009cc:	2e00      	cmp	r6, #0
 80009ce:	d000      	beq.n	80009d2 <__aeabi_dadd+0x356>
 80009d0:	e114      	b.n	8000bfc <__aeabi_dadd+0x580>
 80009d2:	4649      	mov	r1, r9
 80009d4:	4319      	orrs	r1, r3
 80009d6:	d100      	bne.n	80009da <__aeabi_dadd+0x35e>
 80009d8:	e175      	b.n	8000cc6 <__aeabi_dadd+0x64a>
 80009da:	0029      	movs	r1, r5
 80009dc:	4339      	orrs	r1, r7
 80009de:	d000      	beq.n	80009e2 <__aeabi_dadd+0x366>
 80009e0:	e17e      	b.n	8000ce0 <__aeabi_dadd+0x664>
 80009e2:	4649      	mov	r1, r9
 80009e4:	0758      	lsls	r0, r3, #29
 80009e6:	08c9      	lsrs	r1, r1, #3
 80009e8:	4301      	orrs	r1, r0
 80009ea:	08db      	lsrs	r3, r3, #3
 80009ec:	e76e      	b.n	80008cc <__aeabi_dadd+0x250>
 80009ee:	46c0      	nop			; (mov r8, r8)
 80009f0:	000007ff 	.word	0x000007ff
 80009f4:	ff7fffff 	.word	0xff7fffff
 80009f8:	000007fe 	.word	0x000007fe
 80009fc:	4649      	mov	r1, r9
 80009fe:	1bcd      	subs	r5, r1, r7
 8000a00:	4661      	mov	r1, ip
 8000a02:	1a58      	subs	r0, r3, r1
 8000a04:	45a9      	cmp	r9, r5
 8000a06:	4189      	sbcs	r1, r1
 8000a08:	4249      	negs	r1, r1
 8000a0a:	4688      	mov	r8, r1
 8000a0c:	0001      	movs	r1, r0
 8000a0e:	4640      	mov	r0, r8
 8000a10:	1a09      	subs	r1, r1, r0
 8000a12:	4688      	mov	r8, r1
 8000a14:	0209      	lsls	r1, r1, #8
 8000a16:	d500      	bpl.n	8000a1a <__aeabi_dadd+0x39e>
 8000a18:	e0a6      	b.n	8000b68 <__aeabi_dadd+0x4ec>
 8000a1a:	4641      	mov	r1, r8
 8000a1c:	4329      	orrs	r1, r5
 8000a1e:	d000      	beq.n	8000a22 <__aeabi_dadd+0x3a6>
 8000a20:	e67f      	b.n	8000722 <__aeabi_dadd+0xa6>
 8000a22:	2300      	movs	r3, #0
 8000a24:	2400      	movs	r4, #0
 8000a26:	e751      	b.n	80008cc <__aeabi_dadd+0x250>
 8000a28:	4cc7      	ldr	r4, [pc, #796]	; (8000d48 <__aeabi_dadd+0x6cc>)
 8000a2a:	42a1      	cmp	r1, r4
 8000a2c:	d100      	bne.n	8000a30 <__aeabi_dadd+0x3b4>
 8000a2e:	e0c7      	b.n	8000bc0 <__aeabi_dadd+0x544>
 8000a30:	2480      	movs	r4, #128	; 0x80
 8000a32:	0424      	lsls	r4, r4, #16
 8000a34:	4323      	orrs	r3, r4
 8000a36:	2a38      	cmp	r2, #56	; 0x38
 8000a38:	dc54      	bgt.n	8000ae4 <__aeabi_dadd+0x468>
 8000a3a:	2a1f      	cmp	r2, #31
 8000a3c:	dd00      	ble.n	8000a40 <__aeabi_dadd+0x3c4>
 8000a3e:	e0cc      	b.n	8000bda <__aeabi_dadd+0x55e>
 8000a40:	2420      	movs	r4, #32
 8000a42:	4648      	mov	r0, r9
 8000a44:	1aa4      	subs	r4, r4, r2
 8000a46:	001d      	movs	r5, r3
 8000a48:	464e      	mov	r6, r9
 8000a4a:	40a0      	lsls	r0, r4
 8000a4c:	40d6      	lsrs	r6, r2
 8000a4e:	40a5      	lsls	r5, r4
 8000a50:	0004      	movs	r4, r0
 8000a52:	40d3      	lsrs	r3, r2
 8000a54:	4662      	mov	r2, ip
 8000a56:	4335      	orrs	r5, r6
 8000a58:	1e66      	subs	r6, r4, #1
 8000a5a:	41b4      	sbcs	r4, r6
 8000a5c:	1ad3      	subs	r3, r2, r3
 8000a5e:	469c      	mov	ip, r3
 8000a60:	4325      	orrs	r5, r4
 8000a62:	e044      	b.n	8000aee <__aeabi_dadd+0x472>
 8000a64:	4662      	mov	r2, ip
 8000a66:	433a      	orrs	r2, r7
 8000a68:	0015      	movs	r5, r2
 8000a6a:	1e6f      	subs	r7, r5, #1
 8000a6c:	41bd      	sbcs	r5, r7
 8000a6e:	444d      	add	r5, r9
 8000a70:	454d      	cmp	r5, r9
 8000a72:	4189      	sbcs	r1, r1
 8000a74:	4249      	negs	r1, r1
 8000a76:	4688      	mov	r8, r1
 8000a78:	4498      	add	r8, r3
 8000a7a:	4643      	mov	r3, r8
 8000a7c:	021b      	lsls	r3, r3, #8
 8000a7e:	d400      	bmi.n	8000a82 <__aeabi_dadd+0x406>
 8000a80:	e718      	b.n	80008b4 <__aeabi_dadd+0x238>
 8000a82:	4bb1      	ldr	r3, [pc, #708]	; (8000d48 <__aeabi_dadd+0x6cc>)
 8000a84:	3601      	adds	r6, #1
 8000a86:	429e      	cmp	r6, r3
 8000a88:	d049      	beq.n	8000b1e <__aeabi_dadd+0x4a2>
 8000a8a:	4642      	mov	r2, r8
 8000a8c:	4baf      	ldr	r3, [pc, #700]	; (8000d4c <__aeabi_dadd+0x6d0>)
 8000a8e:	2101      	movs	r1, #1
 8000a90:	401a      	ands	r2, r3
 8000a92:	0013      	movs	r3, r2
 8000a94:	086a      	lsrs	r2, r5, #1
 8000a96:	400d      	ands	r5, r1
 8000a98:	4315      	orrs	r5, r2
 8000a9a:	07d9      	lsls	r1, r3, #31
 8000a9c:	085b      	lsrs	r3, r3, #1
 8000a9e:	4698      	mov	r8, r3
 8000aa0:	430d      	orrs	r5, r1
 8000aa2:	e665      	b.n	8000770 <__aeabi_dadd+0xf4>
 8000aa4:	0018      	movs	r0, r3
 8000aa6:	3e1f      	subs	r6, #31
 8000aa8:	40f0      	lsrs	r0, r6
 8000aaa:	2a20      	cmp	r2, #32
 8000aac:	d003      	beq.n	8000ab6 <__aeabi_dadd+0x43a>
 8000aae:	2140      	movs	r1, #64	; 0x40
 8000ab0:	1a8a      	subs	r2, r1, r2
 8000ab2:	4093      	lsls	r3, r2
 8000ab4:	431d      	orrs	r5, r3
 8000ab6:	1e69      	subs	r1, r5, #1
 8000ab8:	418d      	sbcs	r5, r1
 8000aba:	2300      	movs	r3, #0
 8000abc:	2600      	movs	r6, #0
 8000abe:	4698      	mov	r8, r3
 8000ac0:	4305      	orrs	r5, r0
 8000ac2:	e6f7      	b.n	80008b4 <__aeabi_dadd+0x238>
 8000ac4:	0011      	movs	r1, r2
 8000ac6:	4665      	mov	r5, ip
 8000ac8:	3920      	subs	r1, #32
 8000aca:	40cd      	lsrs	r5, r1
 8000acc:	2a20      	cmp	r2, #32
 8000ace:	d004      	beq.n	8000ada <__aeabi_dadd+0x45e>
 8000ad0:	2040      	movs	r0, #64	; 0x40
 8000ad2:	4661      	mov	r1, ip
 8000ad4:	1a82      	subs	r2, r0, r2
 8000ad6:	4091      	lsls	r1, r2
 8000ad8:	430f      	orrs	r7, r1
 8000ada:	0039      	movs	r1, r7
 8000adc:	1e4f      	subs	r7, r1, #1
 8000ade:	41b9      	sbcs	r1, r7
 8000ae0:	4329      	orrs	r1, r5
 8000ae2:	e60f      	b.n	8000704 <__aeabi_dadd+0x88>
 8000ae4:	464a      	mov	r2, r9
 8000ae6:	4313      	orrs	r3, r2
 8000ae8:	001d      	movs	r5, r3
 8000aea:	1e6b      	subs	r3, r5, #1
 8000aec:	419d      	sbcs	r5, r3
 8000aee:	1b7d      	subs	r5, r7, r5
 8000af0:	42af      	cmp	r7, r5
 8000af2:	419b      	sbcs	r3, r3
 8000af4:	4662      	mov	r2, ip
 8000af6:	425b      	negs	r3, r3
 8000af8:	1ad3      	subs	r3, r2, r3
 8000afa:	4698      	mov	r8, r3
 8000afc:	4654      	mov	r4, sl
 8000afe:	000e      	movs	r6, r1
 8000b00:	e607      	b.n	8000712 <__aeabi_dadd+0x96>
 8000b02:	4648      	mov	r0, r9
 8000b04:	4318      	orrs	r0, r3
 8000b06:	d100      	bne.n	8000b0a <__aeabi_dadd+0x48e>
 8000b08:	e0b3      	b.n	8000c72 <__aeabi_dadd+0x5f6>
 8000b0a:	1e50      	subs	r0, r2, #1
 8000b0c:	2a01      	cmp	r2, #1
 8000b0e:	d100      	bne.n	8000b12 <__aeabi_dadd+0x496>
 8000b10:	e10d      	b.n	8000d2e <__aeabi_dadd+0x6b2>
 8000b12:	4d8d      	ldr	r5, [pc, #564]	; (8000d48 <__aeabi_dadd+0x6cc>)
 8000b14:	42aa      	cmp	r2, r5
 8000b16:	d100      	bne.n	8000b1a <__aeabi_dadd+0x49e>
 8000b18:	e0a5      	b.n	8000c66 <__aeabi_dadd+0x5ea>
 8000b1a:	0002      	movs	r2, r0
 8000b1c:	e710      	b.n	8000940 <__aeabi_dadd+0x2c4>
 8000b1e:	0032      	movs	r2, r6
 8000b20:	2300      	movs	r3, #0
 8000b22:	2100      	movs	r1, #0
 8000b24:	e644      	b.n	80007b0 <__aeabi_dadd+0x134>
 8000b26:	2120      	movs	r1, #32
 8000b28:	0038      	movs	r0, r7
 8000b2a:	1a89      	subs	r1, r1, r2
 8000b2c:	4665      	mov	r5, ip
 8000b2e:	408f      	lsls	r7, r1
 8000b30:	408d      	lsls	r5, r1
 8000b32:	40d0      	lsrs	r0, r2
 8000b34:	1e79      	subs	r1, r7, #1
 8000b36:	418f      	sbcs	r7, r1
 8000b38:	4305      	orrs	r5, r0
 8000b3a:	433d      	orrs	r5, r7
 8000b3c:	4667      	mov	r7, ip
 8000b3e:	40d7      	lsrs	r7, r2
 8000b40:	19db      	adds	r3, r3, r7
 8000b42:	e794      	b.n	8000a6e <__aeabi_dadd+0x3f2>
 8000b44:	4a80      	ldr	r2, [pc, #512]	; (8000d48 <__aeabi_dadd+0x6cc>)
 8000b46:	4290      	cmp	r0, r2
 8000b48:	d100      	bne.n	8000b4c <__aeabi_dadd+0x4d0>
 8000b4a:	e0ec      	b.n	8000d26 <__aeabi_dadd+0x6aa>
 8000b4c:	0039      	movs	r1, r7
 8000b4e:	4449      	add	r1, r9
 8000b50:	4549      	cmp	r1, r9
 8000b52:	4192      	sbcs	r2, r2
 8000b54:	4463      	add	r3, ip
 8000b56:	4252      	negs	r2, r2
 8000b58:	189b      	adds	r3, r3, r2
 8000b5a:	07dd      	lsls	r5, r3, #31
 8000b5c:	0849      	lsrs	r1, r1, #1
 8000b5e:	085b      	lsrs	r3, r3, #1
 8000b60:	4698      	mov	r8, r3
 8000b62:	0006      	movs	r6, r0
 8000b64:	430d      	orrs	r5, r1
 8000b66:	e6a5      	b.n	80008b4 <__aeabi_dadd+0x238>
 8000b68:	464a      	mov	r2, r9
 8000b6a:	1abd      	subs	r5, r7, r2
 8000b6c:	42af      	cmp	r7, r5
 8000b6e:	4189      	sbcs	r1, r1
 8000b70:	4662      	mov	r2, ip
 8000b72:	4249      	negs	r1, r1
 8000b74:	1ad3      	subs	r3, r2, r3
 8000b76:	1a5b      	subs	r3, r3, r1
 8000b78:	4698      	mov	r8, r3
 8000b7a:	4654      	mov	r4, sl
 8000b7c:	e5d1      	b.n	8000722 <__aeabi_dadd+0xa6>
 8000b7e:	076c      	lsls	r4, r5, #29
 8000b80:	08f9      	lsrs	r1, r7, #3
 8000b82:	4321      	orrs	r1, r4
 8000b84:	08eb      	lsrs	r3, r5, #3
 8000b86:	0004      	movs	r4, r0
 8000b88:	e69d      	b.n	80008c6 <__aeabi_dadd+0x24a>
 8000b8a:	464a      	mov	r2, r9
 8000b8c:	431a      	orrs	r2, r3
 8000b8e:	d175      	bne.n	8000c7c <__aeabi_dadd+0x600>
 8000b90:	4661      	mov	r1, ip
 8000b92:	4339      	orrs	r1, r7
 8000b94:	d114      	bne.n	8000bc0 <__aeabi_dadd+0x544>
 8000b96:	2380      	movs	r3, #128	; 0x80
 8000b98:	2400      	movs	r4, #0
 8000b9a:	031b      	lsls	r3, r3, #12
 8000b9c:	e6bc      	b.n	8000918 <__aeabi_dadd+0x29c>
 8000b9e:	464a      	mov	r2, r9
 8000ba0:	1bd5      	subs	r5, r2, r7
 8000ba2:	45a9      	cmp	r9, r5
 8000ba4:	4189      	sbcs	r1, r1
 8000ba6:	4662      	mov	r2, ip
 8000ba8:	4249      	negs	r1, r1
 8000baa:	1a9b      	subs	r3, r3, r2
 8000bac:	1a5b      	subs	r3, r3, r1
 8000bae:	4698      	mov	r8, r3
 8000bb0:	2601      	movs	r6, #1
 8000bb2:	e5ae      	b.n	8000712 <__aeabi_dadd+0x96>
 8000bb4:	464a      	mov	r2, r9
 8000bb6:	08d1      	lsrs	r1, r2, #3
 8000bb8:	075a      	lsls	r2, r3, #29
 8000bba:	4311      	orrs	r1, r2
 8000bbc:	08db      	lsrs	r3, r3, #3
 8000bbe:	e6a7      	b.n	8000910 <__aeabi_dadd+0x294>
 8000bc0:	4663      	mov	r3, ip
 8000bc2:	08f9      	lsrs	r1, r7, #3
 8000bc4:	075a      	lsls	r2, r3, #29
 8000bc6:	4654      	mov	r4, sl
 8000bc8:	4311      	orrs	r1, r2
 8000bca:	08db      	lsrs	r3, r3, #3
 8000bcc:	e6a0      	b.n	8000910 <__aeabi_dadd+0x294>
 8000bce:	464a      	mov	r2, r9
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	001d      	movs	r5, r3
 8000bd4:	1e6b      	subs	r3, r5, #1
 8000bd6:	419d      	sbcs	r5, r3
 8000bd8:	e6c7      	b.n	800096a <__aeabi_dadd+0x2ee>
 8000bda:	0014      	movs	r4, r2
 8000bdc:	001e      	movs	r6, r3
 8000bde:	3c20      	subs	r4, #32
 8000be0:	40e6      	lsrs	r6, r4
 8000be2:	2a20      	cmp	r2, #32
 8000be4:	d005      	beq.n	8000bf2 <__aeabi_dadd+0x576>
 8000be6:	2440      	movs	r4, #64	; 0x40
 8000be8:	1aa2      	subs	r2, r4, r2
 8000bea:	4093      	lsls	r3, r2
 8000bec:	464a      	mov	r2, r9
 8000bee:	431a      	orrs	r2, r3
 8000bf0:	4691      	mov	r9, r2
 8000bf2:	464d      	mov	r5, r9
 8000bf4:	1e6b      	subs	r3, r5, #1
 8000bf6:	419d      	sbcs	r5, r3
 8000bf8:	4335      	orrs	r5, r6
 8000bfa:	e778      	b.n	8000aee <__aeabi_dadd+0x472>
 8000bfc:	464a      	mov	r2, r9
 8000bfe:	431a      	orrs	r2, r3
 8000c00:	d000      	beq.n	8000c04 <__aeabi_dadd+0x588>
 8000c02:	e66b      	b.n	80008dc <__aeabi_dadd+0x260>
 8000c04:	076b      	lsls	r3, r5, #29
 8000c06:	08f9      	lsrs	r1, r7, #3
 8000c08:	4319      	orrs	r1, r3
 8000c0a:	08eb      	lsrs	r3, r5, #3
 8000c0c:	e680      	b.n	8000910 <__aeabi_dadd+0x294>
 8000c0e:	4661      	mov	r1, ip
 8000c10:	4339      	orrs	r1, r7
 8000c12:	d054      	beq.n	8000cbe <__aeabi_dadd+0x642>
 8000c14:	4663      	mov	r3, ip
 8000c16:	08f9      	lsrs	r1, r7, #3
 8000c18:	075c      	lsls	r4, r3, #29
 8000c1a:	4321      	orrs	r1, r4
 8000c1c:	08db      	lsrs	r3, r3, #3
 8000c1e:	0004      	movs	r4, r0
 8000c20:	e654      	b.n	80008cc <__aeabi_dadd+0x250>
 8000c22:	464a      	mov	r2, r9
 8000c24:	1abd      	subs	r5, r7, r2
 8000c26:	42af      	cmp	r7, r5
 8000c28:	4189      	sbcs	r1, r1
 8000c2a:	4662      	mov	r2, ip
 8000c2c:	4249      	negs	r1, r1
 8000c2e:	1ad3      	subs	r3, r2, r3
 8000c30:	1a5b      	subs	r3, r3, r1
 8000c32:	4698      	mov	r8, r3
 8000c34:	0004      	movs	r4, r0
 8000c36:	2601      	movs	r6, #1
 8000c38:	e56b      	b.n	8000712 <__aeabi_dadd+0x96>
 8000c3a:	464a      	mov	r2, r9
 8000c3c:	1bd5      	subs	r5, r2, r7
 8000c3e:	45a9      	cmp	r9, r5
 8000c40:	4189      	sbcs	r1, r1
 8000c42:	4662      	mov	r2, ip
 8000c44:	4249      	negs	r1, r1
 8000c46:	1a9a      	subs	r2, r3, r2
 8000c48:	1a52      	subs	r2, r2, r1
 8000c4a:	4690      	mov	r8, r2
 8000c4c:	0212      	lsls	r2, r2, #8
 8000c4e:	d532      	bpl.n	8000cb6 <__aeabi_dadd+0x63a>
 8000c50:	464a      	mov	r2, r9
 8000c52:	1abd      	subs	r5, r7, r2
 8000c54:	42af      	cmp	r7, r5
 8000c56:	4189      	sbcs	r1, r1
 8000c58:	4662      	mov	r2, ip
 8000c5a:	4249      	negs	r1, r1
 8000c5c:	1ad3      	subs	r3, r2, r3
 8000c5e:	1a5b      	subs	r3, r3, r1
 8000c60:	4698      	mov	r8, r3
 8000c62:	0004      	movs	r4, r0
 8000c64:	e584      	b.n	8000770 <__aeabi_dadd+0xf4>
 8000c66:	4663      	mov	r3, ip
 8000c68:	08f9      	lsrs	r1, r7, #3
 8000c6a:	075a      	lsls	r2, r3, #29
 8000c6c:	4311      	orrs	r1, r2
 8000c6e:	08db      	lsrs	r3, r3, #3
 8000c70:	e64e      	b.n	8000910 <__aeabi_dadd+0x294>
 8000c72:	08f9      	lsrs	r1, r7, #3
 8000c74:	0768      	lsls	r0, r5, #29
 8000c76:	4301      	orrs	r1, r0
 8000c78:	08eb      	lsrs	r3, r5, #3
 8000c7a:	e624      	b.n	80008c6 <__aeabi_dadd+0x24a>
 8000c7c:	4662      	mov	r2, ip
 8000c7e:	433a      	orrs	r2, r7
 8000c80:	d100      	bne.n	8000c84 <__aeabi_dadd+0x608>
 8000c82:	e698      	b.n	80009b6 <__aeabi_dadd+0x33a>
 8000c84:	464a      	mov	r2, r9
 8000c86:	08d1      	lsrs	r1, r2, #3
 8000c88:	075a      	lsls	r2, r3, #29
 8000c8a:	4311      	orrs	r1, r2
 8000c8c:	08da      	lsrs	r2, r3, #3
 8000c8e:	2380      	movs	r3, #128	; 0x80
 8000c90:	031b      	lsls	r3, r3, #12
 8000c92:	421a      	tst	r2, r3
 8000c94:	d008      	beq.n	8000ca8 <__aeabi_dadd+0x62c>
 8000c96:	4660      	mov	r0, ip
 8000c98:	08c5      	lsrs	r5, r0, #3
 8000c9a:	421d      	tst	r5, r3
 8000c9c:	d104      	bne.n	8000ca8 <__aeabi_dadd+0x62c>
 8000c9e:	4654      	mov	r4, sl
 8000ca0:	002a      	movs	r2, r5
 8000ca2:	08f9      	lsrs	r1, r7, #3
 8000ca4:	0743      	lsls	r3, r0, #29
 8000ca6:	4319      	orrs	r1, r3
 8000ca8:	0f4b      	lsrs	r3, r1, #29
 8000caa:	00c9      	lsls	r1, r1, #3
 8000cac:	075b      	lsls	r3, r3, #29
 8000cae:	08c9      	lsrs	r1, r1, #3
 8000cb0:	4319      	orrs	r1, r3
 8000cb2:	0013      	movs	r3, r2
 8000cb4:	e62c      	b.n	8000910 <__aeabi_dadd+0x294>
 8000cb6:	4641      	mov	r1, r8
 8000cb8:	4329      	orrs	r1, r5
 8000cba:	d000      	beq.n	8000cbe <__aeabi_dadd+0x642>
 8000cbc:	e5fa      	b.n	80008b4 <__aeabi_dadd+0x238>
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	000a      	movs	r2, r1
 8000cc2:	2400      	movs	r4, #0
 8000cc4:	e602      	b.n	80008cc <__aeabi_dadd+0x250>
 8000cc6:	076b      	lsls	r3, r5, #29
 8000cc8:	08f9      	lsrs	r1, r7, #3
 8000cca:	4319      	orrs	r1, r3
 8000ccc:	08eb      	lsrs	r3, r5, #3
 8000cce:	e5fd      	b.n	80008cc <__aeabi_dadd+0x250>
 8000cd0:	4663      	mov	r3, ip
 8000cd2:	08f9      	lsrs	r1, r7, #3
 8000cd4:	075b      	lsls	r3, r3, #29
 8000cd6:	4319      	orrs	r1, r3
 8000cd8:	4663      	mov	r3, ip
 8000cda:	0004      	movs	r4, r0
 8000cdc:	08db      	lsrs	r3, r3, #3
 8000cde:	e617      	b.n	8000910 <__aeabi_dadd+0x294>
 8000ce0:	003d      	movs	r5, r7
 8000ce2:	444d      	add	r5, r9
 8000ce4:	4463      	add	r3, ip
 8000ce6:	454d      	cmp	r5, r9
 8000ce8:	4189      	sbcs	r1, r1
 8000cea:	4698      	mov	r8, r3
 8000cec:	4249      	negs	r1, r1
 8000cee:	4488      	add	r8, r1
 8000cf0:	4643      	mov	r3, r8
 8000cf2:	021b      	lsls	r3, r3, #8
 8000cf4:	d400      	bmi.n	8000cf8 <__aeabi_dadd+0x67c>
 8000cf6:	e5dd      	b.n	80008b4 <__aeabi_dadd+0x238>
 8000cf8:	4642      	mov	r2, r8
 8000cfa:	4b14      	ldr	r3, [pc, #80]	; (8000d4c <__aeabi_dadd+0x6d0>)
 8000cfc:	2601      	movs	r6, #1
 8000cfe:	401a      	ands	r2, r3
 8000d00:	4690      	mov	r8, r2
 8000d02:	e5d7      	b.n	80008b4 <__aeabi_dadd+0x238>
 8000d04:	0010      	movs	r0, r2
 8000d06:	001e      	movs	r6, r3
 8000d08:	3820      	subs	r0, #32
 8000d0a:	40c6      	lsrs	r6, r0
 8000d0c:	2a20      	cmp	r2, #32
 8000d0e:	d005      	beq.n	8000d1c <__aeabi_dadd+0x6a0>
 8000d10:	2040      	movs	r0, #64	; 0x40
 8000d12:	1a82      	subs	r2, r0, r2
 8000d14:	4093      	lsls	r3, r2
 8000d16:	464a      	mov	r2, r9
 8000d18:	431a      	orrs	r2, r3
 8000d1a:	4691      	mov	r9, r2
 8000d1c:	464d      	mov	r5, r9
 8000d1e:	1e6b      	subs	r3, r5, #1
 8000d20:	419d      	sbcs	r5, r3
 8000d22:	4335      	orrs	r5, r6
 8000d24:	e621      	b.n	800096a <__aeabi_dadd+0x2ee>
 8000d26:	0002      	movs	r2, r0
 8000d28:	2300      	movs	r3, #0
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	e540      	b.n	80007b0 <__aeabi_dadd+0x134>
 8000d2e:	464a      	mov	r2, r9
 8000d30:	19d5      	adds	r5, r2, r7
 8000d32:	42bd      	cmp	r5, r7
 8000d34:	4189      	sbcs	r1, r1
 8000d36:	4463      	add	r3, ip
 8000d38:	4698      	mov	r8, r3
 8000d3a:	4249      	negs	r1, r1
 8000d3c:	4488      	add	r8, r1
 8000d3e:	e5b3      	b.n	80008a8 <__aeabi_dadd+0x22c>
 8000d40:	2100      	movs	r1, #0
 8000d42:	4a01      	ldr	r2, [pc, #4]	; (8000d48 <__aeabi_dadd+0x6cc>)
 8000d44:	000b      	movs	r3, r1
 8000d46:	e533      	b.n	80007b0 <__aeabi_dadd+0x134>
 8000d48:	000007ff 	.word	0x000007ff
 8000d4c:	ff7fffff 	.word	0xff7fffff

08000d50 <__aeabi_ddiv>:
 8000d50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d52:	4657      	mov	r7, sl
 8000d54:	464e      	mov	r6, r9
 8000d56:	4645      	mov	r5, r8
 8000d58:	46de      	mov	lr, fp
 8000d5a:	b5e0      	push	{r5, r6, r7, lr}
 8000d5c:	4681      	mov	r9, r0
 8000d5e:	0005      	movs	r5, r0
 8000d60:	030c      	lsls	r4, r1, #12
 8000d62:	0048      	lsls	r0, r1, #1
 8000d64:	4692      	mov	sl, r2
 8000d66:	001f      	movs	r7, r3
 8000d68:	b085      	sub	sp, #20
 8000d6a:	0b24      	lsrs	r4, r4, #12
 8000d6c:	0d40      	lsrs	r0, r0, #21
 8000d6e:	0fce      	lsrs	r6, r1, #31
 8000d70:	2800      	cmp	r0, #0
 8000d72:	d059      	beq.n	8000e28 <__aeabi_ddiv+0xd8>
 8000d74:	4b87      	ldr	r3, [pc, #540]	; (8000f94 <__aeabi_ddiv+0x244>)
 8000d76:	4298      	cmp	r0, r3
 8000d78:	d100      	bne.n	8000d7c <__aeabi_ddiv+0x2c>
 8000d7a:	e098      	b.n	8000eae <__aeabi_ddiv+0x15e>
 8000d7c:	0f6b      	lsrs	r3, r5, #29
 8000d7e:	00e4      	lsls	r4, r4, #3
 8000d80:	431c      	orrs	r4, r3
 8000d82:	2380      	movs	r3, #128	; 0x80
 8000d84:	041b      	lsls	r3, r3, #16
 8000d86:	4323      	orrs	r3, r4
 8000d88:	4698      	mov	r8, r3
 8000d8a:	4b83      	ldr	r3, [pc, #524]	; (8000f98 <__aeabi_ddiv+0x248>)
 8000d8c:	00ed      	lsls	r5, r5, #3
 8000d8e:	469b      	mov	fp, r3
 8000d90:	2300      	movs	r3, #0
 8000d92:	4699      	mov	r9, r3
 8000d94:	4483      	add	fp, r0
 8000d96:	9300      	str	r3, [sp, #0]
 8000d98:	033c      	lsls	r4, r7, #12
 8000d9a:	007b      	lsls	r3, r7, #1
 8000d9c:	4650      	mov	r0, sl
 8000d9e:	0b24      	lsrs	r4, r4, #12
 8000da0:	0d5b      	lsrs	r3, r3, #21
 8000da2:	0fff      	lsrs	r7, r7, #31
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d067      	beq.n	8000e78 <__aeabi_ddiv+0x128>
 8000da8:	4a7a      	ldr	r2, [pc, #488]	; (8000f94 <__aeabi_ddiv+0x244>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d018      	beq.n	8000de0 <__aeabi_ddiv+0x90>
 8000dae:	497a      	ldr	r1, [pc, #488]	; (8000f98 <__aeabi_ddiv+0x248>)
 8000db0:	0f42      	lsrs	r2, r0, #29
 8000db2:	468c      	mov	ip, r1
 8000db4:	00e4      	lsls	r4, r4, #3
 8000db6:	4659      	mov	r1, fp
 8000db8:	4314      	orrs	r4, r2
 8000dba:	2280      	movs	r2, #128	; 0x80
 8000dbc:	4463      	add	r3, ip
 8000dbe:	0412      	lsls	r2, r2, #16
 8000dc0:	1acb      	subs	r3, r1, r3
 8000dc2:	4314      	orrs	r4, r2
 8000dc4:	469b      	mov	fp, r3
 8000dc6:	00c2      	lsls	r2, r0, #3
 8000dc8:	2000      	movs	r0, #0
 8000dca:	0033      	movs	r3, r6
 8000dcc:	407b      	eors	r3, r7
 8000dce:	469a      	mov	sl, r3
 8000dd0:	464b      	mov	r3, r9
 8000dd2:	2b0f      	cmp	r3, #15
 8000dd4:	d900      	bls.n	8000dd8 <__aeabi_ddiv+0x88>
 8000dd6:	e0ef      	b.n	8000fb8 <__aeabi_ddiv+0x268>
 8000dd8:	4970      	ldr	r1, [pc, #448]	; (8000f9c <__aeabi_ddiv+0x24c>)
 8000dda:	009b      	lsls	r3, r3, #2
 8000ddc:	58cb      	ldr	r3, [r1, r3]
 8000dde:	469f      	mov	pc, r3
 8000de0:	4b6f      	ldr	r3, [pc, #444]	; (8000fa0 <__aeabi_ddiv+0x250>)
 8000de2:	4652      	mov	r2, sl
 8000de4:	469c      	mov	ip, r3
 8000de6:	4322      	orrs	r2, r4
 8000de8:	44e3      	add	fp, ip
 8000dea:	2a00      	cmp	r2, #0
 8000dec:	d000      	beq.n	8000df0 <__aeabi_ddiv+0xa0>
 8000dee:	e095      	b.n	8000f1c <__aeabi_ddiv+0x1cc>
 8000df0:	4649      	mov	r1, r9
 8000df2:	2302      	movs	r3, #2
 8000df4:	4319      	orrs	r1, r3
 8000df6:	4689      	mov	r9, r1
 8000df8:	2400      	movs	r4, #0
 8000dfa:	2002      	movs	r0, #2
 8000dfc:	e7e5      	b.n	8000dca <__aeabi_ddiv+0x7a>
 8000dfe:	2300      	movs	r3, #0
 8000e00:	2400      	movs	r4, #0
 8000e02:	2500      	movs	r5, #0
 8000e04:	4652      	mov	r2, sl
 8000e06:	051b      	lsls	r3, r3, #20
 8000e08:	4323      	orrs	r3, r4
 8000e0a:	07d2      	lsls	r2, r2, #31
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	0028      	movs	r0, r5
 8000e10:	0019      	movs	r1, r3
 8000e12:	b005      	add	sp, #20
 8000e14:	bcf0      	pop	{r4, r5, r6, r7}
 8000e16:	46bb      	mov	fp, r7
 8000e18:	46b2      	mov	sl, r6
 8000e1a:	46a9      	mov	r9, r5
 8000e1c:	46a0      	mov	r8, r4
 8000e1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e20:	2400      	movs	r4, #0
 8000e22:	2500      	movs	r5, #0
 8000e24:	4b5b      	ldr	r3, [pc, #364]	; (8000f94 <__aeabi_ddiv+0x244>)
 8000e26:	e7ed      	b.n	8000e04 <__aeabi_ddiv+0xb4>
 8000e28:	464b      	mov	r3, r9
 8000e2a:	4323      	orrs	r3, r4
 8000e2c:	4698      	mov	r8, r3
 8000e2e:	d100      	bne.n	8000e32 <__aeabi_ddiv+0xe2>
 8000e30:	e089      	b.n	8000f46 <__aeabi_ddiv+0x1f6>
 8000e32:	2c00      	cmp	r4, #0
 8000e34:	d100      	bne.n	8000e38 <__aeabi_ddiv+0xe8>
 8000e36:	e1e0      	b.n	80011fa <__aeabi_ddiv+0x4aa>
 8000e38:	0020      	movs	r0, r4
 8000e3a:	f001 fa7f 	bl	800233c <__clzsi2>
 8000e3e:	0001      	movs	r1, r0
 8000e40:	0002      	movs	r2, r0
 8000e42:	390b      	subs	r1, #11
 8000e44:	231d      	movs	r3, #29
 8000e46:	1a5b      	subs	r3, r3, r1
 8000e48:	4649      	mov	r1, r9
 8000e4a:	0010      	movs	r0, r2
 8000e4c:	40d9      	lsrs	r1, r3
 8000e4e:	3808      	subs	r0, #8
 8000e50:	4084      	lsls	r4, r0
 8000e52:	000b      	movs	r3, r1
 8000e54:	464d      	mov	r5, r9
 8000e56:	4323      	orrs	r3, r4
 8000e58:	4698      	mov	r8, r3
 8000e5a:	4085      	lsls	r5, r0
 8000e5c:	4851      	ldr	r0, [pc, #324]	; (8000fa4 <__aeabi_ddiv+0x254>)
 8000e5e:	033c      	lsls	r4, r7, #12
 8000e60:	1a83      	subs	r3, r0, r2
 8000e62:	469b      	mov	fp, r3
 8000e64:	2300      	movs	r3, #0
 8000e66:	4699      	mov	r9, r3
 8000e68:	9300      	str	r3, [sp, #0]
 8000e6a:	007b      	lsls	r3, r7, #1
 8000e6c:	4650      	mov	r0, sl
 8000e6e:	0b24      	lsrs	r4, r4, #12
 8000e70:	0d5b      	lsrs	r3, r3, #21
 8000e72:	0fff      	lsrs	r7, r7, #31
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d197      	bne.n	8000da8 <__aeabi_ddiv+0x58>
 8000e78:	4652      	mov	r2, sl
 8000e7a:	4322      	orrs	r2, r4
 8000e7c:	d055      	beq.n	8000f2a <__aeabi_ddiv+0x1da>
 8000e7e:	2c00      	cmp	r4, #0
 8000e80:	d100      	bne.n	8000e84 <__aeabi_ddiv+0x134>
 8000e82:	e1ca      	b.n	800121a <__aeabi_ddiv+0x4ca>
 8000e84:	0020      	movs	r0, r4
 8000e86:	f001 fa59 	bl	800233c <__clzsi2>
 8000e8a:	0002      	movs	r2, r0
 8000e8c:	3a0b      	subs	r2, #11
 8000e8e:	231d      	movs	r3, #29
 8000e90:	0001      	movs	r1, r0
 8000e92:	1a9b      	subs	r3, r3, r2
 8000e94:	4652      	mov	r2, sl
 8000e96:	3908      	subs	r1, #8
 8000e98:	40da      	lsrs	r2, r3
 8000e9a:	408c      	lsls	r4, r1
 8000e9c:	4314      	orrs	r4, r2
 8000e9e:	4652      	mov	r2, sl
 8000ea0:	408a      	lsls	r2, r1
 8000ea2:	4b41      	ldr	r3, [pc, #260]	; (8000fa8 <__aeabi_ddiv+0x258>)
 8000ea4:	4458      	add	r0, fp
 8000ea6:	469b      	mov	fp, r3
 8000ea8:	4483      	add	fp, r0
 8000eaa:	2000      	movs	r0, #0
 8000eac:	e78d      	b.n	8000dca <__aeabi_ddiv+0x7a>
 8000eae:	464b      	mov	r3, r9
 8000eb0:	4323      	orrs	r3, r4
 8000eb2:	4698      	mov	r8, r3
 8000eb4:	d140      	bne.n	8000f38 <__aeabi_ddiv+0x1e8>
 8000eb6:	2308      	movs	r3, #8
 8000eb8:	4699      	mov	r9, r3
 8000eba:	3b06      	subs	r3, #6
 8000ebc:	2500      	movs	r5, #0
 8000ebe:	4683      	mov	fp, r0
 8000ec0:	9300      	str	r3, [sp, #0]
 8000ec2:	e769      	b.n	8000d98 <__aeabi_ddiv+0x48>
 8000ec4:	46b2      	mov	sl, r6
 8000ec6:	9b00      	ldr	r3, [sp, #0]
 8000ec8:	2b02      	cmp	r3, #2
 8000eca:	d0a9      	beq.n	8000e20 <__aeabi_ddiv+0xd0>
 8000ecc:	2b03      	cmp	r3, #3
 8000ece:	d100      	bne.n	8000ed2 <__aeabi_ddiv+0x182>
 8000ed0:	e211      	b.n	80012f6 <__aeabi_ddiv+0x5a6>
 8000ed2:	2b01      	cmp	r3, #1
 8000ed4:	d093      	beq.n	8000dfe <__aeabi_ddiv+0xae>
 8000ed6:	4a35      	ldr	r2, [pc, #212]	; (8000fac <__aeabi_ddiv+0x25c>)
 8000ed8:	445a      	add	r2, fp
 8000eda:	2a00      	cmp	r2, #0
 8000edc:	dc00      	bgt.n	8000ee0 <__aeabi_ddiv+0x190>
 8000ede:	e13c      	b.n	800115a <__aeabi_ddiv+0x40a>
 8000ee0:	076b      	lsls	r3, r5, #29
 8000ee2:	d000      	beq.n	8000ee6 <__aeabi_ddiv+0x196>
 8000ee4:	e1a7      	b.n	8001236 <__aeabi_ddiv+0x4e6>
 8000ee6:	08ed      	lsrs	r5, r5, #3
 8000ee8:	4643      	mov	r3, r8
 8000eea:	01db      	lsls	r3, r3, #7
 8000eec:	d506      	bpl.n	8000efc <__aeabi_ddiv+0x1ac>
 8000eee:	4642      	mov	r2, r8
 8000ef0:	4b2f      	ldr	r3, [pc, #188]	; (8000fb0 <__aeabi_ddiv+0x260>)
 8000ef2:	401a      	ands	r2, r3
 8000ef4:	4690      	mov	r8, r2
 8000ef6:	2280      	movs	r2, #128	; 0x80
 8000ef8:	00d2      	lsls	r2, r2, #3
 8000efa:	445a      	add	r2, fp
 8000efc:	4b2d      	ldr	r3, [pc, #180]	; (8000fb4 <__aeabi_ddiv+0x264>)
 8000efe:	429a      	cmp	r2, r3
 8000f00:	dc8e      	bgt.n	8000e20 <__aeabi_ddiv+0xd0>
 8000f02:	4643      	mov	r3, r8
 8000f04:	0552      	lsls	r2, r2, #21
 8000f06:	0758      	lsls	r0, r3, #29
 8000f08:	025c      	lsls	r4, r3, #9
 8000f0a:	4305      	orrs	r5, r0
 8000f0c:	0b24      	lsrs	r4, r4, #12
 8000f0e:	0d53      	lsrs	r3, r2, #21
 8000f10:	e778      	b.n	8000e04 <__aeabi_ddiv+0xb4>
 8000f12:	46ba      	mov	sl, r7
 8000f14:	46a0      	mov	r8, r4
 8000f16:	0015      	movs	r5, r2
 8000f18:	9000      	str	r0, [sp, #0]
 8000f1a:	e7d4      	b.n	8000ec6 <__aeabi_ddiv+0x176>
 8000f1c:	464a      	mov	r2, r9
 8000f1e:	2303      	movs	r3, #3
 8000f20:	431a      	orrs	r2, r3
 8000f22:	4691      	mov	r9, r2
 8000f24:	2003      	movs	r0, #3
 8000f26:	4652      	mov	r2, sl
 8000f28:	e74f      	b.n	8000dca <__aeabi_ddiv+0x7a>
 8000f2a:	4649      	mov	r1, r9
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	4319      	orrs	r1, r3
 8000f30:	4689      	mov	r9, r1
 8000f32:	2400      	movs	r4, #0
 8000f34:	2001      	movs	r0, #1
 8000f36:	e748      	b.n	8000dca <__aeabi_ddiv+0x7a>
 8000f38:	230c      	movs	r3, #12
 8000f3a:	4699      	mov	r9, r3
 8000f3c:	3b09      	subs	r3, #9
 8000f3e:	46a0      	mov	r8, r4
 8000f40:	4683      	mov	fp, r0
 8000f42:	9300      	str	r3, [sp, #0]
 8000f44:	e728      	b.n	8000d98 <__aeabi_ddiv+0x48>
 8000f46:	2304      	movs	r3, #4
 8000f48:	4699      	mov	r9, r3
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	469b      	mov	fp, r3
 8000f4e:	3301      	adds	r3, #1
 8000f50:	2500      	movs	r5, #0
 8000f52:	9300      	str	r3, [sp, #0]
 8000f54:	e720      	b.n	8000d98 <__aeabi_ddiv+0x48>
 8000f56:	2300      	movs	r3, #0
 8000f58:	2480      	movs	r4, #128	; 0x80
 8000f5a:	469a      	mov	sl, r3
 8000f5c:	2500      	movs	r5, #0
 8000f5e:	4b0d      	ldr	r3, [pc, #52]	; (8000f94 <__aeabi_ddiv+0x244>)
 8000f60:	0324      	lsls	r4, r4, #12
 8000f62:	e74f      	b.n	8000e04 <__aeabi_ddiv+0xb4>
 8000f64:	2380      	movs	r3, #128	; 0x80
 8000f66:	4641      	mov	r1, r8
 8000f68:	031b      	lsls	r3, r3, #12
 8000f6a:	4219      	tst	r1, r3
 8000f6c:	d008      	beq.n	8000f80 <__aeabi_ddiv+0x230>
 8000f6e:	421c      	tst	r4, r3
 8000f70:	d106      	bne.n	8000f80 <__aeabi_ddiv+0x230>
 8000f72:	431c      	orrs	r4, r3
 8000f74:	0324      	lsls	r4, r4, #12
 8000f76:	46ba      	mov	sl, r7
 8000f78:	0015      	movs	r5, r2
 8000f7a:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <__aeabi_ddiv+0x244>)
 8000f7c:	0b24      	lsrs	r4, r4, #12
 8000f7e:	e741      	b.n	8000e04 <__aeabi_ddiv+0xb4>
 8000f80:	2480      	movs	r4, #128	; 0x80
 8000f82:	4643      	mov	r3, r8
 8000f84:	0324      	lsls	r4, r4, #12
 8000f86:	431c      	orrs	r4, r3
 8000f88:	0324      	lsls	r4, r4, #12
 8000f8a:	46b2      	mov	sl, r6
 8000f8c:	4b01      	ldr	r3, [pc, #4]	; (8000f94 <__aeabi_ddiv+0x244>)
 8000f8e:	0b24      	lsrs	r4, r4, #12
 8000f90:	e738      	b.n	8000e04 <__aeabi_ddiv+0xb4>
 8000f92:	46c0      	nop			; (mov r8, r8)
 8000f94:	000007ff 	.word	0x000007ff
 8000f98:	fffffc01 	.word	0xfffffc01
 8000f9c:	080074f0 	.word	0x080074f0
 8000fa0:	fffff801 	.word	0xfffff801
 8000fa4:	fffffc0d 	.word	0xfffffc0d
 8000fa8:	000003f3 	.word	0x000003f3
 8000fac:	000003ff 	.word	0x000003ff
 8000fb0:	feffffff 	.word	0xfeffffff
 8000fb4:	000007fe 	.word	0x000007fe
 8000fb8:	4544      	cmp	r4, r8
 8000fba:	d200      	bcs.n	8000fbe <__aeabi_ddiv+0x26e>
 8000fbc:	e116      	b.n	80011ec <__aeabi_ddiv+0x49c>
 8000fbe:	d100      	bne.n	8000fc2 <__aeabi_ddiv+0x272>
 8000fc0:	e111      	b.n	80011e6 <__aeabi_ddiv+0x496>
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	425b      	negs	r3, r3
 8000fc6:	469c      	mov	ip, r3
 8000fc8:	002e      	movs	r6, r5
 8000fca:	4640      	mov	r0, r8
 8000fcc:	2500      	movs	r5, #0
 8000fce:	44e3      	add	fp, ip
 8000fd0:	0223      	lsls	r3, r4, #8
 8000fd2:	0e14      	lsrs	r4, r2, #24
 8000fd4:	431c      	orrs	r4, r3
 8000fd6:	0c1b      	lsrs	r3, r3, #16
 8000fd8:	4699      	mov	r9, r3
 8000fda:	0423      	lsls	r3, r4, #16
 8000fdc:	0c1f      	lsrs	r7, r3, #16
 8000fde:	0212      	lsls	r2, r2, #8
 8000fe0:	4649      	mov	r1, r9
 8000fe2:	9200      	str	r2, [sp, #0]
 8000fe4:	9701      	str	r7, [sp, #4]
 8000fe6:	f7ff f92f 	bl	8000248 <__aeabi_uidivmod>
 8000fea:	0002      	movs	r2, r0
 8000fec:	437a      	muls	r2, r7
 8000fee:	040b      	lsls	r3, r1, #16
 8000ff0:	0c31      	lsrs	r1, r6, #16
 8000ff2:	4680      	mov	r8, r0
 8000ff4:	4319      	orrs	r1, r3
 8000ff6:	428a      	cmp	r2, r1
 8000ff8:	d90b      	bls.n	8001012 <__aeabi_ddiv+0x2c2>
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	425b      	negs	r3, r3
 8000ffe:	469c      	mov	ip, r3
 8001000:	1909      	adds	r1, r1, r4
 8001002:	44e0      	add	r8, ip
 8001004:	428c      	cmp	r4, r1
 8001006:	d804      	bhi.n	8001012 <__aeabi_ddiv+0x2c2>
 8001008:	428a      	cmp	r2, r1
 800100a:	d902      	bls.n	8001012 <__aeabi_ddiv+0x2c2>
 800100c:	1e83      	subs	r3, r0, #2
 800100e:	4698      	mov	r8, r3
 8001010:	1909      	adds	r1, r1, r4
 8001012:	1a88      	subs	r0, r1, r2
 8001014:	4649      	mov	r1, r9
 8001016:	f7ff f917 	bl	8000248 <__aeabi_uidivmod>
 800101a:	0409      	lsls	r1, r1, #16
 800101c:	468c      	mov	ip, r1
 800101e:	0431      	lsls	r1, r6, #16
 8001020:	4666      	mov	r6, ip
 8001022:	9a01      	ldr	r2, [sp, #4]
 8001024:	0c09      	lsrs	r1, r1, #16
 8001026:	4342      	muls	r2, r0
 8001028:	0003      	movs	r3, r0
 800102a:	4331      	orrs	r1, r6
 800102c:	428a      	cmp	r2, r1
 800102e:	d904      	bls.n	800103a <__aeabi_ddiv+0x2ea>
 8001030:	1909      	adds	r1, r1, r4
 8001032:	3b01      	subs	r3, #1
 8001034:	428c      	cmp	r4, r1
 8001036:	d800      	bhi.n	800103a <__aeabi_ddiv+0x2ea>
 8001038:	e111      	b.n	800125e <__aeabi_ddiv+0x50e>
 800103a:	1a89      	subs	r1, r1, r2
 800103c:	4642      	mov	r2, r8
 800103e:	9e00      	ldr	r6, [sp, #0]
 8001040:	0412      	lsls	r2, r2, #16
 8001042:	431a      	orrs	r2, r3
 8001044:	0c33      	lsrs	r3, r6, #16
 8001046:	001f      	movs	r7, r3
 8001048:	0c10      	lsrs	r0, r2, #16
 800104a:	4690      	mov	r8, r2
 800104c:	9302      	str	r3, [sp, #8]
 800104e:	0413      	lsls	r3, r2, #16
 8001050:	0432      	lsls	r2, r6, #16
 8001052:	0c16      	lsrs	r6, r2, #16
 8001054:	0032      	movs	r2, r6
 8001056:	0c1b      	lsrs	r3, r3, #16
 8001058:	435a      	muls	r2, r3
 800105a:	9603      	str	r6, [sp, #12]
 800105c:	437b      	muls	r3, r7
 800105e:	4346      	muls	r6, r0
 8001060:	4378      	muls	r0, r7
 8001062:	0c17      	lsrs	r7, r2, #16
 8001064:	46bc      	mov	ip, r7
 8001066:	199b      	adds	r3, r3, r6
 8001068:	4463      	add	r3, ip
 800106a:	429e      	cmp	r6, r3
 800106c:	d903      	bls.n	8001076 <__aeabi_ddiv+0x326>
 800106e:	2680      	movs	r6, #128	; 0x80
 8001070:	0276      	lsls	r6, r6, #9
 8001072:	46b4      	mov	ip, r6
 8001074:	4460      	add	r0, ip
 8001076:	0c1e      	lsrs	r6, r3, #16
 8001078:	1830      	adds	r0, r6, r0
 800107a:	0416      	lsls	r6, r2, #16
 800107c:	041b      	lsls	r3, r3, #16
 800107e:	0c36      	lsrs	r6, r6, #16
 8001080:	199e      	adds	r6, r3, r6
 8001082:	4281      	cmp	r1, r0
 8001084:	d200      	bcs.n	8001088 <__aeabi_ddiv+0x338>
 8001086:	e09c      	b.n	80011c2 <__aeabi_ddiv+0x472>
 8001088:	d100      	bne.n	800108c <__aeabi_ddiv+0x33c>
 800108a:	e097      	b.n	80011bc <__aeabi_ddiv+0x46c>
 800108c:	1bae      	subs	r6, r5, r6
 800108e:	1a09      	subs	r1, r1, r0
 8001090:	42b5      	cmp	r5, r6
 8001092:	4180      	sbcs	r0, r0
 8001094:	4240      	negs	r0, r0
 8001096:	1a08      	subs	r0, r1, r0
 8001098:	4284      	cmp	r4, r0
 800109a:	d100      	bne.n	800109e <__aeabi_ddiv+0x34e>
 800109c:	e111      	b.n	80012c2 <__aeabi_ddiv+0x572>
 800109e:	4649      	mov	r1, r9
 80010a0:	f7ff f8d2 	bl	8000248 <__aeabi_uidivmod>
 80010a4:	9a01      	ldr	r2, [sp, #4]
 80010a6:	040b      	lsls	r3, r1, #16
 80010a8:	4342      	muls	r2, r0
 80010aa:	0c31      	lsrs	r1, r6, #16
 80010ac:	0005      	movs	r5, r0
 80010ae:	4319      	orrs	r1, r3
 80010b0:	428a      	cmp	r2, r1
 80010b2:	d907      	bls.n	80010c4 <__aeabi_ddiv+0x374>
 80010b4:	1909      	adds	r1, r1, r4
 80010b6:	3d01      	subs	r5, #1
 80010b8:	428c      	cmp	r4, r1
 80010ba:	d803      	bhi.n	80010c4 <__aeabi_ddiv+0x374>
 80010bc:	428a      	cmp	r2, r1
 80010be:	d901      	bls.n	80010c4 <__aeabi_ddiv+0x374>
 80010c0:	1e85      	subs	r5, r0, #2
 80010c2:	1909      	adds	r1, r1, r4
 80010c4:	1a88      	subs	r0, r1, r2
 80010c6:	4649      	mov	r1, r9
 80010c8:	f7ff f8be 	bl	8000248 <__aeabi_uidivmod>
 80010cc:	0409      	lsls	r1, r1, #16
 80010ce:	468c      	mov	ip, r1
 80010d0:	0431      	lsls	r1, r6, #16
 80010d2:	4666      	mov	r6, ip
 80010d4:	9a01      	ldr	r2, [sp, #4]
 80010d6:	0c09      	lsrs	r1, r1, #16
 80010d8:	4342      	muls	r2, r0
 80010da:	0003      	movs	r3, r0
 80010dc:	4331      	orrs	r1, r6
 80010de:	428a      	cmp	r2, r1
 80010e0:	d907      	bls.n	80010f2 <__aeabi_ddiv+0x3a2>
 80010e2:	1909      	adds	r1, r1, r4
 80010e4:	3b01      	subs	r3, #1
 80010e6:	428c      	cmp	r4, r1
 80010e8:	d803      	bhi.n	80010f2 <__aeabi_ddiv+0x3a2>
 80010ea:	428a      	cmp	r2, r1
 80010ec:	d901      	bls.n	80010f2 <__aeabi_ddiv+0x3a2>
 80010ee:	1e83      	subs	r3, r0, #2
 80010f0:	1909      	adds	r1, r1, r4
 80010f2:	9e03      	ldr	r6, [sp, #12]
 80010f4:	1a89      	subs	r1, r1, r2
 80010f6:	0032      	movs	r2, r6
 80010f8:	042d      	lsls	r5, r5, #16
 80010fa:	431d      	orrs	r5, r3
 80010fc:	9f02      	ldr	r7, [sp, #8]
 80010fe:	042b      	lsls	r3, r5, #16
 8001100:	0c1b      	lsrs	r3, r3, #16
 8001102:	435a      	muls	r2, r3
 8001104:	437b      	muls	r3, r7
 8001106:	469c      	mov	ip, r3
 8001108:	0c28      	lsrs	r0, r5, #16
 800110a:	4346      	muls	r6, r0
 800110c:	0c13      	lsrs	r3, r2, #16
 800110e:	44b4      	add	ip, r6
 8001110:	4463      	add	r3, ip
 8001112:	4378      	muls	r0, r7
 8001114:	429e      	cmp	r6, r3
 8001116:	d903      	bls.n	8001120 <__aeabi_ddiv+0x3d0>
 8001118:	2680      	movs	r6, #128	; 0x80
 800111a:	0276      	lsls	r6, r6, #9
 800111c:	46b4      	mov	ip, r6
 800111e:	4460      	add	r0, ip
 8001120:	0c1e      	lsrs	r6, r3, #16
 8001122:	0412      	lsls	r2, r2, #16
 8001124:	041b      	lsls	r3, r3, #16
 8001126:	0c12      	lsrs	r2, r2, #16
 8001128:	1830      	adds	r0, r6, r0
 800112a:	189b      	adds	r3, r3, r2
 800112c:	4281      	cmp	r1, r0
 800112e:	d306      	bcc.n	800113e <__aeabi_ddiv+0x3ee>
 8001130:	d002      	beq.n	8001138 <__aeabi_ddiv+0x3e8>
 8001132:	2301      	movs	r3, #1
 8001134:	431d      	orrs	r5, r3
 8001136:	e6ce      	b.n	8000ed6 <__aeabi_ddiv+0x186>
 8001138:	2b00      	cmp	r3, #0
 800113a:	d100      	bne.n	800113e <__aeabi_ddiv+0x3ee>
 800113c:	e6cb      	b.n	8000ed6 <__aeabi_ddiv+0x186>
 800113e:	1861      	adds	r1, r4, r1
 8001140:	1e6e      	subs	r6, r5, #1
 8001142:	42a1      	cmp	r1, r4
 8001144:	d200      	bcs.n	8001148 <__aeabi_ddiv+0x3f8>
 8001146:	e0a4      	b.n	8001292 <__aeabi_ddiv+0x542>
 8001148:	4281      	cmp	r1, r0
 800114a:	d200      	bcs.n	800114e <__aeabi_ddiv+0x3fe>
 800114c:	e0c9      	b.n	80012e2 <__aeabi_ddiv+0x592>
 800114e:	d100      	bne.n	8001152 <__aeabi_ddiv+0x402>
 8001150:	e0d9      	b.n	8001306 <__aeabi_ddiv+0x5b6>
 8001152:	0035      	movs	r5, r6
 8001154:	e7ed      	b.n	8001132 <__aeabi_ddiv+0x3e2>
 8001156:	2501      	movs	r5, #1
 8001158:	426d      	negs	r5, r5
 800115a:	2101      	movs	r1, #1
 800115c:	1a89      	subs	r1, r1, r2
 800115e:	2938      	cmp	r1, #56	; 0x38
 8001160:	dd00      	ble.n	8001164 <__aeabi_ddiv+0x414>
 8001162:	e64c      	b.n	8000dfe <__aeabi_ddiv+0xae>
 8001164:	291f      	cmp	r1, #31
 8001166:	dc00      	bgt.n	800116a <__aeabi_ddiv+0x41a>
 8001168:	e07f      	b.n	800126a <__aeabi_ddiv+0x51a>
 800116a:	231f      	movs	r3, #31
 800116c:	425b      	negs	r3, r3
 800116e:	1a9a      	subs	r2, r3, r2
 8001170:	4643      	mov	r3, r8
 8001172:	40d3      	lsrs	r3, r2
 8001174:	2920      	cmp	r1, #32
 8001176:	d004      	beq.n	8001182 <__aeabi_ddiv+0x432>
 8001178:	4644      	mov	r4, r8
 800117a:	4a65      	ldr	r2, [pc, #404]	; (8001310 <__aeabi_ddiv+0x5c0>)
 800117c:	445a      	add	r2, fp
 800117e:	4094      	lsls	r4, r2
 8001180:	4325      	orrs	r5, r4
 8001182:	1e6a      	subs	r2, r5, #1
 8001184:	4195      	sbcs	r5, r2
 8001186:	2207      	movs	r2, #7
 8001188:	432b      	orrs	r3, r5
 800118a:	0015      	movs	r5, r2
 800118c:	2400      	movs	r4, #0
 800118e:	401d      	ands	r5, r3
 8001190:	421a      	tst	r2, r3
 8001192:	d100      	bne.n	8001196 <__aeabi_ddiv+0x446>
 8001194:	e0a1      	b.n	80012da <__aeabi_ddiv+0x58a>
 8001196:	220f      	movs	r2, #15
 8001198:	2400      	movs	r4, #0
 800119a:	401a      	ands	r2, r3
 800119c:	2a04      	cmp	r2, #4
 800119e:	d100      	bne.n	80011a2 <__aeabi_ddiv+0x452>
 80011a0:	e098      	b.n	80012d4 <__aeabi_ddiv+0x584>
 80011a2:	1d1a      	adds	r2, r3, #4
 80011a4:	429a      	cmp	r2, r3
 80011a6:	419b      	sbcs	r3, r3
 80011a8:	425b      	negs	r3, r3
 80011aa:	18e4      	adds	r4, r4, r3
 80011ac:	0013      	movs	r3, r2
 80011ae:	0222      	lsls	r2, r4, #8
 80011b0:	d400      	bmi.n	80011b4 <__aeabi_ddiv+0x464>
 80011b2:	e08f      	b.n	80012d4 <__aeabi_ddiv+0x584>
 80011b4:	2301      	movs	r3, #1
 80011b6:	2400      	movs	r4, #0
 80011b8:	2500      	movs	r5, #0
 80011ba:	e623      	b.n	8000e04 <__aeabi_ddiv+0xb4>
 80011bc:	42b5      	cmp	r5, r6
 80011be:	d300      	bcc.n	80011c2 <__aeabi_ddiv+0x472>
 80011c0:	e764      	b.n	800108c <__aeabi_ddiv+0x33c>
 80011c2:	4643      	mov	r3, r8
 80011c4:	1e5a      	subs	r2, r3, #1
 80011c6:	9b00      	ldr	r3, [sp, #0]
 80011c8:	469c      	mov	ip, r3
 80011ca:	4465      	add	r5, ip
 80011cc:	001f      	movs	r7, r3
 80011ce:	429d      	cmp	r5, r3
 80011d0:	419b      	sbcs	r3, r3
 80011d2:	425b      	negs	r3, r3
 80011d4:	191b      	adds	r3, r3, r4
 80011d6:	18c9      	adds	r1, r1, r3
 80011d8:	428c      	cmp	r4, r1
 80011da:	d23a      	bcs.n	8001252 <__aeabi_ddiv+0x502>
 80011dc:	4288      	cmp	r0, r1
 80011de:	d863      	bhi.n	80012a8 <__aeabi_ddiv+0x558>
 80011e0:	d060      	beq.n	80012a4 <__aeabi_ddiv+0x554>
 80011e2:	4690      	mov	r8, r2
 80011e4:	e752      	b.n	800108c <__aeabi_ddiv+0x33c>
 80011e6:	42aa      	cmp	r2, r5
 80011e8:	d900      	bls.n	80011ec <__aeabi_ddiv+0x49c>
 80011ea:	e6ea      	b.n	8000fc2 <__aeabi_ddiv+0x272>
 80011ec:	4643      	mov	r3, r8
 80011ee:	07de      	lsls	r6, r3, #31
 80011f0:	0858      	lsrs	r0, r3, #1
 80011f2:	086b      	lsrs	r3, r5, #1
 80011f4:	431e      	orrs	r6, r3
 80011f6:	07ed      	lsls	r5, r5, #31
 80011f8:	e6ea      	b.n	8000fd0 <__aeabi_ddiv+0x280>
 80011fa:	4648      	mov	r0, r9
 80011fc:	f001 f89e 	bl	800233c <__clzsi2>
 8001200:	0001      	movs	r1, r0
 8001202:	0002      	movs	r2, r0
 8001204:	3115      	adds	r1, #21
 8001206:	3220      	adds	r2, #32
 8001208:	291c      	cmp	r1, #28
 800120a:	dc00      	bgt.n	800120e <__aeabi_ddiv+0x4be>
 800120c:	e61a      	b.n	8000e44 <__aeabi_ddiv+0xf4>
 800120e:	464b      	mov	r3, r9
 8001210:	3808      	subs	r0, #8
 8001212:	4083      	lsls	r3, r0
 8001214:	2500      	movs	r5, #0
 8001216:	4698      	mov	r8, r3
 8001218:	e620      	b.n	8000e5c <__aeabi_ddiv+0x10c>
 800121a:	f001 f88f 	bl	800233c <__clzsi2>
 800121e:	0003      	movs	r3, r0
 8001220:	001a      	movs	r2, r3
 8001222:	3215      	adds	r2, #21
 8001224:	3020      	adds	r0, #32
 8001226:	2a1c      	cmp	r2, #28
 8001228:	dc00      	bgt.n	800122c <__aeabi_ddiv+0x4dc>
 800122a:	e630      	b.n	8000e8e <__aeabi_ddiv+0x13e>
 800122c:	4654      	mov	r4, sl
 800122e:	3b08      	subs	r3, #8
 8001230:	2200      	movs	r2, #0
 8001232:	409c      	lsls	r4, r3
 8001234:	e635      	b.n	8000ea2 <__aeabi_ddiv+0x152>
 8001236:	230f      	movs	r3, #15
 8001238:	402b      	ands	r3, r5
 800123a:	2b04      	cmp	r3, #4
 800123c:	d100      	bne.n	8001240 <__aeabi_ddiv+0x4f0>
 800123e:	e652      	b.n	8000ee6 <__aeabi_ddiv+0x196>
 8001240:	2305      	movs	r3, #5
 8001242:	425b      	negs	r3, r3
 8001244:	42ab      	cmp	r3, r5
 8001246:	419b      	sbcs	r3, r3
 8001248:	3504      	adds	r5, #4
 800124a:	425b      	negs	r3, r3
 800124c:	08ed      	lsrs	r5, r5, #3
 800124e:	4498      	add	r8, r3
 8001250:	e64a      	b.n	8000ee8 <__aeabi_ddiv+0x198>
 8001252:	428c      	cmp	r4, r1
 8001254:	d1c5      	bne.n	80011e2 <__aeabi_ddiv+0x492>
 8001256:	42af      	cmp	r7, r5
 8001258:	d9c0      	bls.n	80011dc <__aeabi_ddiv+0x48c>
 800125a:	4690      	mov	r8, r2
 800125c:	e716      	b.n	800108c <__aeabi_ddiv+0x33c>
 800125e:	428a      	cmp	r2, r1
 8001260:	d800      	bhi.n	8001264 <__aeabi_ddiv+0x514>
 8001262:	e6ea      	b.n	800103a <__aeabi_ddiv+0x2ea>
 8001264:	1e83      	subs	r3, r0, #2
 8001266:	1909      	adds	r1, r1, r4
 8001268:	e6e7      	b.n	800103a <__aeabi_ddiv+0x2ea>
 800126a:	4a2a      	ldr	r2, [pc, #168]	; (8001314 <__aeabi_ddiv+0x5c4>)
 800126c:	0028      	movs	r0, r5
 800126e:	445a      	add	r2, fp
 8001270:	4643      	mov	r3, r8
 8001272:	4095      	lsls	r5, r2
 8001274:	4093      	lsls	r3, r2
 8001276:	40c8      	lsrs	r0, r1
 8001278:	1e6a      	subs	r2, r5, #1
 800127a:	4195      	sbcs	r5, r2
 800127c:	4644      	mov	r4, r8
 800127e:	4303      	orrs	r3, r0
 8001280:	432b      	orrs	r3, r5
 8001282:	40cc      	lsrs	r4, r1
 8001284:	075a      	lsls	r2, r3, #29
 8001286:	d092      	beq.n	80011ae <__aeabi_ddiv+0x45e>
 8001288:	220f      	movs	r2, #15
 800128a:	401a      	ands	r2, r3
 800128c:	2a04      	cmp	r2, #4
 800128e:	d188      	bne.n	80011a2 <__aeabi_ddiv+0x452>
 8001290:	e78d      	b.n	80011ae <__aeabi_ddiv+0x45e>
 8001292:	0035      	movs	r5, r6
 8001294:	4281      	cmp	r1, r0
 8001296:	d000      	beq.n	800129a <__aeabi_ddiv+0x54a>
 8001298:	e74b      	b.n	8001132 <__aeabi_ddiv+0x3e2>
 800129a:	9a00      	ldr	r2, [sp, #0]
 800129c:	4293      	cmp	r3, r2
 800129e:	d000      	beq.n	80012a2 <__aeabi_ddiv+0x552>
 80012a0:	e747      	b.n	8001132 <__aeabi_ddiv+0x3e2>
 80012a2:	e618      	b.n	8000ed6 <__aeabi_ddiv+0x186>
 80012a4:	42ae      	cmp	r6, r5
 80012a6:	d99c      	bls.n	80011e2 <__aeabi_ddiv+0x492>
 80012a8:	2302      	movs	r3, #2
 80012aa:	425b      	negs	r3, r3
 80012ac:	469c      	mov	ip, r3
 80012ae:	9b00      	ldr	r3, [sp, #0]
 80012b0:	44e0      	add	r8, ip
 80012b2:	469c      	mov	ip, r3
 80012b4:	4465      	add	r5, ip
 80012b6:	429d      	cmp	r5, r3
 80012b8:	419b      	sbcs	r3, r3
 80012ba:	425b      	negs	r3, r3
 80012bc:	191b      	adds	r3, r3, r4
 80012be:	18c9      	adds	r1, r1, r3
 80012c0:	e6e4      	b.n	800108c <__aeabi_ddiv+0x33c>
 80012c2:	4a15      	ldr	r2, [pc, #84]	; (8001318 <__aeabi_ddiv+0x5c8>)
 80012c4:	445a      	add	r2, fp
 80012c6:	2a00      	cmp	r2, #0
 80012c8:	dc00      	bgt.n	80012cc <__aeabi_ddiv+0x57c>
 80012ca:	e744      	b.n	8001156 <__aeabi_ddiv+0x406>
 80012cc:	2301      	movs	r3, #1
 80012ce:	2500      	movs	r5, #0
 80012d0:	4498      	add	r8, r3
 80012d2:	e609      	b.n	8000ee8 <__aeabi_ddiv+0x198>
 80012d4:	0765      	lsls	r5, r4, #29
 80012d6:	0264      	lsls	r4, r4, #9
 80012d8:	0b24      	lsrs	r4, r4, #12
 80012da:	08db      	lsrs	r3, r3, #3
 80012dc:	431d      	orrs	r5, r3
 80012de:	2300      	movs	r3, #0
 80012e0:	e590      	b.n	8000e04 <__aeabi_ddiv+0xb4>
 80012e2:	9e00      	ldr	r6, [sp, #0]
 80012e4:	3d02      	subs	r5, #2
 80012e6:	0072      	lsls	r2, r6, #1
 80012e8:	42b2      	cmp	r2, r6
 80012ea:	41bf      	sbcs	r7, r7
 80012ec:	427f      	negs	r7, r7
 80012ee:	193c      	adds	r4, r7, r4
 80012f0:	1909      	adds	r1, r1, r4
 80012f2:	9200      	str	r2, [sp, #0]
 80012f4:	e7ce      	b.n	8001294 <__aeabi_ddiv+0x544>
 80012f6:	2480      	movs	r4, #128	; 0x80
 80012f8:	4643      	mov	r3, r8
 80012fa:	0324      	lsls	r4, r4, #12
 80012fc:	431c      	orrs	r4, r3
 80012fe:	0324      	lsls	r4, r4, #12
 8001300:	4b06      	ldr	r3, [pc, #24]	; (800131c <__aeabi_ddiv+0x5cc>)
 8001302:	0b24      	lsrs	r4, r4, #12
 8001304:	e57e      	b.n	8000e04 <__aeabi_ddiv+0xb4>
 8001306:	9a00      	ldr	r2, [sp, #0]
 8001308:	429a      	cmp	r2, r3
 800130a:	d3ea      	bcc.n	80012e2 <__aeabi_ddiv+0x592>
 800130c:	0035      	movs	r5, r6
 800130e:	e7c4      	b.n	800129a <__aeabi_ddiv+0x54a>
 8001310:	0000043e 	.word	0x0000043e
 8001314:	0000041e 	.word	0x0000041e
 8001318:	000003ff 	.word	0x000003ff
 800131c:	000007ff 	.word	0x000007ff

08001320 <__eqdf2>:
 8001320:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001322:	464f      	mov	r7, r9
 8001324:	4646      	mov	r6, r8
 8001326:	46d6      	mov	lr, sl
 8001328:	4694      	mov	ip, r2
 800132a:	4691      	mov	r9, r2
 800132c:	031a      	lsls	r2, r3, #12
 800132e:	0b12      	lsrs	r2, r2, #12
 8001330:	4d18      	ldr	r5, [pc, #96]	; (8001394 <__eqdf2+0x74>)
 8001332:	b5c0      	push	{r6, r7, lr}
 8001334:	004c      	lsls	r4, r1, #1
 8001336:	030f      	lsls	r7, r1, #12
 8001338:	4692      	mov	sl, r2
 800133a:	005a      	lsls	r2, r3, #1
 800133c:	0006      	movs	r6, r0
 800133e:	4680      	mov	r8, r0
 8001340:	0b3f      	lsrs	r7, r7, #12
 8001342:	2001      	movs	r0, #1
 8001344:	0d64      	lsrs	r4, r4, #21
 8001346:	0fc9      	lsrs	r1, r1, #31
 8001348:	0d52      	lsrs	r2, r2, #21
 800134a:	0fdb      	lsrs	r3, r3, #31
 800134c:	42ac      	cmp	r4, r5
 800134e:	d00a      	beq.n	8001366 <__eqdf2+0x46>
 8001350:	42aa      	cmp	r2, r5
 8001352:	d003      	beq.n	800135c <__eqdf2+0x3c>
 8001354:	4294      	cmp	r4, r2
 8001356:	d101      	bne.n	800135c <__eqdf2+0x3c>
 8001358:	4557      	cmp	r7, sl
 800135a:	d00d      	beq.n	8001378 <__eqdf2+0x58>
 800135c:	bce0      	pop	{r5, r6, r7}
 800135e:	46ba      	mov	sl, r7
 8001360:	46b1      	mov	r9, r6
 8001362:	46a8      	mov	r8, r5
 8001364:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001366:	003d      	movs	r5, r7
 8001368:	4335      	orrs	r5, r6
 800136a:	d1f7      	bne.n	800135c <__eqdf2+0x3c>
 800136c:	42a2      	cmp	r2, r4
 800136e:	d1f5      	bne.n	800135c <__eqdf2+0x3c>
 8001370:	4652      	mov	r2, sl
 8001372:	4665      	mov	r5, ip
 8001374:	432a      	orrs	r2, r5
 8001376:	d1f1      	bne.n	800135c <__eqdf2+0x3c>
 8001378:	2001      	movs	r0, #1
 800137a:	45c8      	cmp	r8, r9
 800137c:	d1ee      	bne.n	800135c <__eqdf2+0x3c>
 800137e:	4299      	cmp	r1, r3
 8001380:	d006      	beq.n	8001390 <__eqdf2+0x70>
 8001382:	2c00      	cmp	r4, #0
 8001384:	d1ea      	bne.n	800135c <__eqdf2+0x3c>
 8001386:	433e      	orrs	r6, r7
 8001388:	0030      	movs	r0, r6
 800138a:	1e46      	subs	r6, r0, #1
 800138c:	41b0      	sbcs	r0, r6
 800138e:	e7e5      	b.n	800135c <__eqdf2+0x3c>
 8001390:	2000      	movs	r0, #0
 8001392:	e7e3      	b.n	800135c <__eqdf2+0x3c>
 8001394:	000007ff 	.word	0x000007ff

08001398 <__gedf2>:
 8001398:	b5f0      	push	{r4, r5, r6, r7, lr}
 800139a:	464e      	mov	r6, r9
 800139c:	4645      	mov	r5, r8
 800139e:	4657      	mov	r7, sl
 80013a0:	46de      	mov	lr, fp
 80013a2:	0004      	movs	r4, r0
 80013a4:	0018      	movs	r0, r3
 80013a6:	b5e0      	push	{r5, r6, r7, lr}
 80013a8:	0016      	movs	r6, r2
 80013aa:	031b      	lsls	r3, r3, #12
 80013ac:	0b1b      	lsrs	r3, r3, #12
 80013ae:	4d32      	ldr	r5, [pc, #200]	; (8001478 <__gedf2+0xe0>)
 80013b0:	030f      	lsls	r7, r1, #12
 80013b2:	004a      	lsls	r2, r1, #1
 80013b4:	4699      	mov	r9, r3
 80013b6:	0043      	lsls	r3, r0, #1
 80013b8:	46a4      	mov	ip, r4
 80013ba:	46b0      	mov	r8, r6
 80013bc:	0b3f      	lsrs	r7, r7, #12
 80013be:	0d52      	lsrs	r2, r2, #21
 80013c0:	0fc9      	lsrs	r1, r1, #31
 80013c2:	0d5b      	lsrs	r3, r3, #21
 80013c4:	0fc0      	lsrs	r0, r0, #31
 80013c6:	42aa      	cmp	r2, r5
 80013c8:	d029      	beq.n	800141e <__gedf2+0x86>
 80013ca:	42ab      	cmp	r3, r5
 80013cc:	d018      	beq.n	8001400 <__gedf2+0x68>
 80013ce:	2a00      	cmp	r2, #0
 80013d0:	d12a      	bne.n	8001428 <__gedf2+0x90>
 80013d2:	433c      	orrs	r4, r7
 80013d4:	46a3      	mov	fp, r4
 80013d6:	4265      	negs	r5, r4
 80013d8:	4165      	adcs	r5, r4
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d102      	bne.n	80013e4 <__gedf2+0x4c>
 80013de:	464c      	mov	r4, r9
 80013e0:	4326      	orrs	r6, r4
 80013e2:	d027      	beq.n	8001434 <__gedf2+0x9c>
 80013e4:	2d00      	cmp	r5, #0
 80013e6:	d115      	bne.n	8001414 <__gedf2+0x7c>
 80013e8:	4281      	cmp	r1, r0
 80013ea:	d028      	beq.n	800143e <__gedf2+0xa6>
 80013ec:	2002      	movs	r0, #2
 80013ee:	3901      	subs	r1, #1
 80013f0:	4008      	ands	r0, r1
 80013f2:	3801      	subs	r0, #1
 80013f4:	bcf0      	pop	{r4, r5, r6, r7}
 80013f6:	46bb      	mov	fp, r7
 80013f8:	46b2      	mov	sl, r6
 80013fa:	46a9      	mov	r9, r5
 80013fc:	46a0      	mov	r8, r4
 80013fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001400:	464d      	mov	r5, r9
 8001402:	432e      	orrs	r6, r5
 8001404:	d12f      	bne.n	8001466 <__gedf2+0xce>
 8001406:	2a00      	cmp	r2, #0
 8001408:	d1ee      	bne.n	80013e8 <__gedf2+0x50>
 800140a:	433c      	orrs	r4, r7
 800140c:	4265      	negs	r5, r4
 800140e:	4165      	adcs	r5, r4
 8001410:	2d00      	cmp	r5, #0
 8001412:	d0e9      	beq.n	80013e8 <__gedf2+0x50>
 8001414:	2800      	cmp	r0, #0
 8001416:	d1ed      	bne.n	80013f4 <__gedf2+0x5c>
 8001418:	2001      	movs	r0, #1
 800141a:	4240      	negs	r0, r0
 800141c:	e7ea      	b.n	80013f4 <__gedf2+0x5c>
 800141e:	003d      	movs	r5, r7
 8001420:	4325      	orrs	r5, r4
 8001422:	d120      	bne.n	8001466 <__gedf2+0xce>
 8001424:	4293      	cmp	r3, r2
 8001426:	d0eb      	beq.n	8001400 <__gedf2+0x68>
 8001428:	2b00      	cmp	r3, #0
 800142a:	d1dd      	bne.n	80013e8 <__gedf2+0x50>
 800142c:	464c      	mov	r4, r9
 800142e:	4326      	orrs	r6, r4
 8001430:	d1da      	bne.n	80013e8 <__gedf2+0x50>
 8001432:	e7db      	b.n	80013ec <__gedf2+0x54>
 8001434:	465b      	mov	r3, fp
 8001436:	2000      	movs	r0, #0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d0db      	beq.n	80013f4 <__gedf2+0x5c>
 800143c:	e7d6      	b.n	80013ec <__gedf2+0x54>
 800143e:	429a      	cmp	r2, r3
 8001440:	dc0a      	bgt.n	8001458 <__gedf2+0xc0>
 8001442:	dbe7      	blt.n	8001414 <__gedf2+0x7c>
 8001444:	454f      	cmp	r7, r9
 8001446:	d8d1      	bhi.n	80013ec <__gedf2+0x54>
 8001448:	d010      	beq.n	800146c <__gedf2+0xd4>
 800144a:	2000      	movs	r0, #0
 800144c:	454f      	cmp	r7, r9
 800144e:	d2d1      	bcs.n	80013f4 <__gedf2+0x5c>
 8001450:	2900      	cmp	r1, #0
 8001452:	d0e1      	beq.n	8001418 <__gedf2+0x80>
 8001454:	0008      	movs	r0, r1
 8001456:	e7cd      	b.n	80013f4 <__gedf2+0x5c>
 8001458:	4243      	negs	r3, r0
 800145a:	4158      	adcs	r0, r3
 800145c:	2302      	movs	r3, #2
 800145e:	4240      	negs	r0, r0
 8001460:	4018      	ands	r0, r3
 8001462:	3801      	subs	r0, #1
 8001464:	e7c6      	b.n	80013f4 <__gedf2+0x5c>
 8001466:	2002      	movs	r0, #2
 8001468:	4240      	negs	r0, r0
 800146a:	e7c3      	b.n	80013f4 <__gedf2+0x5c>
 800146c:	45c4      	cmp	ip, r8
 800146e:	d8bd      	bhi.n	80013ec <__gedf2+0x54>
 8001470:	2000      	movs	r0, #0
 8001472:	45c4      	cmp	ip, r8
 8001474:	d2be      	bcs.n	80013f4 <__gedf2+0x5c>
 8001476:	e7eb      	b.n	8001450 <__gedf2+0xb8>
 8001478:	000007ff 	.word	0x000007ff

0800147c <__ledf2>:
 800147c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800147e:	464e      	mov	r6, r9
 8001480:	4645      	mov	r5, r8
 8001482:	4657      	mov	r7, sl
 8001484:	46de      	mov	lr, fp
 8001486:	0004      	movs	r4, r0
 8001488:	0018      	movs	r0, r3
 800148a:	b5e0      	push	{r5, r6, r7, lr}
 800148c:	0016      	movs	r6, r2
 800148e:	031b      	lsls	r3, r3, #12
 8001490:	0b1b      	lsrs	r3, r3, #12
 8001492:	4d31      	ldr	r5, [pc, #196]	; (8001558 <__ledf2+0xdc>)
 8001494:	030f      	lsls	r7, r1, #12
 8001496:	004a      	lsls	r2, r1, #1
 8001498:	4699      	mov	r9, r3
 800149a:	0043      	lsls	r3, r0, #1
 800149c:	46a4      	mov	ip, r4
 800149e:	46b0      	mov	r8, r6
 80014a0:	0b3f      	lsrs	r7, r7, #12
 80014a2:	0d52      	lsrs	r2, r2, #21
 80014a4:	0fc9      	lsrs	r1, r1, #31
 80014a6:	0d5b      	lsrs	r3, r3, #21
 80014a8:	0fc0      	lsrs	r0, r0, #31
 80014aa:	42aa      	cmp	r2, r5
 80014ac:	d011      	beq.n	80014d2 <__ledf2+0x56>
 80014ae:	42ab      	cmp	r3, r5
 80014b0:	d014      	beq.n	80014dc <__ledf2+0x60>
 80014b2:	2a00      	cmp	r2, #0
 80014b4:	d12f      	bne.n	8001516 <__ledf2+0x9a>
 80014b6:	433c      	orrs	r4, r7
 80014b8:	46a3      	mov	fp, r4
 80014ba:	4265      	negs	r5, r4
 80014bc:	4165      	adcs	r5, r4
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d114      	bne.n	80014ec <__ledf2+0x70>
 80014c2:	464c      	mov	r4, r9
 80014c4:	4326      	orrs	r6, r4
 80014c6:	d111      	bne.n	80014ec <__ledf2+0x70>
 80014c8:	465b      	mov	r3, fp
 80014ca:	2000      	movs	r0, #0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d017      	beq.n	8001500 <__ledf2+0x84>
 80014d0:	e010      	b.n	80014f4 <__ledf2+0x78>
 80014d2:	003d      	movs	r5, r7
 80014d4:	4325      	orrs	r5, r4
 80014d6:	d112      	bne.n	80014fe <__ledf2+0x82>
 80014d8:	4293      	cmp	r3, r2
 80014da:	d11c      	bne.n	8001516 <__ledf2+0x9a>
 80014dc:	464d      	mov	r5, r9
 80014de:	432e      	orrs	r6, r5
 80014e0:	d10d      	bne.n	80014fe <__ledf2+0x82>
 80014e2:	2a00      	cmp	r2, #0
 80014e4:	d104      	bne.n	80014f0 <__ledf2+0x74>
 80014e6:	433c      	orrs	r4, r7
 80014e8:	4265      	negs	r5, r4
 80014ea:	4165      	adcs	r5, r4
 80014ec:	2d00      	cmp	r5, #0
 80014ee:	d10d      	bne.n	800150c <__ledf2+0x90>
 80014f0:	4281      	cmp	r1, r0
 80014f2:	d016      	beq.n	8001522 <__ledf2+0xa6>
 80014f4:	2002      	movs	r0, #2
 80014f6:	3901      	subs	r1, #1
 80014f8:	4008      	ands	r0, r1
 80014fa:	3801      	subs	r0, #1
 80014fc:	e000      	b.n	8001500 <__ledf2+0x84>
 80014fe:	2002      	movs	r0, #2
 8001500:	bcf0      	pop	{r4, r5, r6, r7}
 8001502:	46bb      	mov	fp, r7
 8001504:	46b2      	mov	sl, r6
 8001506:	46a9      	mov	r9, r5
 8001508:	46a0      	mov	r8, r4
 800150a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800150c:	2800      	cmp	r0, #0
 800150e:	d1f7      	bne.n	8001500 <__ledf2+0x84>
 8001510:	2001      	movs	r0, #1
 8001512:	4240      	negs	r0, r0
 8001514:	e7f4      	b.n	8001500 <__ledf2+0x84>
 8001516:	2b00      	cmp	r3, #0
 8001518:	d1ea      	bne.n	80014f0 <__ledf2+0x74>
 800151a:	464c      	mov	r4, r9
 800151c:	4326      	orrs	r6, r4
 800151e:	d1e7      	bne.n	80014f0 <__ledf2+0x74>
 8001520:	e7e8      	b.n	80014f4 <__ledf2+0x78>
 8001522:	429a      	cmp	r2, r3
 8001524:	dd06      	ble.n	8001534 <__ledf2+0xb8>
 8001526:	4243      	negs	r3, r0
 8001528:	4158      	adcs	r0, r3
 800152a:	2302      	movs	r3, #2
 800152c:	4240      	negs	r0, r0
 800152e:	4018      	ands	r0, r3
 8001530:	3801      	subs	r0, #1
 8001532:	e7e5      	b.n	8001500 <__ledf2+0x84>
 8001534:	429a      	cmp	r2, r3
 8001536:	dbe9      	blt.n	800150c <__ledf2+0x90>
 8001538:	454f      	cmp	r7, r9
 800153a:	d8db      	bhi.n	80014f4 <__ledf2+0x78>
 800153c:	d006      	beq.n	800154c <__ledf2+0xd0>
 800153e:	2000      	movs	r0, #0
 8001540:	454f      	cmp	r7, r9
 8001542:	d2dd      	bcs.n	8001500 <__ledf2+0x84>
 8001544:	2900      	cmp	r1, #0
 8001546:	d0e3      	beq.n	8001510 <__ledf2+0x94>
 8001548:	0008      	movs	r0, r1
 800154a:	e7d9      	b.n	8001500 <__ledf2+0x84>
 800154c:	45c4      	cmp	ip, r8
 800154e:	d8d1      	bhi.n	80014f4 <__ledf2+0x78>
 8001550:	2000      	movs	r0, #0
 8001552:	45c4      	cmp	ip, r8
 8001554:	d2d4      	bcs.n	8001500 <__ledf2+0x84>
 8001556:	e7f5      	b.n	8001544 <__ledf2+0xc8>
 8001558:	000007ff 	.word	0x000007ff

0800155c <__aeabi_dmul>:
 800155c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800155e:	4657      	mov	r7, sl
 8001560:	464e      	mov	r6, r9
 8001562:	4645      	mov	r5, r8
 8001564:	46de      	mov	lr, fp
 8001566:	b5e0      	push	{r5, r6, r7, lr}
 8001568:	4698      	mov	r8, r3
 800156a:	030c      	lsls	r4, r1, #12
 800156c:	004b      	lsls	r3, r1, #1
 800156e:	0006      	movs	r6, r0
 8001570:	4692      	mov	sl, r2
 8001572:	b087      	sub	sp, #28
 8001574:	0b24      	lsrs	r4, r4, #12
 8001576:	0d5b      	lsrs	r3, r3, #21
 8001578:	0fcf      	lsrs	r7, r1, #31
 800157a:	2b00      	cmp	r3, #0
 800157c:	d06c      	beq.n	8001658 <__aeabi_dmul+0xfc>
 800157e:	4add      	ldr	r2, [pc, #884]	; (80018f4 <__aeabi_dmul+0x398>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d100      	bne.n	8001586 <__aeabi_dmul+0x2a>
 8001584:	e086      	b.n	8001694 <__aeabi_dmul+0x138>
 8001586:	0f42      	lsrs	r2, r0, #29
 8001588:	00e4      	lsls	r4, r4, #3
 800158a:	4314      	orrs	r4, r2
 800158c:	2280      	movs	r2, #128	; 0x80
 800158e:	0412      	lsls	r2, r2, #16
 8001590:	4314      	orrs	r4, r2
 8001592:	4ad9      	ldr	r2, [pc, #868]	; (80018f8 <__aeabi_dmul+0x39c>)
 8001594:	00c5      	lsls	r5, r0, #3
 8001596:	4694      	mov	ip, r2
 8001598:	4463      	add	r3, ip
 800159a:	9300      	str	r3, [sp, #0]
 800159c:	2300      	movs	r3, #0
 800159e:	4699      	mov	r9, r3
 80015a0:	469b      	mov	fp, r3
 80015a2:	4643      	mov	r3, r8
 80015a4:	4642      	mov	r2, r8
 80015a6:	031e      	lsls	r6, r3, #12
 80015a8:	0fd2      	lsrs	r2, r2, #31
 80015aa:	005b      	lsls	r3, r3, #1
 80015ac:	4650      	mov	r0, sl
 80015ae:	4690      	mov	r8, r2
 80015b0:	0b36      	lsrs	r6, r6, #12
 80015b2:	0d5b      	lsrs	r3, r3, #21
 80015b4:	d100      	bne.n	80015b8 <__aeabi_dmul+0x5c>
 80015b6:	e078      	b.n	80016aa <__aeabi_dmul+0x14e>
 80015b8:	4ace      	ldr	r2, [pc, #824]	; (80018f4 <__aeabi_dmul+0x398>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d01d      	beq.n	80015fa <__aeabi_dmul+0x9e>
 80015be:	49ce      	ldr	r1, [pc, #824]	; (80018f8 <__aeabi_dmul+0x39c>)
 80015c0:	0f42      	lsrs	r2, r0, #29
 80015c2:	468c      	mov	ip, r1
 80015c4:	9900      	ldr	r1, [sp, #0]
 80015c6:	4463      	add	r3, ip
 80015c8:	00f6      	lsls	r6, r6, #3
 80015ca:	468c      	mov	ip, r1
 80015cc:	4316      	orrs	r6, r2
 80015ce:	2280      	movs	r2, #128	; 0x80
 80015d0:	449c      	add	ip, r3
 80015d2:	0412      	lsls	r2, r2, #16
 80015d4:	4663      	mov	r3, ip
 80015d6:	4316      	orrs	r6, r2
 80015d8:	00c2      	lsls	r2, r0, #3
 80015da:	2000      	movs	r0, #0
 80015dc:	9300      	str	r3, [sp, #0]
 80015de:	9900      	ldr	r1, [sp, #0]
 80015e0:	4643      	mov	r3, r8
 80015e2:	3101      	adds	r1, #1
 80015e4:	468c      	mov	ip, r1
 80015e6:	4649      	mov	r1, r9
 80015e8:	407b      	eors	r3, r7
 80015ea:	9301      	str	r3, [sp, #4]
 80015ec:	290f      	cmp	r1, #15
 80015ee:	d900      	bls.n	80015f2 <__aeabi_dmul+0x96>
 80015f0:	e07e      	b.n	80016f0 <__aeabi_dmul+0x194>
 80015f2:	4bc2      	ldr	r3, [pc, #776]	; (80018fc <__aeabi_dmul+0x3a0>)
 80015f4:	0089      	lsls	r1, r1, #2
 80015f6:	5859      	ldr	r1, [r3, r1]
 80015f8:	468f      	mov	pc, r1
 80015fa:	4652      	mov	r2, sl
 80015fc:	9b00      	ldr	r3, [sp, #0]
 80015fe:	4332      	orrs	r2, r6
 8001600:	d000      	beq.n	8001604 <__aeabi_dmul+0xa8>
 8001602:	e156      	b.n	80018b2 <__aeabi_dmul+0x356>
 8001604:	49bb      	ldr	r1, [pc, #748]	; (80018f4 <__aeabi_dmul+0x398>)
 8001606:	2600      	movs	r6, #0
 8001608:	468c      	mov	ip, r1
 800160a:	4463      	add	r3, ip
 800160c:	4649      	mov	r1, r9
 800160e:	9300      	str	r3, [sp, #0]
 8001610:	2302      	movs	r3, #2
 8001612:	4319      	orrs	r1, r3
 8001614:	4689      	mov	r9, r1
 8001616:	2002      	movs	r0, #2
 8001618:	e7e1      	b.n	80015de <__aeabi_dmul+0x82>
 800161a:	4643      	mov	r3, r8
 800161c:	9301      	str	r3, [sp, #4]
 800161e:	0034      	movs	r4, r6
 8001620:	0015      	movs	r5, r2
 8001622:	4683      	mov	fp, r0
 8001624:	465b      	mov	r3, fp
 8001626:	2b02      	cmp	r3, #2
 8001628:	d05e      	beq.n	80016e8 <__aeabi_dmul+0x18c>
 800162a:	2b03      	cmp	r3, #3
 800162c:	d100      	bne.n	8001630 <__aeabi_dmul+0xd4>
 800162e:	e1f3      	b.n	8001a18 <__aeabi_dmul+0x4bc>
 8001630:	2b01      	cmp	r3, #1
 8001632:	d000      	beq.n	8001636 <__aeabi_dmul+0xda>
 8001634:	e118      	b.n	8001868 <__aeabi_dmul+0x30c>
 8001636:	2200      	movs	r2, #0
 8001638:	2400      	movs	r4, #0
 800163a:	2500      	movs	r5, #0
 800163c:	9b01      	ldr	r3, [sp, #4]
 800163e:	0512      	lsls	r2, r2, #20
 8001640:	4322      	orrs	r2, r4
 8001642:	07db      	lsls	r3, r3, #31
 8001644:	431a      	orrs	r2, r3
 8001646:	0028      	movs	r0, r5
 8001648:	0011      	movs	r1, r2
 800164a:	b007      	add	sp, #28
 800164c:	bcf0      	pop	{r4, r5, r6, r7}
 800164e:	46bb      	mov	fp, r7
 8001650:	46b2      	mov	sl, r6
 8001652:	46a9      	mov	r9, r5
 8001654:	46a0      	mov	r8, r4
 8001656:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001658:	0025      	movs	r5, r4
 800165a:	4305      	orrs	r5, r0
 800165c:	d100      	bne.n	8001660 <__aeabi_dmul+0x104>
 800165e:	e141      	b.n	80018e4 <__aeabi_dmul+0x388>
 8001660:	2c00      	cmp	r4, #0
 8001662:	d100      	bne.n	8001666 <__aeabi_dmul+0x10a>
 8001664:	e1ad      	b.n	80019c2 <__aeabi_dmul+0x466>
 8001666:	0020      	movs	r0, r4
 8001668:	f000 fe68 	bl	800233c <__clzsi2>
 800166c:	0001      	movs	r1, r0
 800166e:	0002      	movs	r2, r0
 8001670:	390b      	subs	r1, #11
 8001672:	231d      	movs	r3, #29
 8001674:	0010      	movs	r0, r2
 8001676:	1a5b      	subs	r3, r3, r1
 8001678:	0031      	movs	r1, r6
 800167a:	0035      	movs	r5, r6
 800167c:	3808      	subs	r0, #8
 800167e:	4084      	lsls	r4, r0
 8001680:	40d9      	lsrs	r1, r3
 8001682:	4085      	lsls	r5, r0
 8001684:	430c      	orrs	r4, r1
 8001686:	489e      	ldr	r0, [pc, #632]	; (8001900 <__aeabi_dmul+0x3a4>)
 8001688:	1a83      	subs	r3, r0, r2
 800168a:	9300      	str	r3, [sp, #0]
 800168c:	2300      	movs	r3, #0
 800168e:	4699      	mov	r9, r3
 8001690:	469b      	mov	fp, r3
 8001692:	e786      	b.n	80015a2 <__aeabi_dmul+0x46>
 8001694:	0005      	movs	r5, r0
 8001696:	4325      	orrs	r5, r4
 8001698:	d000      	beq.n	800169c <__aeabi_dmul+0x140>
 800169a:	e11c      	b.n	80018d6 <__aeabi_dmul+0x37a>
 800169c:	2208      	movs	r2, #8
 800169e:	9300      	str	r3, [sp, #0]
 80016a0:	2302      	movs	r3, #2
 80016a2:	2400      	movs	r4, #0
 80016a4:	4691      	mov	r9, r2
 80016a6:	469b      	mov	fp, r3
 80016a8:	e77b      	b.n	80015a2 <__aeabi_dmul+0x46>
 80016aa:	4652      	mov	r2, sl
 80016ac:	4332      	orrs	r2, r6
 80016ae:	d100      	bne.n	80016b2 <__aeabi_dmul+0x156>
 80016b0:	e10a      	b.n	80018c8 <__aeabi_dmul+0x36c>
 80016b2:	2e00      	cmp	r6, #0
 80016b4:	d100      	bne.n	80016b8 <__aeabi_dmul+0x15c>
 80016b6:	e176      	b.n	80019a6 <__aeabi_dmul+0x44a>
 80016b8:	0030      	movs	r0, r6
 80016ba:	f000 fe3f 	bl	800233c <__clzsi2>
 80016be:	0002      	movs	r2, r0
 80016c0:	3a0b      	subs	r2, #11
 80016c2:	231d      	movs	r3, #29
 80016c4:	0001      	movs	r1, r0
 80016c6:	1a9b      	subs	r3, r3, r2
 80016c8:	4652      	mov	r2, sl
 80016ca:	3908      	subs	r1, #8
 80016cc:	40da      	lsrs	r2, r3
 80016ce:	408e      	lsls	r6, r1
 80016d0:	4316      	orrs	r6, r2
 80016d2:	4652      	mov	r2, sl
 80016d4:	408a      	lsls	r2, r1
 80016d6:	9b00      	ldr	r3, [sp, #0]
 80016d8:	4989      	ldr	r1, [pc, #548]	; (8001900 <__aeabi_dmul+0x3a4>)
 80016da:	1a18      	subs	r0, r3, r0
 80016dc:	0003      	movs	r3, r0
 80016de:	468c      	mov	ip, r1
 80016e0:	4463      	add	r3, ip
 80016e2:	2000      	movs	r0, #0
 80016e4:	9300      	str	r3, [sp, #0]
 80016e6:	e77a      	b.n	80015de <__aeabi_dmul+0x82>
 80016e8:	2400      	movs	r4, #0
 80016ea:	2500      	movs	r5, #0
 80016ec:	4a81      	ldr	r2, [pc, #516]	; (80018f4 <__aeabi_dmul+0x398>)
 80016ee:	e7a5      	b.n	800163c <__aeabi_dmul+0xe0>
 80016f0:	0c2f      	lsrs	r7, r5, #16
 80016f2:	042d      	lsls	r5, r5, #16
 80016f4:	0c2d      	lsrs	r5, r5, #16
 80016f6:	002b      	movs	r3, r5
 80016f8:	0c11      	lsrs	r1, r2, #16
 80016fa:	0412      	lsls	r2, r2, #16
 80016fc:	0c12      	lsrs	r2, r2, #16
 80016fe:	4353      	muls	r3, r2
 8001700:	4698      	mov	r8, r3
 8001702:	0013      	movs	r3, r2
 8001704:	0028      	movs	r0, r5
 8001706:	437b      	muls	r3, r7
 8001708:	4699      	mov	r9, r3
 800170a:	4348      	muls	r0, r1
 800170c:	4448      	add	r0, r9
 800170e:	4683      	mov	fp, r0
 8001710:	4640      	mov	r0, r8
 8001712:	000b      	movs	r3, r1
 8001714:	0c00      	lsrs	r0, r0, #16
 8001716:	4682      	mov	sl, r0
 8001718:	4658      	mov	r0, fp
 800171a:	437b      	muls	r3, r7
 800171c:	4450      	add	r0, sl
 800171e:	9302      	str	r3, [sp, #8]
 8001720:	4581      	cmp	r9, r0
 8001722:	d906      	bls.n	8001732 <__aeabi_dmul+0x1d6>
 8001724:	469a      	mov	sl, r3
 8001726:	2380      	movs	r3, #128	; 0x80
 8001728:	025b      	lsls	r3, r3, #9
 800172a:	4699      	mov	r9, r3
 800172c:	44ca      	add	sl, r9
 800172e:	4653      	mov	r3, sl
 8001730:	9302      	str	r3, [sp, #8]
 8001732:	0c03      	lsrs	r3, r0, #16
 8001734:	469b      	mov	fp, r3
 8001736:	4643      	mov	r3, r8
 8001738:	041b      	lsls	r3, r3, #16
 800173a:	0400      	lsls	r0, r0, #16
 800173c:	0c1b      	lsrs	r3, r3, #16
 800173e:	4698      	mov	r8, r3
 8001740:	0003      	movs	r3, r0
 8001742:	4443      	add	r3, r8
 8001744:	9304      	str	r3, [sp, #16]
 8001746:	0c33      	lsrs	r3, r6, #16
 8001748:	4699      	mov	r9, r3
 800174a:	002b      	movs	r3, r5
 800174c:	0436      	lsls	r6, r6, #16
 800174e:	0c36      	lsrs	r6, r6, #16
 8001750:	4373      	muls	r3, r6
 8001752:	4698      	mov	r8, r3
 8001754:	0033      	movs	r3, r6
 8001756:	437b      	muls	r3, r7
 8001758:	469a      	mov	sl, r3
 800175a:	464b      	mov	r3, r9
 800175c:	435d      	muls	r5, r3
 800175e:	435f      	muls	r7, r3
 8001760:	4643      	mov	r3, r8
 8001762:	4455      	add	r5, sl
 8001764:	0c18      	lsrs	r0, r3, #16
 8001766:	1940      	adds	r0, r0, r5
 8001768:	4582      	cmp	sl, r0
 800176a:	d903      	bls.n	8001774 <__aeabi_dmul+0x218>
 800176c:	2380      	movs	r3, #128	; 0x80
 800176e:	025b      	lsls	r3, r3, #9
 8001770:	469a      	mov	sl, r3
 8001772:	4457      	add	r7, sl
 8001774:	0c05      	lsrs	r5, r0, #16
 8001776:	19eb      	adds	r3, r5, r7
 8001778:	9305      	str	r3, [sp, #20]
 800177a:	4643      	mov	r3, r8
 800177c:	041d      	lsls	r5, r3, #16
 800177e:	0c2d      	lsrs	r5, r5, #16
 8001780:	0400      	lsls	r0, r0, #16
 8001782:	1940      	adds	r0, r0, r5
 8001784:	0c25      	lsrs	r5, r4, #16
 8001786:	0424      	lsls	r4, r4, #16
 8001788:	0c24      	lsrs	r4, r4, #16
 800178a:	0027      	movs	r7, r4
 800178c:	4357      	muls	r7, r2
 800178e:	436a      	muls	r2, r5
 8001790:	4690      	mov	r8, r2
 8001792:	002a      	movs	r2, r5
 8001794:	0c3b      	lsrs	r3, r7, #16
 8001796:	469a      	mov	sl, r3
 8001798:	434a      	muls	r2, r1
 800179a:	4361      	muls	r1, r4
 800179c:	4441      	add	r1, r8
 800179e:	4451      	add	r1, sl
 80017a0:	4483      	add	fp, r0
 80017a2:	4588      	cmp	r8, r1
 80017a4:	d903      	bls.n	80017ae <__aeabi_dmul+0x252>
 80017a6:	2380      	movs	r3, #128	; 0x80
 80017a8:	025b      	lsls	r3, r3, #9
 80017aa:	4698      	mov	r8, r3
 80017ac:	4442      	add	r2, r8
 80017ae:	043f      	lsls	r7, r7, #16
 80017b0:	0c0b      	lsrs	r3, r1, #16
 80017b2:	0c3f      	lsrs	r7, r7, #16
 80017b4:	0409      	lsls	r1, r1, #16
 80017b6:	19c9      	adds	r1, r1, r7
 80017b8:	0027      	movs	r7, r4
 80017ba:	4698      	mov	r8, r3
 80017bc:	464b      	mov	r3, r9
 80017be:	4377      	muls	r7, r6
 80017c0:	435c      	muls	r4, r3
 80017c2:	436e      	muls	r6, r5
 80017c4:	435d      	muls	r5, r3
 80017c6:	0c3b      	lsrs	r3, r7, #16
 80017c8:	4699      	mov	r9, r3
 80017ca:	19a4      	adds	r4, r4, r6
 80017cc:	444c      	add	r4, r9
 80017ce:	4442      	add	r2, r8
 80017d0:	9503      	str	r5, [sp, #12]
 80017d2:	42a6      	cmp	r6, r4
 80017d4:	d904      	bls.n	80017e0 <__aeabi_dmul+0x284>
 80017d6:	2380      	movs	r3, #128	; 0x80
 80017d8:	025b      	lsls	r3, r3, #9
 80017da:	4698      	mov	r8, r3
 80017dc:	4445      	add	r5, r8
 80017de:	9503      	str	r5, [sp, #12]
 80017e0:	9b02      	ldr	r3, [sp, #8]
 80017e2:	043f      	lsls	r7, r7, #16
 80017e4:	445b      	add	r3, fp
 80017e6:	001e      	movs	r6, r3
 80017e8:	4283      	cmp	r3, r0
 80017ea:	4180      	sbcs	r0, r0
 80017ec:	0423      	lsls	r3, r4, #16
 80017ee:	4698      	mov	r8, r3
 80017f0:	9b05      	ldr	r3, [sp, #20]
 80017f2:	0c3f      	lsrs	r7, r7, #16
 80017f4:	4447      	add	r7, r8
 80017f6:	4698      	mov	r8, r3
 80017f8:	1876      	adds	r6, r6, r1
 80017fa:	428e      	cmp	r6, r1
 80017fc:	4189      	sbcs	r1, r1
 80017fe:	4447      	add	r7, r8
 8001800:	4240      	negs	r0, r0
 8001802:	183d      	adds	r5, r7, r0
 8001804:	46a8      	mov	r8, r5
 8001806:	4693      	mov	fp, r2
 8001808:	4249      	negs	r1, r1
 800180a:	468a      	mov	sl, r1
 800180c:	44c3      	add	fp, r8
 800180e:	429f      	cmp	r7, r3
 8001810:	41bf      	sbcs	r7, r7
 8001812:	4580      	cmp	r8, r0
 8001814:	4180      	sbcs	r0, r0
 8001816:	9b03      	ldr	r3, [sp, #12]
 8001818:	44da      	add	sl, fp
 800181a:	4698      	mov	r8, r3
 800181c:	4653      	mov	r3, sl
 800181e:	4240      	negs	r0, r0
 8001820:	427f      	negs	r7, r7
 8001822:	4307      	orrs	r7, r0
 8001824:	0c24      	lsrs	r4, r4, #16
 8001826:	4593      	cmp	fp, r2
 8001828:	4192      	sbcs	r2, r2
 800182a:	458a      	cmp	sl, r1
 800182c:	4189      	sbcs	r1, r1
 800182e:	193f      	adds	r7, r7, r4
 8001830:	0ddc      	lsrs	r4, r3, #23
 8001832:	9b04      	ldr	r3, [sp, #16]
 8001834:	0275      	lsls	r5, r6, #9
 8001836:	431d      	orrs	r5, r3
 8001838:	1e68      	subs	r0, r5, #1
 800183a:	4185      	sbcs	r5, r0
 800183c:	4653      	mov	r3, sl
 800183e:	4252      	negs	r2, r2
 8001840:	4249      	negs	r1, r1
 8001842:	430a      	orrs	r2, r1
 8001844:	18bf      	adds	r7, r7, r2
 8001846:	4447      	add	r7, r8
 8001848:	0df6      	lsrs	r6, r6, #23
 800184a:	027f      	lsls	r7, r7, #9
 800184c:	4335      	orrs	r5, r6
 800184e:	025a      	lsls	r2, r3, #9
 8001850:	433c      	orrs	r4, r7
 8001852:	4315      	orrs	r5, r2
 8001854:	01fb      	lsls	r3, r7, #7
 8001856:	d400      	bmi.n	800185a <__aeabi_dmul+0x2fe>
 8001858:	e0c1      	b.n	80019de <__aeabi_dmul+0x482>
 800185a:	2101      	movs	r1, #1
 800185c:	086a      	lsrs	r2, r5, #1
 800185e:	400d      	ands	r5, r1
 8001860:	4315      	orrs	r5, r2
 8001862:	07e2      	lsls	r2, r4, #31
 8001864:	4315      	orrs	r5, r2
 8001866:	0864      	lsrs	r4, r4, #1
 8001868:	4926      	ldr	r1, [pc, #152]	; (8001904 <__aeabi_dmul+0x3a8>)
 800186a:	4461      	add	r1, ip
 800186c:	2900      	cmp	r1, #0
 800186e:	dd56      	ble.n	800191e <__aeabi_dmul+0x3c2>
 8001870:	076b      	lsls	r3, r5, #29
 8001872:	d009      	beq.n	8001888 <__aeabi_dmul+0x32c>
 8001874:	220f      	movs	r2, #15
 8001876:	402a      	ands	r2, r5
 8001878:	2a04      	cmp	r2, #4
 800187a:	d005      	beq.n	8001888 <__aeabi_dmul+0x32c>
 800187c:	1d2a      	adds	r2, r5, #4
 800187e:	42aa      	cmp	r2, r5
 8001880:	41ad      	sbcs	r5, r5
 8001882:	426d      	negs	r5, r5
 8001884:	1964      	adds	r4, r4, r5
 8001886:	0015      	movs	r5, r2
 8001888:	01e3      	lsls	r3, r4, #7
 800188a:	d504      	bpl.n	8001896 <__aeabi_dmul+0x33a>
 800188c:	2180      	movs	r1, #128	; 0x80
 800188e:	4a1e      	ldr	r2, [pc, #120]	; (8001908 <__aeabi_dmul+0x3ac>)
 8001890:	00c9      	lsls	r1, r1, #3
 8001892:	4014      	ands	r4, r2
 8001894:	4461      	add	r1, ip
 8001896:	4a1d      	ldr	r2, [pc, #116]	; (800190c <__aeabi_dmul+0x3b0>)
 8001898:	4291      	cmp	r1, r2
 800189a:	dd00      	ble.n	800189e <__aeabi_dmul+0x342>
 800189c:	e724      	b.n	80016e8 <__aeabi_dmul+0x18c>
 800189e:	0762      	lsls	r2, r4, #29
 80018a0:	08ed      	lsrs	r5, r5, #3
 80018a2:	0264      	lsls	r4, r4, #9
 80018a4:	0549      	lsls	r1, r1, #21
 80018a6:	4315      	orrs	r5, r2
 80018a8:	0b24      	lsrs	r4, r4, #12
 80018aa:	0d4a      	lsrs	r2, r1, #21
 80018ac:	e6c6      	b.n	800163c <__aeabi_dmul+0xe0>
 80018ae:	9701      	str	r7, [sp, #4]
 80018b0:	e6b8      	b.n	8001624 <__aeabi_dmul+0xc8>
 80018b2:	4a10      	ldr	r2, [pc, #64]	; (80018f4 <__aeabi_dmul+0x398>)
 80018b4:	2003      	movs	r0, #3
 80018b6:	4694      	mov	ip, r2
 80018b8:	4463      	add	r3, ip
 80018ba:	464a      	mov	r2, r9
 80018bc:	9300      	str	r3, [sp, #0]
 80018be:	2303      	movs	r3, #3
 80018c0:	431a      	orrs	r2, r3
 80018c2:	4691      	mov	r9, r2
 80018c4:	4652      	mov	r2, sl
 80018c6:	e68a      	b.n	80015de <__aeabi_dmul+0x82>
 80018c8:	4649      	mov	r1, r9
 80018ca:	2301      	movs	r3, #1
 80018cc:	4319      	orrs	r1, r3
 80018ce:	4689      	mov	r9, r1
 80018d0:	2600      	movs	r6, #0
 80018d2:	2001      	movs	r0, #1
 80018d4:	e683      	b.n	80015de <__aeabi_dmul+0x82>
 80018d6:	220c      	movs	r2, #12
 80018d8:	9300      	str	r3, [sp, #0]
 80018da:	2303      	movs	r3, #3
 80018dc:	0005      	movs	r5, r0
 80018de:	4691      	mov	r9, r2
 80018e0:	469b      	mov	fp, r3
 80018e2:	e65e      	b.n	80015a2 <__aeabi_dmul+0x46>
 80018e4:	2304      	movs	r3, #4
 80018e6:	4699      	mov	r9, r3
 80018e8:	2300      	movs	r3, #0
 80018ea:	9300      	str	r3, [sp, #0]
 80018ec:	3301      	adds	r3, #1
 80018ee:	2400      	movs	r4, #0
 80018f0:	469b      	mov	fp, r3
 80018f2:	e656      	b.n	80015a2 <__aeabi_dmul+0x46>
 80018f4:	000007ff 	.word	0x000007ff
 80018f8:	fffffc01 	.word	0xfffffc01
 80018fc:	08007530 	.word	0x08007530
 8001900:	fffffc0d 	.word	0xfffffc0d
 8001904:	000003ff 	.word	0x000003ff
 8001908:	feffffff 	.word	0xfeffffff
 800190c:	000007fe 	.word	0x000007fe
 8001910:	2300      	movs	r3, #0
 8001912:	2480      	movs	r4, #128	; 0x80
 8001914:	2500      	movs	r5, #0
 8001916:	4a44      	ldr	r2, [pc, #272]	; (8001a28 <__aeabi_dmul+0x4cc>)
 8001918:	9301      	str	r3, [sp, #4]
 800191a:	0324      	lsls	r4, r4, #12
 800191c:	e68e      	b.n	800163c <__aeabi_dmul+0xe0>
 800191e:	2001      	movs	r0, #1
 8001920:	1a40      	subs	r0, r0, r1
 8001922:	2838      	cmp	r0, #56	; 0x38
 8001924:	dd00      	ble.n	8001928 <__aeabi_dmul+0x3cc>
 8001926:	e686      	b.n	8001636 <__aeabi_dmul+0xda>
 8001928:	281f      	cmp	r0, #31
 800192a:	dd5b      	ble.n	80019e4 <__aeabi_dmul+0x488>
 800192c:	221f      	movs	r2, #31
 800192e:	0023      	movs	r3, r4
 8001930:	4252      	negs	r2, r2
 8001932:	1a51      	subs	r1, r2, r1
 8001934:	40cb      	lsrs	r3, r1
 8001936:	0019      	movs	r1, r3
 8001938:	2820      	cmp	r0, #32
 800193a:	d003      	beq.n	8001944 <__aeabi_dmul+0x3e8>
 800193c:	4a3b      	ldr	r2, [pc, #236]	; (8001a2c <__aeabi_dmul+0x4d0>)
 800193e:	4462      	add	r2, ip
 8001940:	4094      	lsls	r4, r2
 8001942:	4325      	orrs	r5, r4
 8001944:	1e6a      	subs	r2, r5, #1
 8001946:	4195      	sbcs	r5, r2
 8001948:	002a      	movs	r2, r5
 800194a:	430a      	orrs	r2, r1
 800194c:	2107      	movs	r1, #7
 800194e:	000d      	movs	r5, r1
 8001950:	2400      	movs	r4, #0
 8001952:	4015      	ands	r5, r2
 8001954:	4211      	tst	r1, r2
 8001956:	d05b      	beq.n	8001a10 <__aeabi_dmul+0x4b4>
 8001958:	210f      	movs	r1, #15
 800195a:	2400      	movs	r4, #0
 800195c:	4011      	ands	r1, r2
 800195e:	2904      	cmp	r1, #4
 8001960:	d053      	beq.n	8001a0a <__aeabi_dmul+0x4ae>
 8001962:	1d11      	adds	r1, r2, #4
 8001964:	4291      	cmp	r1, r2
 8001966:	4192      	sbcs	r2, r2
 8001968:	4252      	negs	r2, r2
 800196a:	18a4      	adds	r4, r4, r2
 800196c:	000a      	movs	r2, r1
 800196e:	0223      	lsls	r3, r4, #8
 8001970:	d54b      	bpl.n	8001a0a <__aeabi_dmul+0x4ae>
 8001972:	2201      	movs	r2, #1
 8001974:	2400      	movs	r4, #0
 8001976:	2500      	movs	r5, #0
 8001978:	e660      	b.n	800163c <__aeabi_dmul+0xe0>
 800197a:	2380      	movs	r3, #128	; 0x80
 800197c:	031b      	lsls	r3, r3, #12
 800197e:	421c      	tst	r4, r3
 8001980:	d009      	beq.n	8001996 <__aeabi_dmul+0x43a>
 8001982:	421e      	tst	r6, r3
 8001984:	d107      	bne.n	8001996 <__aeabi_dmul+0x43a>
 8001986:	4333      	orrs	r3, r6
 8001988:	031c      	lsls	r4, r3, #12
 800198a:	4643      	mov	r3, r8
 800198c:	0015      	movs	r5, r2
 800198e:	0b24      	lsrs	r4, r4, #12
 8001990:	4a25      	ldr	r2, [pc, #148]	; (8001a28 <__aeabi_dmul+0x4cc>)
 8001992:	9301      	str	r3, [sp, #4]
 8001994:	e652      	b.n	800163c <__aeabi_dmul+0xe0>
 8001996:	2280      	movs	r2, #128	; 0x80
 8001998:	0312      	lsls	r2, r2, #12
 800199a:	4314      	orrs	r4, r2
 800199c:	0324      	lsls	r4, r4, #12
 800199e:	4a22      	ldr	r2, [pc, #136]	; (8001a28 <__aeabi_dmul+0x4cc>)
 80019a0:	0b24      	lsrs	r4, r4, #12
 80019a2:	9701      	str	r7, [sp, #4]
 80019a4:	e64a      	b.n	800163c <__aeabi_dmul+0xe0>
 80019a6:	f000 fcc9 	bl	800233c <__clzsi2>
 80019aa:	0003      	movs	r3, r0
 80019ac:	001a      	movs	r2, r3
 80019ae:	3215      	adds	r2, #21
 80019b0:	3020      	adds	r0, #32
 80019b2:	2a1c      	cmp	r2, #28
 80019b4:	dc00      	bgt.n	80019b8 <__aeabi_dmul+0x45c>
 80019b6:	e684      	b.n	80016c2 <__aeabi_dmul+0x166>
 80019b8:	4656      	mov	r6, sl
 80019ba:	3b08      	subs	r3, #8
 80019bc:	2200      	movs	r2, #0
 80019be:	409e      	lsls	r6, r3
 80019c0:	e689      	b.n	80016d6 <__aeabi_dmul+0x17a>
 80019c2:	f000 fcbb 	bl	800233c <__clzsi2>
 80019c6:	0001      	movs	r1, r0
 80019c8:	0002      	movs	r2, r0
 80019ca:	3115      	adds	r1, #21
 80019cc:	3220      	adds	r2, #32
 80019ce:	291c      	cmp	r1, #28
 80019d0:	dc00      	bgt.n	80019d4 <__aeabi_dmul+0x478>
 80019d2:	e64e      	b.n	8001672 <__aeabi_dmul+0x116>
 80019d4:	0034      	movs	r4, r6
 80019d6:	3808      	subs	r0, #8
 80019d8:	2500      	movs	r5, #0
 80019da:	4084      	lsls	r4, r0
 80019dc:	e653      	b.n	8001686 <__aeabi_dmul+0x12a>
 80019de:	9b00      	ldr	r3, [sp, #0]
 80019e0:	469c      	mov	ip, r3
 80019e2:	e741      	b.n	8001868 <__aeabi_dmul+0x30c>
 80019e4:	4912      	ldr	r1, [pc, #72]	; (8001a30 <__aeabi_dmul+0x4d4>)
 80019e6:	0022      	movs	r2, r4
 80019e8:	4461      	add	r1, ip
 80019ea:	002e      	movs	r6, r5
 80019ec:	408d      	lsls	r5, r1
 80019ee:	408a      	lsls	r2, r1
 80019f0:	40c6      	lsrs	r6, r0
 80019f2:	1e69      	subs	r1, r5, #1
 80019f4:	418d      	sbcs	r5, r1
 80019f6:	4332      	orrs	r2, r6
 80019f8:	432a      	orrs	r2, r5
 80019fa:	40c4      	lsrs	r4, r0
 80019fc:	0753      	lsls	r3, r2, #29
 80019fe:	d0b6      	beq.n	800196e <__aeabi_dmul+0x412>
 8001a00:	210f      	movs	r1, #15
 8001a02:	4011      	ands	r1, r2
 8001a04:	2904      	cmp	r1, #4
 8001a06:	d1ac      	bne.n	8001962 <__aeabi_dmul+0x406>
 8001a08:	e7b1      	b.n	800196e <__aeabi_dmul+0x412>
 8001a0a:	0765      	lsls	r5, r4, #29
 8001a0c:	0264      	lsls	r4, r4, #9
 8001a0e:	0b24      	lsrs	r4, r4, #12
 8001a10:	08d2      	lsrs	r2, r2, #3
 8001a12:	4315      	orrs	r5, r2
 8001a14:	2200      	movs	r2, #0
 8001a16:	e611      	b.n	800163c <__aeabi_dmul+0xe0>
 8001a18:	2280      	movs	r2, #128	; 0x80
 8001a1a:	0312      	lsls	r2, r2, #12
 8001a1c:	4314      	orrs	r4, r2
 8001a1e:	0324      	lsls	r4, r4, #12
 8001a20:	4a01      	ldr	r2, [pc, #4]	; (8001a28 <__aeabi_dmul+0x4cc>)
 8001a22:	0b24      	lsrs	r4, r4, #12
 8001a24:	e60a      	b.n	800163c <__aeabi_dmul+0xe0>
 8001a26:	46c0      	nop			; (mov r8, r8)
 8001a28:	000007ff 	.word	0x000007ff
 8001a2c:	0000043e 	.word	0x0000043e
 8001a30:	0000041e 	.word	0x0000041e

08001a34 <__aeabi_dsub>:
 8001a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a36:	4657      	mov	r7, sl
 8001a38:	464e      	mov	r6, r9
 8001a3a:	4645      	mov	r5, r8
 8001a3c:	46de      	mov	lr, fp
 8001a3e:	0004      	movs	r4, r0
 8001a40:	b5e0      	push	{r5, r6, r7, lr}
 8001a42:	001f      	movs	r7, r3
 8001a44:	0010      	movs	r0, r2
 8001a46:	030b      	lsls	r3, r1, #12
 8001a48:	0f62      	lsrs	r2, r4, #29
 8001a4a:	004e      	lsls	r6, r1, #1
 8001a4c:	0fcd      	lsrs	r5, r1, #31
 8001a4e:	0a5b      	lsrs	r3, r3, #9
 8001a50:	0339      	lsls	r1, r7, #12
 8001a52:	4313      	orrs	r3, r2
 8001a54:	0a49      	lsrs	r1, r1, #9
 8001a56:	00e2      	lsls	r2, r4, #3
 8001a58:	0f44      	lsrs	r4, r0, #29
 8001a5a:	4321      	orrs	r1, r4
 8001a5c:	4cc2      	ldr	r4, [pc, #776]	; (8001d68 <__aeabi_dsub+0x334>)
 8001a5e:	4691      	mov	r9, r2
 8001a60:	4692      	mov	sl, r2
 8001a62:	00c0      	lsls	r0, r0, #3
 8001a64:	007a      	lsls	r2, r7, #1
 8001a66:	4680      	mov	r8, r0
 8001a68:	0d76      	lsrs	r6, r6, #21
 8001a6a:	0d52      	lsrs	r2, r2, #21
 8001a6c:	0fff      	lsrs	r7, r7, #31
 8001a6e:	42a2      	cmp	r2, r4
 8001a70:	d100      	bne.n	8001a74 <__aeabi_dsub+0x40>
 8001a72:	e0b4      	b.n	8001bde <__aeabi_dsub+0x1aa>
 8001a74:	2401      	movs	r4, #1
 8001a76:	4067      	eors	r7, r4
 8001a78:	46bb      	mov	fp, r7
 8001a7a:	42bd      	cmp	r5, r7
 8001a7c:	d100      	bne.n	8001a80 <__aeabi_dsub+0x4c>
 8001a7e:	e088      	b.n	8001b92 <__aeabi_dsub+0x15e>
 8001a80:	1ab4      	subs	r4, r6, r2
 8001a82:	46a4      	mov	ip, r4
 8001a84:	2c00      	cmp	r4, #0
 8001a86:	dc00      	bgt.n	8001a8a <__aeabi_dsub+0x56>
 8001a88:	e0b2      	b.n	8001bf0 <__aeabi_dsub+0x1bc>
 8001a8a:	2a00      	cmp	r2, #0
 8001a8c:	d100      	bne.n	8001a90 <__aeabi_dsub+0x5c>
 8001a8e:	e0c5      	b.n	8001c1c <__aeabi_dsub+0x1e8>
 8001a90:	4ab5      	ldr	r2, [pc, #724]	; (8001d68 <__aeabi_dsub+0x334>)
 8001a92:	4296      	cmp	r6, r2
 8001a94:	d100      	bne.n	8001a98 <__aeabi_dsub+0x64>
 8001a96:	e28b      	b.n	8001fb0 <__aeabi_dsub+0x57c>
 8001a98:	2280      	movs	r2, #128	; 0x80
 8001a9a:	0412      	lsls	r2, r2, #16
 8001a9c:	4311      	orrs	r1, r2
 8001a9e:	4662      	mov	r2, ip
 8001aa0:	2a38      	cmp	r2, #56	; 0x38
 8001aa2:	dd00      	ble.n	8001aa6 <__aeabi_dsub+0x72>
 8001aa4:	e1a1      	b.n	8001dea <__aeabi_dsub+0x3b6>
 8001aa6:	2a1f      	cmp	r2, #31
 8001aa8:	dd00      	ble.n	8001aac <__aeabi_dsub+0x78>
 8001aaa:	e216      	b.n	8001eda <__aeabi_dsub+0x4a6>
 8001aac:	2720      	movs	r7, #32
 8001aae:	000c      	movs	r4, r1
 8001ab0:	1abf      	subs	r7, r7, r2
 8001ab2:	40bc      	lsls	r4, r7
 8001ab4:	0002      	movs	r2, r0
 8001ab6:	46a0      	mov	r8, r4
 8001ab8:	4664      	mov	r4, ip
 8001aba:	40b8      	lsls	r0, r7
 8001abc:	40e2      	lsrs	r2, r4
 8001abe:	4644      	mov	r4, r8
 8001ac0:	4314      	orrs	r4, r2
 8001ac2:	0002      	movs	r2, r0
 8001ac4:	1e50      	subs	r0, r2, #1
 8001ac6:	4182      	sbcs	r2, r0
 8001ac8:	4660      	mov	r0, ip
 8001aca:	40c1      	lsrs	r1, r0
 8001acc:	4322      	orrs	r2, r4
 8001ace:	1a5b      	subs	r3, r3, r1
 8001ad0:	4649      	mov	r1, r9
 8001ad2:	1a8c      	subs	r4, r1, r2
 8001ad4:	45a1      	cmp	r9, r4
 8001ad6:	4192      	sbcs	r2, r2
 8001ad8:	4252      	negs	r2, r2
 8001ada:	1a9b      	subs	r3, r3, r2
 8001adc:	4698      	mov	r8, r3
 8001ade:	4643      	mov	r3, r8
 8001ae0:	021b      	lsls	r3, r3, #8
 8001ae2:	d400      	bmi.n	8001ae6 <__aeabi_dsub+0xb2>
 8001ae4:	e117      	b.n	8001d16 <__aeabi_dsub+0x2e2>
 8001ae6:	4643      	mov	r3, r8
 8001ae8:	025b      	lsls	r3, r3, #9
 8001aea:	0a5b      	lsrs	r3, r3, #9
 8001aec:	4698      	mov	r8, r3
 8001aee:	4643      	mov	r3, r8
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d100      	bne.n	8001af6 <__aeabi_dsub+0xc2>
 8001af4:	e16c      	b.n	8001dd0 <__aeabi_dsub+0x39c>
 8001af6:	4640      	mov	r0, r8
 8001af8:	f000 fc20 	bl	800233c <__clzsi2>
 8001afc:	0002      	movs	r2, r0
 8001afe:	3a08      	subs	r2, #8
 8001b00:	2120      	movs	r1, #32
 8001b02:	0020      	movs	r0, r4
 8001b04:	4643      	mov	r3, r8
 8001b06:	1a89      	subs	r1, r1, r2
 8001b08:	4093      	lsls	r3, r2
 8001b0a:	40c8      	lsrs	r0, r1
 8001b0c:	4094      	lsls	r4, r2
 8001b0e:	4303      	orrs	r3, r0
 8001b10:	4296      	cmp	r6, r2
 8001b12:	dd00      	ble.n	8001b16 <__aeabi_dsub+0xe2>
 8001b14:	e157      	b.n	8001dc6 <__aeabi_dsub+0x392>
 8001b16:	1b96      	subs	r6, r2, r6
 8001b18:	1c71      	adds	r1, r6, #1
 8001b1a:	291f      	cmp	r1, #31
 8001b1c:	dd00      	ble.n	8001b20 <__aeabi_dsub+0xec>
 8001b1e:	e1cb      	b.n	8001eb8 <__aeabi_dsub+0x484>
 8001b20:	2220      	movs	r2, #32
 8001b22:	0018      	movs	r0, r3
 8001b24:	0026      	movs	r6, r4
 8001b26:	1a52      	subs	r2, r2, r1
 8001b28:	4094      	lsls	r4, r2
 8001b2a:	4090      	lsls	r0, r2
 8001b2c:	40ce      	lsrs	r6, r1
 8001b2e:	40cb      	lsrs	r3, r1
 8001b30:	1e62      	subs	r2, r4, #1
 8001b32:	4194      	sbcs	r4, r2
 8001b34:	4330      	orrs	r0, r6
 8001b36:	4698      	mov	r8, r3
 8001b38:	2600      	movs	r6, #0
 8001b3a:	4304      	orrs	r4, r0
 8001b3c:	0763      	lsls	r3, r4, #29
 8001b3e:	d009      	beq.n	8001b54 <__aeabi_dsub+0x120>
 8001b40:	230f      	movs	r3, #15
 8001b42:	4023      	ands	r3, r4
 8001b44:	2b04      	cmp	r3, #4
 8001b46:	d005      	beq.n	8001b54 <__aeabi_dsub+0x120>
 8001b48:	1d23      	adds	r3, r4, #4
 8001b4a:	42a3      	cmp	r3, r4
 8001b4c:	41a4      	sbcs	r4, r4
 8001b4e:	4264      	negs	r4, r4
 8001b50:	44a0      	add	r8, r4
 8001b52:	001c      	movs	r4, r3
 8001b54:	4643      	mov	r3, r8
 8001b56:	021b      	lsls	r3, r3, #8
 8001b58:	d400      	bmi.n	8001b5c <__aeabi_dsub+0x128>
 8001b5a:	e0df      	b.n	8001d1c <__aeabi_dsub+0x2e8>
 8001b5c:	4b82      	ldr	r3, [pc, #520]	; (8001d68 <__aeabi_dsub+0x334>)
 8001b5e:	3601      	adds	r6, #1
 8001b60:	429e      	cmp	r6, r3
 8001b62:	d100      	bne.n	8001b66 <__aeabi_dsub+0x132>
 8001b64:	e0fb      	b.n	8001d5e <__aeabi_dsub+0x32a>
 8001b66:	4642      	mov	r2, r8
 8001b68:	4b80      	ldr	r3, [pc, #512]	; (8001d6c <__aeabi_dsub+0x338>)
 8001b6a:	08e4      	lsrs	r4, r4, #3
 8001b6c:	401a      	ands	r2, r3
 8001b6e:	0013      	movs	r3, r2
 8001b70:	0571      	lsls	r1, r6, #21
 8001b72:	0752      	lsls	r2, r2, #29
 8001b74:	025b      	lsls	r3, r3, #9
 8001b76:	4322      	orrs	r2, r4
 8001b78:	0b1b      	lsrs	r3, r3, #12
 8001b7a:	0d49      	lsrs	r1, r1, #21
 8001b7c:	0509      	lsls	r1, r1, #20
 8001b7e:	07ed      	lsls	r5, r5, #31
 8001b80:	4319      	orrs	r1, r3
 8001b82:	4329      	orrs	r1, r5
 8001b84:	0010      	movs	r0, r2
 8001b86:	bcf0      	pop	{r4, r5, r6, r7}
 8001b88:	46bb      	mov	fp, r7
 8001b8a:	46b2      	mov	sl, r6
 8001b8c:	46a9      	mov	r9, r5
 8001b8e:	46a0      	mov	r8, r4
 8001b90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b92:	1ab4      	subs	r4, r6, r2
 8001b94:	46a4      	mov	ip, r4
 8001b96:	2c00      	cmp	r4, #0
 8001b98:	dd58      	ble.n	8001c4c <__aeabi_dsub+0x218>
 8001b9a:	2a00      	cmp	r2, #0
 8001b9c:	d100      	bne.n	8001ba0 <__aeabi_dsub+0x16c>
 8001b9e:	e09e      	b.n	8001cde <__aeabi_dsub+0x2aa>
 8001ba0:	4a71      	ldr	r2, [pc, #452]	; (8001d68 <__aeabi_dsub+0x334>)
 8001ba2:	4296      	cmp	r6, r2
 8001ba4:	d100      	bne.n	8001ba8 <__aeabi_dsub+0x174>
 8001ba6:	e13b      	b.n	8001e20 <__aeabi_dsub+0x3ec>
 8001ba8:	2280      	movs	r2, #128	; 0x80
 8001baa:	0412      	lsls	r2, r2, #16
 8001bac:	4311      	orrs	r1, r2
 8001bae:	4662      	mov	r2, ip
 8001bb0:	2a38      	cmp	r2, #56	; 0x38
 8001bb2:	dd00      	ble.n	8001bb6 <__aeabi_dsub+0x182>
 8001bb4:	e0c1      	b.n	8001d3a <__aeabi_dsub+0x306>
 8001bb6:	2a1f      	cmp	r2, #31
 8001bb8:	dc00      	bgt.n	8001bbc <__aeabi_dsub+0x188>
 8001bba:	e1bb      	b.n	8001f34 <__aeabi_dsub+0x500>
 8001bbc:	000c      	movs	r4, r1
 8001bbe:	3a20      	subs	r2, #32
 8001bc0:	40d4      	lsrs	r4, r2
 8001bc2:	0022      	movs	r2, r4
 8001bc4:	4664      	mov	r4, ip
 8001bc6:	2c20      	cmp	r4, #32
 8001bc8:	d004      	beq.n	8001bd4 <__aeabi_dsub+0x1a0>
 8001bca:	2740      	movs	r7, #64	; 0x40
 8001bcc:	1b3f      	subs	r7, r7, r4
 8001bce:	40b9      	lsls	r1, r7
 8001bd0:	4308      	orrs	r0, r1
 8001bd2:	4680      	mov	r8, r0
 8001bd4:	4644      	mov	r4, r8
 8001bd6:	1e61      	subs	r1, r4, #1
 8001bd8:	418c      	sbcs	r4, r1
 8001bda:	4314      	orrs	r4, r2
 8001bdc:	e0b1      	b.n	8001d42 <__aeabi_dsub+0x30e>
 8001bde:	000c      	movs	r4, r1
 8001be0:	4304      	orrs	r4, r0
 8001be2:	d02a      	beq.n	8001c3a <__aeabi_dsub+0x206>
 8001be4:	46bb      	mov	fp, r7
 8001be6:	42bd      	cmp	r5, r7
 8001be8:	d02d      	beq.n	8001c46 <__aeabi_dsub+0x212>
 8001bea:	4c61      	ldr	r4, [pc, #388]	; (8001d70 <__aeabi_dsub+0x33c>)
 8001bec:	46a4      	mov	ip, r4
 8001bee:	44b4      	add	ip, r6
 8001bf0:	4664      	mov	r4, ip
 8001bf2:	2c00      	cmp	r4, #0
 8001bf4:	d05c      	beq.n	8001cb0 <__aeabi_dsub+0x27c>
 8001bf6:	1b94      	subs	r4, r2, r6
 8001bf8:	46a4      	mov	ip, r4
 8001bfa:	2e00      	cmp	r6, #0
 8001bfc:	d000      	beq.n	8001c00 <__aeabi_dsub+0x1cc>
 8001bfe:	e115      	b.n	8001e2c <__aeabi_dsub+0x3f8>
 8001c00:	464d      	mov	r5, r9
 8001c02:	431d      	orrs	r5, r3
 8001c04:	d100      	bne.n	8001c08 <__aeabi_dsub+0x1d4>
 8001c06:	e1c3      	b.n	8001f90 <__aeabi_dsub+0x55c>
 8001c08:	1e65      	subs	r5, r4, #1
 8001c0a:	2c01      	cmp	r4, #1
 8001c0c:	d100      	bne.n	8001c10 <__aeabi_dsub+0x1dc>
 8001c0e:	e20c      	b.n	800202a <__aeabi_dsub+0x5f6>
 8001c10:	4e55      	ldr	r6, [pc, #340]	; (8001d68 <__aeabi_dsub+0x334>)
 8001c12:	42b4      	cmp	r4, r6
 8001c14:	d100      	bne.n	8001c18 <__aeabi_dsub+0x1e4>
 8001c16:	e1f8      	b.n	800200a <__aeabi_dsub+0x5d6>
 8001c18:	46ac      	mov	ip, r5
 8001c1a:	e10e      	b.n	8001e3a <__aeabi_dsub+0x406>
 8001c1c:	000a      	movs	r2, r1
 8001c1e:	4302      	orrs	r2, r0
 8001c20:	d100      	bne.n	8001c24 <__aeabi_dsub+0x1f0>
 8001c22:	e136      	b.n	8001e92 <__aeabi_dsub+0x45e>
 8001c24:	0022      	movs	r2, r4
 8001c26:	3a01      	subs	r2, #1
 8001c28:	2c01      	cmp	r4, #1
 8001c2a:	d100      	bne.n	8001c2e <__aeabi_dsub+0x1fa>
 8001c2c:	e1c6      	b.n	8001fbc <__aeabi_dsub+0x588>
 8001c2e:	4c4e      	ldr	r4, [pc, #312]	; (8001d68 <__aeabi_dsub+0x334>)
 8001c30:	45a4      	cmp	ip, r4
 8001c32:	d100      	bne.n	8001c36 <__aeabi_dsub+0x202>
 8001c34:	e0f4      	b.n	8001e20 <__aeabi_dsub+0x3ec>
 8001c36:	4694      	mov	ip, r2
 8001c38:	e731      	b.n	8001a9e <__aeabi_dsub+0x6a>
 8001c3a:	2401      	movs	r4, #1
 8001c3c:	4067      	eors	r7, r4
 8001c3e:	46bb      	mov	fp, r7
 8001c40:	42bd      	cmp	r5, r7
 8001c42:	d000      	beq.n	8001c46 <__aeabi_dsub+0x212>
 8001c44:	e71c      	b.n	8001a80 <__aeabi_dsub+0x4c>
 8001c46:	4c4a      	ldr	r4, [pc, #296]	; (8001d70 <__aeabi_dsub+0x33c>)
 8001c48:	46a4      	mov	ip, r4
 8001c4a:	44b4      	add	ip, r6
 8001c4c:	4664      	mov	r4, ip
 8001c4e:	2c00      	cmp	r4, #0
 8001c50:	d100      	bne.n	8001c54 <__aeabi_dsub+0x220>
 8001c52:	e0cf      	b.n	8001df4 <__aeabi_dsub+0x3c0>
 8001c54:	1b94      	subs	r4, r2, r6
 8001c56:	46a4      	mov	ip, r4
 8001c58:	2e00      	cmp	r6, #0
 8001c5a:	d100      	bne.n	8001c5e <__aeabi_dsub+0x22a>
 8001c5c:	e15c      	b.n	8001f18 <__aeabi_dsub+0x4e4>
 8001c5e:	4e42      	ldr	r6, [pc, #264]	; (8001d68 <__aeabi_dsub+0x334>)
 8001c60:	42b2      	cmp	r2, r6
 8001c62:	d100      	bne.n	8001c66 <__aeabi_dsub+0x232>
 8001c64:	e1ec      	b.n	8002040 <__aeabi_dsub+0x60c>
 8001c66:	2680      	movs	r6, #128	; 0x80
 8001c68:	0436      	lsls	r6, r6, #16
 8001c6a:	4333      	orrs	r3, r6
 8001c6c:	4664      	mov	r4, ip
 8001c6e:	2c38      	cmp	r4, #56	; 0x38
 8001c70:	dd00      	ble.n	8001c74 <__aeabi_dsub+0x240>
 8001c72:	e1b3      	b.n	8001fdc <__aeabi_dsub+0x5a8>
 8001c74:	2c1f      	cmp	r4, #31
 8001c76:	dd00      	ble.n	8001c7a <__aeabi_dsub+0x246>
 8001c78:	e238      	b.n	80020ec <__aeabi_dsub+0x6b8>
 8001c7a:	2620      	movs	r6, #32
 8001c7c:	1b36      	subs	r6, r6, r4
 8001c7e:	001c      	movs	r4, r3
 8001c80:	40b4      	lsls	r4, r6
 8001c82:	464f      	mov	r7, r9
 8001c84:	46a0      	mov	r8, r4
 8001c86:	4664      	mov	r4, ip
 8001c88:	40e7      	lsrs	r7, r4
 8001c8a:	4644      	mov	r4, r8
 8001c8c:	433c      	orrs	r4, r7
 8001c8e:	464f      	mov	r7, r9
 8001c90:	40b7      	lsls	r7, r6
 8001c92:	003e      	movs	r6, r7
 8001c94:	1e77      	subs	r7, r6, #1
 8001c96:	41be      	sbcs	r6, r7
 8001c98:	4334      	orrs	r4, r6
 8001c9a:	4666      	mov	r6, ip
 8001c9c:	40f3      	lsrs	r3, r6
 8001c9e:	18c9      	adds	r1, r1, r3
 8001ca0:	1824      	adds	r4, r4, r0
 8001ca2:	4284      	cmp	r4, r0
 8001ca4:	419b      	sbcs	r3, r3
 8001ca6:	425b      	negs	r3, r3
 8001ca8:	4698      	mov	r8, r3
 8001caa:	0016      	movs	r6, r2
 8001cac:	4488      	add	r8, r1
 8001cae:	e04e      	b.n	8001d4e <__aeabi_dsub+0x31a>
 8001cb0:	4a30      	ldr	r2, [pc, #192]	; (8001d74 <__aeabi_dsub+0x340>)
 8001cb2:	1c74      	adds	r4, r6, #1
 8001cb4:	4214      	tst	r4, r2
 8001cb6:	d000      	beq.n	8001cba <__aeabi_dsub+0x286>
 8001cb8:	e0d6      	b.n	8001e68 <__aeabi_dsub+0x434>
 8001cba:	464a      	mov	r2, r9
 8001cbc:	431a      	orrs	r2, r3
 8001cbe:	2e00      	cmp	r6, #0
 8001cc0:	d000      	beq.n	8001cc4 <__aeabi_dsub+0x290>
 8001cc2:	e15b      	b.n	8001f7c <__aeabi_dsub+0x548>
 8001cc4:	2a00      	cmp	r2, #0
 8001cc6:	d100      	bne.n	8001cca <__aeabi_dsub+0x296>
 8001cc8:	e1a5      	b.n	8002016 <__aeabi_dsub+0x5e2>
 8001cca:	000a      	movs	r2, r1
 8001ccc:	4302      	orrs	r2, r0
 8001cce:	d000      	beq.n	8001cd2 <__aeabi_dsub+0x29e>
 8001cd0:	e1bb      	b.n	800204a <__aeabi_dsub+0x616>
 8001cd2:	464a      	mov	r2, r9
 8001cd4:	0759      	lsls	r1, r3, #29
 8001cd6:	08d2      	lsrs	r2, r2, #3
 8001cd8:	430a      	orrs	r2, r1
 8001cda:	08db      	lsrs	r3, r3, #3
 8001cdc:	e027      	b.n	8001d2e <__aeabi_dsub+0x2fa>
 8001cde:	000a      	movs	r2, r1
 8001ce0:	4302      	orrs	r2, r0
 8001ce2:	d100      	bne.n	8001ce6 <__aeabi_dsub+0x2b2>
 8001ce4:	e174      	b.n	8001fd0 <__aeabi_dsub+0x59c>
 8001ce6:	0022      	movs	r2, r4
 8001ce8:	3a01      	subs	r2, #1
 8001cea:	2c01      	cmp	r4, #1
 8001cec:	d005      	beq.n	8001cfa <__aeabi_dsub+0x2c6>
 8001cee:	4c1e      	ldr	r4, [pc, #120]	; (8001d68 <__aeabi_dsub+0x334>)
 8001cf0:	45a4      	cmp	ip, r4
 8001cf2:	d100      	bne.n	8001cf6 <__aeabi_dsub+0x2c2>
 8001cf4:	e094      	b.n	8001e20 <__aeabi_dsub+0x3ec>
 8001cf6:	4694      	mov	ip, r2
 8001cf8:	e759      	b.n	8001bae <__aeabi_dsub+0x17a>
 8001cfa:	4448      	add	r0, r9
 8001cfc:	4548      	cmp	r0, r9
 8001cfe:	4192      	sbcs	r2, r2
 8001d00:	185b      	adds	r3, r3, r1
 8001d02:	4698      	mov	r8, r3
 8001d04:	0004      	movs	r4, r0
 8001d06:	4252      	negs	r2, r2
 8001d08:	4490      	add	r8, r2
 8001d0a:	4643      	mov	r3, r8
 8001d0c:	2602      	movs	r6, #2
 8001d0e:	021b      	lsls	r3, r3, #8
 8001d10:	d500      	bpl.n	8001d14 <__aeabi_dsub+0x2e0>
 8001d12:	e0c4      	b.n	8001e9e <__aeabi_dsub+0x46a>
 8001d14:	3e01      	subs	r6, #1
 8001d16:	0763      	lsls	r3, r4, #29
 8001d18:	d000      	beq.n	8001d1c <__aeabi_dsub+0x2e8>
 8001d1a:	e711      	b.n	8001b40 <__aeabi_dsub+0x10c>
 8001d1c:	4643      	mov	r3, r8
 8001d1e:	46b4      	mov	ip, r6
 8001d20:	0759      	lsls	r1, r3, #29
 8001d22:	08e2      	lsrs	r2, r4, #3
 8001d24:	430a      	orrs	r2, r1
 8001d26:	08db      	lsrs	r3, r3, #3
 8001d28:	490f      	ldr	r1, [pc, #60]	; (8001d68 <__aeabi_dsub+0x334>)
 8001d2a:	458c      	cmp	ip, r1
 8001d2c:	d040      	beq.n	8001db0 <__aeabi_dsub+0x37c>
 8001d2e:	4661      	mov	r1, ip
 8001d30:	031b      	lsls	r3, r3, #12
 8001d32:	0549      	lsls	r1, r1, #21
 8001d34:	0b1b      	lsrs	r3, r3, #12
 8001d36:	0d49      	lsrs	r1, r1, #21
 8001d38:	e720      	b.n	8001b7c <__aeabi_dsub+0x148>
 8001d3a:	4301      	orrs	r1, r0
 8001d3c:	000c      	movs	r4, r1
 8001d3e:	1e61      	subs	r1, r4, #1
 8001d40:	418c      	sbcs	r4, r1
 8001d42:	444c      	add	r4, r9
 8001d44:	454c      	cmp	r4, r9
 8001d46:	4192      	sbcs	r2, r2
 8001d48:	4252      	negs	r2, r2
 8001d4a:	4690      	mov	r8, r2
 8001d4c:	4498      	add	r8, r3
 8001d4e:	4643      	mov	r3, r8
 8001d50:	021b      	lsls	r3, r3, #8
 8001d52:	d5e0      	bpl.n	8001d16 <__aeabi_dsub+0x2e2>
 8001d54:	4b04      	ldr	r3, [pc, #16]	; (8001d68 <__aeabi_dsub+0x334>)
 8001d56:	3601      	adds	r6, #1
 8001d58:	429e      	cmp	r6, r3
 8001d5a:	d000      	beq.n	8001d5e <__aeabi_dsub+0x32a>
 8001d5c:	e09f      	b.n	8001e9e <__aeabi_dsub+0x46a>
 8001d5e:	0031      	movs	r1, r6
 8001d60:	2300      	movs	r3, #0
 8001d62:	2200      	movs	r2, #0
 8001d64:	e70a      	b.n	8001b7c <__aeabi_dsub+0x148>
 8001d66:	46c0      	nop			; (mov r8, r8)
 8001d68:	000007ff 	.word	0x000007ff
 8001d6c:	ff7fffff 	.word	0xff7fffff
 8001d70:	fffff801 	.word	0xfffff801
 8001d74:	000007fe 	.word	0x000007fe
 8001d78:	2a00      	cmp	r2, #0
 8001d7a:	d100      	bne.n	8001d7e <__aeabi_dsub+0x34a>
 8001d7c:	e160      	b.n	8002040 <__aeabi_dsub+0x60c>
 8001d7e:	000a      	movs	r2, r1
 8001d80:	4302      	orrs	r2, r0
 8001d82:	d04d      	beq.n	8001e20 <__aeabi_dsub+0x3ec>
 8001d84:	464a      	mov	r2, r9
 8001d86:	075c      	lsls	r4, r3, #29
 8001d88:	08d2      	lsrs	r2, r2, #3
 8001d8a:	4322      	orrs	r2, r4
 8001d8c:	2480      	movs	r4, #128	; 0x80
 8001d8e:	08db      	lsrs	r3, r3, #3
 8001d90:	0324      	lsls	r4, r4, #12
 8001d92:	4223      	tst	r3, r4
 8001d94:	d007      	beq.n	8001da6 <__aeabi_dsub+0x372>
 8001d96:	08ce      	lsrs	r6, r1, #3
 8001d98:	4226      	tst	r6, r4
 8001d9a:	d104      	bne.n	8001da6 <__aeabi_dsub+0x372>
 8001d9c:	465d      	mov	r5, fp
 8001d9e:	0033      	movs	r3, r6
 8001da0:	08c2      	lsrs	r2, r0, #3
 8001da2:	0749      	lsls	r1, r1, #29
 8001da4:	430a      	orrs	r2, r1
 8001da6:	0f51      	lsrs	r1, r2, #29
 8001da8:	00d2      	lsls	r2, r2, #3
 8001daa:	08d2      	lsrs	r2, r2, #3
 8001dac:	0749      	lsls	r1, r1, #29
 8001dae:	430a      	orrs	r2, r1
 8001db0:	0011      	movs	r1, r2
 8001db2:	4319      	orrs	r1, r3
 8001db4:	d100      	bne.n	8001db8 <__aeabi_dsub+0x384>
 8001db6:	e1c8      	b.n	800214a <__aeabi_dsub+0x716>
 8001db8:	2180      	movs	r1, #128	; 0x80
 8001dba:	0309      	lsls	r1, r1, #12
 8001dbc:	430b      	orrs	r3, r1
 8001dbe:	031b      	lsls	r3, r3, #12
 8001dc0:	49d5      	ldr	r1, [pc, #852]	; (8002118 <__aeabi_dsub+0x6e4>)
 8001dc2:	0b1b      	lsrs	r3, r3, #12
 8001dc4:	e6da      	b.n	8001b7c <__aeabi_dsub+0x148>
 8001dc6:	49d5      	ldr	r1, [pc, #852]	; (800211c <__aeabi_dsub+0x6e8>)
 8001dc8:	1ab6      	subs	r6, r6, r2
 8001dca:	400b      	ands	r3, r1
 8001dcc:	4698      	mov	r8, r3
 8001dce:	e6b5      	b.n	8001b3c <__aeabi_dsub+0x108>
 8001dd0:	0020      	movs	r0, r4
 8001dd2:	f000 fab3 	bl	800233c <__clzsi2>
 8001dd6:	0002      	movs	r2, r0
 8001dd8:	3218      	adds	r2, #24
 8001dda:	2a1f      	cmp	r2, #31
 8001ddc:	dc00      	bgt.n	8001de0 <__aeabi_dsub+0x3ac>
 8001dde:	e68f      	b.n	8001b00 <__aeabi_dsub+0xcc>
 8001de0:	0023      	movs	r3, r4
 8001de2:	3808      	subs	r0, #8
 8001de4:	4083      	lsls	r3, r0
 8001de6:	2400      	movs	r4, #0
 8001de8:	e692      	b.n	8001b10 <__aeabi_dsub+0xdc>
 8001dea:	4308      	orrs	r0, r1
 8001dec:	0002      	movs	r2, r0
 8001dee:	1e50      	subs	r0, r2, #1
 8001df0:	4182      	sbcs	r2, r0
 8001df2:	e66d      	b.n	8001ad0 <__aeabi_dsub+0x9c>
 8001df4:	4cca      	ldr	r4, [pc, #808]	; (8002120 <__aeabi_dsub+0x6ec>)
 8001df6:	1c72      	adds	r2, r6, #1
 8001df8:	4222      	tst	r2, r4
 8001dfa:	d000      	beq.n	8001dfe <__aeabi_dsub+0x3ca>
 8001dfc:	e0ad      	b.n	8001f5a <__aeabi_dsub+0x526>
 8001dfe:	464a      	mov	r2, r9
 8001e00:	431a      	orrs	r2, r3
 8001e02:	2e00      	cmp	r6, #0
 8001e04:	d1b8      	bne.n	8001d78 <__aeabi_dsub+0x344>
 8001e06:	2a00      	cmp	r2, #0
 8001e08:	d100      	bne.n	8001e0c <__aeabi_dsub+0x3d8>
 8001e0a:	e158      	b.n	80020be <__aeabi_dsub+0x68a>
 8001e0c:	000a      	movs	r2, r1
 8001e0e:	4302      	orrs	r2, r0
 8001e10:	d000      	beq.n	8001e14 <__aeabi_dsub+0x3e0>
 8001e12:	e159      	b.n	80020c8 <__aeabi_dsub+0x694>
 8001e14:	464a      	mov	r2, r9
 8001e16:	0759      	lsls	r1, r3, #29
 8001e18:	08d2      	lsrs	r2, r2, #3
 8001e1a:	430a      	orrs	r2, r1
 8001e1c:	08db      	lsrs	r3, r3, #3
 8001e1e:	e786      	b.n	8001d2e <__aeabi_dsub+0x2fa>
 8001e20:	464a      	mov	r2, r9
 8001e22:	0759      	lsls	r1, r3, #29
 8001e24:	08d2      	lsrs	r2, r2, #3
 8001e26:	430a      	orrs	r2, r1
 8001e28:	08db      	lsrs	r3, r3, #3
 8001e2a:	e7c1      	b.n	8001db0 <__aeabi_dsub+0x37c>
 8001e2c:	4dba      	ldr	r5, [pc, #744]	; (8002118 <__aeabi_dsub+0x6e4>)
 8001e2e:	42aa      	cmp	r2, r5
 8001e30:	d100      	bne.n	8001e34 <__aeabi_dsub+0x400>
 8001e32:	e11e      	b.n	8002072 <__aeabi_dsub+0x63e>
 8001e34:	2580      	movs	r5, #128	; 0x80
 8001e36:	042d      	lsls	r5, r5, #16
 8001e38:	432b      	orrs	r3, r5
 8001e3a:	4664      	mov	r4, ip
 8001e3c:	2c38      	cmp	r4, #56	; 0x38
 8001e3e:	dc5d      	bgt.n	8001efc <__aeabi_dsub+0x4c8>
 8001e40:	2c1f      	cmp	r4, #31
 8001e42:	dd00      	ble.n	8001e46 <__aeabi_dsub+0x412>
 8001e44:	e0d0      	b.n	8001fe8 <__aeabi_dsub+0x5b4>
 8001e46:	2520      	movs	r5, #32
 8001e48:	4667      	mov	r7, ip
 8001e4a:	1b2d      	subs	r5, r5, r4
 8001e4c:	464e      	mov	r6, r9
 8001e4e:	001c      	movs	r4, r3
 8001e50:	40fe      	lsrs	r6, r7
 8001e52:	40ac      	lsls	r4, r5
 8001e54:	4334      	orrs	r4, r6
 8001e56:	464e      	mov	r6, r9
 8001e58:	40ae      	lsls	r6, r5
 8001e5a:	0035      	movs	r5, r6
 8001e5c:	40fb      	lsrs	r3, r7
 8001e5e:	1e6e      	subs	r6, r5, #1
 8001e60:	41b5      	sbcs	r5, r6
 8001e62:	1ac9      	subs	r1, r1, r3
 8001e64:	432c      	orrs	r4, r5
 8001e66:	e04e      	b.n	8001f06 <__aeabi_dsub+0x4d2>
 8001e68:	464a      	mov	r2, r9
 8001e6a:	1a14      	subs	r4, r2, r0
 8001e6c:	45a1      	cmp	r9, r4
 8001e6e:	4192      	sbcs	r2, r2
 8001e70:	4252      	negs	r2, r2
 8001e72:	4690      	mov	r8, r2
 8001e74:	1a5f      	subs	r7, r3, r1
 8001e76:	003a      	movs	r2, r7
 8001e78:	4647      	mov	r7, r8
 8001e7a:	1bd2      	subs	r2, r2, r7
 8001e7c:	4690      	mov	r8, r2
 8001e7e:	0212      	lsls	r2, r2, #8
 8001e80:	d500      	bpl.n	8001e84 <__aeabi_dsub+0x450>
 8001e82:	e08b      	b.n	8001f9c <__aeabi_dsub+0x568>
 8001e84:	4642      	mov	r2, r8
 8001e86:	4322      	orrs	r2, r4
 8001e88:	d000      	beq.n	8001e8c <__aeabi_dsub+0x458>
 8001e8a:	e630      	b.n	8001aee <__aeabi_dsub+0xba>
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	2500      	movs	r5, #0
 8001e90:	e74d      	b.n	8001d2e <__aeabi_dsub+0x2fa>
 8001e92:	464a      	mov	r2, r9
 8001e94:	0759      	lsls	r1, r3, #29
 8001e96:	08d2      	lsrs	r2, r2, #3
 8001e98:	430a      	orrs	r2, r1
 8001e9a:	08db      	lsrs	r3, r3, #3
 8001e9c:	e744      	b.n	8001d28 <__aeabi_dsub+0x2f4>
 8001e9e:	4642      	mov	r2, r8
 8001ea0:	4b9e      	ldr	r3, [pc, #632]	; (800211c <__aeabi_dsub+0x6e8>)
 8001ea2:	0861      	lsrs	r1, r4, #1
 8001ea4:	401a      	ands	r2, r3
 8001ea6:	0013      	movs	r3, r2
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	4014      	ands	r4, r2
 8001eac:	430c      	orrs	r4, r1
 8001eae:	07da      	lsls	r2, r3, #31
 8001eb0:	085b      	lsrs	r3, r3, #1
 8001eb2:	4698      	mov	r8, r3
 8001eb4:	4314      	orrs	r4, r2
 8001eb6:	e641      	b.n	8001b3c <__aeabi_dsub+0x108>
 8001eb8:	001a      	movs	r2, r3
 8001eba:	3e1f      	subs	r6, #31
 8001ebc:	40f2      	lsrs	r2, r6
 8001ebe:	0016      	movs	r6, r2
 8001ec0:	2920      	cmp	r1, #32
 8001ec2:	d003      	beq.n	8001ecc <__aeabi_dsub+0x498>
 8001ec4:	2240      	movs	r2, #64	; 0x40
 8001ec6:	1a51      	subs	r1, r2, r1
 8001ec8:	408b      	lsls	r3, r1
 8001eca:	431c      	orrs	r4, r3
 8001ecc:	1e62      	subs	r2, r4, #1
 8001ece:	4194      	sbcs	r4, r2
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	4334      	orrs	r4, r6
 8001ed4:	4698      	mov	r8, r3
 8001ed6:	2600      	movs	r6, #0
 8001ed8:	e71d      	b.n	8001d16 <__aeabi_dsub+0x2e2>
 8001eda:	000c      	movs	r4, r1
 8001edc:	3a20      	subs	r2, #32
 8001ede:	40d4      	lsrs	r4, r2
 8001ee0:	0022      	movs	r2, r4
 8001ee2:	4664      	mov	r4, ip
 8001ee4:	2c20      	cmp	r4, #32
 8001ee6:	d004      	beq.n	8001ef2 <__aeabi_dsub+0x4be>
 8001ee8:	2740      	movs	r7, #64	; 0x40
 8001eea:	1b3f      	subs	r7, r7, r4
 8001eec:	40b9      	lsls	r1, r7
 8001eee:	4308      	orrs	r0, r1
 8001ef0:	4680      	mov	r8, r0
 8001ef2:	4644      	mov	r4, r8
 8001ef4:	1e61      	subs	r1, r4, #1
 8001ef6:	418c      	sbcs	r4, r1
 8001ef8:	4322      	orrs	r2, r4
 8001efa:	e5e9      	b.n	8001ad0 <__aeabi_dsub+0x9c>
 8001efc:	464c      	mov	r4, r9
 8001efe:	4323      	orrs	r3, r4
 8001f00:	001c      	movs	r4, r3
 8001f02:	1e63      	subs	r3, r4, #1
 8001f04:	419c      	sbcs	r4, r3
 8001f06:	1b04      	subs	r4, r0, r4
 8001f08:	42a0      	cmp	r0, r4
 8001f0a:	419b      	sbcs	r3, r3
 8001f0c:	425b      	negs	r3, r3
 8001f0e:	1acb      	subs	r3, r1, r3
 8001f10:	4698      	mov	r8, r3
 8001f12:	465d      	mov	r5, fp
 8001f14:	0016      	movs	r6, r2
 8001f16:	e5e2      	b.n	8001ade <__aeabi_dsub+0xaa>
 8001f18:	464e      	mov	r6, r9
 8001f1a:	431e      	orrs	r6, r3
 8001f1c:	d100      	bne.n	8001f20 <__aeabi_dsub+0x4ec>
 8001f1e:	e0ae      	b.n	800207e <__aeabi_dsub+0x64a>
 8001f20:	1e66      	subs	r6, r4, #1
 8001f22:	2c01      	cmp	r4, #1
 8001f24:	d100      	bne.n	8001f28 <__aeabi_dsub+0x4f4>
 8001f26:	e0fd      	b.n	8002124 <__aeabi_dsub+0x6f0>
 8001f28:	4f7b      	ldr	r7, [pc, #492]	; (8002118 <__aeabi_dsub+0x6e4>)
 8001f2a:	42bc      	cmp	r4, r7
 8001f2c:	d100      	bne.n	8001f30 <__aeabi_dsub+0x4fc>
 8001f2e:	e107      	b.n	8002140 <__aeabi_dsub+0x70c>
 8001f30:	46b4      	mov	ip, r6
 8001f32:	e69b      	b.n	8001c6c <__aeabi_dsub+0x238>
 8001f34:	4664      	mov	r4, ip
 8001f36:	2220      	movs	r2, #32
 8001f38:	1b12      	subs	r2, r2, r4
 8001f3a:	000c      	movs	r4, r1
 8001f3c:	4094      	lsls	r4, r2
 8001f3e:	0007      	movs	r7, r0
 8001f40:	4090      	lsls	r0, r2
 8001f42:	46a0      	mov	r8, r4
 8001f44:	4664      	mov	r4, ip
 8001f46:	1e42      	subs	r2, r0, #1
 8001f48:	4190      	sbcs	r0, r2
 8001f4a:	4662      	mov	r2, ip
 8001f4c:	40e7      	lsrs	r7, r4
 8001f4e:	4644      	mov	r4, r8
 8001f50:	40d1      	lsrs	r1, r2
 8001f52:	433c      	orrs	r4, r7
 8001f54:	4304      	orrs	r4, r0
 8001f56:	185b      	adds	r3, r3, r1
 8001f58:	e6f3      	b.n	8001d42 <__aeabi_dsub+0x30e>
 8001f5a:	4c6f      	ldr	r4, [pc, #444]	; (8002118 <__aeabi_dsub+0x6e4>)
 8001f5c:	42a2      	cmp	r2, r4
 8001f5e:	d100      	bne.n	8001f62 <__aeabi_dsub+0x52e>
 8001f60:	e0d5      	b.n	800210e <__aeabi_dsub+0x6da>
 8001f62:	4448      	add	r0, r9
 8001f64:	185b      	adds	r3, r3, r1
 8001f66:	4548      	cmp	r0, r9
 8001f68:	4189      	sbcs	r1, r1
 8001f6a:	4249      	negs	r1, r1
 8001f6c:	185b      	adds	r3, r3, r1
 8001f6e:	07dc      	lsls	r4, r3, #31
 8001f70:	0840      	lsrs	r0, r0, #1
 8001f72:	085b      	lsrs	r3, r3, #1
 8001f74:	4698      	mov	r8, r3
 8001f76:	0016      	movs	r6, r2
 8001f78:	4304      	orrs	r4, r0
 8001f7a:	e6cc      	b.n	8001d16 <__aeabi_dsub+0x2e2>
 8001f7c:	2a00      	cmp	r2, #0
 8001f7e:	d000      	beq.n	8001f82 <__aeabi_dsub+0x54e>
 8001f80:	e082      	b.n	8002088 <__aeabi_dsub+0x654>
 8001f82:	000a      	movs	r2, r1
 8001f84:	4302      	orrs	r2, r0
 8001f86:	d140      	bne.n	800200a <__aeabi_dsub+0x5d6>
 8001f88:	2380      	movs	r3, #128	; 0x80
 8001f8a:	2500      	movs	r5, #0
 8001f8c:	031b      	lsls	r3, r3, #12
 8001f8e:	e713      	b.n	8001db8 <__aeabi_dsub+0x384>
 8001f90:	074b      	lsls	r3, r1, #29
 8001f92:	08c2      	lsrs	r2, r0, #3
 8001f94:	431a      	orrs	r2, r3
 8001f96:	465d      	mov	r5, fp
 8001f98:	08cb      	lsrs	r3, r1, #3
 8001f9a:	e6c5      	b.n	8001d28 <__aeabi_dsub+0x2f4>
 8001f9c:	464a      	mov	r2, r9
 8001f9e:	1a84      	subs	r4, r0, r2
 8001fa0:	42a0      	cmp	r0, r4
 8001fa2:	4192      	sbcs	r2, r2
 8001fa4:	1acb      	subs	r3, r1, r3
 8001fa6:	4252      	negs	r2, r2
 8001fa8:	1a9b      	subs	r3, r3, r2
 8001faa:	4698      	mov	r8, r3
 8001fac:	465d      	mov	r5, fp
 8001fae:	e59e      	b.n	8001aee <__aeabi_dsub+0xba>
 8001fb0:	464a      	mov	r2, r9
 8001fb2:	0759      	lsls	r1, r3, #29
 8001fb4:	08d2      	lsrs	r2, r2, #3
 8001fb6:	430a      	orrs	r2, r1
 8001fb8:	08db      	lsrs	r3, r3, #3
 8001fba:	e6f9      	b.n	8001db0 <__aeabi_dsub+0x37c>
 8001fbc:	464a      	mov	r2, r9
 8001fbe:	1a14      	subs	r4, r2, r0
 8001fc0:	45a1      	cmp	r9, r4
 8001fc2:	4192      	sbcs	r2, r2
 8001fc4:	1a5b      	subs	r3, r3, r1
 8001fc6:	4252      	negs	r2, r2
 8001fc8:	1a9b      	subs	r3, r3, r2
 8001fca:	4698      	mov	r8, r3
 8001fcc:	2601      	movs	r6, #1
 8001fce:	e586      	b.n	8001ade <__aeabi_dsub+0xaa>
 8001fd0:	464a      	mov	r2, r9
 8001fd2:	0759      	lsls	r1, r3, #29
 8001fd4:	08d2      	lsrs	r2, r2, #3
 8001fd6:	430a      	orrs	r2, r1
 8001fd8:	08db      	lsrs	r3, r3, #3
 8001fda:	e6a5      	b.n	8001d28 <__aeabi_dsub+0x2f4>
 8001fdc:	464c      	mov	r4, r9
 8001fde:	4323      	orrs	r3, r4
 8001fe0:	001c      	movs	r4, r3
 8001fe2:	1e63      	subs	r3, r4, #1
 8001fe4:	419c      	sbcs	r4, r3
 8001fe6:	e65b      	b.n	8001ca0 <__aeabi_dsub+0x26c>
 8001fe8:	4665      	mov	r5, ip
 8001fea:	001e      	movs	r6, r3
 8001fec:	3d20      	subs	r5, #32
 8001fee:	40ee      	lsrs	r6, r5
 8001ff0:	2c20      	cmp	r4, #32
 8001ff2:	d005      	beq.n	8002000 <__aeabi_dsub+0x5cc>
 8001ff4:	2540      	movs	r5, #64	; 0x40
 8001ff6:	1b2d      	subs	r5, r5, r4
 8001ff8:	40ab      	lsls	r3, r5
 8001ffa:	464c      	mov	r4, r9
 8001ffc:	431c      	orrs	r4, r3
 8001ffe:	46a2      	mov	sl, r4
 8002000:	4654      	mov	r4, sl
 8002002:	1e63      	subs	r3, r4, #1
 8002004:	419c      	sbcs	r4, r3
 8002006:	4334      	orrs	r4, r6
 8002008:	e77d      	b.n	8001f06 <__aeabi_dsub+0x4d2>
 800200a:	074b      	lsls	r3, r1, #29
 800200c:	08c2      	lsrs	r2, r0, #3
 800200e:	431a      	orrs	r2, r3
 8002010:	465d      	mov	r5, fp
 8002012:	08cb      	lsrs	r3, r1, #3
 8002014:	e6cc      	b.n	8001db0 <__aeabi_dsub+0x37c>
 8002016:	000a      	movs	r2, r1
 8002018:	4302      	orrs	r2, r0
 800201a:	d100      	bne.n	800201e <__aeabi_dsub+0x5ea>
 800201c:	e736      	b.n	8001e8c <__aeabi_dsub+0x458>
 800201e:	074b      	lsls	r3, r1, #29
 8002020:	08c2      	lsrs	r2, r0, #3
 8002022:	431a      	orrs	r2, r3
 8002024:	465d      	mov	r5, fp
 8002026:	08cb      	lsrs	r3, r1, #3
 8002028:	e681      	b.n	8001d2e <__aeabi_dsub+0x2fa>
 800202a:	464a      	mov	r2, r9
 800202c:	1a84      	subs	r4, r0, r2
 800202e:	42a0      	cmp	r0, r4
 8002030:	4192      	sbcs	r2, r2
 8002032:	1acb      	subs	r3, r1, r3
 8002034:	4252      	negs	r2, r2
 8002036:	1a9b      	subs	r3, r3, r2
 8002038:	4698      	mov	r8, r3
 800203a:	465d      	mov	r5, fp
 800203c:	2601      	movs	r6, #1
 800203e:	e54e      	b.n	8001ade <__aeabi_dsub+0xaa>
 8002040:	074b      	lsls	r3, r1, #29
 8002042:	08c2      	lsrs	r2, r0, #3
 8002044:	431a      	orrs	r2, r3
 8002046:	08cb      	lsrs	r3, r1, #3
 8002048:	e6b2      	b.n	8001db0 <__aeabi_dsub+0x37c>
 800204a:	464a      	mov	r2, r9
 800204c:	1a14      	subs	r4, r2, r0
 800204e:	45a1      	cmp	r9, r4
 8002050:	4192      	sbcs	r2, r2
 8002052:	1a5f      	subs	r7, r3, r1
 8002054:	4252      	negs	r2, r2
 8002056:	1aba      	subs	r2, r7, r2
 8002058:	4690      	mov	r8, r2
 800205a:	0212      	lsls	r2, r2, #8
 800205c:	d56b      	bpl.n	8002136 <__aeabi_dsub+0x702>
 800205e:	464a      	mov	r2, r9
 8002060:	1a84      	subs	r4, r0, r2
 8002062:	42a0      	cmp	r0, r4
 8002064:	4192      	sbcs	r2, r2
 8002066:	1acb      	subs	r3, r1, r3
 8002068:	4252      	negs	r2, r2
 800206a:	1a9b      	subs	r3, r3, r2
 800206c:	4698      	mov	r8, r3
 800206e:	465d      	mov	r5, fp
 8002070:	e564      	b.n	8001b3c <__aeabi_dsub+0x108>
 8002072:	074b      	lsls	r3, r1, #29
 8002074:	08c2      	lsrs	r2, r0, #3
 8002076:	431a      	orrs	r2, r3
 8002078:	465d      	mov	r5, fp
 800207a:	08cb      	lsrs	r3, r1, #3
 800207c:	e698      	b.n	8001db0 <__aeabi_dsub+0x37c>
 800207e:	074b      	lsls	r3, r1, #29
 8002080:	08c2      	lsrs	r2, r0, #3
 8002082:	431a      	orrs	r2, r3
 8002084:	08cb      	lsrs	r3, r1, #3
 8002086:	e64f      	b.n	8001d28 <__aeabi_dsub+0x2f4>
 8002088:	000a      	movs	r2, r1
 800208a:	4302      	orrs	r2, r0
 800208c:	d090      	beq.n	8001fb0 <__aeabi_dsub+0x57c>
 800208e:	464a      	mov	r2, r9
 8002090:	075c      	lsls	r4, r3, #29
 8002092:	08d2      	lsrs	r2, r2, #3
 8002094:	4314      	orrs	r4, r2
 8002096:	2280      	movs	r2, #128	; 0x80
 8002098:	08db      	lsrs	r3, r3, #3
 800209a:	0312      	lsls	r2, r2, #12
 800209c:	4213      	tst	r3, r2
 800209e:	d008      	beq.n	80020b2 <__aeabi_dsub+0x67e>
 80020a0:	08ce      	lsrs	r6, r1, #3
 80020a2:	4216      	tst	r6, r2
 80020a4:	d105      	bne.n	80020b2 <__aeabi_dsub+0x67e>
 80020a6:	08c0      	lsrs	r0, r0, #3
 80020a8:	0749      	lsls	r1, r1, #29
 80020aa:	4308      	orrs	r0, r1
 80020ac:	0004      	movs	r4, r0
 80020ae:	465d      	mov	r5, fp
 80020b0:	0033      	movs	r3, r6
 80020b2:	0f61      	lsrs	r1, r4, #29
 80020b4:	00e2      	lsls	r2, r4, #3
 80020b6:	0749      	lsls	r1, r1, #29
 80020b8:	08d2      	lsrs	r2, r2, #3
 80020ba:	430a      	orrs	r2, r1
 80020bc:	e678      	b.n	8001db0 <__aeabi_dsub+0x37c>
 80020be:	074b      	lsls	r3, r1, #29
 80020c0:	08c2      	lsrs	r2, r0, #3
 80020c2:	431a      	orrs	r2, r3
 80020c4:	08cb      	lsrs	r3, r1, #3
 80020c6:	e632      	b.n	8001d2e <__aeabi_dsub+0x2fa>
 80020c8:	4448      	add	r0, r9
 80020ca:	185b      	adds	r3, r3, r1
 80020cc:	4548      	cmp	r0, r9
 80020ce:	4192      	sbcs	r2, r2
 80020d0:	4698      	mov	r8, r3
 80020d2:	4252      	negs	r2, r2
 80020d4:	4490      	add	r8, r2
 80020d6:	4643      	mov	r3, r8
 80020d8:	0004      	movs	r4, r0
 80020da:	021b      	lsls	r3, r3, #8
 80020dc:	d400      	bmi.n	80020e0 <__aeabi_dsub+0x6ac>
 80020de:	e61a      	b.n	8001d16 <__aeabi_dsub+0x2e2>
 80020e0:	4642      	mov	r2, r8
 80020e2:	4b0e      	ldr	r3, [pc, #56]	; (800211c <__aeabi_dsub+0x6e8>)
 80020e4:	2601      	movs	r6, #1
 80020e6:	401a      	ands	r2, r3
 80020e8:	4690      	mov	r8, r2
 80020ea:	e614      	b.n	8001d16 <__aeabi_dsub+0x2e2>
 80020ec:	4666      	mov	r6, ip
 80020ee:	001f      	movs	r7, r3
 80020f0:	3e20      	subs	r6, #32
 80020f2:	40f7      	lsrs	r7, r6
 80020f4:	2c20      	cmp	r4, #32
 80020f6:	d005      	beq.n	8002104 <__aeabi_dsub+0x6d0>
 80020f8:	2640      	movs	r6, #64	; 0x40
 80020fa:	1b36      	subs	r6, r6, r4
 80020fc:	40b3      	lsls	r3, r6
 80020fe:	464c      	mov	r4, r9
 8002100:	431c      	orrs	r4, r3
 8002102:	46a2      	mov	sl, r4
 8002104:	4654      	mov	r4, sl
 8002106:	1e63      	subs	r3, r4, #1
 8002108:	419c      	sbcs	r4, r3
 800210a:	433c      	orrs	r4, r7
 800210c:	e5c8      	b.n	8001ca0 <__aeabi_dsub+0x26c>
 800210e:	0011      	movs	r1, r2
 8002110:	2300      	movs	r3, #0
 8002112:	2200      	movs	r2, #0
 8002114:	e532      	b.n	8001b7c <__aeabi_dsub+0x148>
 8002116:	46c0      	nop			; (mov r8, r8)
 8002118:	000007ff 	.word	0x000007ff
 800211c:	ff7fffff 	.word	0xff7fffff
 8002120:	000007fe 	.word	0x000007fe
 8002124:	464a      	mov	r2, r9
 8002126:	1814      	adds	r4, r2, r0
 8002128:	4284      	cmp	r4, r0
 800212a:	4192      	sbcs	r2, r2
 800212c:	185b      	adds	r3, r3, r1
 800212e:	4698      	mov	r8, r3
 8002130:	4252      	negs	r2, r2
 8002132:	4490      	add	r8, r2
 8002134:	e5e9      	b.n	8001d0a <__aeabi_dsub+0x2d6>
 8002136:	4642      	mov	r2, r8
 8002138:	4322      	orrs	r2, r4
 800213a:	d100      	bne.n	800213e <__aeabi_dsub+0x70a>
 800213c:	e6a6      	b.n	8001e8c <__aeabi_dsub+0x458>
 800213e:	e5ea      	b.n	8001d16 <__aeabi_dsub+0x2e2>
 8002140:	074b      	lsls	r3, r1, #29
 8002142:	08c2      	lsrs	r2, r0, #3
 8002144:	431a      	orrs	r2, r3
 8002146:	08cb      	lsrs	r3, r1, #3
 8002148:	e632      	b.n	8001db0 <__aeabi_dsub+0x37c>
 800214a:	2200      	movs	r2, #0
 800214c:	4901      	ldr	r1, [pc, #4]	; (8002154 <__aeabi_dsub+0x720>)
 800214e:	0013      	movs	r3, r2
 8002150:	e514      	b.n	8001b7c <__aeabi_dsub+0x148>
 8002152:	46c0      	nop			; (mov r8, r8)
 8002154:	000007ff 	.word	0x000007ff

08002158 <__aeabi_dcmpun>:
 8002158:	b570      	push	{r4, r5, r6, lr}
 800215a:	0005      	movs	r5, r0
 800215c:	480c      	ldr	r0, [pc, #48]	; (8002190 <__aeabi_dcmpun+0x38>)
 800215e:	030c      	lsls	r4, r1, #12
 8002160:	0016      	movs	r6, r2
 8002162:	0049      	lsls	r1, r1, #1
 8002164:	031a      	lsls	r2, r3, #12
 8002166:	005b      	lsls	r3, r3, #1
 8002168:	0b24      	lsrs	r4, r4, #12
 800216a:	0d49      	lsrs	r1, r1, #21
 800216c:	0b12      	lsrs	r2, r2, #12
 800216e:	0d5b      	lsrs	r3, r3, #21
 8002170:	4281      	cmp	r1, r0
 8002172:	d008      	beq.n	8002186 <__aeabi_dcmpun+0x2e>
 8002174:	4906      	ldr	r1, [pc, #24]	; (8002190 <__aeabi_dcmpun+0x38>)
 8002176:	2000      	movs	r0, #0
 8002178:	428b      	cmp	r3, r1
 800217a:	d103      	bne.n	8002184 <__aeabi_dcmpun+0x2c>
 800217c:	4332      	orrs	r2, r6
 800217e:	0010      	movs	r0, r2
 8002180:	1e42      	subs	r2, r0, #1
 8002182:	4190      	sbcs	r0, r2
 8002184:	bd70      	pop	{r4, r5, r6, pc}
 8002186:	2001      	movs	r0, #1
 8002188:	432c      	orrs	r4, r5
 800218a:	d1fb      	bne.n	8002184 <__aeabi_dcmpun+0x2c>
 800218c:	e7f2      	b.n	8002174 <__aeabi_dcmpun+0x1c>
 800218e:	46c0      	nop			; (mov r8, r8)
 8002190:	000007ff 	.word	0x000007ff

08002194 <__aeabi_d2iz>:
 8002194:	000a      	movs	r2, r1
 8002196:	b530      	push	{r4, r5, lr}
 8002198:	4c13      	ldr	r4, [pc, #76]	; (80021e8 <__aeabi_d2iz+0x54>)
 800219a:	0053      	lsls	r3, r2, #1
 800219c:	0309      	lsls	r1, r1, #12
 800219e:	0005      	movs	r5, r0
 80021a0:	0b09      	lsrs	r1, r1, #12
 80021a2:	2000      	movs	r0, #0
 80021a4:	0d5b      	lsrs	r3, r3, #21
 80021a6:	0fd2      	lsrs	r2, r2, #31
 80021a8:	42a3      	cmp	r3, r4
 80021aa:	dd04      	ble.n	80021b6 <__aeabi_d2iz+0x22>
 80021ac:	480f      	ldr	r0, [pc, #60]	; (80021ec <__aeabi_d2iz+0x58>)
 80021ae:	4283      	cmp	r3, r0
 80021b0:	dd02      	ble.n	80021b8 <__aeabi_d2iz+0x24>
 80021b2:	4b0f      	ldr	r3, [pc, #60]	; (80021f0 <__aeabi_d2iz+0x5c>)
 80021b4:	18d0      	adds	r0, r2, r3
 80021b6:	bd30      	pop	{r4, r5, pc}
 80021b8:	2080      	movs	r0, #128	; 0x80
 80021ba:	0340      	lsls	r0, r0, #13
 80021bc:	4301      	orrs	r1, r0
 80021be:	480d      	ldr	r0, [pc, #52]	; (80021f4 <__aeabi_d2iz+0x60>)
 80021c0:	1ac0      	subs	r0, r0, r3
 80021c2:	281f      	cmp	r0, #31
 80021c4:	dd08      	ble.n	80021d8 <__aeabi_d2iz+0x44>
 80021c6:	480c      	ldr	r0, [pc, #48]	; (80021f8 <__aeabi_d2iz+0x64>)
 80021c8:	1ac3      	subs	r3, r0, r3
 80021ca:	40d9      	lsrs	r1, r3
 80021cc:	000b      	movs	r3, r1
 80021ce:	4258      	negs	r0, r3
 80021d0:	2a00      	cmp	r2, #0
 80021d2:	d1f0      	bne.n	80021b6 <__aeabi_d2iz+0x22>
 80021d4:	0018      	movs	r0, r3
 80021d6:	e7ee      	b.n	80021b6 <__aeabi_d2iz+0x22>
 80021d8:	4c08      	ldr	r4, [pc, #32]	; (80021fc <__aeabi_d2iz+0x68>)
 80021da:	40c5      	lsrs	r5, r0
 80021dc:	46a4      	mov	ip, r4
 80021de:	4463      	add	r3, ip
 80021e0:	4099      	lsls	r1, r3
 80021e2:	000b      	movs	r3, r1
 80021e4:	432b      	orrs	r3, r5
 80021e6:	e7f2      	b.n	80021ce <__aeabi_d2iz+0x3a>
 80021e8:	000003fe 	.word	0x000003fe
 80021ec:	0000041d 	.word	0x0000041d
 80021f0:	7fffffff 	.word	0x7fffffff
 80021f4:	00000433 	.word	0x00000433
 80021f8:	00000413 	.word	0x00000413
 80021fc:	fffffbed 	.word	0xfffffbed

08002200 <__aeabi_i2d>:
 8002200:	b570      	push	{r4, r5, r6, lr}
 8002202:	2800      	cmp	r0, #0
 8002204:	d016      	beq.n	8002234 <__aeabi_i2d+0x34>
 8002206:	17c3      	asrs	r3, r0, #31
 8002208:	18c5      	adds	r5, r0, r3
 800220a:	405d      	eors	r5, r3
 800220c:	0fc4      	lsrs	r4, r0, #31
 800220e:	0028      	movs	r0, r5
 8002210:	f000 f894 	bl	800233c <__clzsi2>
 8002214:	4a11      	ldr	r2, [pc, #68]	; (800225c <__aeabi_i2d+0x5c>)
 8002216:	1a12      	subs	r2, r2, r0
 8002218:	280a      	cmp	r0, #10
 800221a:	dc16      	bgt.n	800224a <__aeabi_i2d+0x4a>
 800221c:	0003      	movs	r3, r0
 800221e:	002e      	movs	r6, r5
 8002220:	3315      	adds	r3, #21
 8002222:	409e      	lsls	r6, r3
 8002224:	230b      	movs	r3, #11
 8002226:	1a18      	subs	r0, r3, r0
 8002228:	40c5      	lsrs	r5, r0
 800222a:	0553      	lsls	r3, r2, #21
 800222c:	032d      	lsls	r5, r5, #12
 800222e:	0b2d      	lsrs	r5, r5, #12
 8002230:	0d5b      	lsrs	r3, r3, #21
 8002232:	e003      	b.n	800223c <__aeabi_i2d+0x3c>
 8002234:	2400      	movs	r4, #0
 8002236:	2300      	movs	r3, #0
 8002238:	2500      	movs	r5, #0
 800223a:	2600      	movs	r6, #0
 800223c:	051b      	lsls	r3, r3, #20
 800223e:	432b      	orrs	r3, r5
 8002240:	07e4      	lsls	r4, r4, #31
 8002242:	4323      	orrs	r3, r4
 8002244:	0030      	movs	r0, r6
 8002246:	0019      	movs	r1, r3
 8002248:	bd70      	pop	{r4, r5, r6, pc}
 800224a:	380b      	subs	r0, #11
 800224c:	4085      	lsls	r5, r0
 800224e:	0553      	lsls	r3, r2, #21
 8002250:	032d      	lsls	r5, r5, #12
 8002252:	2600      	movs	r6, #0
 8002254:	0b2d      	lsrs	r5, r5, #12
 8002256:	0d5b      	lsrs	r3, r3, #21
 8002258:	e7f0      	b.n	800223c <__aeabi_i2d+0x3c>
 800225a:	46c0      	nop			; (mov r8, r8)
 800225c:	0000041e 	.word	0x0000041e

08002260 <__aeabi_ui2d>:
 8002260:	b510      	push	{r4, lr}
 8002262:	1e04      	subs	r4, r0, #0
 8002264:	d010      	beq.n	8002288 <__aeabi_ui2d+0x28>
 8002266:	f000 f869 	bl	800233c <__clzsi2>
 800226a:	4b0f      	ldr	r3, [pc, #60]	; (80022a8 <__aeabi_ui2d+0x48>)
 800226c:	1a1b      	subs	r3, r3, r0
 800226e:	280a      	cmp	r0, #10
 8002270:	dc11      	bgt.n	8002296 <__aeabi_ui2d+0x36>
 8002272:	220b      	movs	r2, #11
 8002274:	0021      	movs	r1, r4
 8002276:	1a12      	subs	r2, r2, r0
 8002278:	40d1      	lsrs	r1, r2
 800227a:	3015      	adds	r0, #21
 800227c:	030a      	lsls	r2, r1, #12
 800227e:	055b      	lsls	r3, r3, #21
 8002280:	4084      	lsls	r4, r0
 8002282:	0b12      	lsrs	r2, r2, #12
 8002284:	0d5b      	lsrs	r3, r3, #21
 8002286:	e001      	b.n	800228c <__aeabi_ui2d+0x2c>
 8002288:	2300      	movs	r3, #0
 800228a:	2200      	movs	r2, #0
 800228c:	051b      	lsls	r3, r3, #20
 800228e:	4313      	orrs	r3, r2
 8002290:	0020      	movs	r0, r4
 8002292:	0019      	movs	r1, r3
 8002294:	bd10      	pop	{r4, pc}
 8002296:	0022      	movs	r2, r4
 8002298:	380b      	subs	r0, #11
 800229a:	4082      	lsls	r2, r0
 800229c:	055b      	lsls	r3, r3, #21
 800229e:	0312      	lsls	r2, r2, #12
 80022a0:	2400      	movs	r4, #0
 80022a2:	0b12      	lsrs	r2, r2, #12
 80022a4:	0d5b      	lsrs	r3, r3, #21
 80022a6:	e7f1      	b.n	800228c <__aeabi_ui2d+0x2c>
 80022a8:	0000041e 	.word	0x0000041e

080022ac <__aeabi_f2d>:
 80022ac:	b570      	push	{r4, r5, r6, lr}
 80022ae:	0043      	lsls	r3, r0, #1
 80022b0:	0246      	lsls	r6, r0, #9
 80022b2:	0fc4      	lsrs	r4, r0, #31
 80022b4:	20fe      	movs	r0, #254	; 0xfe
 80022b6:	0e1b      	lsrs	r3, r3, #24
 80022b8:	1c59      	adds	r1, r3, #1
 80022ba:	0a75      	lsrs	r5, r6, #9
 80022bc:	4208      	tst	r0, r1
 80022be:	d00c      	beq.n	80022da <__aeabi_f2d+0x2e>
 80022c0:	22e0      	movs	r2, #224	; 0xe0
 80022c2:	0092      	lsls	r2, r2, #2
 80022c4:	4694      	mov	ip, r2
 80022c6:	076d      	lsls	r5, r5, #29
 80022c8:	0b36      	lsrs	r6, r6, #12
 80022ca:	4463      	add	r3, ip
 80022cc:	051b      	lsls	r3, r3, #20
 80022ce:	4333      	orrs	r3, r6
 80022d0:	07e4      	lsls	r4, r4, #31
 80022d2:	4323      	orrs	r3, r4
 80022d4:	0028      	movs	r0, r5
 80022d6:	0019      	movs	r1, r3
 80022d8:	bd70      	pop	{r4, r5, r6, pc}
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d114      	bne.n	8002308 <__aeabi_f2d+0x5c>
 80022de:	2d00      	cmp	r5, #0
 80022e0:	d01b      	beq.n	800231a <__aeabi_f2d+0x6e>
 80022e2:	0028      	movs	r0, r5
 80022e4:	f000 f82a 	bl	800233c <__clzsi2>
 80022e8:	280a      	cmp	r0, #10
 80022ea:	dc1c      	bgt.n	8002326 <__aeabi_f2d+0x7a>
 80022ec:	230b      	movs	r3, #11
 80022ee:	002a      	movs	r2, r5
 80022f0:	1a1b      	subs	r3, r3, r0
 80022f2:	40da      	lsrs	r2, r3
 80022f4:	0003      	movs	r3, r0
 80022f6:	3315      	adds	r3, #21
 80022f8:	409d      	lsls	r5, r3
 80022fa:	4b0e      	ldr	r3, [pc, #56]	; (8002334 <__aeabi_f2d+0x88>)
 80022fc:	0312      	lsls	r2, r2, #12
 80022fe:	1a1b      	subs	r3, r3, r0
 8002300:	055b      	lsls	r3, r3, #21
 8002302:	0b16      	lsrs	r6, r2, #12
 8002304:	0d5b      	lsrs	r3, r3, #21
 8002306:	e7e1      	b.n	80022cc <__aeabi_f2d+0x20>
 8002308:	2d00      	cmp	r5, #0
 800230a:	d009      	beq.n	8002320 <__aeabi_f2d+0x74>
 800230c:	0b32      	lsrs	r2, r6, #12
 800230e:	2680      	movs	r6, #128	; 0x80
 8002310:	0336      	lsls	r6, r6, #12
 8002312:	4b09      	ldr	r3, [pc, #36]	; (8002338 <__aeabi_f2d+0x8c>)
 8002314:	076d      	lsls	r5, r5, #29
 8002316:	4316      	orrs	r6, r2
 8002318:	e7d8      	b.n	80022cc <__aeabi_f2d+0x20>
 800231a:	2300      	movs	r3, #0
 800231c:	2600      	movs	r6, #0
 800231e:	e7d5      	b.n	80022cc <__aeabi_f2d+0x20>
 8002320:	2600      	movs	r6, #0
 8002322:	4b05      	ldr	r3, [pc, #20]	; (8002338 <__aeabi_f2d+0x8c>)
 8002324:	e7d2      	b.n	80022cc <__aeabi_f2d+0x20>
 8002326:	0003      	movs	r3, r0
 8002328:	002a      	movs	r2, r5
 800232a:	3b0b      	subs	r3, #11
 800232c:	409a      	lsls	r2, r3
 800232e:	2500      	movs	r5, #0
 8002330:	e7e3      	b.n	80022fa <__aeabi_f2d+0x4e>
 8002332:	46c0      	nop			; (mov r8, r8)
 8002334:	00000389 	.word	0x00000389
 8002338:	000007ff 	.word	0x000007ff

0800233c <__clzsi2>:
 800233c:	211c      	movs	r1, #28
 800233e:	2301      	movs	r3, #1
 8002340:	041b      	lsls	r3, r3, #16
 8002342:	4298      	cmp	r0, r3
 8002344:	d301      	bcc.n	800234a <__clzsi2+0xe>
 8002346:	0c00      	lsrs	r0, r0, #16
 8002348:	3910      	subs	r1, #16
 800234a:	0a1b      	lsrs	r3, r3, #8
 800234c:	4298      	cmp	r0, r3
 800234e:	d301      	bcc.n	8002354 <__clzsi2+0x18>
 8002350:	0a00      	lsrs	r0, r0, #8
 8002352:	3908      	subs	r1, #8
 8002354:	091b      	lsrs	r3, r3, #4
 8002356:	4298      	cmp	r0, r3
 8002358:	d301      	bcc.n	800235e <__clzsi2+0x22>
 800235a:	0900      	lsrs	r0, r0, #4
 800235c:	3904      	subs	r1, #4
 800235e:	a202      	add	r2, pc, #8	; (adr r2, 8002368 <__clzsi2+0x2c>)
 8002360:	5c10      	ldrb	r0, [r2, r0]
 8002362:	1840      	adds	r0, r0, r1
 8002364:	4770      	bx	lr
 8002366:	46c0      	nop			; (mov r8, r8)
 8002368:	02020304 	.word	0x02020304
 800236c:	01010101 	.word	0x01010101
	...

08002378 <__clzdi2>:
 8002378:	b510      	push	{r4, lr}
 800237a:	2900      	cmp	r1, #0
 800237c:	d103      	bne.n	8002386 <__clzdi2+0xe>
 800237e:	f7ff ffdd 	bl	800233c <__clzsi2>
 8002382:	3020      	adds	r0, #32
 8002384:	e002      	b.n	800238c <__clzdi2+0x14>
 8002386:	1c08      	adds	r0, r1, #0
 8002388:	f7ff ffd8 	bl	800233c <__clzsi2>
 800238c:	bd10      	pop	{r4, pc}
 800238e:	46c0      	nop			; (mov r8, r8)

08002390 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	60b9      	str	r1, [r7, #8]
 800239a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&hlpuart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	b29a      	uxth	r2, r3
 80023a0:	2301      	movs	r3, #1
 80023a2:	425b      	negs	r3, r3
 80023a4:	68b9      	ldr	r1, [r7, #8]
 80023a6:	4804      	ldr	r0, [pc, #16]	; (80023b8 <_write+0x28>)
 80023a8:	f001 fc70 	bl	8003c8c <HAL_UART_Transmit>
	return len;
 80023ac:	687b      	ldr	r3, [r7, #4]
}
 80023ae:	0018      	movs	r0, r3
 80023b0:	46bd      	mov	sp, r7
 80023b2:	b004      	add	sp, #16
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	46c0      	nop			; (mov r8, r8)
 80023b8:	20000204 	.word	0x20000204

080023bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	int counter = 0;
 80023c2:	2300      	movs	r3, #0
 80023c4:	607b      	str	r3, [r7, #4]
	float number = 12.45f;
 80023c6:	4b10      	ldr	r3, [pc, #64]	; (8002408 <main+0x4c>)
 80023c8:	603b      	str	r3, [r7, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80023ca:	f000 fa63 	bl	8002894 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80023ce:	f000 f821 	bl	8002414 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80023d2:	f000 f8e3 	bl	800259c <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80023d6:	f000 f893 	bl	8002500 <MX_LPUART1_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  printf("Current Number is: %d\r\n", counter++);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	1c5a      	adds	r2, r3, #1
 80023de:	607a      	str	r2, [r7, #4]
 80023e0:	4a0a      	ldr	r2, [pc, #40]	; (800240c <main+0x50>)
 80023e2:	0019      	movs	r1, r3
 80023e4:	0010      	movs	r0, r2
 80023e6:	f002 ff31 	bl	800524c <iprintf>
	  printf("float number is : %f\r\n", number);
 80023ea:	6838      	ldr	r0, [r7, #0]
 80023ec:	f7ff ff5e 	bl	80022ac <__aeabi_f2d>
 80023f0:	0002      	movs	r2, r0
 80023f2:	000b      	movs	r3, r1
 80023f4:	4906      	ldr	r1, [pc, #24]	; (8002410 <main+0x54>)
 80023f6:	0008      	movs	r0, r1
 80023f8:	f002 ff28 	bl	800524c <iprintf>
	  HAL_Delay(500);
 80023fc:	23fa      	movs	r3, #250	; 0xfa
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	0018      	movs	r0, r3
 8002402:	f000 facd 	bl	80029a0 <HAL_Delay>
	  printf("Current Number is: %d\r\n", counter++);
 8002406:	e7e8      	b.n	80023da <main+0x1e>
 8002408:	41473333 	.word	0x41473333
 800240c:	080074b0 	.word	0x080074b0
 8002410:	080074c8 	.word	0x080074c8

08002414 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002414:	b590      	push	{r4, r7, lr}
 8002416:	b0a1      	sub	sp, #132	; 0x84
 8002418:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800241a:	2448      	movs	r4, #72	; 0x48
 800241c:	193b      	adds	r3, r7, r4
 800241e:	0018      	movs	r0, r3
 8002420:	2338      	movs	r3, #56	; 0x38
 8002422:	001a      	movs	r2, r3
 8002424:	2100      	movs	r1, #0
 8002426:	f002 fa8f 	bl	8004948 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800242a:	2338      	movs	r3, #56	; 0x38
 800242c:	18fb      	adds	r3, r7, r3
 800242e:	0018      	movs	r0, r3
 8002430:	2310      	movs	r3, #16
 8002432:	001a      	movs	r2, r3
 8002434:	2100      	movs	r1, #0
 8002436:	f002 fa87 	bl	8004948 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800243a:	1d3b      	adds	r3, r7, #4
 800243c:	0018      	movs	r0, r3
 800243e:	2334      	movs	r3, #52	; 0x34
 8002440:	001a      	movs	r2, r3
 8002442:	2100      	movs	r1, #0
 8002444:	f002 fa80 	bl	8004948 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002448:	2380      	movs	r3, #128	; 0x80
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	0018      	movs	r0, r3
 800244e:	f000 fcf9 	bl	8002e44 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002452:	193b      	adds	r3, r7, r4
 8002454:	2202      	movs	r2, #2
 8002456:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002458:	193b      	adds	r3, r7, r4
 800245a:	2280      	movs	r2, #128	; 0x80
 800245c:	0052      	lsls	r2, r2, #1
 800245e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002460:	0021      	movs	r1, r4
 8002462:	187b      	adds	r3, r7, r1
 8002464:	2200      	movs	r2, #0
 8002466:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002468:	187b      	adds	r3, r7, r1
 800246a:	2240      	movs	r2, #64	; 0x40
 800246c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800246e:	187b      	adds	r3, r7, r1
 8002470:	2202      	movs	r2, #2
 8002472:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002474:	187b      	adds	r3, r7, r1
 8002476:	2202      	movs	r2, #2
 8002478:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800247a:	187b      	adds	r3, r7, r1
 800247c:	2200      	movs	r2, #0
 800247e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8002480:	187b      	adds	r3, r7, r1
 8002482:	2208      	movs	r2, #8
 8002484:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002486:	187b      	adds	r3, r7, r1
 8002488:	2280      	movs	r2, #128	; 0x80
 800248a:	0292      	lsls	r2, r2, #10
 800248c:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800248e:	187b      	adds	r3, r7, r1
 8002490:	2280      	movs	r2, #128	; 0x80
 8002492:	0492      	lsls	r2, r2, #18
 8002494:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002496:	187b      	adds	r3, r7, r1
 8002498:	2280      	movs	r2, #128	; 0x80
 800249a:	0592      	lsls	r2, r2, #22
 800249c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800249e:	187b      	adds	r3, r7, r1
 80024a0:	0018      	movs	r0, r3
 80024a2:	f000 fd1b 	bl	8002edc <HAL_RCC_OscConfig>
 80024a6:	1e03      	subs	r3, r0, #0
 80024a8:	d001      	beq.n	80024ae <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80024aa:	f000 f88d 	bl	80025c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024ae:	2138      	movs	r1, #56	; 0x38
 80024b0:	187b      	adds	r3, r7, r1
 80024b2:	2207      	movs	r2, #7
 80024b4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024b6:	187b      	adds	r3, r7, r1
 80024b8:	2202      	movs	r2, #2
 80024ba:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024bc:	187b      	adds	r3, r7, r1
 80024be:	2200      	movs	r2, #0
 80024c0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80024c2:	187b      	adds	r3, r7, r1
 80024c4:	2200      	movs	r2, #0
 80024c6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80024c8:	187b      	adds	r3, r7, r1
 80024ca:	2102      	movs	r1, #2
 80024cc:	0018      	movs	r0, r3
 80024ce:	f001 f825 	bl	800351c <HAL_RCC_ClockConfig>
 80024d2:	1e03      	subs	r3, r0, #0
 80024d4:	d001      	beq.n	80024da <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80024d6:	f000 f877 	bl	80025c8 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80024da:	1d3b      	adds	r3, r7, #4
 80024dc:	2210      	movs	r2, #16
 80024de:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80024e0:	1d3b      	adds	r3, r7, #4
 80024e2:	2200      	movs	r2, #0
 80024e4:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024e6:	1d3b      	adds	r3, r7, #4
 80024e8:	0018      	movs	r0, r3
 80024ea:	f001 f9c1 	bl	8003870 <HAL_RCCEx_PeriphCLKConfig>
 80024ee:	1e03      	subs	r3, r0, #0
 80024f0:	d001      	beq.n	80024f6 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 80024f2:	f000 f869 	bl	80025c8 <Error_Handler>
  }
}
 80024f6:	46c0      	nop			; (mov r8, r8)
 80024f8:	46bd      	mov	sp, r7
 80024fa:	b021      	add	sp, #132	; 0x84
 80024fc:	bd90      	pop	{r4, r7, pc}
	...

08002500 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002504:	4b23      	ldr	r3, [pc, #140]	; (8002594 <MX_LPUART1_UART_Init+0x94>)
 8002506:	4a24      	ldr	r2, [pc, #144]	; (8002598 <MX_LPUART1_UART_Init+0x98>)
 8002508:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800250a:	4b22      	ldr	r3, [pc, #136]	; (8002594 <MX_LPUART1_UART_Init+0x94>)
 800250c:	22e1      	movs	r2, #225	; 0xe1
 800250e:	0252      	lsls	r2, r2, #9
 8002510:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002512:	4b20      	ldr	r3, [pc, #128]	; (8002594 <MX_LPUART1_UART_Init+0x94>)
 8002514:	2200      	movs	r2, #0
 8002516:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002518:	4b1e      	ldr	r3, [pc, #120]	; (8002594 <MX_LPUART1_UART_Init+0x94>)
 800251a:	2200      	movs	r2, #0
 800251c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800251e:	4b1d      	ldr	r3, [pc, #116]	; (8002594 <MX_LPUART1_UART_Init+0x94>)
 8002520:	2200      	movs	r2, #0
 8002522:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002524:	4b1b      	ldr	r3, [pc, #108]	; (8002594 <MX_LPUART1_UART_Init+0x94>)
 8002526:	220c      	movs	r2, #12
 8002528:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800252a:	4b1a      	ldr	r3, [pc, #104]	; (8002594 <MX_LPUART1_UART_Init+0x94>)
 800252c:	2200      	movs	r2, #0
 800252e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002530:	4b18      	ldr	r3, [pc, #96]	; (8002594 <MX_LPUART1_UART_Init+0x94>)
 8002532:	2200      	movs	r2, #0
 8002534:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002536:	4b17      	ldr	r3, [pc, #92]	; (8002594 <MX_LPUART1_UART_Init+0x94>)
 8002538:	2200      	movs	r2, #0
 800253a:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800253c:	4b15      	ldr	r3, [pc, #84]	; (8002594 <MX_LPUART1_UART_Init+0x94>)
 800253e:	2200      	movs	r2, #0
 8002540:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8002542:	4b14      	ldr	r3, [pc, #80]	; (8002594 <MX_LPUART1_UART_Init+0x94>)
 8002544:	2200      	movs	r2, #0
 8002546:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002548:	4b12      	ldr	r3, [pc, #72]	; (8002594 <MX_LPUART1_UART_Init+0x94>)
 800254a:	0018      	movs	r0, r3
 800254c:	f001 fb48 	bl	8003be0 <HAL_UART_Init>
 8002550:	1e03      	subs	r3, r0, #0
 8002552:	d001      	beq.n	8002558 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8002554:	f000 f838 	bl	80025c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002558:	4b0e      	ldr	r3, [pc, #56]	; (8002594 <MX_LPUART1_UART_Init+0x94>)
 800255a:	2100      	movs	r1, #0
 800255c:	0018      	movs	r0, r3
 800255e:	f002 f8dd 	bl	800471c <HAL_UARTEx_SetTxFifoThreshold>
 8002562:	1e03      	subs	r3, r0, #0
 8002564:	d001      	beq.n	800256a <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002566:	f000 f82f 	bl	80025c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800256a:	4b0a      	ldr	r3, [pc, #40]	; (8002594 <MX_LPUART1_UART_Init+0x94>)
 800256c:	2100      	movs	r1, #0
 800256e:	0018      	movs	r0, r3
 8002570:	f002 f914 	bl	800479c <HAL_UARTEx_SetRxFifoThreshold>
 8002574:	1e03      	subs	r3, r0, #0
 8002576:	d001      	beq.n	800257c <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002578:	f000 f826 	bl	80025c8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800257c:	4b05      	ldr	r3, [pc, #20]	; (8002594 <MX_LPUART1_UART_Init+0x94>)
 800257e:	0018      	movs	r0, r3
 8002580:	f002 f892 	bl	80046a8 <HAL_UARTEx_DisableFifoMode>
 8002584:	1e03      	subs	r3, r0, #0
 8002586:	d001      	beq.n	800258c <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002588:	f000 f81e 	bl	80025c8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800258c:	46c0      	nop			; (mov r8, r8)
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	46c0      	nop			; (mov r8, r8)
 8002594:	20000204 	.word	0x20000204
 8002598:	40008000 	.word	0x40008000

0800259c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025a2:	4b08      	ldr	r3, [pc, #32]	; (80025c4 <MX_GPIO_Init+0x28>)
 80025a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025a6:	4b07      	ldr	r3, [pc, #28]	; (80025c4 <MX_GPIO_Init+0x28>)
 80025a8:	2101      	movs	r1, #1
 80025aa:	430a      	orrs	r2, r1
 80025ac:	635a      	str	r2, [r3, #52]	; 0x34
 80025ae:	4b05      	ldr	r3, [pc, #20]	; (80025c4 <MX_GPIO_Init+0x28>)
 80025b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025b2:	2201      	movs	r2, #1
 80025b4:	4013      	ands	r3, r2
 80025b6:	607b      	str	r3, [r7, #4]
 80025b8:	687b      	ldr	r3, [r7, #4]

}
 80025ba:	46c0      	nop			; (mov r8, r8)
 80025bc:	46bd      	mov	sp, r7
 80025be:	b002      	add	sp, #8
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	46c0      	nop			; (mov r8, r8)
 80025c4:	40021000 	.word	0x40021000

080025c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025cc:	b672      	cpsid	i
}
 80025ce:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025d0:	e7fe      	b.n	80025d0 <Error_Handler+0x8>
	...

080025d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025da:	4b11      	ldr	r3, [pc, #68]	; (8002620 <HAL_MspInit+0x4c>)
 80025dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025de:	4b10      	ldr	r3, [pc, #64]	; (8002620 <HAL_MspInit+0x4c>)
 80025e0:	2101      	movs	r1, #1
 80025e2:	430a      	orrs	r2, r1
 80025e4:	641a      	str	r2, [r3, #64]	; 0x40
 80025e6:	4b0e      	ldr	r3, [pc, #56]	; (8002620 <HAL_MspInit+0x4c>)
 80025e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ea:	2201      	movs	r2, #1
 80025ec:	4013      	ands	r3, r2
 80025ee:	607b      	str	r3, [r7, #4]
 80025f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025f2:	4b0b      	ldr	r3, [pc, #44]	; (8002620 <HAL_MspInit+0x4c>)
 80025f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80025f6:	4b0a      	ldr	r3, [pc, #40]	; (8002620 <HAL_MspInit+0x4c>)
 80025f8:	2180      	movs	r1, #128	; 0x80
 80025fa:	0549      	lsls	r1, r1, #21
 80025fc:	430a      	orrs	r2, r1
 80025fe:	63da      	str	r2, [r3, #60]	; 0x3c
 8002600:	4b07      	ldr	r3, [pc, #28]	; (8002620 <HAL_MspInit+0x4c>)
 8002602:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002604:	2380      	movs	r3, #128	; 0x80
 8002606:	055b      	lsls	r3, r3, #21
 8002608:	4013      	ands	r3, r2
 800260a:	603b      	str	r3, [r7, #0]
 800260c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 800260e:	23c0      	movs	r3, #192	; 0xc0
 8002610:	00db      	lsls	r3, r3, #3
 8002612:	0018      	movs	r0, r3
 8002614:	f000 f9e8 	bl	80029e8 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002618:	46c0      	nop			; (mov r8, r8)
 800261a:	46bd      	mov	sp, r7
 800261c:	b002      	add	sp, #8
 800261e:	bd80      	pop	{r7, pc}
 8002620:	40021000 	.word	0x40021000

08002624 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002624:	b590      	push	{r4, r7, lr}
 8002626:	b08b      	sub	sp, #44	; 0x2c
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800262c:	2414      	movs	r4, #20
 800262e:	193b      	adds	r3, r7, r4
 8002630:	0018      	movs	r0, r3
 8002632:	2314      	movs	r3, #20
 8002634:	001a      	movs	r2, r3
 8002636:	2100      	movs	r1, #0
 8002638:	f002 f986 	bl	8004948 <memset>
  if(huart->Instance==LPUART1)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a1b      	ldr	r2, [pc, #108]	; (80026b0 <HAL_UART_MspInit+0x8c>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d130      	bne.n	80026a8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002646:	4b1b      	ldr	r3, [pc, #108]	; (80026b4 <HAL_UART_MspInit+0x90>)
 8002648:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800264a:	4b1a      	ldr	r3, [pc, #104]	; (80026b4 <HAL_UART_MspInit+0x90>)
 800264c:	2180      	movs	r1, #128	; 0x80
 800264e:	0349      	lsls	r1, r1, #13
 8002650:	430a      	orrs	r2, r1
 8002652:	63da      	str	r2, [r3, #60]	; 0x3c
 8002654:	4b17      	ldr	r3, [pc, #92]	; (80026b4 <HAL_UART_MspInit+0x90>)
 8002656:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002658:	2380      	movs	r3, #128	; 0x80
 800265a:	035b      	lsls	r3, r3, #13
 800265c:	4013      	ands	r3, r2
 800265e:	613b      	str	r3, [r7, #16]
 8002660:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002662:	4b14      	ldr	r3, [pc, #80]	; (80026b4 <HAL_UART_MspInit+0x90>)
 8002664:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002666:	4b13      	ldr	r3, [pc, #76]	; (80026b4 <HAL_UART_MspInit+0x90>)
 8002668:	2101      	movs	r1, #1
 800266a:	430a      	orrs	r2, r1
 800266c:	635a      	str	r2, [r3, #52]	; 0x34
 800266e:	4b11      	ldr	r3, [pc, #68]	; (80026b4 <HAL_UART_MspInit+0x90>)
 8002670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002672:	2201      	movs	r2, #1
 8002674:	4013      	ands	r3, r2
 8002676:	60fb      	str	r3, [r7, #12]
 8002678:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800267a:	0021      	movs	r1, r4
 800267c:	187b      	adds	r3, r7, r1
 800267e:	220c      	movs	r2, #12
 8002680:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002682:	187b      	adds	r3, r7, r1
 8002684:	2202      	movs	r2, #2
 8002686:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002688:	187b      	adds	r3, r7, r1
 800268a:	2200      	movs	r2, #0
 800268c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800268e:	187b      	adds	r3, r7, r1
 8002690:	2200      	movs	r2, #0
 8002692:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8002694:	187b      	adds	r3, r7, r1
 8002696:	2206      	movs	r2, #6
 8002698:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800269a:	187a      	adds	r2, r7, r1
 800269c:	23a0      	movs	r3, #160	; 0xa0
 800269e:	05db      	lsls	r3, r3, #23
 80026a0:	0011      	movs	r1, r2
 80026a2:	0018      	movs	r0, r3
 80026a4:	f000 fa6a 	bl	8002b7c <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80026a8:	46c0      	nop			; (mov r8, r8)
 80026aa:	46bd      	mov	sp, r7
 80026ac:	b00b      	add	sp, #44	; 0x2c
 80026ae:	bd90      	pop	{r4, r7, pc}
 80026b0:	40008000 	.word	0x40008000
 80026b4:	40021000 	.word	0x40021000

080026b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80026bc:	e7fe      	b.n	80026bc <NMI_Handler+0x4>

080026be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026be:	b580      	push	{r7, lr}
 80026c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026c2:	e7fe      	b.n	80026c2 <HardFault_Handler+0x4>

080026c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80026c8:	46c0      	nop			; (mov r8, r8)
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}

080026ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026ce:	b580      	push	{r7, lr}
 80026d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026d2:	46c0      	nop			; (mov r8, r8)
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026dc:	f000 f944 	bl	8002968 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026e0:	46c0      	nop			; (mov r8, r8)
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}

080026e6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80026e6:	b580      	push	{r7, lr}
 80026e8:	af00      	add	r7, sp, #0
	return 1;
 80026ea:	2301      	movs	r3, #1
}
 80026ec:	0018      	movs	r0, r3
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}

080026f2 <_kill>:

int _kill(int pid, int sig)
{
 80026f2:	b580      	push	{r7, lr}
 80026f4:	b082      	sub	sp, #8
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
 80026fa:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80026fc:	f002 f8fa 	bl	80048f4 <__errno>
 8002700:	0003      	movs	r3, r0
 8002702:	2216      	movs	r2, #22
 8002704:	601a      	str	r2, [r3, #0]
	return -1;
 8002706:	2301      	movs	r3, #1
 8002708:	425b      	negs	r3, r3
}
 800270a:	0018      	movs	r0, r3
 800270c:	46bd      	mov	sp, r7
 800270e:	b002      	add	sp, #8
 8002710:	bd80      	pop	{r7, pc}

08002712 <_exit>:

void _exit (int status)
{
 8002712:	b580      	push	{r7, lr}
 8002714:	b082      	sub	sp, #8
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800271a:	2301      	movs	r3, #1
 800271c:	425a      	negs	r2, r3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	0011      	movs	r1, r2
 8002722:	0018      	movs	r0, r3
 8002724:	f7ff ffe5 	bl	80026f2 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002728:	e7fe      	b.n	8002728 <_exit+0x16>

0800272a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800272a:	b580      	push	{r7, lr}
 800272c:	b086      	sub	sp, #24
 800272e:	af00      	add	r7, sp, #0
 8002730:	60f8      	str	r0, [r7, #12]
 8002732:	60b9      	str	r1, [r7, #8]
 8002734:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002736:	2300      	movs	r3, #0
 8002738:	617b      	str	r3, [r7, #20]
 800273a:	e00a      	b.n	8002752 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800273c:	e000      	b.n	8002740 <_read+0x16>
 800273e:	bf00      	nop
 8002740:	0001      	movs	r1, r0
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	1c5a      	adds	r2, r3, #1
 8002746:	60ba      	str	r2, [r7, #8]
 8002748:	b2ca      	uxtb	r2, r1
 800274a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	3301      	adds	r3, #1
 8002750:	617b      	str	r3, [r7, #20]
 8002752:	697a      	ldr	r2, [r7, #20]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	429a      	cmp	r2, r3
 8002758:	dbf0      	blt.n	800273c <_read+0x12>
	}

return len;
 800275a:	687b      	ldr	r3, [r7, #4]
}
 800275c:	0018      	movs	r0, r3
 800275e:	46bd      	mov	sp, r7
 8002760:	b006      	add	sp, #24
 8002762:	bd80      	pop	{r7, pc}

08002764 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
	return -1;
 800276c:	2301      	movs	r3, #1
 800276e:	425b      	negs	r3, r3
}
 8002770:	0018      	movs	r0, r3
 8002772:	46bd      	mov	sp, r7
 8002774:	b002      	add	sp, #8
 8002776:	bd80      	pop	{r7, pc}

08002778 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	2280      	movs	r2, #128	; 0x80
 8002786:	0192      	lsls	r2, r2, #6
 8002788:	605a      	str	r2, [r3, #4]
	return 0;
 800278a:	2300      	movs	r3, #0
}
 800278c:	0018      	movs	r0, r3
 800278e:	46bd      	mov	sp, r7
 8002790:	b002      	add	sp, #8
 8002792:	bd80      	pop	{r7, pc}

08002794 <_isatty>:

int _isatty(int file)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
	return 1;
 800279c:	2301      	movs	r3, #1
}
 800279e:	0018      	movs	r0, r3
 80027a0:	46bd      	mov	sp, r7
 80027a2:	b002      	add	sp, #8
 80027a4:	bd80      	pop	{r7, pc}

080027a6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80027a6:	b580      	push	{r7, lr}
 80027a8:	b084      	sub	sp, #16
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	60f8      	str	r0, [r7, #12]
 80027ae:	60b9      	str	r1, [r7, #8]
 80027b0:	607a      	str	r2, [r7, #4]
	return 0;
 80027b2:	2300      	movs	r3, #0
}
 80027b4:	0018      	movs	r0, r3
 80027b6:	46bd      	mov	sp, r7
 80027b8:	b004      	add	sp, #16
 80027ba:	bd80      	pop	{r7, pc}

080027bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b086      	sub	sp, #24
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027c4:	4a14      	ldr	r2, [pc, #80]	; (8002818 <_sbrk+0x5c>)
 80027c6:	4b15      	ldr	r3, [pc, #84]	; (800281c <_sbrk+0x60>)
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027d0:	4b13      	ldr	r3, [pc, #76]	; (8002820 <_sbrk+0x64>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d102      	bne.n	80027de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027d8:	4b11      	ldr	r3, [pc, #68]	; (8002820 <_sbrk+0x64>)
 80027da:	4a12      	ldr	r2, [pc, #72]	; (8002824 <_sbrk+0x68>)
 80027dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027de:	4b10      	ldr	r3, [pc, #64]	; (8002820 <_sbrk+0x64>)
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	18d3      	adds	r3, r2, r3
 80027e6:	693a      	ldr	r2, [r7, #16]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d207      	bcs.n	80027fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027ec:	f002 f882 	bl	80048f4 <__errno>
 80027f0:	0003      	movs	r3, r0
 80027f2:	220c      	movs	r2, #12
 80027f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027f6:	2301      	movs	r3, #1
 80027f8:	425b      	negs	r3, r3
 80027fa:	e009      	b.n	8002810 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027fc:	4b08      	ldr	r3, [pc, #32]	; (8002820 <_sbrk+0x64>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002802:	4b07      	ldr	r3, [pc, #28]	; (8002820 <_sbrk+0x64>)
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	18d2      	adds	r2, r2, r3
 800280a:	4b05      	ldr	r3, [pc, #20]	; (8002820 <_sbrk+0x64>)
 800280c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800280e:	68fb      	ldr	r3, [r7, #12]
}
 8002810:	0018      	movs	r0, r3
 8002812:	46bd      	mov	sp, r7
 8002814:	b006      	add	sp, #24
 8002816:	bd80      	pop	{r7, pc}
 8002818:	20009000 	.word	0x20009000
 800281c:	00000400 	.word	0x00000400
 8002820:	200001f8 	.word	0x200001f8
 8002824:	200002a8 	.word	0x200002a8

08002828 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800282c:	4b03      	ldr	r3, [pc, #12]	; (800283c <SystemInit+0x14>)
 800282e:	2280      	movs	r2, #128	; 0x80
 8002830:	0512      	lsls	r2, r2, #20
 8002832:	609a      	str	r2, [r3, #8]
#endif
}
 8002834:	46c0      	nop			; (mov r8, r8)
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	46c0      	nop			; (mov r8, r8)
 800283c:	e000ed00 	.word	0xe000ed00

08002840 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002840:	480d      	ldr	r0, [pc, #52]	; (8002878 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002842:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002844:	f7ff fff0 	bl	8002828 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002848:	480c      	ldr	r0, [pc, #48]	; (800287c <LoopForever+0x6>)
  ldr r1, =_edata
 800284a:	490d      	ldr	r1, [pc, #52]	; (8002880 <LoopForever+0xa>)
  ldr r2, =_sidata
 800284c:	4a0d      	ldr	r2, [pc, #52]	; (8002884 <LoopForever+0xe>)
  movs r3, #0
 800284e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002850:	e002      	b.n	8002858 <LoopCopyDataInit>

08002852 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002852:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002854:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002856:	3304      	adds	r3, #4

08002858 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002858:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800285a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800285c:	d3f9      	bcc.n	8002852 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800285e:	4a0a      	ldr	r2, [pc, #40]	; (8002888 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002860:	4c0a      	ldr	r4, [pc, #40]	; (800288c <LoopForever+0x16>)
  movs r3, #0
 8002862:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002864:	e001      	b.n	800286a <LoopFillZerobss>

08002866 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002866:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002868:	3204      	adds	r2, #4

0800286a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800286a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800286c:	d3fb      	bcc.n	8002866 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800286e:	f002 f847 	bl	8004900 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002872:	f7ff fda3 	bl	80023bc <main>

08002876 <LoopForever>:

LoopForever:
  b LoopForever
 8002876:	e7fe      	b.n	8002876 <LoopForever>
  ldr   r0, =_estack
 8002878:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 800287c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002880:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002884:	080079dc 	.word	0x080079dc
  ldr r2, =_sbss
 8002888:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 800288c:	200002a8 	.word	0x200002a8

08002890 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002890:	e7fe      	b.n	8002890 <ADC1_COMP_IRQHandler>
	...

08002894 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800289a:	1dfb      	adds	r3, r7, #7
 800289c:	2200      	movs	r2, #0
 800289e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028a0:	4b0b      	ldr	r3, [pc, #44]	; (80028d0 <HAL_Init+0x3c>)
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	4b0a      	ldr	r3, [pc, #40]	; (80028d0 <HAL_Init+0x3c>)
 80028a6:	2180      	movs	r1, #128	; 0x80
 80028a8:	0049      	lsls	r1, r1, #1
 80028aa:	430a      	orrs	r2, r1
 80028ac:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80028ae:	2000      	movs	r0, #0
 80028b0:	f000 f810 	bl	80028d4 <HAL_InitTick>
 80028b4:	1e03      	subs	r3, r0, #0
 80028b6:	d003      	beq.n	80028c0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80028b8:	1dfb      	adds	r3, r7, #7
 80028ba:	2201      	movs	r2, #1
 80028bc:	701a      	strb	r2, [r3, #0]
 80028be:	e001      	b.n	80028c4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80028c0:	f7ff fe88 	bl	80025d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80028c4:	1dfb      	adds	r3, r7, #7
 80028c6:	781b      	ldrb	r3, [r3, #0]
}
 80028c8:	0018      	movs	r0, r3
 80028ca:	46bd      	mov	sp, r7
 80028cc:	b002      	add	sp, #8
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	40022000 	.word	0x40022000

080028d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028d4:	b590      	push	{r4, r7, lr}
 80028d6:	b085      	sub	sp, #20
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80028dc:	230f      	movs	r3, #15
 80028de:	18fb      	adds	r3, r7, r3
 80028e0:	2200      	movs	r2, #0
 80028e2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80028e4:	4b1d      	ldr	r3, [pc, #116]	; (800295c <HAL_InitTick+0x88>)
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d02b      	beq.n	8002944 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80028ec:	4b1c      	ldr	r3, [pc, #112]	; (8002960 <HAL_InitTick+0x8c>)
 80028ee:	681c      	ldr	r4, [r3, #0]
 80028f0:	4b1a      	ldr	r3, [pc, #104]	; (800295c <HAL_InitTick+0x88>)
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	0019      	movs	r1, r3
 80028f6:	23fa      	movs	r3, #250	; 0xfa
 80028f8:	0098      	lsls	r0, r3, #2
 80028fa:	f7fd fc1f 	bl	800013c <__udivsi3>
 80028fe:	0003      	movs	r3, r0
 8002900:	0019      	movs	r1, r3
 8002902:	0020      	movs	r0, r4
 8002904:	f7fd fc1a 	bl	800013c <__udivsi3>
 8002908:	0003      	movs	r3, r0
 800290a:	0018      	movs	r0, r3
 800290c:	f000 f929 	bl	8002b62 <HAL_SYSTICK_Config>
 8002910:	1e03      	subs	r3, r0, #0
 8002912:	d112      	bne.n	800293a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2b03      	cmp	r3, #3
 8002918:	d80a      	bhi.n	8002930 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800291a:	6879      	ldr	r1, [r7, #4]
 800291c:	2301      	movs	r3, #1
 800291e:	425b      	negs	r3, r3
 8002920:	2200      	movs	r2, #0
 8002922:	0018      	movs	r0, r3
 8002924:	f000 f908 	bl	8002b38 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002928:	4b0e      	ldr	r3, [pc, #56]	; (8002964 <HAL_InitTick+0x90>)
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	601a      	str	r2, [r3, #0]
 800292e:	e00d      	b.n	800294c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002930:	230f      	movs	r3, #15
 8002932:	18fb      	adds	r3, r7, r3
 8002934:	2201      	movs	r2, #1
 8002936:	701a      	strb	r2, [r3, #0]
 8002938:	e008      	b.n	800294c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800293a:	230f      	movs	r3, #15
 800293c:	18fb      	adds	r3, r7, r3
 800293e:	2201      	movs	r2, #1
 8002940:	701a      	strb	r2, [r3, #0]
 8002942:	e003      	b.n	800294c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002944:	230f      	movs	r3, #15
 8002946:	18fb      	adds	r3, r7, r3
 8002948:	2201      	movs	r2, #1
 800294a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800294c:	230f      	movs	r3, #15
 800294e:	18fb      	adds	r3, r7, r3
 8002950:	781b      	ldrb	r3, [r3, #0]
}
 8002952:	0018      	movs	r0, r3
 8002954:	46bd      	mov	sp, r7
 8002956:	b005      	add	sp, #20
 8002958:	bd90      	pop	{r4, r7, pc}
 800295a:	46c0      	nop			; (mov r8, r8)
 800295c:	20000008 	.word	0x20000008
 8002960:	20000000 	.word	0x20000000
 8002964:	20000004 	.word	0x20000004

08002968 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800296c:	4b05      	ldr	r3, [pc, #20]	; (8002984 <HAL_IncTick+0x1c>)
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	001a      	movs	r2, r3
 8002972:	4b05      	ldr	r3, [pc, #20]	; (8002988 <HAL_IncTick+0x20>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	18d2      	adds	r2, r2, r3
 8002978:	4b03      	ldr	r3, [pc, #12]	; (8002988 <HAL_IncTick+0x20>)
 800297a:	601a      	str	r2, [r3, #0]
}
 800297c:	46c0      	nop			; (mov r8, r8)
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	46c0      	nop			; (mov r8, r8)
 8002984:	20000008 	.word	0x20000008
 8002988:	20000294 	.word	0x20000294

0800298c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0
  return uwTick;
 8002990:	4b02      	ldr	r3, [pc, #8]	; (800299c <HAL_GetTick+0x10>)
 8002992:	681b      	ldr	r3, [r3, #0]
}
 8002994:	0018      	movs	r0, r3
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	46c0      	nop			; (mov r8, r8)
 800299c:	20000294 	.word	0x20000294

080029a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b084      	sub	sp, #16
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029a8:	f7ff fff0 	bl	800298c <HAL_GetTick>
 80029ac:	0003      	movs	r3, r0
 80029ae:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	3301      	adds	r3, #1
 80029b8:	d005      	beq.n	80029c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029ba:	4b0a      	ldr	r3, [pc, #40]	; (80029e4 <HAL_Delay+0x44>)
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	001a      	movs	r2, r3
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	189b      	adds	r3, r3, r2
 80029c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80029c6:	46c0      	nop			; (mov r8, r8)
 80029c8:	f7ff ffe0 	bl	800298c <HAL_GetTick>
 80029cc:	0002      	movs	r2, r0
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	68fa      	ldr	r2, [r7, #12]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d8f7      	bhi.n	80029c8 <HAL_Delay+0x28>
  {
  }
}
 80029d8:	46c0      	nop			; (mov r8, r8)
 80029da:	46c0      	nop			; (mov r8, r8)
 80029dc:	46bd      	mov	sp, r7
 80029de:	b004      	add	sp, #16
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	46c0      	nop			; (mov r8, r8)
 80029e4:	20000008 	.word	0x20000008

080029e8 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80029f0:	4b06      	ldr	r3, [pc, #24]	; (8002a0c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a06      	ldr	r2, [pc, #24]	; (8002a10 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80029f6:	4013      	ands	r3, r2
 80029f8:	0019      	movs	r1, r3
 80029fa:	4b04      	ldr	r3, [pc, #16]	; (8002a0c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	430a      	orrs	r2, r1
 8002a00:	601a      	str	r2, [r3, #0]
}
 8002a02:	46c0      	nop			; (mov r8, r8)
 8002a04:	46bd      	mov	sp, r7
 8002a06:	b002      	add	sp, #8
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	46c0      	nop			; (mov r8, r8)
 8002a0c:	40010000 	.word	0x40010000
 8002a10:	fffff9ff 	.word	0xfffff9ff

08002a14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a14:	b590      	push	{r4, r7, lr}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	0002      	movs	r2, r0
 8002a1c:	6039      	str	r1, [r7, #0]
 8002a1e:	1dfb      	adds	r3, r7, #7
 8002a20:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002a22:	1dfb      	adds	r3, r7, #7
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	2b7f      	cmp	r3, #127	; 0x7f
 8002a28:	d828      	bhi.n	8002a7c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002a2a:	4a2f      	ldr	r2, [pc, #188]	; (8002ae8 <__NVIC_SetPriority+0xd4>)
 8002a2c:	1dfb      	adds	r3, r7, #7
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	b25b      	sxtb	r3, r3
 8002a32:	089b      	lsrs	r3, r3, #2
 8002a34:	33c0      	adds	r3, #192	; 0xc0
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	589b      	ldr	r3, [r3, r2]
 8002a3a:	1dfa      	adds	r2, r7, #7
 8002a3c:	7812      	ldrb	r2, [r2, #0]
 8002a3e:	0011      	movs	r1, r2
 8002a40:	2203      	movs	r2, #3
 8002a42:	400a      	ands	r2, r1
 8002a44:	00d2      	lsls	r2, r2, #3
 8002a46:	21ff      	movs	r1, #255	; 0xff
 8002a48:	4091      	lsls	r1, r2
 8002a4a:	000a      	movs	r2, r1
 8002a4c:	43d2      	mvns	r2, r2
 8002a4e:	401a      	ands	r2, r3
 8002a50:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	019b      	lsls	r3, r3, #6
 8002a56:	22ff      	movs	r2, #255	; 0xff
 8002a58:	401a      	ands	r2, r3
 8002a5a:	1dfb      	adds	r3, r7, #7
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	0018      	movs	r0, r3
 8002a60:	2303      	movs	r3, #3
 8002a62:	4003      	ands	r3, r0
 8002a64:	00db      	lsls	r3, r3, #3
 8002a66:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002a68:	481f      	ldr	r0, [pc, #124]	; (8002ae8 <__NVIC_SetPriority+0xd4>)
 8002a6a:	1dfb      	adds	r3, r7, #7
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	b25b      	sxtb	r3, r3
 8002a70:	089b      	lsrs	r3, r3, #2
 8002a72:	430a      	orrs	r2, r1
 8002a74:	33c0      	adds	r3, #192	; 0xc0
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002a7a:	e031      	b.n	8002ae0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002a7c:	4a1b      	ldr	r2, [pc, #108]	; (8002aec <__NVIC_SetPriority+0xd8>)
 8002a7e:	1dfb      	adds	r3, r7, #7
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	0019      	movs	r1, r3
 8002a84:	230f      	movs	r3, #15
 8002a86:	400b      	ands	r3, r1
 8002a88:	3b08      	subs	r3, #8
 8002a8a:	089b      	lsrs	r3, r3, #2
 8002a8c:	3306      	adds	r3, #6
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	18d3      	adds	r3, r2, r3
 8002a92:	3304      	adds	r3, #4
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	1dfa      	adds	r2, r7, #7
 8002a98:	7812      	ldrb	r2, [r2, #0]
 8002a9a:	0011      	movs	r1, r2
 8002a9c:	2203      	movs	r2, #3
 8002a9e:	400a      	ands	r2, r1
 8002aa0:	00d2      	lsls	r2, r2, #3
 8002aa2:	21ff      	movs	r1, #255	; 0xff
 8002aa4:	4091      	lsls	r1, r2
 8002aa6:	000a      	movs	r2, r1
 8002aa8:	43d2      	mvns	r2, r2
 8002aaa:	401a      	ands	r2, r3
 8002aac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	019b      	lsls	r3, r3, #6
 8002ab2:	22ff      	movs	r2, #255	; 0xff
 8002ab4:	401a      	ands	r2, r3
 8002ab6:	1dfb      	adds	r3, r7, #7
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	0018      	movs	r0, r3
 8002abc:	2303      	movs	r3, #3
 8002abe:	4003      	ands	r3, r0
 8002ac0:	00db      	lsls	r3, r3, #3
 8002ac2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002ac4:	4809      	ldr	r0, [pc, #36]	; (8002aec <__NVIC_SetPriority+0xd8>)
 8002ac6:	1dfb      	adds	r3, r7, #7
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	001c      	movs	r4, r3
 8002acc:	230f      	movs	r3, #15
 8002ace:	4023      	ands	r3, r4
 8002ad0:	3b08      	subs	r3, #8
 8002ad2:	089b      	lsrs	r3, r3, #2
 8002ad4:	430a      	orrs	r2, r1
 8002ad6:	3306      	adds	r3, #6
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	18c3      	adds	r3, r0, r3
 8002adc:	3304      	adds	r3, #4
 8002ade:	601a      	str	r2, [r3, #0]
}
 8002ae0:	46c0      	nop			; (mov r8, r8)
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	b003      	add	sp, #12
 8002ae6:	bd90      	pop	{r4, r7, pc}
 8002ae8:	e000e100 	.word	0xe000e100
 8002aec:	e000ed00 	.word	0xe000ed00

08002af0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b082      	sub	sp, #8
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	1e5a      	subs	r2, r3, #1
 8002afc:	2380      	movs	r3, #128	; 0x80
 8002afe:	045b      	lsls	r3, r3, #17
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d301      	bcc.n	8002b08 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b04:	2301      	movs	r3, #1
 8002b06:	e010      	b.n	8002b2a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b08:	4b0a      	ldr	r3, [pc, #40]	; (8002b34 <SysTick_Config+0x44>)
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	3a01      	subs	r2, #1
 8002b0e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b10:	2301      	movs	r3, #1
 8002b12:	425b      	negs	r3, r3
 8002b14:	2103      	movs	r1, #3
 8002b16:	0018      	movs	r0, r3
 8002b18:	f7ff ff7c 	bl	8002a14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b1c:	4b05      	ldr	r3, [pc, #20]	; (8002b34 <SysTick_Config+0x44>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b22:	4b04      	ldr	r3, [pc, #16]	; (8002b34 <SysTick_Config+0x44>)
 8002b24:	2207      	movs	r2, #7
 8002b26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	0018      	movs	r0, r3
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	b002      	add	sp, #8
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	46c0      	nop			; (mov r8, r8)
 8002b34:	e000e010 	.word	0xe000e010

08002b38 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	60b9      	str	r1, [r7, #8]
 8002b40:	607a      	str	r2, [r7, #4]
 8002b42:	210f      	movs	r1, #15
 8002b44:	187b      	adds	r3, r7, r1
 8002b46:	1c02      	adds	r2, r0, #0
 8002b48:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002b4a:	68ba      	ldr	r2, [r7, #8]
 8002b4c:	187b      	adds	r3, r7, r1
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	b25b      	sxtb	r3, r3
 8002b52:	0011      	movs	r1, r2
 8002b54:	0018      	movs	r0, r3
 8002b56:	f7ff ff5d 	bl	8002a14 <__NVIC_SetPriority>
}
 8002b5a:	46c0      	nop			; (mov r8, r8)
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	b004      	add	sp, #16
 8002b60:	bd80      	pop	{r7, pc}

08002b62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b62:	b580      	push	{r7, lr}
 8002b64:	b082      	sub	sp, #8
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	0018      	movs	r0, r3
 8002b6e:	f7ff ffbf 	bl	8002af0 <SysTick_Config>
 8002b72:	0003      	movs	r3, r0
}
 8002b74:	0018      	movs	r0, r3
 8002b76:	46bd      	mov	sp, r7
 8002b78:	b002      	add	sp, #8
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b086      	sub	sp, #24
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b86:	2300      	movs	r3, #0
 8002b88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b8a:	e147      	b.n	8002e1c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2101      	movs	r1, #1
 8002b92:	697a      	ldr	r2, [r7, #20]
 8002b94:	4091      	lsls	r1, r2
 8002b96:	000a      	movs	r2, r1
 8002b98:	4013      	ands	r3, r2
 8002b9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d100      	bne.n	8002ba4 <HAL_GPIO_Init+0x28>
 8002ba2:	e138      	b.n	8002e16 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d00b      	beq.n	8002bc4 <HAL_GPIO_Init+0x48>
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d007      	beq.n	8002bc4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002bb8:	2b11      	cmp	r3, #17
 8002bba:	d003      	beq.n	8002bc4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	2b12      	cmp	r3, #18
 8002bc2:	d130      	bne.n	8002c26 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	005b      	lsls	r3, r3, #1
 8002bce:	2203      	movs	r2, #3
 8002bd0:	409a      	lsls	r2, r3
 8002bd2:	0013      	movs	r3, r2
 8002bd4:	43da      	mvns	r2, r3
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	4013      	ands	r3, r2
 8002bda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	68da      	ldr	r2, [r3, #12]
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	005b      	lsls	r3, r3, #1
 8002be4:	409a      	lsls	r2, r3
 8002be6:	0013      	movs	r3, r2
 8002be8:	693a      	ldr	r2, [r7, #16]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	693a      	ldr	r2, [r7, #16]
 8002bf2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	409a      	lsls	r2, r3
 8002c00:	0013      	movs	r3, r2
 8002c02:	43da      	mvns	r2, r3
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	4013      	ands	r3, r2
 8002c08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	091b      	lsrs	r3, r3, #4
 8002c10:	2201      	movs	r2, #1
 8002c12:	401a      	ands	r2, r3
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	409a      	lsls	r2, r3
 8002c18:	0013      	movs	r3, r2
 8002c1a:	693a      	ldr	r2, [r7, #16]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	693a      	ldr	r2, [r7, #16]
 8002c24:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	68db      	ldr	r3, [r3, #12]
 8002c2a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	005b      	lsls	r3, r3, #1
 8002c30:	2203      	movs	r2, #3
 8002c32:	409a      	lsls	r2, r3
 8002c34:	0013      	movs	r3, r2
 8002c36:	43da      	mvns	r2, r3
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	689a      	ldr	r2, [r3, #8]
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	005b      	lsls	r3, r3, #1
 8002c46:	409a      	lsls	r2, r3
 8002c48:	0013      	movs	r3, r2
 8002c4a:	693a      	ldr	r2, [r7, #16]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	693a      	ldr	r2, [r7, #16]
 8002c54:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d003      	beq.n	8002c66 <HAL_GPIO_Init+0xea>
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	2b12      	cmp	r3, #18
 8002c64:	d123      	bne.n	8002cae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	08da      	lsrs	r2, r3, #3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	3208      	adds	r2, #8
 8002c6e:	0092      	lsls	r2, r2, #2
 8002c70:	58d3      	ldr	r3, [r2, r3]
 8002c72:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	2207      	movs	r2, #7
 8002c78:	4013      	ands	r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	220f      	movs	r2, #15
 8002c7e:	409a      	lsls	r2, r3
 8002c80:	0013      	movs	r3, r2
 8002c82:	43da      	mvns	r2, r3
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	4013      	ands	r3, r2
 8002c88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	691a      	ldr	r2, [r3, #16]
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	2107      	movs	r1, #7
 8002c92:	400b      	ands	r3, r1
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	409a      	lsls	r2, r3
 8002c98:	0013      	movs	r3, r2
 8002c9a:	693a      	ldr	r2, [r7, #16]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	08da      	lsrs	r2, r3, #3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	3208      	adds	r2, #8
 8002ca8:	0092      	lsls	r2, r2, #2
 8002caa:	6939      	ldr	r1, [r7, #16]
 8002cac:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	005b      	lsls	r3, r3, #1
 8002cb8:	2203      	movs	r2, #3
 8002cba:	409a      	lsls	r2, r3
 8002cbc:	0013      	movs	r3, r2
 8002cbe:	43da      	mvns	r2, r3
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	2203      	movs	r2, #3
 8002ccc:	401a      	ands	r2, r3
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	005b      	lsls	r3, r3, #1
 8002cd2:	409a      	lsls	r2, r3
 8002cd4:	0013      	movs	r3, r2
 8002cd6:	693a      	ldr	r2, [r7, #16]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	693a      	ldr	r2, [r7, #16]
 8002ce0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	685a      	ldr	r2, [r3, #4]
 8002ce6:	2380      	movs	r3, #128	; 0x80
 8002ce8:	055b      	lsls	r3, r3, #21
 8002cea:	4013      	ands	r3, r2
 8002cec:	d100      	bne.n	8002cf0 <HAL_GPIO_Init+0x174>
 8002cee:	e092      	b.n	8002e16 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002cf0:	4a50      	ldr	r2, [pc, #320]	; (8002e34 <HAL_GPIO_Init+0x2b8>)
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	089b      	lsrs	r3, r3, #2
 8002cf6:	3318      	adds	r3, #24
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	589b      	ldr	r3, [r3, r2]
 8002cfc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	2203      	movs	r2, #3
 8002d02:	4013      	ands	r3, r2
 8002d04:	00db      	lsls	r3, r3, #3
 8002d06:	220f      	movs	r2, #15
 8002d08:	409a      	lsls	r2, r3
 8002d0a:	0013      	movs	r3, r2
 8002d0c:	43da      	mvns	r2, r3
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	4013      	ands	r3, r2
 8002d12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	23a0      	movs	r3, #160	; 0xa0
 8002d18:	05db      	lsls	r3, r3, #23
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d013      	beq.n	8002d46 <HAL_GPIO_Init+0x1ca>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a45      	ldr	r2, [pc, #276]	; (8002e38 <HAL_GPIO_Init+0x2bc>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d00d      	beq.n	8002d42 <HAL_GPIO_Init+0x1c6>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a44      	ldr	r2, [pc, #272]	; (8002e3c <HAL_GPIO_Init+0x2c0>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d007      	beq.n	8002d3e <HAL_GPIO_Init+0x1c2>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a43      	ldr	r2, [pc, #268]	; (8002e40 <HAL_GPIO_Init+0x2c4>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d101      	bne.n	8002d3a <HAL_GPIO_Init+0x1be>
 8002d36:	2303      	movs	r3, #3
 8002d38:	e006      	b.n	8002d48 <HAL_GPIO_Init+0x1cc>
 8002d3a:	2305      	movs	r3, #5
 8002d3c:	e004      	b.n	8002d48 <HAL_GPIO_Init+0x1cc>
 8002d3e:	2302      	movs	r3, #2
 8002d40:	e002      	b.n	8002d48 <HAL_GPIO_Init+0x1cc>
 8002d42:	2301      	movs	r3, #1
 8002d44:	e000      	b.n	8002d48 <HAL_GPIO_Init+0x1cc>
 8002d46:	2300      	movs	r3, #0
 8002d48:	697a      	ldr	r2, [r7, #20]
 8002d4a:	2103      	movs	r1, #3
 8002d4c:	400a      	ands	r2, r1
 8002d4e:	00d2      	lsls	r2, r2, #3
 8002d50:	4093      	lsls	r3, r2
 8002d52:	693a      	ldr	r2, [r7, #16]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002d58:	4936      	ldr	r1, [pc, #216]	; (8002e34 <HAL_GPIO_Init+0x2b8>)
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	089b      	lsrs	r3, r3, #2
 8002d5e:	3318      	adds	r3, #24
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	693a      	ldr	r2, [r7, #16]
 8002d64:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002d66:	4a33      	ldr	r2, [pc, #204]	; (8002e34 <HAL_GPIO_Init+0x2b8>)
 8002d68:	2380      	movs	r3, #128	; 0x80
 8002d6a:	58d3      	ldr	r3, [r2, r3]
 8002d6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	43da      	mvns	r2, r3
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	4013      	ands	r3, r2
 8002d76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	685a      	ldr	r2, [r3, #4]
 8002d7c:	2380      	movs	r3, #128	; 0x80
 8002d7e:	025b      	lsls	r3, r3, #9
 8002d80:	4013      	ands	r3, r2
 8002d82:	d003      	beq.n	8002d8c <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8002d84:	693a      	ldr	r2, [r7, #16]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002d8c:	4929      	ldr	r1, [pc, #164]	; (8002e34 <HAL_GPIO_Init+0x2b8>)
 8002d8e:	2280      	movs	r2, #128	; 0x80
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8002d94:	4a27      	ldr	r2, [pc, #156]	; (8002e34 <HAL_GPIO_Init+0x2b8>)
 8002d96:	2384      	movs	r3, #132	; 0x84
 8002d98:	58d3      	ldr	r3, [r2, r3]
 8002d9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	43da      	mvns	r2, r3
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	4013      	ands	r3, r2
 8002da4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	685a      	ldr	r2, [r3, #4]
 8002daa:	2380      	movs	r3, #128	; 0x80
 8002dac:	029b      	lsls	r3, r3, #10
 8002dae:	4013      	ands	r3, r2
 8002db0:	d003      	beq.n	8002dba <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8002db2:	693a      	ldr	r2, [r7, #16]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002dba:	491e      	ldr	r1, [pc, #120]	; (8002e34 <HAL_GPIO_Init+0x2b8>)
 8002dbc:	2284      	movs	r2, #132	; 0x84
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002dc2:	4b1c      	ldr	r3, [pc, #112]	; (8002e34 <HAL_GPIO_Init+0x2b8>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	43da      	mvns	r2, r3
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	4013      	ands	r3, r2
 8002dd0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	685a      	ldr	r2, [r3, #4]
 8002dd6:	2380      	movs	r3, #128	; 0x80
 8002dd8:	035b      	lsls	r3, r3, #13
 8002dda:	4013      	ands	r3, r2
 8002ddc:	d003      	beq.n	8002de6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002dde:	693a      	ldr	r2, [r7, #16]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002de6:	4b13      	ldr	r3, [pc, #76]	; (8002e34 <HAL_GPIO_Init+0x2b8>)
 8002de8:	693a      	ldr	r2, [r7, #16]
 8002dea:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002dec:	4b11      	ldr	r3, [pc, #68]	; (8002e34 <HAL_GPIO_Init+0x2b8>)
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	43da      	mvns	r2, r3
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	4013      	ands	r3, r2
 8002dfa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	685a      	ldr	r2, [r3, #4]
 8002e00:	2380      	movs	r3, #128	; 0x80
 8002e02:	039b      	lsls	r3, r3, #14
 8002e04:	4013      	ands	r3, r2
 8002e06:	d003      	beq.n	8002e10 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002e08:	693a      	ldr	r2, [r7, #16]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002e10:	4b08      	ldr	r3, [pc, #32]	; (8002e34 <HAL_GPIO_Init+0x2b8>)
 8002e12:	693a      	ldr	r2, [r7, #16]
 8002e14:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	3301      	adds	r3, #1
 8002e1a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	40da      	lsrs	r2, r3
 8002e24:	1e13      	subs	r3, r2, #0
 8002e26:	d000      	beq.n	8002e2a <HAL_GPIO_Init+0x2ae>
 8002e28:	e6b0      	b.n	8002b8c <HAL_GPIO_Init+0x10>
  }
}
 8002e2a:	46c0      	nop			; (mov r8, r8)
 8002e2c:	46c0      	nop			; (mov r8, r8)
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	b006      	add	sp, #24
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	40021800 	.word	0x40021800
 8002e38:	50000400 	.word	0x50000400
 8002e3c:	50000800 	.word	0x50000800
 8002e40:	50000c00 	.word	0x50000c00

08002e44 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002e4c:	4b19      	ldr	r3, [pc, #100]	; (8002eb4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a19      	ldr	r2, [pc, #100]	; (8002eb8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002e52:	4013      	ands	r3, r2
 8002e54:	0019      	movs	r1, r3
 8002e56:	4b17      	ldr	r3, [pc, #92]	; (8002eb4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	430a      	orrs	r2, r1
 8002e5c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	2380      	movs	r3, #128	; 0x80
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d11f      	bne.n	8002ea8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8002e68:	4b14      	ldr	r3, [pc, #80]	; (8002ebc <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	0013      	movs	r3, r2
 8002e6e:	005b      	lsls	r3, r3, #1
 8002e70:	189b      	adds	r3, r3, r2
 8002e72:	005b      	lsls	r3, r3, #1
 8002e74:	4912      	ldr	r1, [pc, #72]	; (8002ec0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002e76:	0018      	movs	r0, r3
 8002e78:	f7fd f960 	bl	800013c <__udivsi3>
 8002e7c:	0003      	movs	r3, r0
 8002e7e:	3301      	adds	r3, #1
 8002e80:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e82:	e008      	b.n	8002e96 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d003      	beq.n	8002e92 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	3b01      	subs	r3, #1
 8002e8e:	60fb      	str	r3, [r7, #12]
 8002e90:	e001      	b.n	8002e96 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e009      	b.n	8002eaa <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e96:	4b07      	ldr	r3, [pc, #28]	; (8002eb4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002e98:	695a      	ldr	r2, [r3, #20]
 8002e9a:	2380      	movs	r3, #128	; 0x80
 8002e9c:	00db      	lsls	r3, r3, #3
 8002e9e:	401a      	ands	r2, r3
 8002ea0:	2380      	movs	r3, #128	; 0x80
 8002ea2:	00db      	lsls	r3, r3, #3
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d0ed      	beq.n	8002e84 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	0018      	movs	r0, r3
 8002eac:	46bd      	mov	sp, r7
 8002eae:	b004      	add	sp, #16
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	46c0      	nop			; (mov r8, r8)
 8002eb4:	40007000 	.word	0x40007000
 8002eb8:	fffff9ff 	.word	0xfffff9ff
 8002ebc:	20000000 	.word	0x20000000
 8002ec0:	000f4240 	.word	0x000f4240

08002ec4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002ec8:	4b03      	ldr	r3, [pc, #12]	; (8002ed8 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002eca:	689a      	ldr	r2, [r3, #8]
 8002ecc:	23e0      	movs	r3, #224	; 0xe0
 8002ece:	01db      	lsls	r3, r3, #7
 8002ed0:	4013      	ands	r3, r2
}
 8002ed2:	0018      	movs	r0, r3
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	40021000 	.word	0x40021000

08002edc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b088      	sub	sp, #32
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d101      	bne.n	8002eee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e304      	b.n	80034f8 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	d100      	bne.n	8002efa <HAL_RCC_OscConfig+0x1e>
 8002ef8:	e07c      	b.n	8002ff4 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002efa:	4bc3      	ldr	r3, [pc, #780]	; (8003208 <HAL_RCC_OscConfig+0x32c>)
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	2238      	movs	r2, #56	; 0x38
 8002f00:	4013      	ands	r3, r2
 8002f02:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f04:	4bc0      	ldr	r3, [pc, #768]	; (8003208 <HAL_RCC_OscConfig+0x32c>)
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	2203      	movs	r2, #3
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002f0e:	69bb      	ldr	r3, [r7, #24]
 8002f10:	2b10      	cmp	r3, #16
 8002f12:	d102      	bne.n	8002f1a <HAL_RCC_OscConfig+0x3e>
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	2b03      	cmp	r3, #3
 8002f18:	d002      	beq.n	8002f20 <HAL_RCC_OscConfig+0x44>
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	2b08      	cmp	r3, #8
 8002f1e:	d10b      	bne.n	8002f38 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f20:	4bb9      	ldr	r3, [pc, #740]	; (8003208 <HAL_RCC_OscConfig+0x32c>)
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	2380      	movs	r3, #128	; 0x80
 8002f26:	029b      	lsls	r3, r3, #10
 8002f28:	4013      	ands	r3, r2
 8002f2a:	d062      	beq.n	8002ff2 <HAL_RCC_OscConfig+0x116>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d15e      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e2df      	b.n	80034f8 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	685a      	ldr	r2, [r3, #4]
 8002f3c:	2380      	movs	r3, #128	; 0x80
 8002f3e:	025b      	lsls	r3, r3, #9
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d107      	bne.n	8002f54 <HAL_RCC_OscConfig+0x78>
 8002f44:	4bb0      	ldr	r3, [pc, #704]	; (8003208 <HAL_RCC_OscConfig+0x32c>)
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	4baf      	ldr	r3, [pc, #700]	; (8003208 <HAL_RCC_OscConfig+0x32c>)
 8002f4a:	2180      	movs	r1, #128	; 0x80
 8002f4c:	0249      	lsls	r1, r1, #9
 8002f4e:	430a      	orrs	r2, r1
 8002f50:	601a      	str	r2, [r3, #0]
 8002f52:	e020      	b.n	8002f96 <HAL_RCC_OscConfig+0xba>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685a      	ldr	r2, [r3, #4]
 8002f58:	23a0      	movs	r3, #160	; 0xa0
 8002f5a:	02db      	lsls	r3, r3, #11
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d10e      	bne.n	8002f7e <HAL_RCC_OscConfig+0xa2>
 8002f60:	4ba9      	ldr	r3, [pc, #676]	; (8003208 <HAL_RCC_OscConfig+0x32c>)
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	4ba8      	ldr	r3, [pc, #672]	; (8003208 <HAL_RCC_OscConfig+0x32c>)
 8002f66:	2180      	movs	r1, #128	; 0x80
 8002f68:	02c9      	lsls	r1, r1, #11
 8002f6a:	430a      	orrs	r2, r1
 8002f6c:	601a      	str	r2, [r3, #0]
 8002f6e:	4ba6      	ldr	r3, [pc, #664]	; (8003208 <HAL_RCC_OscConfig+0x32c>)
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	4ba5      	ldr	r3, [pc, #660]	; (8003208 <HAL_RCC_OscConfig+0x32c>)
 8002f74:	2180      	movs	r1, #128	; 0x80
 8002f76:	0249      	lsls	r1, r1, #9
 8002f78:	430a      	orrs	r2, r1
 8002f7a:	601a      	str	r2, [r3, #0]
 8002f7c:	e00b      	b.n	8002f96 <HAL_RCC_OscConfig+0xba>
 8002f7e:	4ba2      	ldr	r3, [pc, #648]	; (8003208 <HAL_RCC_OscConfig+0x32c>)
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	4ba1      	ldr	r3, [pc, #644]	; (8003208 <HAL_RCC_OscConfig+0x32c>)
 8002f84:	49a1      	ldr	r1, [pc, #644]	; (800320c <HAL_RCC_OscConfig+0x330>)
 8002f86:	400a      	ands	r2, r1
 8002f88:	601a      	str	r2, [r3, #0]
 8002f8a:	4b9f      	ldr	r3, [pc, #636]	; (8003208 <HAL_RCC_OscConfig+0x32c>)
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	4b9e      	ldr	r3, [pc, #632]	; (8003208 <HAL_RCC_OscConfig+0x32c>)
 8002f90:	499f      	ldr	r1, [pc, #636]	; (8003210 <HAL_RCC_OscConfig+0x334>)
 8002f92:	400a      	ands	r2, r1
 8002f94:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d014      	beq.n	8002fc8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f9e:	f7ff fcf5 	bl	800298c <HAL_GetTick>
 8002fa2:	0003      	movs	r3, r0
 8002fa4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fa6:	e008      	b.n	8002fba <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fa8:	f7ff fcf0 	bl	800298c <HAL_GetTick>
 8002fac:	0002      	movs	r2, r0
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	2b64      	cmp	r3, #100	; 0x64
 8002fb4:	d901      	bls.n	8002fba <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e29e      	b.n	80034f8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fba:	4b93      	ldr	r3, [pc, #588]	; (8003208 <HAL_RCC_OscConfig+0x32c>)
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	2380      	movs	r3, #128	; 0x80
 8002fc0:	029b      	lsls	r3, r3, #10
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	d0f0      	beq.n	8002fa8 <HAL_RCC_OscConfig+0xcc>
 8002fc6:	e015      	b.n	8002ff4 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc8:	f7ff fce0 	bl	800298c <HAL_GetTick>
 8002fcc:	0003      	movs	r3, r0
 8002fce:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002fd0:	e008      	b.n	8002fe4 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fd2:	f7ff fcdb 	bl	800298c <HAL_GetTick>
 8002fd6:	0002      	movs	r2, r0
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	2b64      	cmp	r3, #100	; 0x64
 8002fde:	d901      	bls.n	8002fe4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	e289      	b.n	80034f8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002fe4:	4b88      	ldr	r3, [pc, #544]	; (8003208 <HAL_RCC_OscConfig+0x32c>)
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	2380      	movs	r3, #128	; 0x80
 8002fea:	029b      	lsls	r3, r3, #10
 8002fec:	4013      	ands	r3, r2
 8002fee:	d1f0      	bne.n	8002fd2 <HAL_RCC_OscConfig+0xf6>
 8002ff0:	e000      	b.n	8002ff4 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ff2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2202      	movs	r2, #2
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	d100      	bne.n	8003000 <HAL_RCC_OscConfig+0x124>
 8002ffe:	e099      	b.n	8003134 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003000:	4b81      	ldr	r3, [pc, #516]	; (8003208 <HAL_RCC_OscConfig+0x32c>)
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	2238      	movs	r2, #56	; 0x38
 8003006:	4013      	ands	r3, r2
 8003008:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800300a:	4b7f      	ldr	r3, [pc, #508]	; (8003208 <HAL_RCC_OscConfig+0x32c>)
 800300c:	68db      	ldr	r3, [r3, #12]
 800300e:	2203      	movs	r2, #3
 8003010:	4013      	ands	r3, r2
 8003012:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003014:	69bb      	ldr	r3, [r7, #24]
 8003016:	2b10      	cmp	r3, #16
 8003018:	d102      	bne.n	8003020 <HAL_RCC_OscConfig+0x144>
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	2b02      	cmp	r3, #2
 800301e:	d002      	beq.n	8003026 <HAL_RCC_OscConfig+0x14a>
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d135      	bne.n	8003092 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003026:	4b78      	ldr	r3, [pc, #480]	; (8003208 <HAL_RCC_OscConfig+0x32c>)
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	2380      	movs	r3, #128	; 0x80
 800302c:	00db      	lsls	r3, r3, #3
 800302e:	4013      	ands	r3, r2
 8003030:	d005      	beq.n	800303e <HAL_RCC_OscConfig+0x162>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d101      	bne.n	800303e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e25c      	b.n	80034f8 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800303e:	4b72      	ldr	r3, [pc, #456]	; (8003208 <HAL_RCC_OscConfig+0x32c>)
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	4a74      	ldr	r2, [pc, #464]	; (8003214 <HAL_RCC_OscConfig+0x338>)
 8003044:	4013      	ands	r3, r2
 8003046:	0019      	movs	r1, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	695b      	ldr	r3, [r3, #20]
 800304c:	021a      	lsls	r2, r3, #8
 800304e:	4b6e      	ldr	r3, [pc, #440]	; (8003208 <HAL_RCC_OscConfig+0x32c>)
 8003050:	430a      	orrs	r2, r1
 8003052:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d112      	bne.n	8003080 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800305a:	4b6b      	ldr	r3, [pc, #428]	; (8003208 <HAL_RCC_OscConfig+0x32c>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a6e      	ldr	r2, [pc, #440]	; (8003218 <HAL_RCC_OscConfig+0x33c>)
 8003060:	4013      	ands	r3, r2
 8003062:	0019      	movs	r1, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	691a      	ldr	r2, [r3, #16]
 8003068:	4b67      	ldr	r3, [pc, #412]	; (8003208 <HAL_RCC_OscConfig+0x32c>)
 800306a:	430a      	orrs	r2, r1
 800306c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800306e:	4b66      	ldr	r3, [pc, #408]	; (8003208 <HAL_RCC_OscConfig+0x32c>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	0adb      	lsrs	r3, r3, #11
 8003074:	2207      	movs	r2, #7
 8003076:	4013      	ands	r3, r2
 8003078:	4a68      	ldr	r2, [pc, #416]	; (800321c <HAL_RCC_OscConfig+0x340>)
 800307a:	40da      	lsrs	r2, r3
 800307c:	4b68      	ldr	r3, [pc, #416]	; (8003220 <HAL_RCC_OscConfig+0x344>)
 800307e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003080:	4b68      	ldr	r3, [pc, #416]	; (8003224 <HAL_RCC_OscConfig+0x348>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	0018      	movs	r0, r3
 8003086:	f7ff fc25 	bl	80028d4 <HAL_InitTick>
 800308a:	1e03      	subs	r3, r0, #0
 800308c:	d051      	beq.n	8003132 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e232      	b.n	80034f8 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d030      	beq.n	80030fc <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800309a:	4b5b      	ldr	r3, [pc, #364]	; (8003208 <HAL_RCC_OscConfig+0x32c>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a5e      	ldr	r2, [pc, #376]	; (8003218 <HAL_RCC_OscConfig+0x33c>)
 80030a0:	4013      	ands	r3, r2
 80030a2:	0019      	movs	r1, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	691a      	ldr	r2, [r3, #16]
 80030a8:	4b57      	ldr	r3, [pc, #348]	; (8003208 <HAL_RCC_OscConfig+0x32c>)
 80030aa:	430a      	orrs	r2, r1
 80030ac:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80030ae:	4b56      	ldr	r3, [pc, #344]	; (8003208 <HAL_RCC_OscConfig+0x32c>)
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	4b55      	ldr	r3, [pc, #340]	; (8003208 <HAL_RCC_OscConfig+0x32c>)
 80030b4:	2180      	movs	r1, #128	; 0x80
 80030b6:	0049      	lsls	r1, r1, #1
 80030b8:	430a      	orrs	r2, r1
 80030ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030bc:	f7ff fc66 	bl	800298c <HAL_GetTick>
 80030c0:	0003      	movs	r3, r0
 80030c2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030c4:	e008      	b.n	80030d8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030c6:	f7ff fc61 	bl	800298c <HAL_GetTick>
 80030ca:	0002      	movs	r2, r0
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d901      	bls.n	80030d8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	e20f      	b.n	80034f8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030d8:	4b4b      	ldr	r3, [pc, #300]	; (8003208 <HAL_RCC_OscConfig+0x32c>)
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	2380      	movs	r3, #128	; 0x80
 80030de:	00db      	lsls	r3, r3, #3
 80030e0:	4013      	ands	r3, r2
 80030e2:	d0f0      	beq.n	80030c6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030e4:	4b48      	ldr	r3, [pc, #288]	; (8003208 <HAL_RCC_OscConfig+0x32c>)
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	4a4a      	ldr	r2, [pc, #296]	; (8003214 <HAL_RCC_OscConfig+0x338>)
 80030ea:	4013      	ands	r3, r2
 80030ec:	0019      	movs	r1, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	695b      	ldr	r3, [r3, #20]
 80030f2:	021a      	lsls	r2, r3, #8
 80030f4:	4b44      	ldr	r3, [pc, #272]	; (8003208 <HAL_RCC_OscConfig+0x32c>)
 80030f6:	430a      	orrs	r2, r1
 80030f8:	605a      	str	r2, [r3, #4]
 80030fa:	e01b      	b.n	8003134 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80030fc:	4b42      	ldr	r3, [pc, #264]	; (8003208 <HAL_RCC_OscConfig+0x32c>)
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	4b41      	ldr	r3, [pc, #260]	; (8003208 <HAL_RCC_OscConfig+0x32c>)
 8003102:	4949      	ldr	r1, [pc, #292]	; (8003228 <HAL_RCC_OscConfig+0x34c>)
 8003104:	400a      	ands	r2, r1
 8003106:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003108:	f7ff fc40 	bl	800298c <HAL_GetTick>
 800310c:	0003      	movs	r3, r0
 800310e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003110:	e008      	b.n	8003124 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003112:	f7ff fc3b 	bl	800298c <HAL_GetTick>
 8003116:	0002      	movs	r2, r0
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	2b02      	cmp	r3, #2
 800311e:	d901      	bls.n	8003124 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003120:	2303      	movs	r3, #3
 8003122:	e1e9      	b.n	80034f8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003124:	4b38      	ldr	r3, [pc, #224]	; (8003208 <HAL_RCC_OscConfig+0x32c>)
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	2380      	movs	r3, #128	; 0x80
 800312a:	00db      	lsls	r3, r3, #3
 800312c:	4013      	ands	r3, r2
 800312e:	d1f0      	bne.n	8003112 <HAL_RCC_OscConfig+0x236>
 8003130:	e000      	b.n	8003134 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003132:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2208      	movs	r2, #8
 800313a:	4013      	ands	r3, r2
 800313c:	d047      	beq.n	80031ce <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800313e:	4b32      	ldr	r3, [pc, #200]	; (8003208 <HAL_RCC_OscConfig+0x32c>)
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	2238      	movs	r2, #56	; 0x38
 8003144:	4013      	ands	r3, r2
 8003146:	2b18      	cmp	r3, #24
 8003148:	d10a      	bne.n	8003160 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800314a:	4b2f      	ldr	r3, [pc, #188]	; (8003208 <HAL_RCC_OscConfig+0x32c>)
 800314c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800314e:	2202      	movs	r2, #2
 8003150:	4013      	ands	r3, r2
 8003152:	d03c      	beq.n	80031ce <HAL_RCC_OscConfig+0x2f2>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	699b      	ldr	r3, [r3, #24]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d138      	bne.n	80031ce <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e1cb      	b.n	80034f8 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	699b      	ldr	r3, [r3, #24]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d019      	beq.n	800319c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003168:	4b27      	ldr	r3, [pc, #156]	; (8003208 <HAL_RCC_OscConfig+0x32c>)
 800316a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800316c:	4b26      	ldr	r3, [pc, #152]	; (8003208 <HAL_RCC_OscConfig+0x32c>)
 800316e:	2101      	movs	r1, #1
 8003170:	430a      	orrs	r2, r1
 8003172:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003174:	f7ff fc0a 	bl	800298c <HAL_GetTick>
 8003178:	0003      	movs	r3, r0
 800317a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800317c:	e008      	b.n	8003190 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800317e:	f7ff fc05 	bl	800298c <HAL_GetTick>
 8003182:	0002      	movs	r2, r0
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	2b02      	cmp	r3, #2
 800318a:	d901      	bls.n	8003190 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800318c:	2303      	movs	r3, #3
 800318e:	e1b3      	b.n	80034f8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003190:	4b1d      	ldr	r3, [pc, #116]	; (8003208 <HAL_RCC_OscConfig+0x32c>)
 8003192:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003194:	2202      	movs	r2, #2
 8003196:	4013      	ands	r3, r2
 8003198:	d0f1      	beq.n	800317e <HAL_RCC_OscConfig+0x2a2>
 800319a:	e018      	b.n	80031ce <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800319c:	4b1a      	ldr	r3, [pc, #104]	; (8003208 <HAL_RCC_OscConfig+0x32c>)
 800319e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80031a0:	4b19      	ldr	r3, [pc, #100]	; (8003208 <HAL_RCC_OscConfig+0x32c>)
 80031a2:	2101      	movs	r1, #1
 80031a4:	438a      	bics	r2, r1
 80031a6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a8:	f7ff fbf0 	bl	800298c <HAL_GetTick>
 80031ac:	0003      	movs	r3, r0
 80031ae:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031b0:	e008      	b.n	80031c4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031b2:	f7ff fbeb 	bl	800298c <HAL_GetTick>
 80031b6:	0002      	movs	r2, r0
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	2b02      	cmp	r3, #2
 80031be:	d901      	bls.n	80031c4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80031c0:	2303      	movs	r3, #3
 80031c2:	e199      	b.n	80034f8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031c4:	4b10      	ldr	r3, [pc, #64]	; (8003208 <HAL_RCC_OscConfig+0x32c>)
 80031c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031c8:	2202      	movs	r2, #2
 80031ca:	4013      	ands	r3, r2
 80031cc:	d1f1      	bne.n	80031b2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	2204      	movs	r2, #4
 80031d4:	4013      	ands	r3, r2
 80031d6:	d100      	bne.n	80031da <HAL_RCC_OscConfig+0x2fe>
 80031d8:	e0c6      	b.n	8003368 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031da:	231f      	movs	r3, #31
 80031dc:	18fb      	adds	r3, r7, r3
 80031de:	2200      	movs	r2, #0
 80031e0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80031e2:	4b09      	ldr	r3, [pc, #36]	; (8003208 <HAL_RCC_OscConfig+0x32c>)
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	2238      	movs	r2, #56	; 0x38
 80031e8:	4013      	ands	r3, r2
 80031ea:	2b20      	cmp	r3, #32
 80031ec:	d11e      	bne.n	800322c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80031ee:	4b06      	ldr	r3, [pc, #24]	; (8003208 <HAL_RCC_OscConfig+0x32c>)
 80031f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031f2:	2202      	movs	r2, #2
 80031f4:	4013      	ands	r3, r2
 80031f6:	d100      	bne.n	80031fa <HAL_RCC_OscConfig+0x31e>
 80031f8:	e0b6      	b.n	8003368 <HAL_RCC_OscConfig+0x48c>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d000      	beq.n	8003204 <HAL_RCC_OscConfig+0x328>
 8003202:	e0b1      	b.n	8003368 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e177      	b.n	80034f8 <HAL_RCC_OscConfig+0x61c>
 8003208:	40021000 	.word	0x40021000
 800320c:	fffeffff 	.word	0xfffeffff
 8003210:	fffbffff 	.word	0xfffbffff
 8003214:	ffff80ff 	.word	0xffff80ff
 8003218:	ffffc7ff 	.word	0xffffc7ff
 800321c:	00f42400 	.word	0x00f42400
 8003220:	20000000 	.word	0x20000000
 8003224:	20000004 	.word	0x20000004
 8003228:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800322c:	4bb4      	ldr	r3, [pc, #720]	; (8003500 <HAL_RCC_OscConfig+0x624>)
 800322e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003230:	2380      	movs	r3, #128	; 0x80
 8003232:	055b      	lsls	r3, r3, #21
 8003234:	4013      	ands	r3, r2
 8003236:	d101      	bne.n	800323c <HAL_RCC_OscConfig+0x360>
 8003238:	2301      	movs	r3, #1
 800323a:	e000      	b.n	800323e <HAL_RCC_OscConfig+0x362>
 800323c:	2300      	movs	r3, #0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d011      	beq.n	8003266 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003242:	4baf      	ldr	r3, [pc, #700]	; (8003500 <HAL_RCC_OscConfig+0x624>)
 8003244:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003246:	4bae      	ldr	r3, [pc, #696]	; (8003500 <HAL_RCC_OscConfig+0x624>)
 8003248:	2180      	movs	r1, #128	; 0x80
 800324a:	0549      	lsls	r1, r1, #21
 800324c:	430a      	orrs	r2, r1
 800324e:	63da      	str	r2, [r3, #60]	; 0x3c
 8003250:	4bab      	ldr	r3, [pc, #684]	; (8003500 <HAL_RCC_OscConfig+0x624>)
 8003252:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003254:	2380      	movs	r3, #128	; 0x80
 8003256:	055b      	lsls	r3, r3, #21
 8003258:	4013      	ands	r3, r2
 800325a:	60fb      	str	r3, [r7, #12]
 800325c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800325e:	231f      	movs	r3, #31
 8003260:	18fb      	adds	r3, r7, r3
 8003262:	2201      	movs	r2, #1
 8003264:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003266:	4ba7      	ldr	r3, [pc, #668]	; (8003504 <HAL_RCC_OscConfig+0x628>)
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	2380      	movs	r3, #128	; 0x80
 800326c:	005b      	lsls	r3, r3, #1
 800326e:	4013      	ands	r3, r2
 8003270:	d11a      	bne.n	80032a8 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003272:	4ba4      	ldr	r3, [pc, #656]	; (8003504 <HAL_RCC_OscConfig+0x628>)
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	4ba3      	ldr	r3, [pc, #652]	; (8003504 <HAL_RCC_OscConfig+0x628>)
 8003278:	2180      	movs	r1, #128	; 0x80
 800327a:	0049      	lsls	r1, r1, #1
 800327c:	430a      	orrs	r2, r1
 800327e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003280:	f7ff fb84 	bl	800298c <HAL_GetTick>
 8003284:	0003      	movs	r3, r0
 8003286:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003288:	e008      	b.n	800329c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800328a:	f7ff fb7f 	bl	800298c <HAL_GetTick>
 800328e:	0002      	movs	r2, r0
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	2b02      	cmp	r3, #2
 8003296:	d901      	bls.n	800329c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003298:	2303      	movs	r3, #3
 800329a:	e12d      	b.n	80034f8 <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800329c:	4b99      	ldr	r3, [pc, #612]	; (8003504 <HAL_RCC_OscConfig+0x628>)
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	2380      	movs	r3, #128	; 0x80
 80032a2:	005b      	lsls	r3, r3, #1
 80032a4:	4013      	ands	r3, r2
 80032a6:	d0f0      	beq.n	800328a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d106      	bne.n	80032be <HAL_RCC_OscConfig+0x3e2>
 80032b0:	4b93      	ldr	r3, [pc, #588]	; (8003500 <HAL_RCC_OscConfig+0x624>)
 80032b2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80032b4:	4b92      	ldr	r3, [pc, #584]	; (8003500 <HAL_RCC_OscConfig+0x624>)
 80032b6:	2101      	movs	r1, #1
 80032b8:	430a      	orrs	r2, r1
 80032ba:	65da      	str	r2, [r3, #92]	; 0x5c
 80032bc:	e01c      	b.n	80032f8 <HAL_RCC_OscConfig+0x41c>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	2b05      	cmp	r3, #5
 80032c4:	d10c      	bne.n	80032e0 <HAL_RCC_OscConfig+0x404>
 80032c6:	4b8e      	ldr	r3, [pc, #568]	; (8003500 <HAL_RCC_OscConfig+0x624>)
 80032c8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80032ca:	4b8d      	ldr	r3, [pc, #564]	; (8003500 <HAL_RCC_OscConfig+0x624>)
 80032cc:	2104      	movs	r1, #4
 80032ce:	430a      	orrs	r2, r1
 80032d0:	65da      	str	r2, [r3, #92]	; 0x5c
 80032d2:	4b8b      	ldr	r3, [pc, #556]	; (8003500 <HAL_RCC_OscConfig+0x624>)
 80032d4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80032d6:	4b8a      	ldr	r3, [pc, #552]	; (8003500 <HAL_RCC_OscConfig+0x624>)
 80032d8:	2101      	movs	r1, #1
 80032da:	430a      	orrs	r2, r1
 80032dc:	65da      	str	r2, [r3, #92]	; 0x5c
 80032de:	e00b      	b.n	80032f8 <HAL_RCC_OscConfig+0x41c>
 80032e0:	4b87      	ldr	r3, [pc, #540]	; (8003500 <HAL_RCC_OscConfig+0x624>)
 80032e2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80032e4:	4b86      	ldr	r3, [pc, #536]	; (8003500 <HAL_RCC_OscConfig+0x624>)
 80032e6:	2101      	movs	r1, #1
 80032e8:	438a      	bics	r2, r1
 80032ea:	65da      	str	r2, [r3, #92]	; 0x5c
 80032ec:	4b84      	ldr	r3, [pc, #528]	; (8003500 <HAL_RCC_OscConfig+0x624>)
 80032ee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80032f0:	4b83      	ldr	r3, [pc, #524]	; (8003500 <HAL_RCC_OscConfig+0x624>)
 80032f2:	2104      	movs	r1, #4
 80032f4:	438a      	bics	r2, r1
 80032f6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d014      	beq.n	800332a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003300:	f7ff fb44 	bl	800298c <HAL_GetTick>
 8003304:	0003      	movs	r3, r0
 8003306:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003308:	e009      	b.n	800331e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800330a:	f7ff fb3f 	bl	800298c <HAL_GetTick>
 800330e:	0002      	movs	r2, r0
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	4a7c      	ldr	r2, [pc, #496]	; (8003508 <HAL_RCC_OscConfig+0x62c>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d901      	bls.n	800331e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e0ec      	b.n	80034f8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800331e:	4b78      	ldr	r3, [pc, #480]	; (8003500 <HAL_RCC_OscConfig+0x624>)
 8003320:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003322:	2202      	movs	r2, #2
 8003324:	4013      	ands	r3, r2
 8003326:	d0f0      	beq.n	800330a <HAL_RCC_OscConfig+0x42e>
 8003328:	e013      	b.n	8003352 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800332a:	f7ff fb2f 	bl	800298c <HAL_GetTick>
 800332e:	0003      	movs	r3, r0
 8003330:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003332:	e009      	b.n	8003348 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003334:	f7ff fb2a 	bl	800298c <HAL_GetTick>
 8003338:	0002      	movs	r2, r0
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	4a72      	ldr	r2, [pc, #456]	; (8003508 <HAL_RCC_OscConfig+0x62c>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d901      	bls.n	8003348 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8003344:	2303      	movs	r3, #3
 8003346:	e0d7      	b.n	80034f8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003348:	4b6d      	ldr	r3, [pc, #436]	; (8003500 <HAL_RCC_OscConfig+0x624>)
 800334a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800334c:	2202      	movs	r2, #2
 800334e:	4013      	ands	r3, r2
 8003350:	d1f0      	bne.n	8003334 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003352:	231f      	movs	r3, #31
 8003354:	18fb      	adds	r3, r7, r3
 8003356:	781b      	ldrb	r3, [r3, #0]
 8003358:	2b01      	cmp	r3, #1
 800335a:	d105      	bne.n	8003368 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800335c:	4b68      	ldr	r3, [pc, #416]	; (8003500 <HAL_RCC_OscConfig+0x624>)
 800335e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003360:	4b67      	ldr	r3, [pc, #412]	; (8003500 <HAL_RCC_OscConfig+0x624>)
 8003362:	496a      	ldr	r1, [pc, #424]	; (800350c <HAL_RCC_OscConfig+0x630>)
 8003364:	400a      	ands	r2, r1
 8003366:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	69db      	ldr	r3, [r3, #28]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d100      	bne.n	8003372 <HAL_RCC_OscConfig+0x496>
 8003370:	e0c1      	b.n	80034f6 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003372:	4b63      	ldr	r3, [pc, #396]	; (8003500 <HAL_RCC_OscConfig+0x624>)
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	2238      	movs	r2, #56	; 0x38
 8003378:	4013      	ands	r3, r2
 800337a:	2b10      	cmp	r3, #16
 800337c:	d100      	bne.n	8003380 <HAL_RCC_OscConfig+0x4a4>
 800337e:	e081      	b.n	8003484 <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	69db      	ldr	r3, [r3, #28]
 8003384:	2b02      	cmp	r3, #2
 8003386:	d156      	bne.n	8003436 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003388:	4b5d      	ldr	r3, [pc, #372]	; (8003500 <HAL_RCC_OscConfig+0x624>)
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	4b5c      	ldr	r3, [pc, #368]	; (8003500 <HAL_RCC_OscConfig+0x624>)
 800338e:	4960      	ldr	r1, [pc, #384]	; (8003510 <HAL_RCC_OscConfig+0x634>)
 8003390:	400a      	ands	r2, r1
 8003392:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003394:	f7ff fafa 	bl	800298c <HAL_GetTick>
 8003398:	0003      	movs	r3, r0
 800339a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800339c:	e008      	b.n	80033b0 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800339e:	f7ff faf5 	bl	800298c <HAL_GetTick>
 80033a2:	0002      	movs	r2, r0
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	1ad3      	subs	r3, r2, r3
 80033a8:	2b02      	cmp	r3, #2
 80033aa:	d901      	bls.n	80033b0 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80033ac:	2303      	movs	r3, #3
 80033ae:	e0a3      	b.n	80034f8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033b0:	4b53      	ldr	r3, [pc, #332]	; (8003500 <HAL_RCC_OscConfig+0x624>)
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	2380      	movs	r3, #128	; 0x80
 80033b6:	049b      	lsls	r3, r3, #18
 80033b8:	4013      	ands	r3, r2
 80033ba:	d1f0      	bne.n	800339e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033bc:	4b50      	ldr	r3, [pc, #320]	; (8003500 <HAL_RCC_OscConfig+0x624>)
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	4a54      	ldr	r2, [pc, #336]	; (8003514 <HAL_RCC_OscConfig+0x638>)
 80033c2:	4013      	ands	r3, r2
 80033c4:	0019      	movs	r1, r3
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a1a      	ldr	r2, [r3, #32]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ce:	431a      	orrs	r2, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d4:	021b      	lsls	r3, r3, #8
 80033d6:	431a      	orrs	r2, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033dc:	431a      	orrs	r2, r3
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e2:	431a      	orrs	r2, r3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033e8:	431a      	orrs	r2, r3
 80033ea:	4b45      	ldr	r3, [pc, #276]	; (8003500 <HAL_RCC_OscConfig+0x624>)
 80033ec:	430a      	orrs	r2, r1
 80033ee:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033f0:	4b43      	ldr	r3, [pc, #268]	; (8003500 <HAL_RCC_OscConfig+0x624>)
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	4b42      	ldr	r3, [pc, #264]	; (8003500 <HAL_RCC_OscConfig+0x624>)
 80033f6:	2180      	movs	r1, #128	; 0x80
 80033f8:	0449      	lsls	r1, r1, #17
 80033fa:	430a      	orrs	r2, r1
 80033fc:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80033fe:	4b40      	ldr	r3, [pc, #256]	; (8003500 <HAL_RCC_OscConfig+0x624>)
 8003400:	68da      	ldr	r2, [r3, #12]
 8003402:	4b3f      	ldr	r3, [pc, #252]	; (8003500 <HAL_RCC_OscConfig+0x624>)
 8003404:	2180      	movs	r1, #128	; 0x80
 8003406:	0549      	lsls	r1, r1, #21
 8003408:	430a      	orrs	r2, r1
 800340a:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800340c:	f7ff fabe 	bl	800298c <HAL_GetTick>
 8003410:	0003      	movs	r3, r0
 8003412:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003414:	e008      	b.n	8003428 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003416:	f7ff fab9 	bl	800298c <HAL_GetTick>
 800341a:	0002      	movs	r2, r0
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	2b02      	cmp	r3, #2
 8003422:	d901      	bls.n	8003428 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8003424:	2303      	movs	r3, #3
 8003426:	e067      	b.n	80034f8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003428:	4b35      	ldr	r3, [pc, #212]	; (8003500 <HAL_RCC_OscConfig+0x624>)
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	2380      	movs	r3, #128	; 0x80
 800342e:	049b      	lsls	r3, r3, #18
 8003430:	4013      	ands	r3, r2
 8003432:	d0f0      	beq.n	8003416 <HAL_RCC_OscConfig+0x53a>
 8003434:	e05f      	b.n	80034f6 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003436:	4b32      	ldr	r3, [pc, #200]	; (8003500 <HAL_RCC_OscConfig+0x624>)
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	4b31      	ldr	r3, [pc, #196]	; (8003500 <HAL_RCC_OscConfig+0x624>)
 800343c:	4934      	ldr	r1, [pc, #208]	; (8003510 <HAL_RCC_OscConfig+0x634>)
 800343e:	400a      	ands	r2, r1
 8003440:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8003442:	4b2f      	ldr	r3, [pc, #188]	; (8003500 <HAL_RCC_OscConfig+0x624>)
 8003444:	68da      	ldr	r2, [r3, #12]
 8003446:	4b2e      	ldr	r3, [pc, #184]	; (8003500 <HAL_RCC_OscConfig+0x624>)
 8003448:	2103      	movs	r1, #3
 800344a:	438a      	bics	r2, r1
 800344c:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800344e:	4b2c      	ldr	r3, [pc, #176]	; (8003500 <HAL_RCC_OscConfig+0x624>)
 8003450:	68da      	ldr	r2, [r3, #12]
 8003452:	4b2b      	ldr	r3, [pc, #172]	; (8003500 <HAL_RCC_OscConfig+0x624>)
 8003454:	4930      	ldr	r1, [pc, #192]	; (8003518 <HAL_RCC_OscConfig+0x63c>)
 8003456:	400a      	ands	r2, r1
 8003458:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800345a:	f7ff fa97 	bl	800298c <HAL_GetTick>
 800345e:	0003      	movs	r3, r0
 8003460:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003462:	e008      	b.n	8003476 <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003464:	f7ff fa92 	bl	800298c <HAL_GetTick>
 8003468:	0002      	movs	r2, r0
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	2b02      	cmp	r3, #2
 8003470:	d901      	bls.n	8003476 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e040      	b.n	80034f8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003476:	4b22      	ldr	r3, [pc, #136]	; (8003500 <HAL_RCC_OscConfig+0x624>)
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	2380      	movs	r3, #128	; 0x80
 800347c:	049b      	lsls	r3, r3, #18
 800347e:	4013      	ands	r3, r2
 8003480:	d1f0      	bne.n	8003464 <HAL_RCC_OscConfig+0x588>
 8003482:	e038      	b.n	80034f6 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	69db      	ldr	r3, [r3, #28]
 8003488:	2b01      	cmp	r3, #1
 800348a:	d101      	bne.n	8003490 <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e033      	b.n	80034f8 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003490:	4b1b      	ldr	r3, [pc, #108]	; (8003500 <HAL_RCC_OscConfig+0x624>)
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	2203      	movs	r2, #3
 800349a:	401a      	ands	r2, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a1b      	ldr	r3, [r3, #32]
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d126      	bne.n	80034f2 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	2270      	movs	r2, #112	; 0x70
 80034a8:	401a      	ands	r2, r3
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d11f      	bne.n	80034f2 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80034b2:	697a      	ldr	r2, [r7, #20]
 80034b4:	23fe      	movs	r3, #254	; 0xfe
 80034b6:	01db      	lsls	r3, r3, #7
 80034b8:	401a      	ands	r2, r3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034be:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d116      	bne.n	80034f2 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80034c4:	697a      	ldr	r2, [r7, #20]
 80034c6:	23f8      	movs	r3, #248	; 0xf8
 80034c8:	039b      	lsls	r3, r3, #14
 80034ca:	401a      	ands	r2, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d10e      	bne.n	80034f2 <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80034d4:	697a      	ldr	r2, [r7, #20]
 80034d6:	23e0      	movs	r3, #224	; 0xe0
 80034d8:	051b      	lsls	r3, r3, #20
 80034da:	401a      	ands	r2, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d106      	bne.n	80034f2 <HAL_RCC_OscConfig+0x616>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	0f5b      	lsrs	r3, r3, #29
 80034e8:	075a      	lsls	r2, r3, #29
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d001      	beq.n	80034f6 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e000      	b.n	80034f8 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 80034f6:	2300      	movs	r3, #0
}
 80034f8:	0018      	movs	r0, r3
 80034fa:	46bd      	mov	sp, r7
 80034fc:	b008      	add	sp, #32
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	40021000 	.word	0x40021000
 8003504:	40007000 	.word	0x40007000
 8003508:	00001388 	.word	0x00001388
 800350c:	efffffff 	.word	0xefffffff
 8003510:	feffffff 	.word	0xfeffffff
 8003514:	11c1808c 	.word	0x11c1808c
 8003518:	eefeffff 	.word	0xeefeffff

0800351c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d101      	bne.n	8003530 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e0e9      	b.n	8003704 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003530:	4b76      	ldr	r3, [pc, #472]	; (800370c <HAL_RCC_ClockConfig+0x1f0>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	2207      	movs	r2, #7
 8003536:	4013      	ands	r3, r2
 8003538:	683a      	ldr	r2, [r7, #0]
 800353a:	429a      	cmp	r2, r3
 800353c:	d91e      	bls.n	800357c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800353e:	4b73      	ldr	r3, [pc, #460]	; (800370c <HAL_RCC_ClockConfig+0x1f0>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2207      	movs	r2, #7
 8003544:	4393      	bics	r3, r2
 8003546:	0019      	movs	r1, r3
 8003548:	4b70      	ldr	r3, [pc, #448]	; (800370c <HAL_RCC_ClockConfig+0x1f0>)
 800354a:	683a      	ldr	r2, [r7, #0]
 800354c:	430a      	orrs	r2, r1
 800354e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003550:	f7ff fa1c 	bl	800298c <HAL_GetTick>
 8003554:	0003      	movs	r3, r0
 8003556:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003558:	e009      	b.n	800356e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800355a:	f7ff fa17 	bl	800298c <HAL_GetTick>
 800355e:	0002      	movs	r2, r0
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	4a6a      	ldr	r2, [pc, #424]	; (8003710 <HAL_RCC_ClockConfig+0x1f4>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d901      	bls.n	800356e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e0ca      	b.n	8003704 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800356e:	4b67      	ldr	r3, [pc, #412]	; (800370c <HAL_RCC_ClockConfig+0x1f0>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	2207      	movs	r2, #7
 8003574:	4013      	ands	r3, r2
 8003576:	683a      	ldr	r2, [r7, #0]
 8003578:	429a      	cmp	r2, r3
 800357a:	d1ee      	bne.n	800355a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	2202      	movs	r2, #2
 8003582:	4013      	ands	r3, r2
 8003584:	d015      	beq.n	80035b2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	2204      	movs	r2, #4
 800358c:	4013      	ands	r3, r2
 800358e:	d006      	beq.n	800359e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003590:	4b60      	ldr	r3, [pc, #384]	; (8003714 <HAL_RCC_ClockConfig+0x1f8>)
 8003592:	689a      	ldr	r2, [r3, #8]
 8003594:	4b5f      	ldr	r3, [pc, #380]	; (8003714 <HAL_RCC_ClockConfig+0x1f8>)
 8003596:	21e0      	movs	r1, #224	; 0xe0
 8003598:	01c9      	lsls	r1, r1, #7
 800359a:	430a      	orrs	r2, r1
 800359c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800359e:	4b5d      	ldr	r3, [pc, #372]	; (8003714 <HAL_RCC_ClockConfig+0x1f8>)
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	4a5d      	ldr	r2, [pc, #372]	; (8003718 <HAL_RCC_ClockConfig+0x1fc>)
 80035a4:	4013      	ands	r3, r2
 80035a6:	0019      	movs	r1, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	689a      	ldr	r2, [r3, #8]
 80035ac:	4b59      	ldr	r3, [pc, #356]	; (8003714 <HAL_RCC_ClockConfig+0x1f8>)
 80035ae:	430a      	orrs	r2, r1
 80035b0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	2201      	movs	r2, #1
 80035b8:	4013      	ands	r3, r2
 80035ba:	d057      	beq.n	800366c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d107      	bne.n	80035d4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035c4:	4b53      	ldr	r3, [pc, #332]	; (8003714 <HAL_RCC_ClockConfig+0x1f8>)
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	2380      	movs	r3, #128	; 0x80
 80035ca:	029b      	lsls	r3, r3, #10
 80035cc:	4013      	ands	r3, r2
 80035ce:	d12b      	bne.n	8003628 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e097      	b.n	8003704 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	2b02      	cmp	r3, #2
 80035da:	d107      	bne.n	80035ec <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035dc:	4b4d      	ldr	r3, [pc, #308]	; (8003714 <HAL_RCC_ClockConfig+0x1f8>)
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	2380      	movs	r3, #128	; 0x80
 80035e2:	049b      	lsls	r3, r3, #18
 80035e4:	4013      	ands	r3, r2
 80035e6:	d11f      	bne.n	8003628 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e08b      	b.n	8003704 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d107      	bne.n	8003604 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035f4:	4b47      	ldr	r3, [pc, #284]	; (8003714 <HAL_RCC_ClockConfig+0x1f8>)
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	2380      	movs	r3, #128	; 0x80
 80035fa:	00db      	lsls	r3, r3, #3
 80035fc:	4013      	ands	r3, r2
 80035fe:	d113      	bne.n	8003628 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e07f      	b.n	8003704 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	2b03      	cmp	r3, #3
 800360a:	d106      	bne.n	800361a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800360c:	4b41      	ldr	r3, [pc, #260]	; (8003714 <HAL_RCC_ClockConfig+0x1f8>)
 800360e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003610:	2202      	movs	r2, #2
 8003612:	4013      	ands	r3, r2
 8003614:	d108      	bne.n	8003628 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e074      	b.n	8003704 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800361a:	4b3e      	ldr	r3, [pc, #248]	; (8003714 <HAL_RCC_ClockConfig+0x1f8>)
 800361c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800361e:	2202      	movs	r2, #2
 8003620:	4013      	ands	r3, r2
 8003622:	d101      	bne.n	8003628 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e06d      	b.n	8003704 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003628:	4b3a      	ldr	r3, [pc, #232]	; (8003714 <HAL_RCC_ClockConfig+0x1f8>)
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	2207      	movs	r2, #7
 800362e:	4393      	bics	r3, r2
 8003630:	0019      	movs	r1, r3
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	685a      	ldr	r2, [r3, #4]
 8003636:	4b37      	ldr	r3, [pc, #220]	; (8003714 <HAL_RCC_ClockConfig+0x1f8>)
 8003638:	430a      	orrs	r2, r1
 800363a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800363c:	f7ff f9a6 	bl	800298c <HAL_GetTick>
 8003640:	0003      	movs	r3, r0
 8003642:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003644:	e009      	b.n	800365a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003646:	f7ff f9a1 	bl	800298c <HAL_GetTick>
 800364a:	0002      	movs	r2, r0
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	4a2f      	ldr	r2, [pc, #188]	; (8003710 <HAL_RCC_ClockConfig+0x1f4>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d901      	bls.n	800365a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e054      	b.n	8003704 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800365a:	4b2e      	ldr	r3, [pc, #184]	; (8003714 <HAL_RCC_ClockConfig+0x1f8>)
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	2238      	movs	r2, #56	; 0x38
 8003660:	401a      	ands	r2, r3
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	00db      	lsls	r3, r3, #3
 8003668:	429a      	cmp	r2, r3
 800366a:	d1ec      	bne.n	8003646 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800366c:	4b27      	ldr	r3, [pc, #156]	; (800370c <HAL_RCC_ClockConfig+0x1f0>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2207      	movs	r2, #7
 8003672:	4013      	ands	r3, r2
 8003674:	683a      	ldr	r2, [r7, #0]
 8003676:	429a      	cmp	r2, r3
 8003678:	d21e      	bcs.n	80036b8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800367a:	4b24      	ldr	r3, [pc, #144]	; (800370c <HAL_RCC_ClockConfig+0x1f0>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	2207      	movs	r2, #7
 8003680:	4393      	bics	r3, r2
 8003682:	0019      	movs	r1, r3
 8003684:	4b21      	ldr	r3, [pc, #132]	; (800370c <HAL_RCC_ClockConfig+0x1f0>)
 8003686:	683a      	ldr	r2, [r7, #0]
 8003688:	430a      	orrs	r2, r1
 800368a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800368c:	f7ff f97e 	bl	800298c <HAL_GetTick>
 8003690:	0003      	movs	r3, r0
 8003692:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003694:	e009      	b.n	80036aa <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003696:	f7ff f979 	bl	800298c <HAL_GetTick>
 800369a:	0002      	movs	r2, r0
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	4a1b      	ldr	r2, [pc, #108]	; (8003710 <HAL_RCC_ClockConfig+0x1f4>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d901      	bls.n	80036aa <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	e02c      	b.n	8003704 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80036aa:	4b18      	ldr	r3, [pc, #96]	; (800370c <HAL_RCC_ClockConfig+0x1f0>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	2207      	movs	r2, #7
 80036b0:	4013      	ands	r3, r2
 80036b2:	683a      	ldr	r2, [r7, #0]
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d1ee      	bne.n	8003696 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2204      	movs	r2, #4
 80036be:	4013      	ands	r3, r2
 80036c0:	d009      	beq.n	80036d6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80036c2:	4b14      	ldr	r3, [pc, #80]	; (8003714 <HAL_RCC_ClockConfig+0x1f8>)
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	4a15      	ldr	r2, [pc, #84]	; (800371c <HAL_RCC_ClockConfig+0x200>)
 80036c8:	4013      	ands	r3, r2
 80036ca:	0019      	movs	r1, r3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	68da      	ldr	r2, [r3, #12]
 80036d0:	4b10      	ldr	r3, [pc, #64]	; (8003714 <HAL_RCC_ClockConfig+0x1f8>)
 80036d2:	430a      	orrs	r2, r1
 80036d4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80036d6:	f000 f829 	bl	800372c <HAL_RCC_GetSysClockFreq>
 80036da:	0001      	movs	r1, r0
 80036dc:	4b0d      	ldr	r3, [pc, #52]	; (8003714 <HAL_RCC_ClockConfig+0x1f8>)
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	0a1b      	lsrs	r3, r3, #8
 80036e2:	220f      	movs	r2, #15
 80036e4:	401a      	ands	r2, r3
 80036e6:	4b0e      	ldr	r3, [pc, #56]	; (8003720 <HAL_RCC_ClockConfig+0x204>)
 80036e8:	0092      	lsls	r2, r2, #2
 80036ea:	58d3      	ldr	r3, [r2, r3]
 80036ec:	221f      	movs	r2, #31
 80036ee:	4013      	ands	r3, r2
 80036f0:	000a      	movs	r2, r1
 80036f2:	40da      	lsrs	r2, r3
 80036f4:	4b0b      	ldr	r3, [pc, #44]	; (8003724 <HAL_RCC_ClockConfig+0x208>)
 80036f6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80036f8:	4b0b      	ldr	r3, [pc, #44]	; (8003728 <HAL_RCC_ClockConfig+0x20c>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	0018      	movs	r0, r3
 80036fe:	f7ff f8e9 	bl	80028d4 <HAL_InitTick>
 8003702:	0003      	movs	r3, r0
}
 8003704:	0018      	movs	r0, r3
 8003706:	46bd      	mov	sp, r7
 8003708:	b004      	add	sp, #16
 800370a:	bd80      	pop	{r7, pc}
 800370c:	40022000 	.word	0x40022000
 8003710:	00001388 	.word	0x00001388
 8003714:	40021000 	.word	0x40021000
 8003718:	fffff0ff 	.word	0xfffff0ff
 800371c:	ffff8fff 	.word	0xffff8fff
 8003720:	08007570 	.word	0x08007570
 8003724:	20000000 	.word	0x20000000
 8003728:	20000004 	.word	0x20000004

0800372c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b086      	sub	sp, #24
 8003730:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003732:	4b3c      	ldr	r3, [pc, #240]	; (8003824 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	2238      	movs	r2, #56	; 0x38
 8003738:	4013      	ands	r3, r2
 800373a:	d10f      	bne.n	800375c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800373c:	4b39      	ldr	r3, [pc, #228]	; (8003824 <HAL_RCC_GetSysClockFreq+0xf8>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	0adb      	lsrs	r3, r3, #11
 8003742:	2207      	movs	r2, #7
 8003744:	4013      	ands	r3, r2
 8003746:	2201      	movs	r2, #1
 8003748:	409a      	lsls	r2, r3
 800374a:	0013      	movs	r3, r2
 800374c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800374e:	6839      	ldr	r1, [r7, #0]
 8003750:	4835      	ldr	r0, [pc, #212]	; (8003828 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003752:	f7fc fcf3 	bl	800013c <__udivsi3>
 8003756:	0003      	movs	r3, r0
 8003758:	613b      	str	r3, [r7, #16]
 800375a:	e05d      	b.n	8003818 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800375c:	4b31      	ldr	r3, [pc, #196]	; (8003824 <HAL_RCC_GetSysClockFreq+0xf8>)
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	2238      	movs	r2, #56	; 0x38
 8003762:	4013      	ands	r3, r2
 8003764:	2b08      	cmp	r3, #8
 8003766:	d102      	bne.n	800376e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003768:	4b30      	ldr	r3, [pc, #192]	; (800382c <HAL_RCC_GetSysClockFreq+0x100>)
 800376a:	613b      	str	r3, [r7, #16]
 800376c:	e054      	b.n	8003818 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800376e:	4b2d      	ldr	r3, [pc, #180]	; (8003824 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	2238      	movs	r2, #56	; 0x38
 8003774:	4013      	ands	r3, r2
 8003776:	2b10      	cmp	r3, #16
 8003778:	d138      	bne.n	80037ec <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800377a:	4b2a      	ldr	r3, [pc, #168]	; (8003824 <HAL_RCC_GetSysClockFreq+0xf8>)
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	2203      	movs	r2, #3
 8003780:	4013      	ands	r3, r2
 8003782:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003784:	4b27      	ldr	r3, [pc, #156]	; (8003824 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	091b      	lsrs	r3, r3, #4
 800378a:	2207      	movs	r2, #7
 800378c:	4013      	ands	r3, r2
 800378e:	3301      	adds	r3, #1
 8003790:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2b03      	cmp	r3, #3
 8003796:	d10d      	bne.n	80037b4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003798:	68b9      	ldr	r1, [r7, #8]
 800379a:	4824      	ldr	r0, [pc, #144]	; (800382c <HAL_RCC_GetSysClockFreq+0x100>)
 800379c:	f7fc fcce 	bl	800013c <__udivsi3>
 80037a0:	0003      	movs	r3, r0
 80037a2:	0019      	movs	r1, r3
 80037a4:	4b1f      	ldr	r3, [pc, #124]	; (8003824 <HAL_RCC_GetSysClockFreq+0xf8>)
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	0a1b      	lsrs	r3, r3, #8
 80037aa:	227f      	movs	r2, #127	; 0x7f
 80037ac:	4013      	ands	r3, r2
 80037ae:	434b      	muls	r3, r1
 80037b0:	617b      	str	r3, [r7, #20]
        break;
 80037b2:	e00d      	b.n	80037d0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80037b4:	68b9      	ldr	r1, [r7, #8]
 80037b6:	481c      	ldr	r0, [pc, #112]	; (8003828 <HAL_RCC_GetSysClockFreq+0xfc>)
 80037b8:	f7fc fcc0 	bl	800013c <__udivsi3>
 80037bc:	0003      	movs	r3, r0
 80037be:	0019      	movs	r1, r3
 80037c0:	4b18      	ldr	r3, [pc, #96]	; (8003824 <HAL_RCC_GetSysClockFreq+0xf8>)
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	0a1b      	lsrs	r3, r3, #8
 80037c6:	227f      	movs	r2, #127	; 0x7f
 80037c8:	4013      	ands	r3, r2
 80037ca:	434b      	muls	r3, r1
 80037cc:	617b      	str	r3, [r7, #20]
        break;
 80037ce:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80037d0:	4b14      	ldr	r3, [pc, #80]	; (8003824 <HAL_RCC_GetSysClockFreq+0xf8>)
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	0f5b      	lsrs	r3, r3, #29
 80037d6:	2207      	movs	r2, #7
 80037d8:	4013      	ands	r3, r2
 80037da:	3301      	adds	r3, #1
 80037dc:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80037de:	6879      	ldr	r1, [r7, #4]
 80037e0:	6978      	ldr	r0, [r7, #20]
 80037e2:	f7fc fcab 	bl	800013c <__udivsi3>
 80037e6:	0003      	movs	r3, r0
 80037e8:	613b      	str	r3, [r7, #16]
 80037ea:	e015      	b.n	8003818 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80037ec:	4b0d      	ldr	r3, [pc, #52]	; (8003824 <HAL_RCC_GetSysClockFreq+0xf8>)
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	2238      	movs	r2, #56	; 0x38
 80037f2:	4013      	ands	r3, r2
 80037f4:	2b20      	cmp	r3, #32
 80037f6:	d103      	bne.n	8003800 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80037f8:	2380      	movs	r3, #128	; 0x80
 80037fa:	021b      	lsls	r3, r3, #8
 80037fc:	613b      	str	r3, [r7, #16]
 80037fe:	e00b      	b.n	8003818 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003800:	4b08      	ldr	r3, [pc, #32]	; (8003824 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	2238      	movs	r2, #56	; 0x38
 8003806:	4013      	ands	r3, r2
 8003808:	2b18      	cmp	r3, #24
 800380a:	d103      	bne.n	8003814 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800380c:	23fa      	movs	r3, #250	; 0xfa
 800380e:	01db      	lsls	r3, r3, #7
 8003810:	613b      	str	r3, [r7, #16]
 8003812:	e001      	b.n	8003818 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003814:	2300      	movs	r3, #0
 8003816:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003818:	693b      	ldr	r3, [r7, #16]
}
 800381a:	0018      	movs	r0, r3
 800381c:	46bd      	mov	sp, r7
 800381e:	b006      	add	sp, #24
 8003820:	bd80      	pop	{r7, pc}
 8003822:	46c0      	nop			; (mov r8, r8)
 8003824:	40021000 	.word	0x40021000
 8003828:	00f42400 	.word	0x00f42400
 800382c:	007a1200 	.word	0x007a1200

08003830 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003834:	4b02      	ldr	r3, [pc, #8]	; (8003840 <HAL_RCC_GetHCLKFreq+0x10>)
 8003836:	681b      	ldr	r3, [r3, #0]
}
 8003838:	0018      	movs	r0, r3
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
 800383e:	46c0      	nop			; (mov r8, r8)
 8003840:	20000000 	.word	0x20000000

08003844 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003844:	b5b0      	push	{r4, r5, r7, lr}
 8003846:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003848:	f7ff fff2 	bl	8003830 <HAL_RCC_GetHCLKFreq>
 800384c:	0004      	movs	r4, r0
 800384e:	f7ff fb39 	bl	8002ec4 <LL_RCC_GetAPB1Prescaler>
 8003852:	0003      	movs	r3, r0
 8003854:	0b1a      	lsrs	r2, r3, #12
 8003856:	4b05      	ldr	r3, [pc, #20]	; (800386c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003858:	0092      	lsls	r2, r2, #2
 800385a:	58d3      	ldr	r3, [r2, r3]
 800385c:	221f      	movs	r2, #31
 800385e:	4013      	ands	r3, r2
 8003860:	40dc      	lsrs	r4, r3
 8003862:	0023      	movs	r3, r4
}
 8003864:	0018      	movs	r0, r3
 8003866:	46bd      	mov	sp, r7
 8003868:	bdb0      	pop	{r4, r5, r7, pc}
 800386a:	46c0      	nop			; (mov r8, r8)
 800386c:	080075b0 	.word	0x080075b0

08003870 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b086      	sub	sp, #24
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003878:	2313      	movs	r3, #19
 800387a:	18fb      	adds	r3, r7, r3
 800387c:	2200      	movs	r2, #0
 800387e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003880:	2312      	movs	r3, #18
 8003882:	18fb      	adds	r3, r7, r3
 8003884:	2200      	movs	r2, #0
 8003886:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	2380      	movs	r3, #128	; 0x80
 800388e:	029b      	lsls	r3, r3, #10
 8003890:	4013      	ands	r3, r2
 8003892:	d100      	bne.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003894:	e0a3      	b.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003896:	2011      	movs	r0, #17
 8003898:	183b      	adds	r3, r7, r0
 800389a:	2200      	movs	r2, #0
 800389c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800389e:	4bc3      	ldr	r3, [pc, #780]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80038a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038a2:	2380      	movs	r3, #128	; 0x80
 80038a4:	055b      	lsls	r3, r3, #21
 80038a6:	4013      	ands	r3, r2
 80038a8:	d110      	bne.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038aa:	4bc0      	ldr	r3, [pc, #768]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80038ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038ae:	4bbf      	ldr	r3, [pc, #764]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80038b0:	2180      	movs	r1, #128	; 0x80
 80038b2:	0549      	lsls	r1, r1, #21
 80038b4:	430a      	orrs	r2, r1
 80038b6:	63da      	str	r2, [r3, #60]	; 0x3c
 80038b8:	4bbc      	ldr	r3, [pc, #752]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80038ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038bc:	2380      	movs	r3, #128	; 0x80
 80038be:	055b      	lsls	r3, r3, #21
 80038c0:	4013      	ands	r3, r2
 80038c2:	60bb      	str	r3, [r7, #8]
 80038c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038c6:	183b      	adds	r3, r7, r0
 80038c8:	2201      	movs	r2, #1
 80038ca:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038cc:	4bb8      	ldr	r3, [pc, #736]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	4bb7      	ldr	r3, [pc, #732]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80038d2:	2180      	movs	r1, #128	; 0x80
 80038d4:	0049      	lsls	r1, r1, #1
 80038d6:	430a      	orrs	r2, r1
 80038d8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80038da:	f7ff f857 	bl	800298c <HAL_GetTick>
 80038de:	0003      	movs	r3, r0
 80038e0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038e2:	e00b      	b.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038e4:	f7ff f852 	bl	800298c <HAL_GetTick>
 80038e8:	0002      	movs	r2, r0
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	d904      	bls.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80038f2:	2313      	movs	r3, #19
 80038f4:	18fb      	adds	r3, r7, r3
 80038f6:	2203      	movs	r2, #3
 80038f8:	701a      	strb	r2, [r3, #0]
        break;
 80038fa:	e005      	b.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038fc:	4bac      	ldr	r3, [pc, #688]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	2380      	movs	r3, #128	; 0x80
 8003902:	005b      	lsls	r3, r3, #1
 8003904:	4013      	ands	r3, r2
 8003906:	d0ed      	beq.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003908:	2313      	movs	r3, #19
 800390a:	18fb      	adds	r3, r7, r3
 800390c:	781b      	ldrb	r3, [r3, #0]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d154      	bne.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003912:	4ba6      	ldr	r3, [pc, #664]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003914:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003916:	23c0      	movs	r3, #192	; 0xc0
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	4013      	ands	r3, r2
 800391c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d019      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003928:	697a      	ldr	r2, [r7, #20]
 800392a:	429a      	cmp	r2, r3
 800392c:	d014      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800392e:	4b9f      	ldr	r3, [pc, #636]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003930:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003932:	4aa0      	ldr	r2, [pc, #640]	; (8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003934:	4013      	ands	r3, r2
 8003936:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003938:	4b9c      	ldr	r3, [pc, #624]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800393a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800393c:	4b9b      	ldr	r3, [pc, #620]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800393e:	2180      	movs	r1, #128	; 0x80
 8003940:	0249      	lsls	r1, r1, #9
 8003942:	430a      	orrs	r2, r1
 8003944:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003946:	4b99      	ldr	r3, [pc, #612]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003948:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800394a:	4b98      	ldr	r3, [pc, #608]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800394c:	499a      	ldr	r1, [pc, #616]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 800394e:	400a      	ands	r2, r1
 8003950:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003952:	4b96      	ldr	r3, [pc, #600]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003954:	697a      	ldr	r2, [r7, #20]
 8003956:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	2201      	movs	r2, #1
 800395c:	4013      	ands	r3, r2
 800395e:	d016      	beq.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003960:	f7ff f814 	bl	800298c <HAL_GetTick>
 8003964:	0003      	movs	r3, r0
 8003966:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003968:	e00c      	b.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800396a:	f7ff f80f 	bl	800298c <HAL_GetTick>
 800396e:	0002      	movs	r2, r0
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	1ad3      	subs	r3, r2, r3
 8003974:	4a91      	ldr	r2, [pc, #580]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d904      	bls.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800397a:	2313      	movs	r3, #19
 800397c:	18fb      	adds	r3, r7, r3
 800397e:	2203      	movs	r2, #3
 8003980:	701a      	strb	r2, [r3, #0]
            break;
 8003982:	e004      	b.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003984:	4b89      	ldr	r3, [pc, #548]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003986:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003988:	2202      	movs	r2, #2
 800398a:	4013      	ands	r3, r2
 800398c:	d0ed      	beq.n	800396a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800398e:	2313      	movs	r3, #19
 8003990:	18fb      	adds	r3, r7, r3
 8003992:	781b      	ldrb	r3, [r3, #0]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d10a      	bne.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003998:	4b84      	ldr	r3, [pc, #528]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800399a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800399c:	4a85      	ldr	r2, [pc, #532]	; (8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800399e:	4013      	ands	r3, r2
 80039a0:	0019      	movs	r1, r3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039a6:	4b81      	ldr	r3, [pc, #516]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80039a8:	430a      	orrs	r2, r1
 80039aa:	65da      	str	r2, [r3, #92]	; 0x5c
 80039ac:	e00c      	b.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80039ae:	2312      	movs	r3, #18
 80039b0:	18fb      	adds	r3, r7, r3
 80039b2:	2213      	movs	r2, #19
 80039b4:	18ba      	adds	r2, r7, r2
 80039b6:	7812      	ldrb	r2, [r2, #0]
 80039b8:	701a      	strb	r2, [r3, #0]
 80039ba:	e005      	b.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039bc:	2312      	movs	r3, #18
 80039be:	18fb      	adds	r3, r7, r3
 80039c0:	2213      	movs	r2, #19
 80039c2:	18ba      	adds	r2, r7, r2
 80039c4:	7812      	ldrb	r2, [r2, #0]
 80039c6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80039c8:	2311      	movs	r3, #17
 80039ca:	18fb      	adds	r3, r7, r3
 80039cc:	781b      	ldrb	r3, [r3, #0]
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d105      	bne.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039d2:	4b76      	ldr	r3, [pc, #472]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80039d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039d6:	4b75      	ldr	r3, [pc, #468]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80039d8:	4979      	ldr	r1, [pc, #484]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 80039da:	400a      	ands	r2, r1
 80039dc:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	2201      	movs	r2, #1
 80039e4:	4013      	ands	r3, r2
 80039e6:	d009      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80039e8:	4b70      	ldr	r3, [pc, #448]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80039ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ec:	2203      	movs	r2, #3
 80039ee:	4393      	bics	r3, r2
 80039f0:	0019      	movs	r1, r3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	685a      	ldr	r2, [r3, #4]
 80039f6:	4b6d      	ldr	r3, [pc, #436]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80039f8:	430a      	orrs	r2, r1
 80039fa:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2202      	movs	r2, #2
 8003a02:	4013      	ands	r3, r2
 8003a04:	d009      	beq.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a06:	4b69      	ldr	r3, [pc, #420]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a0a:	220c      	movs	r2, #12
 8003a0c:	4393      	bics	r3, r2
 8003a0e:	0019      	movs	r1, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	689a      	ldr	r2, [r3, #8]
 8003a14:	4b65      	ldr	r3, [pc, #404]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003a16:	430a      	orrs	r2, r1
 8003a18:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2210      	movs	r2, #16
 8003a20:	4013      	ands	r3, r2
 8003a22:	d009      	beq.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a24:	4b61      	ldr	r3, [pc, #388]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003a26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a28:	4a66      	ldr	r2, [pc, #408]	; (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	0019      	movs	r1, r3
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	68da      	ldr	r2, [r3, #12]
 8003a32:	4b5e      	ldr	r3, [pc, #376]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003a34:	430a      	orrs	r2, r1
 8003a36:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	2380      	movs	r3, #128	; 0x80
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	4013      	ands	r3, r2
 8003a42:	d009      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a44:	4b59      	ldr	r3, [pc, #356]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003a46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a48:	4a5f      	ldr	r2, [pc, #380]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	0019      	movs	r1, r3
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	699a      	ldr	r2, [r3, #24]
 8003a52:	4b56      	ldr	r3, [pc, #344]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003a54:	430a      	orrs	r2, r1
 8003a56:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	2380      	movs	r3, #128	; 0x80
 8003a5e:	00db      	lsls	r3, r3, #3
 8003a60:	4013      	ands	r3, r2
 8003a62:	d009      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003a64:	4b51      	ldr	r3, [pc, #324]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003a66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a68:	4a58      	ldr	r2, [pc, #352]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	0019      	movs	r1, r3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	69da      	ldr	r2, [r3, #28]
 8003a72:	4b4e      	ldr	r3, [pc, #312]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003a74:	430a      	orrs	r2, r1
 8003a76:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	2220      	movs	r2, #32
 8003a7e:	4013      	ands	r3, r2
 8003a80:	d009      	beq.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a82:	4b4a      	ldr	r3, [pc, #296]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003a84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a86:	4a52      	ldr	r2, [pc, #328]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8003a88:	4013      	ands	r3, r2
 8003a8a:	0019      	movs	r1, r3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	691a      	ldr	r2, [r3, #16]
 8003a90:	4b46      	ldr	r3, [pc, #280]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003a92:	430a      	orrs	r2, r1
 8003a94:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	2380      	movs	r3, #128	; 0x80
 8003a9c:	01db      	lsls	r3, r3, #7
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	d015      	beq.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003aa2:	4b42      	ldr	r3, [pc, #264]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003aa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	0899      	lsrs	r1, r3, #2
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a1a      	ldr	r2, [r3, #32]
 8003aae:	4b3f      	ldr	r3, [pc, #252]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003ab0:	430a      	orrs	r2, r1
 8003ab2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6a1a      	ldr	r2, [r3, #32]
 8003ab8:	2380      	movs	r3, #128	; 0x80
 8003aba:	05db      	lsls	r3, r3, #23
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d106      	bne.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003ac0:	4b3a      	ldr	r3, [pc, #232]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003ac2:	68da      	ldr	r2, [r3, #12]
 8003ac4:	4b39      	ldr	r3, [pc, #228]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003ac6:	2180      	movs	r1, #128	; 0x80
 8003ac8:	0249      	lsls	r1, r1, #9
 8003aca:	430a      	orrs	r2, r1
 8003acc:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	2380      	movs	r3, #128	; 0x80
 8003ad4:	031b      	lsls	r3, r3, #12
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	d009      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003ada:	4b34      	ldr	r3, [pc, #208]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003adc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ade:	2240      	movs	r2, #64	; 0x40
 8003ae0:	4393      	bics	r3, r2
 8003ae2:	0019      	movs	r1, r3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ae8:	4b30      	ldr	r3, [pc, #192]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003aea:	430a      	orrs	r2, r1
 8003aec:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	2380      	movs	r3, #128	; 0x80
 8003af4:	039b      	lsls	r3, r3, #14
 8003af6:	4013      	ands	r3, r2
 8003af8:	d016      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003afa:	4b2c      	ldr	r3, [pc, #176]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003afe:	4a35      	ldr	r2, [pc, #212]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003b00:	4013      	ands	r3, r2
 8003b02:	0019      	movs	r1, r3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b08:	4b28      	ldr	r3, [pc, #160]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b0a:	430a      	orrs	r2, r1
 8003b0c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b12:	2380      	movs	r3, #128	; 0x80
 8003b14:	03db      	lsls	r3, r3, #15
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d106      	bne.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003b1a:	4b24      	ldr	r3, [pc, #144]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b1c:	68da      	ldr	r2, [r3, #12]
 8003b1e:	4b23      	ldr	r3, [pc, #140]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b20:	2180      	movs	r1, #128	; 0x80
 8003b22:	0449      	lsls	r1, r1, #17
 8003b24:	430a      	orrs	r2, r1
 8003b26:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	2380      	movs	r3, #128	; 0x80
 8003b2e:	03db      	lsls	r3, r3, #15
 8003b30:	4013      	ands	r3, r2
 8003b32:	d016      	beq.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003b34:	4b1d      	ldr	r3, [pc, #116]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b38:	4a27      	ldr	r2, [pc, #156]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	0019      	movs	r1, r3
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b42:	4b1a      	ldr	r3, [pc, #104]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b44:	430a      	orrs	r2, r1
 8003b46:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b4c:	2380      	movs	r3, #128	; 0x80
 8003b4e:	045b      	lsls	r3, r3, #17
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d106      	bne.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003b54:	4b15      	ldr	r3, [pc, #84]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b56:	68da      	ldr	r2, [r3, #12]
 8003b58:	4b14      	ldr	r3, [pc, #80]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b5a:	2180      	movs	r1, #128	; 0x80
 8003b5c:	0449      	lsls	r1, r1, #17
 8003b5e:	430a      	orrs	r2, r1
 8003b60:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	2380      	movs	r3, #128	; 0x80
 8003b68:	011b      	lsls	r3, r3, #4
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	d016      	beq.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003b6e:	4b0f      	ldr	r3, [pc, #60]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b72:	4a1a      	ldr	r2, [pc, #104]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8003b74:	4013      	ands	r3, r2
 8003b76:	0019      	movs	r1, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	695a      	ldr	r2, [r3, #20]
 8003b7c:	4b0b      	ldr	r3, [pc, #44]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b7e:	430a      	orrs	r2, r1
 8003b80:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	695a      	ldr	r2, [r3, #20]
 8003b86:	2380      	movs	r3, #128	; 0x80
 8003b88:	01db      	lsls	r3, r3, #7
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d106      	bne.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003b8e:	4b07      	ldr	r3, [pc, #28]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b90:	68da      	ldr	r2, [r3, #12]
 8003b92:	4b06      	ldr	r3, [pc, #24]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b94:	2180      	movs	r1, #128	; 0x80
 8003b96:	0249      	lsls	r1, r1, #9
 8003b98:	430a      	orrs	r2, r1
 8003b9a:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003b9c:	2312      	movs	r3, #18
 8003b9e:	18fb      	adds	r3, r7, r3
 8003ba0:	781b      	ldrb	r3, [r3, #0]
}
 8003ba2:	0018      	movs	r0, r3
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	b006      	add	sp, #24
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	46c0      	nop			; (mov r8, r8)
 8003bac:	40021000 	.word	0x40021000
 8003bb0:	40007000 	.word	0x40007000
 8003bb4:	fffffcff 	.word	0xfffffcff
 8003bb8:	fffeffff 	.word	0xfffeffff
 8003bbc:	00001388 	.word	0x00001388
 8003bc0:	efffffff 	.word	0xefffffff
 8003bc4:	fffff3ff 	.word	0xfffff3ff
 8003bc8:	fff3ffff 	.word	0xfff3ffff
 8003bcc:	ffcfffff 	.word	0xffcfffff
 8003bd0:	ffffcfff 	.word	0xffffcfff
 8003bd4:	ffbfffff 	.word	0xffbfffff
 8003bd8:	feffffff 	.word	0xfeffffff
 8003bdc:	ffff3fff 	.word	0xffff3fff

08003be0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b082      	sub	sp, #8
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d101      	bne.n	8003bf2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e046      	b.n	8003c80 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2284      	movs	r2, #132	; 0x84
 8003bf6:	589b      	ldr	r3, [r3, r2]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d107      	bne.n	8003c0c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2280      	movs	r2, #128	; 0x80
 8003c00:	2100      	movs	r1, #0
 8003c02:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	0018      	movs	r0, r3
 8003c08:	f7fe fd0c 	bl	8002624 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2284      	movs	r2, #132	; 0x84
 8003c10:	2124      	movs	r1, #36	; 0x24
 8003c12:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	2101      	movs	r1, #1
 8003c20:	438a      	bics	r2, r1
 8003c22:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	0018      	movs	r0, r3
 8003c28:	f000 f8dc 	bl	8003de4 <UART_SetConfig>
 8003c2c:	0003      	movs	r3, r0
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d101      	bne.n	8003c36 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e024      	b.n	8003c80 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d003      	beq.n	8003c46 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	0018      	movs	r0, r3
 8003c42:	f000 fbb1 	bl	80043a8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	685a      	ldr	r2, [r3, #4]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	490d      	ldr	r1, [pc, #52]	; (8003c88 <HAL_UART_Init+0xa8>)
 8003c52:	400a      	ands	r2, r1
 8003c54:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	689a      	ldr	r2, [r3, #8]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	212a      	movs	r1, #42	; 0x2a
 8003c62:	438a      	bics	r2, r1
 8003c64:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	2101      	movs	r1, #1
 8003c72:	430a      	orrs	r2, r1
 8003c74:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	0018      	movs	r0, r3
 8003c7a:	f000 fc49 	bl	8004510 <UART_CheckIdleState>
 8003c7e:	0003      	movs	r3, r0
}
 8003c80:	0018      	movs	r0, r3
 8003c82:	46bd      	mov	sp, r7
 8003c84:	b002      	add	sp, #8
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	ffffb7ff 	.word	0xffffb7ff

08003c8c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b08a      	sub	sp, #40	; 0x28
 8003c90:	af02      	add	r7, sp, #8
 8003c92:	60f8      	str	r0, [r7, #12]
 8003c94:	60b9      	str	r1, [r7, #8]
 8003c96:	603b      	str	r3, [r7, #0]
 8003c98:	1dbb      	adds	r3, r7, #6
 8003c9a:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2284      	movs	r2, #132	; 0x84
 8003ca0:	589b      	ldr	r3, [r3, r2]
 8003ca2:	2b20      	cmp	r3, #32
 8003ca4:	d000      	beq.n	8003ca8 <HAL_UART_Transmit+0x1c>
 8003ca6:	e097      	b.n	8003dd8 <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d003      	beq.n	8003cb6 <HAL_UART_Transmit+0x2a>
 8003cae:	1dbb      	adds	r3, r7, #6
 8003cb0:	881b      	ldrh	r3, [r3, #0]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d101      	bne.n	8003cba <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e08f      	b.n	8003dda <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	689a      	ldr	r2, [r3, #8]
 8003cbe:	2380      	movs	r3, #128	; 0x80
 8003cc0:	015b      	lsls	r3, r3, #5
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d109      	bne.n	8003cda <HAL_UART_Transmit+0x4e>
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	691b      	ldr	r3, [r3, #16]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d105      	bne.n	8003cda <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	d001      	beq.n	8003cda <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e07f      	b.n	8003dda <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2280      	movs	r2, #128	; 0x80
 8003cde:	5c9b      	ldrb	r3, [r3, r2]
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d101      	bne.n	8003ce8 <HAL_UART_Transmit+0x5c>
 8003ce4:	2302      	movs	r3, #2
 8003ce6:	e078      	b.n	8003dda <HAL_UART_Transmit+0x14e>
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2280      	movs	r2, #128	; 0x80
 8003cec:	2101      	movs	r1, #1
 8003cee:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	228c      	movs	r2, #140	; 0x8c
 8003cf4:	2100      	movs	r1, #0
 8003cf6:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2284      	movs	r2, #132	; 0x84
 8003cfc:	2121      	movs	r1, #33	; 0x21
 8003cfe:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d00:	f7fe fe44 	bl	800298c <HAL_GetTick>
 8003d04:	0003      	movs	r3, r0
 8003d06:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	1dba      	adds	r2, r7, #6
 8003d0c:	2154      	movs	r1, #84	; 0x54
 8003d0e:	8812      	ldrh	r2, [r2, #0]
 8003d10:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	1dba      	adds	r2, r7, #6
 8003d16:	2156      	movs	r1, #86	; 0x56
 8003d18:	8812      	ldrh	r2, [r2, #0]
 8003d1a:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	689a      	ldr	r2, [r3, #8]
 8003d20:	2380      	movs	r3, #128	; 0x80
 8003d22:	015b      	lsls	r3, r3, #5
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d108      	bne.n	8003d3a <HAL_UART_Transmit+0xae>
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	691b      	ldr	r3, [r3, #16]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d104      	bne.n	8003d3a <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 8003d30:	2300      	movs	r3, #0
 8003d32:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	61bb      	str	r3, [r7, #24]
 8003d38:	e003      	b.n	8003d42 <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2280      	movs	r2, #128	; 0x80
 8003d46:	2100      	movs	r1, #0
 8003d48:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8003d4a:	e02c      	b.n	8003da6 <HAL_UART_Transmit+0x11a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d4c:	697a      	ldr	r2, [r7, #20]
 8003d4e:	68f8      	ldr	r0, [r7, #12]
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	9300      	str	r3, [sp, #0]
 8003d54:	0013      	movs	r3, r2
 8003d56:	2200      	movs	r2, #0
 8003d58:	2180      	movs	r1, #128	; 0x80
 8003d5a:	f000 fc23 	bl	80045a4 <UART_WaitOnFlagUntilTimeout>
 8003d5e:	1e03      	subs	r3, r0, #0
 8003d60:	d001      	beq.n	8003d66 <HAL_UART_Transmit+0xda>
      {
        return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e039      	b.n	8003dda <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d10b      	bne.n	8003d84 <HAL_UART_Transmit+0xf8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d6c:	69bb      	ldr	r3, [r7, #24]
 8003d6e:	881b      	ldrh	r3, [r3, #0]
 8003d70:	001a      	movs	r2, r3
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	05d2      	lsls	r2, r2, #23
 8003d78:	0dd2      	lsrs	r2, r2, #23
 8003d7a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003d7c:	69bb      	ldr	r3, [r7, #24]
 8003d7e:	3302      	adds	r3, #2
 8003d80:	61bb      	str	r3, [r7, #24]
 8003d82:	e007      	b.n	8003d94 <HAL_UART_Transmit+0x108>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	781a      	ldrb	r2, [r3, #0]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003d8e:	69fb      	ldr	r3, [r7, #28]
 8003d90:	3301      	adds	r3, #1
 8003d92:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2256      	movs	r2, #86	; 0x56
 8003d98:	5a9b      	ldrh	r3, [r3, r2]
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	3b01      	subs	r3, #1
 8003d9e:	b299      	uxth	r1, r3
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2256      	movs	r2, #86	; 0x56
 8003da4:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2256      	movs	r2, #86	; 0x56
 8003daa:	5a9b      	ldrh	r3, [r3, r2]
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d1cc      	bne.n	8003d4c <HAL_UART_Transmit+0xc0>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003db2:	697a      	ldr	r2, [r7, #20]
 8003db4:	68f8      	ldr	r0, [r7, #12]
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	9300      	str	r3, [sp, #0]
 8003dba:	0013      	movs	r3, r2
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	2140      	movs	r1, #64	; 0x40
 8003dc0:	f000 fbf0 	bl	80045a4 <UART_WaitOnFlagUntilTimeout>
 8003dc4:	1e03      	subs	r3, r0, #0
 8003dc6:	d001      	beq.n	8003dcc <HAL_UART_Transmit+0x140>
    {
      return HAL_TIMEOUT;
 8003dc8:	2303      	movs	r3, #3
 8003dca:	e006      	b.n	8003dda <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2284      	movs	r2, #132	; 0x84
 8003dd0:	2120      	movs	r1, #32
 8003dd2:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	e000      	b.n	8003dda <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 8003dd8:	2302      	movs	r3, #2
  }
}
 8003dda:	0018      	movs	r0, r3
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	b008      	add	sp, #32
 8003de0:	bd80      	pop	{r7, pc}
	...

08003de4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003de4:	b5b0      	push	{r4, r5, r7, lr}
 8003de6:	b090      	sub	sp, #64	; 0x40
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003dec:	231a      	movs	r3, #26
 8003dee:	2220      	movs	r2, #32
 8003df0:	4694      	mov	ip, r2
 8003df2:	44bc      	add	ip, r7
 8003df4:	4463      	add	r3, ip
 8003df6:	2200      	movs	r2, #0
 8003df8:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfc:	689a      	ldr	r2, [r3, #8]
 8003dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	431a      	orrs	r2, r3
 8003e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e06:	695b      	ldr	r3, [r3, #20]
 8003e08:	431a      	orrs	r2, r3
 8003e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0c:	69db      	ldr	r3, [r3, #28]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 8003e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e16:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4ab9      	ldr	r2, [pc, #740]	; (8004108 <UART_SetConfig+0x324>)
 8003e24:	4013      	ands	r3, r2
 8003e26:	0019      	movs	r1, r3
 8003e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e2e:	430b      	orrs	r3, r1
 8003e30:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	4ab4      	ldr	r2, [pc, #720]	; (800410c <UART_SetConfig+0x328>)
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	0018      	movs	r0, r3
 8003e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e40:	68d9      	ldr	r1, [r3, #12]
 8003e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	0003      	movs	r3, r0
 8003e48:	430b      	orrs	r3, r1
 8003e4a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4e:	699b      	ldr	r3, [r3, #24]
 8003e50:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4aae      	ldr	r2, [pc, #696]	; (8004110 <UART_SetConfig+0x32c>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d004      	beq.n	8003e66 <UART_SetConfig+0x82>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5e:	6a1b      	ldr	r3, [r3, #32]
 8003e60:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e62:	4313      	orrs	r3, r2
 8003e64:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	4aa9      	ldr	r2, [pc, #676]	; (8004114 <UART_SetConfig+0x330>)
 8003e6e:	4013      	ands	r3, r2
 8003e70:	0019      	movs	r1, r3
 8003e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e78:	430b      	orrs	r3, r1
 8003e7a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e82:	220f      	movs	r2, #15
 8003e84:	4393      	bics	r3, r2
 8003e86:	0018      	movs	r0, r3
 8003e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	0003      	movs	r3, r0
 8003e92:	430b      	orrs	r3, r1
 8003e94:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a9f      	ldr	r2, [pc, #636]	; (8004118 <UART_SetConfig+0x334>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d136      	bne.n	8003f0e <UART_SetConfig+0x12a>
 8003ea0:	4b9e      	ldr	r3, [pc, #632]	; (800411c <UART_SetConfig+0x338>)
 8003ea2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ea4:	2203      	movs	r2, #3
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	2b03      	cmp	r3, #3
 8003eaa:	d020      	beq.n	8003eee <UART_SetConfig+0x10a>
 8003eac:	d827      	bhi.n	8003efe <UART_SetConfig+0x11a>
 8003eae:	2b02      	cmp	r3, #2
 8003eb0:	d00d      	beq.n	8003ece <UART_SetConfig+0xea>
 8003eb2:	d824      	bhi.n	8003efe <UART_SetConfig+0x11a>
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d002      	beq.n	8003ebe <UART_SetConfig+0xda>
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d010      	beq.n	8003ede <UART_SetConfig+0xfa>
 8003ebc:	e01f      	b.n	8003efe <UART_SetConfig+0x11a>
 8003ebe:	231b      	movs	r3, #27
 8003ec0:	2220      	movs	r2, #32
 8003ec2:	4694      	mov	ip, r2
 8003ec4:	44bc      	add	ip, r7
 8003ec6:	4463      	add	r3, ip
 8003ec8:	2200      	movs	r2, #0
 8003eca:	701a      	strb	r2, [r3, #0]
 8003ecc:	e0c5      	b.n	800405a <UART_SetConfig+0x276>
 8003ece:	231b      	movs	r3, #27
 8003ed0:	2220      	movs	r2, #32
 8003ed2:	4694      	mov	ip, r2
 8003ed4:	44bc      	add	ip, r7
 8003ed6:	4463      	add	r3, ip
 8003ed8:	2202      	movs	r2, #2
 8003eda:	701a      	strb	r2, [r3, #0]
 8003edc:	e0bd      	b.n	800405a <UART_SetConfig+0x276>
 8003ede:	231b      	movs	r3, #27
 8003ee0:	2220      	movs	r2, #32
 8003ee2:	4694      	mov	ip, r2
 8003ee4:	44bc      	add	ip, r7
 8003ee6:	4463      	add	r3, ip
 8003ee8:	2204      	movs	r2, #4
 8003eea:	701a      	strb	r2, [r3, #0]
 8003eec:	e0b5      	b.n	800405a <UART_SetConfig+0x276>
 8003eee:	231b      	movs	r3, #27
 8003ef0:	2220      	movs	r2, #32
 8003ef2:	4694      	mov	ip, r2
 8003ef4:	44bc      	add	ip, r7
 8003ef6:	4463      	add	r3, ip
 8003ef8:	2208      	movs	r2, #8
 8003efa:	701a      	strb	r2, [r3, #0]
 8003efc:	e0ad      	b.n	800405a <UART_SetConfig+0x276>
 8003efe:	231b      	movs	r3, #27
 8003f00:	2220      	movs	r2, #32
 8003f02:	4694      	mov	ip, r2
 8003f04:	44bc      	add	ip, r7
 8003f06:	4463      	add	r3, ip
 8003f08:	2210      	movs	r2, #16
 8003f0a:	701a      	strb	r2, [r3, #0]
 8003f0c:	e0a5      	b.n	800405a <UART_SetConfig+0x276>
 8003f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a83      	ldr	r2, [pc, #524]	; (8004120 <UART_SetConfig+0x33c>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d136      	bne.n	8003f86 <UART_SetConfig+0x1a2>
 8003f18:	4b80      	ldr	r3, [pc, #512]	; (800411c <UART_SetConfig+0x338>)
 8003f1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f1c:	220c      	movs	r2, #12
 8003f1e:	4013      	ands	r3, r2
 8003f20:	2b0c      	cmp	r3, #12
 8003f22:	d020      	beq.n	8003f66 <UART_SetConfig+0x182>
 8003f24:	d827      	bhi.n	8003f76 <UART_SetConfig+0x192>
 8003f26:	2b08      	cmp	r3, #8
 8003f28:	d00d      	beq.n	8003f46 <UART_SetConfig+0x162>
 8003f2a:	d824      	bhi.n	8003f76 <UART_SetConfig+0x192>
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d002      	beq.n	8003f36 <UART_SetConfig+0x152>
 8003f30:	2b04      	cmp	r3, #4
 8003f32:	d010      	beq.n	8003f56 <UART_SetConfig+0x172>
 8003f34:	e01f      	b.n	8003f76 <UART_SetConfig+0x192>
 8003f36:	231b      	movs	r3, #27
 8003f38:	2220      	movs	r2, #32
 8003f3a:	4694      	mov	ip, r2
 8003f3c:	44bc      	add	ip, r7
 8003f3e:	4463      	add	r3, ip
 8003f40:	2200      	movs	r2, #0
 8003f42:	701a      	strb	r2, [r3, #0]
 8003f44:	e089      	b.n	800405a <UART_SetConfig+0x276>
 8003f46:	231b      	movs	r3, #27
 8003f48:	2220      	movs	r2, #32
 8003f4a:	4694      	mov	ip, r2
 8003f4c:	44bc      	add	ip, r7
 8003f4e:	4463      	add	r3, ip
 8003f50:	2202      	movs	r2, #2
 8003f52:	701a      	strb	r2, [r3, #0]
 8003f54:	e081      	b.n	800405a <UART_SetConfig+0x276>
 8003f56:	231b      	movs	r3, #27
 8003f58:	2220      	movs	r2, #32
 8003f5a:	4694      	mov	ip, r2
 8003f5c:	44bc      	add	ip, r7
 8003f5e:	4463      	add	r3, ip
 8003f60:	2204      	movs	r2, #4
 8003f62:	701a      	strb	r2, [r3, #0]
 8003f64:	e079      	b.n	800405a <UART_SetConfig+0x276>
 8003f66:	231b      	movs	r3, #27
 8003f68:	2220      	movs	r2, #32
 8003f6a:	4694      	mov	ip, r2
 8003f6c:	44bc      	add	ip, r7
 8003f6e:	4463      	add	r3, ip
 8003f70:	2208      	movs	r2, #8
 8003f72:	701a      	strb	r2, [r3, #0]
 8003f74:	e071      	b.n	800405a <UART_SetConfig+0x276>
 8003f76:	231b      	movs	r3, #27
 8003f78:	2220      	movs	r2, #32
 8003f7a:	4694      	mov	ip, r2
 8003f7c:	44bc      	add	ip, r7
 8003f7e:	4463      	add	r3, ip
 8003f80:	2210      	movs	r2, #16
 8003f82:	701a      	strb	r2, [r3, #0]
 8003f84:	e069      	b.n	800405a <UART_SetConfig+0x276>
 8003f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a66      	ldr	r2, [pc, #408]	; (8004124 <UART_SetConfig+0x340>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d107      	bne.n	8003fa0 <UART_SetConfig+0x1bc>
 8003f90:	231b      	movs	r3, #27
 8003f92:	2220      	movs	r2, #32
 8003f94:	4694      	mov	ip, r2
 8003f96:	44bc      	add	ip, r7
 8003f98:	4463      	add	r3, ip
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	701a      	strb	r2, [r3, #0]
 8003f9e:	e05c      	b.n	800405a <UART_SetConfig+0x276>
 8003fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a60      	ldr	r2, [pc, #384]	; (8004128 <UART_SetConfig+0x344>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d107      	bne.n	8003fba <UART_SetConfig+0x1d6>
 8003faa:	231b      	movs	r3, #27
 8003fac:	2220      	movs	r2, #32
 8003fae:	4694      	mov	ip, r2
 8003fb0:	44bc      	add	ip, r7
 8003fb2:	4463      	add	r3, ip
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	701a      	strb	r2, [r3, #0]
 8003fb8:	e04f      	b.n	800405a <UART_SetConfig+0x276>
 8003fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a54      	ldr	r2, [pc, #336]	; (8004110 <UART_SetConfig+0x32c>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d143      	bne.n	800404c <UART_SetConfig+0x268>
 8003fc4:	4b55      	ldr	r3, [pc, #340]	; (800411c <UART_SetConfig+0x338>)
 8003fc6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003fc8:	23c0      	movs	r3, #192	; 0xc0
 8003fca:	011b      	lsls	r3, r3, #4
 8003fcc:	4013      	ands	r3, r2
 8003fce:	22c0      	movs	r2, #192	; 0xc0
 8003fd0:	0112      	lsls	r2, r2, #4
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d02a      	beq.n	800402c <UART_SetConfig+0x248>
 8003fd6:	22c0      	movs	r2, #192	; 0xc0
 8003fd8:	0112      	lsls	r2, r2, #4
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d82e      	bhi.n	800403c <UART_SetConfig+0x258>
 8003fde:	2280      	movs	r2, #128	; 0x80
 8003fe0:	0112      	lsls	r2, r2, #4
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d012      	beq.n	800400c <UART_SetConfig+0x228>
 8003fe6:	2280      	movs	r2, #128	; 0x80
 8003fe8:	0112      	lsls	r2, r2, #4
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d826      	bhi.n	800403c <UART_SetConfig+0x258>
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d004      	beq.n	8003ffc <UART_SetConfig+0x218>
 8003ff2:	2280      	movs	r2, #128	; 0x80
 8003ff4:	00d2      	lsls	r2, r2, #3
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d010      	beq.n	800401c <UART_SetConfig+0x238>
 8003ffa:	e01f      	b.n	800403c <UART_SetConfig+0x258>
 8003ffc:	231b      	movs	r3, #27
 8003ffe:	2220      	movs	r2, #32
 8004000:	4694      	mov	ip, r2
 8004002:	44bc      	add	ip, r7
 8004004:	4463      	add	r3, ip
 8004006:	2200      	movs	r2, #0
 8004008:	701a      	strb	r2, [r3, #0]
 800400a:	e026      	b.n	800405a <UART_SetConfig+0x276>
 800400c:	231b      	movs	r3, #27
 800400e:	2220      	movs	r2, #32
 8004010:	4694      	mov	ip, r2
 8004012:	44bc      	add	ip, r7
 8004014:	4463      	add	r3, ip
 8004016:	2202      	movs	r2, #2
 8004018:	701a      	strb	r2, [r3, #0]
 800401a:	e01e      	b.n	800405a <UART_SetConfig+0x276>
 800401c:	231b      	movs	r3, #27
 800401e:	2220      	movs	r2, #32
 8004020:	4694      	mov	ip, r2
 8004022:	44bc      	add	ip, r7
 8004024:	4463      	add	r3, ip
 8004026:	2204      	movs	r2, #4
 8004028:	701a      	strb	r2, [r3, #0]
 800402a:	e016      	b.n	800405a <UART_SetConfig+0x276>
 800402c:	231b      	movs	r3, #27
 800402e:	2220      	movs	r2, #32
 8004030:	4694      	mov	ip, r2
 8004032:	44bc      	add	ip, r7
 8004034:	4463      	add	r3, ip
 8004036:	2208      	movs	r2, #8
 8004038:	701a      	strb	r2, [r3, #0]
 800403a:	e00e      	b.n	800405a <UART_SetConfig+0x276>
 800403c:	231b      	movs	r3, #27
 800403e:	2220      	movs	r2, #32
 8004040:	4694      	mov	ip, r2
 8004042:	44bc      	add	ip, r7
 8004044:	4463      	add	r3, ip
 8004046:	2210      	movs	r2, #16
 8004048:	701a      	strb	r2, [r3, #0]
 800404a:	e006      	b.n	800405a <UART_SetConfig+0x276>
 800404c:	231b      	movs	r3, #27
 800404e:	2220      	movs	r2, #32
 8004050:	4694      	mov	ip, r2
 8004052:	44bc      	add	ip, r7
 8004054:	4463      	add	r3, ip
 8004056:	2210      	movs	r2, #16
 8004058:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800405a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a2c      	ldr	r2, [pc, #176]	; (8004110 <UART_SetConfig+0x32c>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d000      	beq.n	8004066 <UART_SetConfig+0x282>
 8004064:	e0ac      	b.n	80041c0 <UART_SetConfig+0x3dc>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004066:	231b      	movs	r3, #27
 8004068:	2220      	movs	r2, #32
 800406a:	4694      	mov	ip, r2
 800406c:	44bc      	add	ip, r7
 800406e:	4463      	add	r3, ip
 8004070:	781b      	ldrb	r3, [r3, #0]
 8004072:	2b08      	cmp	r3, #8
 8004074:	d015      	beq.n	80040a2 <UART_SetConfig+0x2be>
 8004076:	dc18      	bgt.n	80040aa <UART_SetConfig+0x2c6>
 8004078:	2b04      	cmp	r3, #4
 800407a:	d00d      	beq.n	8004098 <UART_SetConfig+0x2b4>
 800407c:	dc15      	bgt.n	80040aa <UART_SetConfig+0x2c6>
 800407e:	2b00      	cmp	r3, #0
 8004080:	d002      	beq.n	8004088 <UART_SetConfig+0x2a4>
 8004082:	2b02      	cmp	r3, #2
 8004084:	d005      	beq.n	8004092 <UART_SetConfig+0x2ae>
 8004086:	e010      	b.n	80040aa <UART_SetConfig+0x2c6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004088:	f7ff fbdc 	bl	8003844 <HAL_RCC_GetPCLK1Freq>
 800408c:	0003      	movs	r3, r0
 800408e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004090:	e015      	b.n	80040be <UART_SetConfig+0x2da>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004092:	4b26      	ldr	r3, [pc, #152]	; (800412c <UART_SetConfig+0x348>)
 8004094:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004096:	e012      	b.n	80040be <UART_SetConfig+0x2da>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004098:	f7ff fb48 	bl	800372c <HAL_RCC_GetSysClockFreq>
 800409c:	0003      	movs	r3, r0
 800409e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80040a0:	e00d      	b.n	80040be <UART_SetConfig+0x2da>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040a2:	2380      	movs	r3, #128	; 0x80
 80040a4:	021b      	lsls	r3, r3, #8
 80040a6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80040a8:	e009      	b.n	80040be <UART_SetConfig+0x2da>
      default:
        pclk = 0U;
 80040aa:	2300      	movs	r3, #0
 80040ac:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80040ae:	231a      	movs	r3, #26
 80040b0:	2220      	movs	r2, #32
 80040b2:	4694      	mov	ip, r2
 80040b4:	44bc      	add	ip, r7
 80040b6:	4463      	add	r3, ip
 80040b8:	2201      	movs	r2, #1
 80040ba:	701a      	strb	r2, [r3, #0]
        break;
 80040bc:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80040be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d100      	bne.n	80040c6 <UART_SetConfig+0x2e2>
 80040c4:	e153      	b.n	800436e <UART_SetConfig+0x58a>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80040c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040ca:	4b19      	ldr	r3, [pc, #100]	; (8004130 <UART_SetConfig+0x34c>)
 80040cc:	0052      	lsls	r2, r2, #1
 80040ce:	5ad3      	ldrh	r3, [r2, r3]
 80040d0:	0019      	movs	r1, r3
 80040d2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80040d4:	f7fc f832 	bl	800013c <__udivsi3>
 80040d8:	0003      	movs	r3, r0
 80040da:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80040dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040de:	685a      	ldr	r2, [r3, #4]
 80040e0:	0013      	movs	r3, r2
 80040e2:	005b      	lsls	r3, r3, #1
 80040e4:	189b      	adds	r3, r3, r2
 80040e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d305      	bcc.n	80040f8 <UART_SetConfig+0x314>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80040ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80040f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d91d      	bls.n	8004134 <UART_SetConfig+0x350>
      {
        ret = HAL_ERROR;
 80040f8:	231a      	movs	r3, #26
 80040fa:	2220      	movs	r2, #32
 80040fc:	4694      	mov	ip, r2
 80040fe:	44bc      	add	ip, r7
 8004100:	4463      	add	r3, ip
 8004102:	2201      	movs	r2, #1
 8004104:	701a      	strb	r2, [r3, #0]
 8004106:	e132      	b.n	800436e <UART_SetConfig+0x58a>
 8004108:	cfff69f3 	.word	0xcfff69f3
 800410c:	ffffcfff 	.word	0xffffcfff
 8004110:	40008000 	.word	0x40008000
 8004114:	11fff4ff 	.word	0x11fff4ff
 8004118:	40013800 	.word	0x40013800
 800411c:	40021000 	.word	0x40021000
 8004120:	40004400 	.word	0x40004400
 8004124:	40004800 	.word	0x40004800
 8004128:	40004c00 	.word	0x40004c00
 800412c:	00f42400 	.word	0x00f42400
 8004130:	080075d0 	.word	0x080075d0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004136:	61bb      	str	r3, [r7, #24]
 8004138:	2300      	movs	r3, #0
 800413a:	61fb      	str	r3, [r7, #28]
 800413c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004140:	4b97      	ldr	r3, [pc, #604]	; (80043a0 <UART_SetConfig+0x5bc>)
 8004142:	0052      	lsls	r2, r2, #1
 8004144:	5ad3      	ldrh	r3, [r2, r3]
 8004146:	613b      	str	r3, [r7, #16]
 8004148:	2300      	movs	r3, #0
 800414a:	617b      	str	r3, [r7, #20]
 800414c:	693a      	ldr	r2, [r7, #16]
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	69b8      	ldr	r0, [r7, #24]
 8004152:	69f9      	ldr	r1, [r7, #28]
 8004154:	f7fc f9a6 	bl	80004a4 <__aeabi_uldivmod>
 8004158:	0002      	movs	r2, r0
 800415a:	000b      	movs	r3, r1
 800415c:	0e11      	lsrs	r1, r2, #24
 800415e:	021d      	lsls	r5, r3, #8
 8004160:	430d      	orrs	r5, r1
 8004162:	0214      	lsls	r4, r2, #8
 8004164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	085b      	lsrs	r3, r3, #1
 800416a:	60bb      	str	r3, [r7, #8]
 800416c:	2300      	movs	r3, #0
 800416e:	60fb      	str	r3, [r7, #12]
 8004170:	68b8      	ldr	r0, [r7, #8]
 8004172:	68f9      	ldr	r1, [r7, #12]
 8004174:	1900      	adds	r0, r0, r4
 8004176:	4169      	adcs	r1, r5
 8004178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	603b      	str	r3, [r7, #0]
 800417e:	2300      	movs	r3, #0
 8004180:	607b      	str	r3, [r7, #4]
 8004182:	683a      	ldr	r2, [r7, #0]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f7fc f98d 	bl	80004a4 <__aeabi_uldivmod>
 800418a:	0002      	movs	r2, r0
 800418c:	000b      	movs	r3, r1
 800418e:	0013      	movs	r3, r2
 8004190:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004192:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004194:	23c0      	movs	r3, #192	; 0xc0
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	429a      	cmp	r2, r3
 800419a:	d309      	bcc.n	80041b0 <UART_SetConfig+0x3cc>
 800419c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800419e:	2380      	movs	r3, #128	; 0x80
 80041a0:	035b      	lsls	r3, r3, #13
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d204      	bcs.n	80041b0 <UART_SetConfig+0x3cc>
        {
          huart->Instance->BRR = usartdiv;
 80041a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041ac:	60da      	str	r2, [r3, #12]
 80041ae:	e0de      	b.n	800436e <UART_SetConfig+0x58a>
        }
        else
        {
          ret = HAL_ERROR;
 80041b0:	231a      	movs	r3, #26
 80041b2:	2220      	movs	r2, #32
 80041b4:	4694      	mov	ip, r2
 80041b6:	44bc      	add	ip, r7
 80041b8:	4463      	add	r3, ip
 80041ba:	2201      	movs	r2, #1
 80041bc:	701a      	strb	r2, [r3, #0]
 80041be:	e0d6      	b.n	800436e <UART_SetConfig+0x58a>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c2:	69da      	ldr	r2, [r3, #28]
 80041c4:	2380      	movs	r3, #128	; 0x80
 80041c6:	021b      	lsls	r3, r3, #8
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d000      	beq.n	80041ce <UART_SetConfig+0x3ea>
 80041cc:	e074      	b.n	80042b8 <UART_SetConfig+0x4d4>
  {
    switch (clocksource)
 80041ce:	231b      	movs	r3, #27
 80041d0:	2220      	movs	r2, #32
 80041d2:	4694      	mov	ip, r2
 80041d4:	44bc      	add	ip, r7
 80041d6:	4463      	add	r3, ip
 80041d8:	781b      	ldrb	r3, [r3, #0]
 80041da:	2b08      	cmp	r3, #8
 80041dc:	d015      	beq.n	800420a <UART_SetConfig+0x426>
 80041de:	dc18      	bgt.n	8004212 <UART_SetConfig+0x42e>
 80041e0:	2b04      	cmp	r3, #4
 80041e2:	d00d      	beq.n	8004200 <UART_SetConfig+0x41c>
 80041e4:	dc15      	bgt.n	8004212 <UART_SetConfig+0x42e>
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d002      	beq.n	80041f0 <UART_SetConfig+0x40c>
 80041ea:	2b02      	cmp	r3, #2
 80041ec:	d005      	beq.n	80041fa <UART_SetConfig+0x416>
 80041ee:	e010      	b.n	8004212 <UART_SetConfig+0x42e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041f0:	f7ff fb28 	bl	8003844 <HAL_RCC_GetPCLK1Freq>
 80041f4:	0003      	movs	r3, r0
 80041f6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80041f8:	e015      	b.n	8004226 <UART_SetConfig+0x442>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041fa:	4b6a      	ldr	r3, [pc, #424]	; (80043a4 <UART_SetConfig+0x5c0>)
 80041fc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80041fe:	e012      	b.n	8004226 <UART_SetConfig+0x442>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004200:	f7ff fa94 	bl	800372c <HAL_RCC_GetSysClockFreq>
 8004204:	0003      	movs	r3, r0
 8004206:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004208:	e00d      	b.n	8004226 <UART_SetConfig+0x442>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800420a:	2380      	movs	r3, #128	; 0x80
 800420c:	021b      	lsls	r3, r3, #8
 800420e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004210:	e009      	b.n	8004226 <UART_SetConfig+0x442>
      default:
        pclk = 0U;
 8004212:	2300      	movs	r3, #0
 8004214:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004216:	231a      	movs	r3, #26
 8004218:	2220      	movs	r2, #32
 800421a:	4694      	mov	ip, r2
 800421c:	44bc      	add	ip, r7
 800421e:	4463      	add	r3, ip
 8004220:	2201      	movs	r2, #1
 8004222:	701a      	strb	r2, [r3, #0]
        break;
 8004224:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004226:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004228:	2b00      	cmp	r3, #0
 800422a:	d100      	bne.n	800422e <UART_SetConfig+0x44a>
 800422c:	e09f      	b.n	800436e <UART_SetConfig+0x58a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800422e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004230:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004232:	4b5b      	ldr	r3, [pc, #364]	; (80043a0 <UART_SetConfig+0x5bc>)
 8004234:	0052      	lsls	r2, r2, #1
 8004236:	5ad3      	ldrh	r3, [r2, r3]
 8004238:	0019      	movs	r1, r3
 800423a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800423c:	f7fb ff7e 	bl	800013c <__udivsi3>
 8004240:	0003      	movs	r3, r0
 8004242:	005a      	lsls	r2, r3, #1
 8004244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	085b      	lsrs	r3, r3, #1
 800424a:	18d2      	adds	r2, r2, r3
 800424c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	0019      	movs	r1, r3
 8004252:	0010      	movs	r0, r2
 8004254:	f7fb ff72 	bl	800013c <__udivsi3>
 8004258:	0003      	movs	r3, r0
 800425a:	b29b      	uxth	r3, r3
 800425c:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800425e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004260:	2b0f      	cmp	r3, #15
 8004262:	d921      	bls.n	80042a8 <UART_SetConfig+0x4c4>
 8004264:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004266:	2380      	movs	r3, #128	; 0x80
 8004268:	025b      	lsls	r3, r3, #9
 800426a:	429a      	cmp	r2, r3
 800426c:	d21c      	bcs.n	80042a8 <UART_SetConfig+0x4c4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800426e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004270:	b29a      	uxth	r2, r3
 8004272:	200e      	movs	r0, #14
 8004274:	2420      	movs	r4, #32
 8004276:	193b      	adds	r3, r7, r4
 8004278:	181b      	adds	r3, r3, r0
 800427a:	210f      	movs	r1, #15
 800427c:	438a      	bics	r2, r1
 800427e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004282:	085b      	lsrs	r3, r3, #1
 8004284:	b29b      	uxth	r3, r3
 8004286:	2207      	movs	r2, #7
 8004288:	4013      	ands	r3, r2
 800428a:	b299      	uxth	r1, r3
 800428c:	193b      	adds	r3, r7, r4
 800428e:	181b      	adds	r3, r3, r0
 8004290:	193a      	adds	r2, r7, r4
 8004292:	1812      	adds	r2, r2, r0
 8004294:	8812      	ldrh	r2, [r2, #0]
 8004296:	430a      	orrs	r2, r1
 8004298:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800429a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	193a      	adds	r2, r7, r4
 80042a0:	1812      	adds	r2, r2, r0
 80042a2:	8812      	ldrh	r2, [r2, #0]
 80042a4:	60da      	str	r2, [r3, #12]
 80042a6:	e062      	b.n	800436e <UART_SetConfig+0x58a>
      }
      else
      {
        ret = HAL_ERROR;
 80042a8:	231a      	movs	r3, #26
 80042aa:	2220      	movs	r2, #32
 80042ac:	4694      	mov	ip, r2
 80042ae:	44bc      	add	ip, r7
 80042b0:	4463      	add	r3, ip
 80042b2:	2201      	movs	r2, #1
 80042b4:	701a      	strb	r2, [r3, #0]
 80042b6:	e05a      	b.n	800436e <UART_SetConfig+0x58a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80042b8:	231b      	movs	r3, #27
 80042ba:	2220      	movs	r2, #32
 80042bc:	4694      	mov	ip, r2
 80042be:	44bc      	add	ip, r7
 80042c0:	4463      	add	r3, ip
 80042c2:	781b      	ldrb	r3, [r3, #0]
 80042c4:	2b08      	cmp	r3, #8
 80042c6:	d015      	beq.n	80042f4 <UART_SetConfig+0x510>
 80042c8:	dc18      	bgt.n	80042fc <UART_SetConfig+0x518>
 80042ca:	2b04      	cmp	r3, #4
 80042cc:	d00d      	beq.n	80042ea <UART_SetConfig+0x506>
 80042ce:	dc15      	bgt.n	80042fc <UART_SetConfig+0x518>
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d002      	beq.n	80042da <UART_SetConfig+0x4f6>
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	d005      	beq.n	80042e4 <UART_SetConfig+0x500>
 80042d8:	e010      	b.n	80042fc <UART_SetConfig+0x518>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042da:	f7ff fab3 	bl	8003844 <HAL_RCC_GetPCLK1Freq>
 80042de:	0003      	movs	r3, r0
 80042e0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80042e2:	e015      	b.n	8004310 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042e4:	4b2f      	ldr	r3, [pc, #188]	; (80043a4 <UART_SetConfig+0x5c0>)
 80042e6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80042e8:	e012      	b.n	8004310 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042ea:	f7ff fa1f 	bl	800372c <HAL_RCC_GetSysClockFreq>
 80042ee:	0003      	movs	r3, r0
 80042f0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80042f2:	e00d      	b.n	8004310 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042f4:	2380      	movs	r3, #128	; 0x80
 80042f6:	021b      	lsls	r3, r3, #8
 80042f8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80042fa:	e009      	b.n	8004310 <UART_SetConfig+0x52c>
      default:
        pclk = 0U;
 80042fc:	2300      	movs	r3, #0
 80042fe:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004300:	231a      	movs	r3, #26
 8004302:	2220      	movs	r2, #32
 8004304:	4694      	mov	ip, r2
 8004306:	44bc      	add	ip, r7
 8004308:	4463      	add	r3, ip
 800430a:	2201      	movs	r2, #1
 800430c:	701a      	strb	r2, [r3, #0]
        break;
 800430e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004312:	2b00      	cmp	r3, #0
 8004314:	d02b      	beq.n	800436e <UART_SetConfig+0x58a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004318:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800431a:	4b21      	ldr	r3, [pc, #132]	; (80043a0 <UART_SetConfig+0x5bc>)
 800431c:	0052      	lsls	r2, r2, #1
 800431e:	5ad3      	ldrh	r3, [r2, r3]
 8004320:	0019      	movs	r1, r3
 8004322:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004324:	f7fb ff0a 	bl	800013c <__udivsi3>
 8004328:	0003      	movs	r3, r0
 800432a:	001a      	movs	r2, r3
 800432c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	085b      	lsrs	r3, r3, #1
 8004332:	18d2      	adds	r2, r2, r3
 8004334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	0019      	movs	r1, r3
 800433a:	0010      	movs	r0, r2
 800433c:	f7fb fefe 	bl	800013c <__udivsi3>
 8004340:	0003      	movs	r3, r0
 8004342:	b29b      	uxth	r3, r3
 8004344:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004348:	2b0f      	cmp	r3, #15
 800434a:	d909      	bls.n	8004360 <UART_SetConfig+0x57c>
 800434c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800434e:	2380      	movs	r3, #128	; 0x80
 8004350:	025b      	lsls	r3, r3, #9
 8004352:	429a      	cmp	r2, r3
 8004354:	d204      	bcs.n	8004360 <UART_SetConfig+0x57c>
      {
        huart->Instance->BRR = usartdiv;
 8004356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800435c:	60da      	str	r2, [r3, #12]
 800435e:	e006      	b.n	800436e <UART_SetConfig+0x58a>
      }
      else
      {
        ret = HAL_ERROR;
 8004360:	231a      	movs	r3, #26
 8004362:	2220      	movs	r2, #32
 8004364:	4694      	mov	ip, r2
 8004366:	44bc      	add	ip, r7
 8004368:	4463      	add	r3, ip
 800436a:	2201      	movs	r2, #1
 800436c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800436e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004370:	226a      	movs	r2, #106	; 0x6a
 8004372:	2101      	movs	r1, #1
 8004374:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004378:	2268      	movs	r2, #104	; 0x68
 800437a:	2101      	movs	r1, #1
 800437c:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800437e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004380:	2200      	movs	r2, #0
 8004382:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004386:	2200      	movs	r2, #0
 8004388:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800438a:	231a      	movs	r3, #26
 800438c:	2220      	movs	r2, #32
 800438e:	4694      	mov	ip, r2
 8004390:	44bc      	add	ip, r7
 8004392:	4463      	add	r3, ip
 8004394:	781b      	ldrb	r3, [r3, #0]
}
 8004396:	0018      	movs	r0, r3
 8004398:	46bd      	mov	sp, r7
 800439a:	b010      	add	sp, #64	; 0x40
 800439c:	bdb0      	pop	{r4, r5, r7, pc}
 800439e:	46c0      	nop			; (mov r8, r8)
 80043a0:	080075d0 	.word	0x080075d0
 80043a4:	00f42400 	.word	0x00f42400

080043a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b082      	sub	sp, #8
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043b4:	2201      	movs	r2, #1
 80043b6:	4013      	ands	r3, r2
 80043b8:	d00b      	beq.n	80043d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	4a4a      	ldr	r2, [pc, #296]	; (80044ec <UART_AdvFeatureConfig+0x144>)
 80043c2:	4013      	ands	r3, r2
 80043c4:	0019      	movs	r1, r3
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	430a      	orrs	r2, r1
 80043d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d6:	2202      	movs	r2, #2
 80043d8:	4013      	ands	r3, r2
 80043da:	d00b      	beq.n	80043f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	4a43      	ldr	r2, [pc, #268]	; (80044f0 <UART_AdvFeatureConfig+0x148>)
 80043e4:	4013      	ands	r3, r2
 80043e6:	0019      	movs	r1, r3
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	430a      	orrs	r2, r1
 80043f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043f8:	2204      	movs	r2, #4
 80043fa:	4013      	ands	r3, r2
 80043fc:	d00b      	beq.n	8004416 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	4a3b      	ldr	r2, [pc, #236]	; (80044f4 <UART_AdvFeatureConfig+0x14c>)
 8004406:	4013      	ands	r3, r2
 8004408:	0019      	movs	r1, r3
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	430a      	orrs	r2, r1
 8004414:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800441a:	2208      	movs	r2, #8
 800441c:	4013      	ands	r3, r2
 800441e:	d00b      	beq.n	8004438 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	4a34      	ldr	r2, [pc, #208]	; (80044f8 <UART_AdvFeatureConfig+0x150>)
 8004428:	4013      	ands	r3, r2
 800442a:	0019      	movs	r1, r3
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	430a      	orrs	r2, r1
 8004436:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800443c:	2210      	movs	r2, #16
 800443e:	4013      	ands	r3, r2
 8004440:	d00b      	beq.n	800445a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	4a2c      	ldr	r2, [pc, #176]	; (80044fc <UART_AdvFeatureConfig+0x154>)
 800444a:	4013      	ands	r3, r2
 800444c:	0019      	movs	r1, r3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	430a      	orrs	r2, r1
 8004458:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800445e:	2220      	movs	r2, #32
 8004460:	4013      	ands	r3, r2
 8004462:	d00b      	beq.n	800447c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	4a25      	ldr	r2, [pc, #148]	; (8004500 <UART_AdvFeatureConfig+0x158>)
 800446c:	4013      	ands	r3, r2
 800446e:	0019      	movs	r1, r3
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	430a      	orrs	r2, r1
 800447a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004480:	2240      	movs	r2, #64	; 0x40
 8004482:	4013      	ands	r3, r2
 8004484:	d01d      	beq.n	80044c2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	4a1d      	ldr	r2, [pc, #116]	; (8004504 <UART_AdvFeatureConfig+0x15c>)
 800448e:	4013      	ands	r3, r2
 8004490:	0019      	movs	r1, r3
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	430a      	orrs	r2, r1
 800449c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044a2:	2380      	movs	r3, #128	; 0x80
 80044a4:	035b      	lsls	r3, r3, #13
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d10b      	bne.n	80044c2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	4a15      	ldr	r2, [pc, #84]	; (8004508 <UART_AdvFeatureConfig+0x160>)
 80044b2:	4013      	ands	r3, r2
 80044b4:	0019      	movs	r1, r3
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	430a      	orrs	r2, r1
 80044c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c6:	2280      	movs	r2, #128	; 0x80
 80044c8:	4013      	ands	r3, r2
 80044ca:	d00b      	beq.n	80044e4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	4a0e      	ldr	r2, [pc, #56]	; (800450c <UART_AdvFeatureConfig+0x164>)
 80044d4:	4013      	ands	r3, r2
 80044d6:	0019      	movs	r1, r3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	430a      	orrs	r2, r1
 80044e2:	605a      	str	r2, [r3, #4]
  }
}
 80044e4:	46c0      	nop			; (mov r8, r8)
 80044e6:	46bd      	mov	sp, r7
 80044e8:	b002      	add	sp, #8
 80044ea:	bd80      	pop	{r7, pc}
 80044ec:	fffdffff 	.word	0xfffdffff
 80044f0:	fffeffff 	.word	0xfffeffff
 80044f4:	fffbffff 	.word	0xfffbffff
 80044f8:	ffff7fff 	.word	0xffff7fff
 80044fc:	ffffefff 	.word	0xffffefff
 8004500:	ffffdfff 	.word	0xffffdfff
 8004504:	ffefffff 	.word	0xffefffff
 8004508:	ff9fffff 	.word	0xff9fffff
 800450c:	fff7ffff 	.word	0xfff7ffff

08004510 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b086      	sub	sp, #24
 8004514:	af02      	add	r7, sp, #8
 8004516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	228c      	movs	r2, #140	; 0x8c
 800451c:	2100      	movs	r1, #0
 800451e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004520:	f7fe fa34 	bl	800298c <HAL_GetTick>
 8004524:	0003      	movs	r3, r0
 8004526:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	2208      	movs	r2, #8
 8004530:	4013      	ands	r3, r2
 8004532:	2b08      	cmp	r3, #8
 8004534:	d10c      	bne.n	8004550 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2280      	movs	r2, #128	; 0x80
 800453a:	0391      	lsls	r1, r2, #14
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	4a18      	ldr	r2, [pc, #96]	; (80045a0 <UART_CheckIdleState+0x90>)
 8004540:	9200      	str	r2, [sp, #0]
 8004542:	2200      	movs	r2, #0
 8004544:	f000 f82e 	bl	80045a4 <UART_WaitOnFlagUntilTimeout>
 8004548:	1e03      	subs	r3, r0, #0
 800454a:	d001      	beq.n	8004550 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800454c:	2303      	movs	r3, #3
 800454e:	e023      	b.n	8004598 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	2204      	movs	r2, #4
 8004558:	4013      	ands	r3, r2
 800455a:	2b04      	cmp	r3, #4
 800455c:	d10c      	bne.n	8004578 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2280      	movs	r2, #128	; 0x80
 8004562:	03d1      	lsls	r1, r2, #15
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	4a0e      	ldr	r2, [pc, #56]	; (80045a0 <UART_CheckIdleState+0x90>)
 8004568:	9200      	str	r2, [sp, #0]
 800456a:	2200      	movs	r2, #0
 800456c:	f000 f81a 	bl	80045a4 <UART_WaitOnFlagUntilTimeout>
 8004570:	1e03      	subs	r3, r0, #0
 8004572:	d001      	beq.n	8004578 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004574:	2303      	movs	r3, #3
 8004576:	e00f      	b.n	8004598 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2284      	movs	r2, #132	; 0x84
 800457c:	2120      	movs	r1, #32
 800457e:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2288      	movs	r2, #136	; 0x88
 8004584:	2120      	movs	r1, #32
 8004586:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2200      	movs	r2, #0
 800458c:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2280      	movs	r2, #128	; 0x80
 8004592:	2100      	movs	r1, #0
 8004594:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004596:	2300      	movs	r3, #0
}
 8004598:	0018      	movs	r0, r3
 800459a:	46bd      	mov	sp, r7
 800459c:	b004      	add	sp, #16
 800459e:	bd80      	pop	{r7, pc}
 80045a0:	01ffffff 	.word	0x01ffffff

080045a4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b084      	sub	sp, #16
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	60f8      	str	r0, [r7, #12]
 80045ac:	60b9      	str	r1, [r7, #8]
 80045ae:	603b      	str	r3, [r7, #0]
 80045b0:	1dfb      	adds	r3, r7, #7
 80045b2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045b4:	e062      	b.n	800467c <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045b6:	69bb      	ldr	r3, [r7, #24]
 80045b8:	3301      	adds	r3, #1
 80045ba:	d05f      	beq.n	800467c <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045bc:	f7fe f9e6 	bl	800298c <HAL_GetTick>
 80045c0:	0002      	movs	r2, r0
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	69ba      	ldr	r2, [r7, #24]
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d302      	bcc.n	80045d2 <UART_WaitOnFlagUntilTimeout+0x2e>
 80045cc:	69bb      	ldr	r3, [r7, #24]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d11d      	bne.n	800460e <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4931      	ldr	r1, [pc, #196]	; (80046a4 <UART_WaitOnFlagUntilTimeout+0x100>)
 80045de:	400a      	ands	r2, r1
 80045e0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	689a      	ldr	r2, [r3, #8]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	2101      	movs	r1, #1
 80045ee:	438a      	bics	r2, r1
 80045f0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2284      	movs	r2, #132	; 0x84
 80045f6:	2120      	movs	r1, #32
 80045f8:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2288      	movs	r2, #136	; 0x88
 80045fe:	2120      	movs	r1, #32
 8004600:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2280      	movs	r2, #128	; 0x80
 8004606:	2100      	movs	r1, #0
 8004608:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	e046      	b.n	800469c <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	2204      	movs	r2, #4
 8004616:	4013      	ands	r3, r2
 8004618:	d030      	beq.n	800467c <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	69da      	ldr	r2, [r3, #28]
 8004620:	2380      	movs	r3, #128	; 0x80
 8004622:	011b      	lsls	r3, r3, #4
 8004624:	401a      	ands	r2, r3
 8004626:	2380      	movs	r3, #128	; 0x80
 8004628:	011b      	lsls	r3, r3, #4
 800462a:	429a      	cmp	r2, r3
 800462c:	d126      	bne.n	800467c <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	2280      	movs	r2, #128	; 0x80
 8004634:	0112      	lsls	r2, r2, #4
 8004636:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4918      	ldr	r1, [pc, #96]	; (80046a4 <UART_WaitOnFlagUntilTimeout+0x100>)
 8004644:	400a      	ands	r2, r1
 8004646:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	689a      	ldr	r2, [r3, #8]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	2101      	movs	r1, #1
 8004654:	438a      	bics	r2, r1
 8004656:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2284      	movs	r2, #132	; 0x84
 800465c:	2120      	movs	r1, #32
 800465e:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2288      	movs	r2, #136	; 0x88
 8004664:	2120      	movs	r1, #32
 8004666:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	228c      	movs	r2, #140	; 0x8c
 800466c:	2120      	movs	r1, #32
 800466e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2280      	movs	r2, #128	; 0x80
 8004674:	2100      	movs	r1, #0
 8004676:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004678:	2303      	movs	r3, #3
 800467a:	e00f      	b.n	800469c <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	69db      	ldr	r3, [r3, #28]
 8004682:	68ba      	ldr	r2, [r7, #8]
 8004684:	4013      	ands	r3, r2
 8004686:	68ba      	ldr	r2, [r7, #8]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	425a      	negs	r2, r3
 800468c:	4153      	adcs	r3, r2
 800468e:	b2db      	uxtb	r3, r3
 8004690:	001a      	movs	r2, r3
 8004692:	1dfb      	adds	r3, r7, #7
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	429a      	cmp	r2, r3
 8004698:	d08d      	beq.n	80045b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800469a:	2300      	movs	r3, #0
}
 800469c:	0018      	movs	r0, r3
 800469e:	46bd      	mov	sp, r7
 80046a0:	b004      	add	sp, #16
 80046a2:	bd80      	pop	{r7, pc}
 80046a4:	fffffe5f 	.word	0xfffffe5f

080046a8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b084      	sub	sp, #16
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2280      	movs	r2, #128	; 0x80
 80046b4:	5c9b      	ldrb	r3, [r3, r2]
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d101      	bne.n	80046be <HAL_UARTEx_DisableFifoMode+0x16>
 80046ba:	2302      	movs	r3, #2
 80046bc:	e027      	b.n	800470e <HAL_UARTEx_DisableFifoMode+0x66>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2280      	movs	r2, #128	; 0x80
 80046c2:	2101      	movs	r1, #1
 80046c4:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2284      	movs	r2, #132	; 0x84
 80046ca:	2124      	movs	r1, #36	; 0x24
 80046cc:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	2101      	movs	r1, #1
 80046e2:	438a      	bics	r2, r1
 80046e4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	4a0b      	ldr	r2, [pc, #44]	; (8004718 <HAL_UARTEx_DisableFifoMode+0x70>)
 80046ea:	4013      	ands	r3, r2
 80046ec:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2200      	movs	r2, #0
 80046f2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	68fa      	ldr	r2, [r7, #12]
 80046fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2284      	movs	r2, #132	; 0x84
 8004700:	2120      	movs	r1, #32
 8004702:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2280      	movs	r2, #128	; 0x80
 8004708:	2100      	movs	r1, #0
 800470a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800470c:	2300      	movs	r3, #0
}
 800470e:	0018      	movs	r0, r3
 8004710:	46bd      	mov	sp, r7
 8004712:	b004      	add	sp, #16
 8004714:	bd80      	pop	{r7, pc}
 8004716:	46c0      	nop			; (mov r8, r8)
 8004718:	dfffffff 	.word	0xdfffffff

0800471c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b084      	sub	sp, #16
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2280      	movs	r2, #128	; 0x80
 800472a:	5c9b      	ldrb	r3, [r3, r2]
 800472c:	2b01      	cmp	r3, #1
 800472e:	d101      	bne.n	8004734 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004730:	2302      	movs	r3, #2
 8004732:	e02e      	b.n	8004792 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2280      	movs	r2, #128	; 0x80
 8004738:	2101      	movs	r1, #1
 800473a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2284      	movs	r2, #132	; 0x84
 8004740:	2124      	movs	r1, #36	; 0x24
 8004742:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	2101      	movs	r1, #1
 8004758:	438a      	bics	r2, r1
 800475a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	00db      	lsls	r3, r3, #3
 8004764:	08d9      	lsrs	r1, r3, #3
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	683a      	ldr	r2, [r7, #0]
 800476c:	430a      	orrs	r2, r1
 800476e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	0018      	movs	r0, r3
 8004774:	f000 f854 	bl	8004820 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	68fa      	ldr	r2, [r7, #12]
 800477e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2284      	movs	r2, #132	; 0x84
 8004784:	2120      	movs	r1, #32
 8004786:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2280      	movs	r2, #128	; 0x80
 800478c:	2100      	movs	r1, #0
 800478e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004790:	2300      	movs	r3, #0
}
 8004792:	0018      	movs	r0, r3
 8004794:	46bd      	mov	sp, r7
 8004796:	b004      	add	sp, #16
 8004798:	bd80      	pop	{r7, pc}
	...

0800479c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2280      	movs	r2, #128	; 0x80
 80047aa:	5c9b      	ldrb	r3, [r3, r2]
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d101      	bne.n	80047b4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80047b0:	2302      	movs	r3, #2
 80047b2:	e02f      	b.n	8004814 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2280      	movs	r2, #128	; 0x80
 80047b8:	2101      	movs	r1, #1
 80047ba:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2284      	movs	r2, #132	; 0x84
 80047c0:	2124      	movs	r1, #36	; 0x24
 80047c2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	2101      	movs	r1, #1
 80047d8:	438a      	bics	r2, r1
 80047da:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	4a0e      	ldr	r2, [pc, #56]	; (800481c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80047e4:	4013      	ands	r3, r2
 80047e6:	0019      	movs	r1, r3
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	683a      	ldr	r2, [r7, #0]
 80047ee:	430a      	orrs	r2, r1
 80047f0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	0018      	movs	r0, r3
 80047f6:	f000 f813 	bl	8004820 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	68fa      	ldr	r2, [r7, #12]
 8004800:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2284      	movs	r2, #132	; 0x84
 8004806:	2120      	movs	r1, #32
 8004808:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2280      	movs	r2, #128	; 0x80
 800480e:	2100      	movs	r1, #0
 8004810:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004812:	2300      	movs	r3, #0
}
 8004814:	0018      	movs	r0, r3
 8004816:	46bd      	mov	sp, r7
 8004818:	b004      	add	sp, #16
 800481a:	bd80      	pop	{r7, pc}
 800481c:	f1ffffff 	.word	0xf1ffffff

08004820 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004820:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004822:	b089      	sub	sp, #36	; 0x24
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8004828:	2314      	movs	r3, #20
 800482a:	18fb      	adds	r3, r7, r3
 800482c:	4a2f      	ldr	r2, [pc, #188]	; (80048ec <UARTEx_SetNbDataToProcess+0xcc>)
 800482e:	ca03      	ldmia	r2!, {r0, r1}
 8004830:	c303      	stmia	r3!, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8004832:	230c      	movs	r3, #12
 8004834:	18fb      	adds	r3, r7, r3
 8004836:	4a2e      	ldr	r2, [pc, #184]	; (80048f0 <UARTEx_SetNbDataToProcess+0xd0>)
 8004838:	ca03      	ldmia	r2!, {r0, r1}
 800483a:	c303      	stmia	r3!, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004840:	2b00      	cmp	r3, #0
 8004842:	d108      	bne.n	8004856 <UARTEx_SetNbDataToProcess+0x36>
  {
    huart->NbTxDataToProcess = 1U;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	226a      	movs	r2, #106	; 0x6a
 8004848:	2101      	movs	r1, #1
 800484a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2268      	movs	r2, #104	; 0x68
 8004850:	2101      	movs	r1, #1
 8004852:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004854:	e046      	b.n	80048e4 <UARTEx_SetNbDataToProcess+0xc4>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004856:	261f      	movs	r6, #31
 8004858:	19bb      	adds	r3, r7, r6
 800485a:	2208      	movs	r2, #8
 800485c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800485e:	201e      	movs	r0, #30
 8004860:	183b      	adds	r3, r7, r0
 8004862:	2208      	movs	r2, #8
 8004864:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	0e5b      	lsrs	r3, r3, #25
 800486e:	b2da      	uxtb	r2, r3
 8004870:	241d      	movs	r4, #29
 8004872:	193b      	adds	r3, r7, r4
 8004874:	2107      	movs	r1, #7
 8004876:	400a      	ands	r2, r1
 8004878:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	0f5b      	lsrs	r3, r3, #29
 8004882:	b2da      	uxtb	r2, r3
 8004884:	251c      	movs	r5, #28
 8004886:	197b      	adds	r3, r7, r5
 8004888:	2107      	movs	r1, #7
 800488a:	400a      	ands	r2, r1
 800488c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800488e:	183b      	adds	r3, r7, r0
 8004890:	781b      	ldrb	r3, [r3, #0]
 8004892:	197a      	adds	r2, r7, r5
 8004894:	7812      	ldrb	r2, [r2, #0]
 8004896:	2114      	movs	r1, #20
 8004898:	1879      	adds	r1, r7, r1
 800489a:	5c8a      	ldrb	r2, [r1, r2]
 800489c:	435a      	muls	r2, r3
 800489e:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80048a0:	197b      	adds	r3, r7, r5
 80048a2:	781b      	ldrb	r3, [r3, #0]
 80048a4:	250c      	movs	r5, #12
 80048a6:	197a      	adds	r2, r7, r5
 80048a8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80048aa:	0019      	movs	r1, r3
 80048ac:	f7fb fcd0 	bl	8000250 <__divsi3>
 80048b0:	0003      	movs	r3, r0
 80048b2:	b299      	uxth	r1, r3
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	226a      	movs	r2, #106	; 0x6a
 80048b8:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80048ba:	19bb      	adds	r3, r7, r6
 80048bc:	781b      	ldrb	r3, [r3, #0]
 80048be:	193a      	adds	r2, r7, r4
 80048c0:	7812      	ldrb	r2, [r2, #0]
 80048c2:	2114      	movs	r1, #20
 80048c4:	1879      	adds	r1, r7, r1
 80048c6:	5c8a      	ldrb	r2, [r1, r2]
 80048c8:	435a      	muls	r2, r3
 80048ca:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80048cc:	193b      	adds	r3, r7, r4
 80048ce:	781b      	ldrb	r3, [r3, #0]
 80048d0:	197a      	adds	r2, r7, r5
 80048d2:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80048d4:	0019      	movs	r1, r3
 80048d6:	f7fb fcbb 	bl	8000250 <__divsi3>
 80048da:	0003      	movs	r3, r0
 80048dc:	b299      	uxth	r1, r3
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2268      	movs	r2, #104	; 0x68
 80048e2:	5299      	strh	r1, [r3, r2]
}
 80048e4:	46c0      	nop			; (mov r8, r8)
 80048e6:	46bd      	mov	sp, r7
 80048e8:	b009      	add	sp, #36	; 0x24
 80048ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048ec:	080074e0 	.word	0x080074e0
 80048f0:	080074e8 	.word	0x080074e8

080048f4 <__errno>:
 80048f4:	4b01      	ldr	r3, [pc, #4]	; (80048fc <__errno+0x8>)
 80048f6:	6818      	ldr	r0, [r3, #0]
 80048f8:	4770      	bx	lr
 80048fa:	46c0      	nop			; (mov r8, r8)
 80048fc:	2000000c 	.word	0x2000000c

08004900 <__libc_init_array>:
 8004900:	b570      	push	{r4, r5, r6, lr}
 8004902:	2600      	movs	r6, #0
 8004904:	4d0c      	ldr	r5, [pc, #48]	; (8004938 <__libc_init_array+0x38>)
 8004906:	4c0d      	ldr	r4, [pc, #52]	; (800493c <__libc_init_array+0x3c>)
 8004908:	1b64      	subs	r4, r4, r5
 800490a:	10a4      	asrs	r4, r4, #2
 800490c:	42a6      	cmp	r6, r4
 800490e:	d109      	bne.n	8004924 <__libc_init_array+0x24>
 8004910:	2600      	movs	r6, #0
 8004912:	f002 fdc1 	bl	8007498 <_init>
 8004916:	4d0a      	ldr	r5, [pc, #40]	; (8004940 <__libc_init_array+0x40>)
 8004918:	4c0a      	ldr	r4, [pc, #40]	; (8004944 <__libc_init_array+0x44>)
 800491a:	1b64      	subs	r4, r4, r5
 800491c:	10a4      	asrs	r4, r4, #2
 800491e:	42a6      	cmp	r6, r4
 8004920:	d105      	bne.n	800492e <__libc_init_array+0x2e>
 8004922:	bd70      	pop	{r4, r5, r6, pc}
 8004924:	00b3      	lsls	r3, r6, #2
 8004926:	58eb      	ldr	r3, [r5, r3]
 8004928:	4798      	blx	r3
 800492a:	3601      	adds	r6, #1
 800492c:	e7ee      	b.n	800490c <__libc_init_array+0xc>
 800492e:	00b3      	lsls	r3, r6, #2
 8004930:	58eb      	ldr	r3, [r5, r3]
 8004932:	4798      	blx	r3
 8004934:	3601      	adds	r6, #1
 8004936:	e7f2      	b.n	800491e <__libc_init_array+0x1e>
 8004938:	080079d4 	.word	0x080079d4
 800493c:	080079d4 	.word	0x080079d4
 8004940:	080079d4 	.word	0x080079d4
 8004944:	080079d8 	.word	0x080079d8

08004948 <memset>:
 8004948:	0003      	movs	r3, r0
 800494a:	1882      	adds	r2, r0, r2
 800494c:	4293      	cmp	r3, r2
 800494e:	d100      	bne.n	8004952 <memset+0xa>
 8004950:	4770      	bx	lr
 8004952:	7019      	strb	r1, [r3, #0]
 8004954:	3301      	adds	r3, #1
 8004956:	e7f9      	b.n	800494c <memset+0x4>

08004958 <__cvt>:
 8004958:	b5f0      	push	{r4, r5, r6, r7, lr}
 800495a:	001e      	movs	r6, r3
 800495c:	2300      	movs	r3, #0
 800495e:	0014      	movs	r4, r2
 8004960:	b08b      	sub	sp, #44	; 0x2c
 8004962:	429e      	cmp	r6, r3
 8004964:	da04      	bge.n	8004970 <__cvt+0x18>
 8004966:	2180      	movs	r1, #128	; 0x80
 8004968:	0609      	lsls	r1, r1, #24
 800496a:	1873      	adds	r3, r6, r1
 800496c:	001e      	movs	r6, r3
 800496e:	232d      	movs	r3, #45	; 0x2d
 8004970:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004972:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004974:	7013      	strb	r3, [r2, #0]
 8004976:	2320      	movs	r3, #32
 8004978:	2203      	movs	r2, #3
 800497a:	439f      	bics	r7, r3
 800497c:	2f46      	cmp	r7, #70	; 0x46
 800497e:	d007      	beq.n	8004990 <__cvt+0x38>
 8004980:	003b      	movs	r3, r7
 8004982:	3b45      	subs	r3, #69	; 0x45
 8004984:	4259      	negs	r1, r3
 8004986:	414b      	adcs	r3, r1
 8004988:	9910      	ldr	r1, [sp, #64]	; 0x40
 800498a:	3a01      	subs	r2, #1
 800498c:	18cb      	adds	r3, r1, r3
 800498e:	9310      	str	r3, [sp, #64]	; 0x40
 8004990:	ab09      	add	r3, sp, #36	; 0x24
 8004992:	9304      	str	r3, [sp, #16]
 8004994:	ab08      	add	r3, sp, #32
 8004996:	9303      	str	r3, [sp, #12]
 8004998:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800499a:	9200      	str	r2, [sp, #0]
 800499c:	9302      	str	r3, [sp, #8]
 800499e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80049a0:	0022      	movs	r2, r4
 80049a2:	9301      	str	r3, [sp, #4]
 80049a4:	0033      	movs	r3, r6
 80049a6:	f000 fcf7 	bl	8005398 <_dtoa_r>
 80049aa:	0005      	movs	r5, r0
 80049ac:	2f47      	cmp	r7, #71	; 0x47
 80049ae:	d102      	bne.n	80049b6 <__cvt+0x5e>
 80049b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80049b2:	07db      	lsls	r3, r3, #31
 80049b4:	d528      	bpl.n	8004a08 <__cvt+0xb0>
 80049b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80049b8:	18eb      	adds	r3, r5, r3
 80049ba:	9307      	str	r3, [sp, #28]
 80049bc:	2f46      	cmp	r7, #70	; 0x46
 80049be:	d114      	bne.n	80049ea <__cvt+0x92>
 80049c0:	782b      	ldrb	r3, [r5, #0]
 80049c2:	2b30      	cmp	r3, #48	; 0x30
 80049c4:	d10c      	bne.n	80049e0 <__cvt+0x88>
 80049c6:	2200      	movs	r2, #0
 80049c8:	2300      	movs	r3, #0
 80049ca:	0020      	movs	r0, r4
 80049cc:	0031      	movs	r1, r6
 80049ce:	f7fb fd3b 	bl	8000448 <__aeabi_dcmpeq>
 80049d2:	2800      	cmp	r0, #0
 80049d4:	d104      	bne.n	80049e0 <__cvt+0x88>
 80049d6:	2301      	movs	r3, #1
 80049d8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80049da:	1a9b      	subs	r3, r3, r2
 80049dc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80049de:	6013      	str	r3, [r2, #0]
 80049e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80049e2:	9a07      	ldr	r2, [sp, #28]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	18d3      	adds	r3, r2, r3
 80049e8:	9307      	str	r3, [sp, #28]
 80049ea:	2200      	movs	r2, #0
 80049ec:	2300      	movs	r3, #0
 80049ee:	0020      	movs	r0, r4
 80049f0:	0031      	movs	r1, r6
 80049f2:	f7fb fd29 	bl	8000448 <__aeabi_dcmpeq>
 80049f6:	2800      	cmp	r0, #0
 80049f8:	d001      	beq.n	80049fe <__cvt+0xa6>
 80049fa:	9b07      	ldr	r3, [sp, #28]
 80049fc:	9309      	str	r3, [sp, #36]	; 0x24
 80049fe:	2230      	movs	r2, #48	; 0x30
 8004a00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a02:	9907      	ldr	r1, [sp, #28]
 8004a04:	428b      	cmp	r3, r1
 8004a06:	d306      	bcc.n	8004a16 <__cvt+0xbe>
 8004a08:	0028      	movs	r0, r5
 8004a0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a0c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004a0e:	1b5b      	subs	r3, r3, r5
 8004a10:	6013      	str	r3, [r2, #0]
 8004a12:	b00b      	add	sp, #44	; 0x2c
 8004a14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a16:	1c59      	adds	r1, r3, #1
 8004a18:	9109      	str	r1, [sp, #36]	; 0x24
 8004a1a:	701a      	strb	r2, [r3, #0]
 8004a1c:	e7f0      	b.n	8004a00 <__cvt+0xa8>

08004a1e <__exponent>:
 8004a1e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a20:	1c83      	adds	r3, r0, #2
 8004a22:	b087      	sub	sp, #28
 8004a24:	9303      	str	r3, [sp, #12]
 8004a26:	0005      	movs	r5, r0
 8004a28:	000c      	movs	r4, r1
 8004a2a:	232b      	movs	r3, #43	; 0x2b
 8004a2c:	7002      	strb	r2, [r0, #0]
 8004a2e:	2900      	cmp	r1, #0
 8004a30:	da01      	bge.n	8004a36 <__exponent+0x18>
 8004a32:	424c      	negs	r4, r1
 8004a34:	3302      	adds	r3, #2
 8004a36:	706b      	strb	r3, [r5, #1]
 8004a38:	2c09      	cmp	r4, #9
 8004a3a:	dd31      	ble.n	8004aa0 <__exponent+0x82>
 8004a3c:	270a      	movs	r7, #10
 8004a3e:	ab04      	add	r3, sp, #16
 8004a40:	1dde      	adds	r6, r3, #7
 8004a42:	0020      	movs	r0, r4
 8004a44:	0039      	movs	r1, r7
 8004a46:	9601      	str	r6, [sp, #4]
 8004a48:	f7fb fce8 	bl	800041c <__aeabi_idivmod>
 8004a4c:	3e01      	subs	r6, #1
 8004a4e:	3130      	adds	r1, #48	; 0x30
 8004a50:	0020      	movs	r0, r4
 8004a52:	7031      	strb	r1, [r6, #0]
 8004a54:	0039      	movs	r1, r7
 8004a56:	9402      	str	r4, [sp, #8]
 8004a58:	f7fb fbfa 	bl	8000250 <__divsi3>
 8004a5c:	9b02      	ldr	r3, [sp, #8]
 8004a5e:	0004      	movs	r4, r0
 8004a60:	2b63      	cmp	r3, #99	; 0x63
 8004a62:	dcee      	bgt.n	8004a42 <__exponent+0x24>
 8004a64:	9b01      	ldr	r3, [sp, #4]
 8004a66:	3430      	adds	r4, #48	; 0x30
 8004a68:	1e9a      	subs	r2, r3, #2
 8004a6a:	0013      	movs	r3, r2
 8004a6c:	9903      	ldr	r1, [sp, #12]
 8004a6e:	7014      	strb	r4, [r2, #0]
 8004a70:	a804      	add	r0, sp, #16
 8004a72:	3007      	adds	r0, #7
 8004a74:	4298      	cmp	r0, r3
 8004a76:	d80e      	bhi.n	8004a96 <__exponent+0x78>
 8004a78:	ab04      	add	r3, sp, #16
 8004a7a:	3307      	adds	r3, #7
 8004a7c:	2000      	movs	r0, #0
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d804      	bhi.n	8004a8c <__exponent+0x6e>
 8004a82:	ab04      	add	r3, sp, #16
 8004a84:	3009      	adds	r0, #9
 8004a86:	18c0      	adds	r0, r0, r3
 8004a88:	9b01      	ldr	r3, [sp, #4]
 8004a8a:	1ac0      	subs	r0, r0, r3
 8004a8c:	9b03      	ldr	r3, [sp, #12]
 8004a8e:	1818      	adds	r0, r3, r0
 8004a90:	1b40      	subs	r0, r0, r5
 8004a92:	b007      	add	sp, #28
 8004a94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a96:	7818      	ldrb	r0, [r3, #0]
 8004a98:	3301      	adds	r3, #1
 8004a9a:	7008      	strb	r0, [r1, #0]
 8004a9c:	3101      	adds	r1, #1
 8004a9e:	e7e7      	b.n	8004a70 <__exponent+0x52>
 8004aa0:	2330      	movs	r3, #48	; 0x30
 8004aa2:	18e4      	adds	r4, r4, r3
 8004aa4:	70ab      	strb	r3, [r5, #2]
 8004aa6:	1d28      	adds	r0, r5, #4
 8004aa8:	70ec      	strb	r4, [r5, #3]
 8004aaa:	e7f1      	b.n	8004a90 <__exponent+0x72>

08004aac <_printf_float>:
 8004aac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004aae:	b095      	sub	sp, #84	; 0x54
 8004ab0:	000c      	movs	r4, r1
 8004ab2:	9208      	str	r2, [sp, #32]
 8004ab4:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8004ab6:	9309      	str	r3, [sp, #36]	; 0x24
 8004ab8:	0007      	movs	r7, r0
 8004aba:	f001 fb8d 	bl	80061d8 <_localeconv_r>
 8004abe:	6803      	ldr	r3, [r0, #0]
 8004ac0:	0018      	movs	r0, r3
 8004ac2:	930b      	str	r3, [sp, #44]	; 0x2c
 8004ac4:	f7fb fb1e 	bl	8000104 <strlen>
 8004ac8:	2300      	movs	r3, #0
 8004aca:	9312      	str	r3, [sp, #72]	; 0x48
 8004acc:	7e23      	ldrb	r3, [r4, #24]
 8004ace:	2207      	movs	r2, #7
 8004ad0:	001e      	movs	r6, r3
 8004ad2:	6823      	ldr	r3, [r4, #0]
 8004ad4:	900d      	str	r0, [sp, #52]	; 0x34
 8004ad6:	930c      	str	r3, [sp, #48]	; 0x30
 8004ad8:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004ada:	682b      	ldr	r3, [r5, #0]
 8004adc:	05c9      	lsls	r1, r1, #23
 8004ade:	d547      	bpl.n	8004b70 <_printf_float+0xc4>
 8004ae0:	189b      	adds	r3, r3, r2
 8004ae2:	4393      	bics	r3, r2
 8004ae4:	001a      	movs	r2, r3
 8004ae6:	3208      	adds	r2, #8
 8004ae8:	602a      	str	r2, [r5, #0]
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	64a2      	str	r2, [r4, #72]	; 0x48
 8004af0:	64e3      	str	r3, [r4, #76]	; 0x4c
 8004af2:	2201      	movs	r2, #1
 8004af4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004af6:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8004af8:	930a      	str	r3, [sp, #40]	; 0x28
 8004afa:	006b      	lsls	r3, r5, #1
 8004afc:	085b      	lsrs	r3, r3, #1
 8004afe:	930e      	str	r3, [sp, #56]	; 0x38
 8004b00:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004b02:	4ba8      	ldr	r3, [pc, #672]	; (8004da4 <_printf_float+0x2f8>)
 8004b04:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004b06:	4252      	negs	r2, r2
 8004b08:	f7fd fb26 	bl	8002158 <__aeabi_dcmpun>
 8004b0c:	2800      	cmp	r0, #0
 8004b0e:	d131      	bne.n	8004b74 <_printf_float+0xc8>
 8004b10:	2201      	movs	r2, #1
 8004b12:	4ba4      	ldr	r3, [pc, #656]	; (8004da4 <_printf_float+0x2f8>)
 8004b14:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004b16:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004b18:	4252      	negs	r2, r2
 8004b1a:	f7fb fca5 	bl	8000468 <__aeabi_dcmple>
 8004b1e:	2800      	cmp	r0, #0
 8004b20:	d128      	bne.n	8004b74 <_printf_float+0xc8>
 8004b22:	2200      	movs	r2, #0
 8004b24:	2300      	movs	r3, #0
 8004b26:	0029      	movs	r1, r5
 8004b28:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004b2a:	f7fb fc93 	bl	8000454 <__aeabi_dcmplt>
 8004b2e:	2800      	cmp	r0, #0
 8004b30:	d003      	beq.n	8004b3a <_printf_float+0x8e>
 8004b32:	0023      	movs	r3, r4
 8004b34:	222d      	movs	r2, #45	; 0x2d
 8004b36:	3343      	adds	r3, #67	; 0x43
 8004b38:	701a      	strb	r2, [r3, #0]
 8004b3a:	4d9b      	ldr	r5, [pc, #620]	; (8004da8 <_printf_float+0x2fc>)
 8004b3c:	2e47      	cmp	r6, #71	; 0x47
 8004b3e:	d900      	bls.n	8004b42 <_printf_float+0x96>
 8004b40:	4d9a      	ldr	r5, [pc, #616]	; (8004dac <_printf_float+0x300>)
 8004b42:	2303      	movs	r3, #3
 8004b44:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004b46:	6123      	str	r3, [r4, #16]
 8004b48:	3301      	adds	r3, #1
 8004b4a:	439a      	bics	r2, r3
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	6022      	str	r2, [r4, #0]
 8004b50:	930a      	str	r3, [sp, #40]	; 0x28
 8004b52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b54:	0021      	movs	r1, r4
 8004b56:	9300      	str	r3, [sp, #0]
 8004b58:	0038      	movs	r0, r7
 8004b5a:	9b08      	ldr	r3, [sp, #32]
 8004b5c:	aa13      	add	r2, sp, #76	; 0x4c
 8004b5e:	f000 f9f3 	bl	8004f48 <_printf_common>
 8004b62:	1c43      	adds	r3, r0, #1
 8004b64:	d000      	beq.n	8004b68 <_printf_float+0xbc>
 8004b66:	e09e      	b.n	8004ca6 <_printf_float+0x1fa>
 8004b68:	2001      	movs	r0, #1
 8004b6a:	4240      	negs	r0, r0
 8004b6c:	b015      	add	sp, #84	; 0x54
 8004b6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b70:	3307      	adds	r3, #7
 8004b72:	e7b6      	b.n	8004ae2 <_printf_float+0x36>
 8004b74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004b76:	002b      	movs	r3, r5
 8004b78:	0010      	movs	r0, r2
 8004b7a:	0029      	movs	r1, r5
 8004b7c:	f7fd faec 	bl	8002158 <__aeabi_dcmpun>
 8004b80:	2800      	cmp	r0, #0
 8004b82:	d00a      	beq.n	8004b9a <_printf_float+0xee>
 8004b84:	2d00      	cmp	r5, #0
 8004b86:	da03      	bge.n	8004b90 <_printf_float+0xe4>
 8004b88:	0023      	movs	r3, r4
 8004b8a:	222d      	movs	r2, #45	; 0x2d
 8004b8c:	3343      	adds	r3, #67	; 0x43
 8004b8e:	701a      	strb	r2, [r3, #0]
 8004b90:	4d87      	ldr	r5, [pc, #540]	; (8004db0 <_printf_float+0x304>)
 8004b92:	2e47      	cmp	r6, #71	; 0x47
 8004b94:	d9d5      	bls.n	8004b42 <_printf_float+0x96>
 8004b96:	4d87      	ldr	r5, [pc, #540]	; (8004db4 <_printf_float+0x308>)
 8004b98:	e7d3      	b.n	8004b42 <_printf_float+0x96>
 8004b9a:	2220      	movs	r2, #32
 8004b9c:	0031      	movs	r1, r6
 8004b9e:	6863      	ldr	r3, [r4, #4]
 8004ba0:	4391      	bics	r1, r2
 8004ba2:	910e      	str	r1, [sp, #56]	; 0x38
 8004ba4:	1c5a      	adds	r2, r3, #1
 8004ba6:	d147      	bne.n	8004c38 <_printf_float+0x18c>
 8004ba8:	3307      	adds	r3, #7
 8004baa:	6063      	str	r3, [r4, #4]
 8004bac:	2380      	movs	r3, #128	; 0x80
 8004bae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004bb0:	00db      	lsls	r3, r3, #3
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	9206      	str	r2, [sp, #24]
 8004bb8:	aa12      	add	r2, sp, #72	; 0x48
 8004bba:	9205      	str	r2, [sp, #20]
 8004bbc:	aa11      	add	r2, sp, #68	; 0x44
 8004bbe:	9203      	str	r2, [sp, #12]
 8004bc0:	2223      	movs	r2, #35	; 0x23
 8004bc2:	a908      	add	r1, sp, #32
 8004bc4:	6023      	str	r3, [r4, #0]
 8004bc6:	9301      	str	r3, [sp, #4]
 8004bc8:	6863      	ldr	r3, [r4, #4]
 8004bca:	1852      	adds	r2, r2, r1
 8004bcc:	9202      	str	r2, [sp, #8]
 8004bce:	9300      	str	r3, [sp, #0]
 8004bd0:	0038      	movs	r0, r7
 8004bd2:	002b      	movs	r3, r5
 8004bd4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004bd6:	9604      	str	r6, [sp, #16]
 8004bd8:	f7ff febe 	bl	8004958 <__cvt>
 8004bdc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004bde:	0005      	movs	r5, r0
 8004be0:	9911      	ldr	r1, [sp, #68]	; 0x44
 8004be2:	2b47      	cmp	r3, #71	; 0x47
 8004be4:	d108      	bne.n	8004bf8 <_printf_float+0x14c>
 8004be6:	1ccb      	adds	r3, r1, #3
 8004be8:	db02      	blt.n	8004bf0 <_printf_float+0x144>
 8004bea:	6863      	ldr	r3, [r4, #4]
 8004bec:	4299      	cmp	r1, r3
 8004bee:	dd46      	ble.n	8004c7e <_printf_float+0x1d2>
 8004bf0:	0033      	movs	r3, r6
 8004bf2:	3b02      	subs	r3, #2
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	001e      	movs	r6, r3
 8004bf8:	2e65      	cmp	r6, #101	; 0x65
 8004bfa:	d824      	bhi.n	8004c46 <_printf_float+0x19a>
 8004bfc:	0020      	movs	r0, r4
 8004bfe:	0032      	movs	r2, r6
 8004c00:	3901      	subs	r1, #1
 8004c02:	3050      	adds	r0, #80	; 0x50
 8004c04:	9111      	str	r1, [sp, #68]	; 0x44
 8004c06:	f7ff ff0a 	bl	8004a1e <__exponent>
 8004c0a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004c0c:	900a      	str	r0, [sp, #40]	; 0x28
 8004c0e:	1813      	adds	r3, r2, r0
 8004c10:	6123      	str	r3, [r4, #16]
 8004c12:	2a01      	cmp	r2, #1
 8004c14:	dc02      	bgt.n	8004c1c <_printf_float+0x170>
 8004c16:	6822      	ldr	r2, [r4, #0]
 8004c18:	07d2      	lsls	r2, r2, #31
 8004c1a:	d501      	bpl.n	8004c20 <_printf_float+0x174>
 8004c1c:	3301      	adds	r3, #1
 8004c1e:	6123      	str	r3, [r4, #16]
 8004c20:	2323      	movs	r3, #35	; 0x23
 8004c22:	aa08      	add	r2, sp, #32
 8004c24:	189b      	adds	r3, r3, r2
 8004c26:	781b      	ldrb	r3, [r3, #0]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d100      	bne.n	8004c2e <_printf_float+0x182>
 8004c2c:	e791      	b.n	8004b52 <_printf_float+0xa6>
 8004c2e:	0023      	movs	r3, r4
 8004c30:	222d      	movs	r2, #45	; 0x2d
 8004c32:	3343      	adds	r3, #67	; 0x43
 8004c34:	701a      	strb	r2, [r3, #0]
 8004c36:	e78c      	b.n	8004b52 <_printf_float+0xa6>
 8004c38:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004c3a:	2a47      	cmp	r2, #71	; 0x47
 8004c3c:	d1b6      	bne.n	8004bac <_printf_float+0x100>
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d1b4      	bne.n	8004bac <_printf_float+0x100>
 8004c42:	3301      	adds	r3, #1
 8004c44:	e7b1      	b.n	8004baa <_printf_float+0xfe>
 8004c46:	2e66      	cmp	r6, #102	; 0x66
 8004c48:	d11b      	bne.n	8004c82 <_printf_float+0x1d6>
 8004c4a:	6863      	ldr	r3, [r4, #4]
 8004c4c:	2900      	cmp	r1, #0
 8004c4e:	dd0d      	ble.n	8004c6c <_printf_float+0x1c0>
 8004c50:	6121      	str	r1, [r4, #16]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d102      	bne.n	8004c5c <_printf_float+0x1b0>
 8004c56:	6822      	ldr	r2, [r4, #0]
 8004c58:	07d2      	lsls	r2, r2, #31
 8004c5a:	d502      	bpl.n	8004c62 <_printf_float+0x1b6>
 8004c5c:	3301      	adds	r3, #1
 8004c5e:	1859      	adds	r1, r3, r1
 8004c60:	6121      	str	r1, [r4, #16]
 8004c62:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004c64:	65a3      	str	r3, [r4, #88]	; 0x58
 8004c66:	2300      	movs	r3, #0
 8004c68:	930a      	str	r3, [sp, #40]	; 0x28
 8004c6a:	e7d9      	b.n	8004c20 <_printf_float+0x174>
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d103      	bne.n	8004c78 <_printf_float+0x1cc>
 8004c70:	2201      	movs	r2, #1
 8004c72:	6821      	ldr	r1, [r4, #0]
 8004c74:	4211      	tst	r1, r2
 8004c76:	d000      	beq.n	8004c7a <_printf_float+0x1ce>
 8004c78:	1c9a      	adds	r2, r3, #2
 8004c7a:	6122      	str	r2, [r4, #16]
 8004c7c:	e7f1      	b.n	8004c62 <_printf_float+0x1b6>
 8004c7e:	2367      	movs	r3, #103	; 0x67
 8004c80:	001e      	movs	r6, r3
 8004c82:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004c84:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004c86:	4293      	cmp	r3, r2
 8004c88:	db06      	blt.n	8004c98 <_printf_float+0x1ec>
 8004c8a:	6822      	ldr	r2, [r4, #0]
 8004c8c:	6123      	str	r3, [r4, #16]
 8004c8e:	07d2      	lsls	r2, r2, #31
 8004c90:	d5e7      	bpl.n	8004c62 <_printf_float+0x1b6>
 8004c92:	3301      	adds	r3, #1
 8004c94:	6123      	str	r3, [r4, #16]
 8004c96:	e7e4      	b.n	8004c62 <_printf_float+0x1b6>
 8004c98:	2101      	movs	r1, #1
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	dc01      	bgt.n	8004ca2 <_printf_float+0x1f6>
 8004c9e:	1849      	adds	r1, r1, r1
 8004ca0:	1ac9      	subs	r1, r1, r3
 8004ca2:	1852      	adds	r2, r2, r1
 8004ca4:	e7e9      	b.n	8004c7a <_printf_float+0x1ce>
 8004ca6:	6822      	ldr	r2, [r4, #0]
 8004ca8:	0553      	lsls	r3, r2, #21
 8004caa:	d408      	bmi.n	8004cbe <_printf_float+0x212>
 8004cac:	6923      	ldr	r3, [r4, #16]
 8004cae:	002a      	movs	r2, r5
 8004cb0:	0038      	movs	r0, r7
 8004cb2:	9908      	ldr	r1, [sp, #32]
 8004cb4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004cb6:	47a8      	blx	r5
 8004cb8:	1c43      	adds	r3, r0, #1
 8004cba:	d129      	bne.n	8004d10 <_printf_float+0x264>
 8004cbc:	e754      	b.n	8004b68 <_printf_float+0xbc>
 8004cbe:	2e65      	cmp	r6, #101	; 0x65
 8004cc0:	d800      	bhi.n	8004cc4 <_printf_float+0x218>
 8004cc2:	e0ec      	b.n	8004e9e <_printf_float+0x3f2>
 8004cc4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8004cc6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8004cc8:	2200      	movs	r2, #0
 8004cca:	2300      	movs	r3, #0
 8004ccc:	f7fb fbbc 	bl	8000448 <__aeabi_dcmpeq>
 8004cd0:	2800      	cmp	r0, #0
 8004cd2:	d034      	beq.n	8004d3e <_printf_float+0x292>
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	0038      	movs	r0, r7
 8004cd8:	4a37      	ldr	r2, [pc, #220]	; (8004db8 <_printf_float+0x30c>)
 8004cda:	9908      	ldr	r1, [sp, #32]
 8004cdc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004cde:	47a8      	blx	r5
 8004ce0:	1c43      	adds	r3, r0, #1
 8004ce2:	d100      	bne.n	8004ce6 <_printf_float+0x23a>
 8004ce4:	e740      	b.n	8004b68 <_printf_float+0xbc>
 8004ce6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004ce8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004cea:	4293      	cmp	r3, r2
 8004cec:	db02      	blt.n	8004cf4 <_printf_float+0x248>
 8004cee:	6823      	ldr	r3, [r4, #0]
 8004cf0:	07db      	lsls	r3, r3, #31
 8004cf2:	d50d      	bpl.n	8004d10 <_printf_float+0x264>
 8004cf4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004cf6:	0038      	movs	r0, r7
 8004cf8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004cfa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004cfc:	9908      	ldr	r1, [sp, #32]
 8004cfe:	47a8      	blx	r5
 8004d00:	2500      	movs	r5, #0
 8004d02:	1c43      	adds	r3, r0, #1
 8004d04:	d100      	bne.n	8004d08 <_printf_float+0x25c>
 8004d06:	e72f      	b.n	8004b68 <_printf_float+0xbc>
 8004d08:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004d0a:	3b01      	subs	r3, #1
 8004d0c:	42ab      	cmp	r3, r5
 8004d0e:	dc0a      	bgt.n	8004d26 <_printf_float+0x27a>
 8004d10:	6823      	ldr	r3, [r4, #0]
 8004d12:	079b      	lsls	r3, r3, #30
 8004d14:	d500      	bpl.n	8004d18 <_printf_float+0x26c>
 8004d16:	e114      	b.n	8004f42 <_printf_float+0x496>
 8004d18:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004d1a:	68e0      	ldr	r0, [r4, #12]
 8004d1c:	4298      	cmp	r0, r3
 8004d1e:	db00      	blt.n	8004d22 <_printf_float+0x276>
 8004d20:	e724      	b.n	8004b6c <_printf_float+0xc0>
 8004d22:	0018      	movs	r0, r3
 8004d24:	e722      	b.n	8004b6c <_printf_float+0xc0>
 8004d26:	0022      	movs	r2, r4
 8004d28:	2301      	movs	r3, #1
 8004d2a:	0038      	movs	r0, r7
 8004d2c:	9908      	ldr	r1, [sp, #32]
 8004d2e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8004d30:	321a      	adds	r2, #26
 8004d32:	47b0      	blx	r6
 8004d34:	1c43      	adds	r3, r0, #1
 8004d36:	d100      	bne.n	8004d3a <_printf_float+0x28e>
 8004d38:	e716      	b.n	8004b68 <_printf_float+0xbc>
 8004d3a:	3501      	adds	r5, #1
 8004d3c:	e7e4      	b.n	8004d08 <_printf_float+0x25c>
 8004d3e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	dc3b      	bgt.n	8004dbc <_printf_float+0x310>
 8004d44:	2301      	movs	r3, #1
 8004d46:	0038      	movs	r0, r7
 8004d48:	4a1b      	ldr	r2, [pc, #108]	; (8004db8 <_printf_float+0x30c>)
 8004d4a:	9908      	ldr	r1, [sp, #32]
 8004d4c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8004d4e:	47b0      	blx	r6
 8004d50:	1c43      	adds	r3, r0, #1
 8004d52:	d100      	bne.n	8004d56 <_printf_float+0x2aa>
 8004d54:	e708      	b.n	8004b68 <_printf_float+0xbc>
 8004d56:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004d58:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	d102      	bne.n	8004d64 <_printf_float+0x2b8>
 8004d5e:	6823      	ldr	r3, [r4, #0]
 8004d60:	07db      	lsls	r3, r3, #31
 8004d62:	d5d5      	bpl.n	8004d10 <_printf_float+0x264>
 8004d64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d66:	0038      	movs	r0, r7
 8004d68:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004d6a:	9908      	ldr	r1, [sp, #32]
 8004d6c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8004d6e:	47b0      	blx	r6
 8004d70:	1c43      	adds	r3, r0, #1
 8004d72:	d100      	bne.n	8004d76 <_printf_float+0x2ca>
 8004d74:	e6f8      	b.n	8004b68 <_printf_float+0xbc>
 8004d76:	2300      	movs	r3, #0
 8004d78:	930a      	str	r3, [sp, #40]	; 0x28
 8004d7a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004d7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004d7e:	425b      	negs	r3, r3
 8004d80:	4293      	cmp	r3, r2
 8004d82:	dc01      	bgt.n	8004d88 <_printf_float+0x2dc>
 8004d84:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004d86:	e792      	b.n	8004cae <_printf_float+0x202>
 8004d88:	0022      	movs	r2, r4
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	0038      	movs	r0, r7
 8004d8e:	9908      	ldr	r1, [sp, #32]
 8004d90:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8004d92:	321a      	adds	r2, #26
 8004d94:	47b0      	blx	r6
 8004d96:	1c43      	adds	r3, r0, #1
 8004d98:	d100      	bne.n	8004d9c <_printf_float+0x2f0>
 8004d9a:	e6e5      	b.n	8004b68 <_printf_float+0xbc>
 8004d9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d9e:	3301      	adds	r3, #1
 8004da0:	e7ea      	b.n	8004d78 <_printf_float+0x2cc>
 8004da2:	46c0      	nop			; (mov r8, r8)
 8004da4:	7fefffff 	.word	0x7fefffff
 8004da8:	080075ec 	.word	0x080075ec
 8004dac:	080075f0 	.word	0x080075f0
 8004db0:	080075f4 	.word	0x080075f4
 8004db4:	080075f8 	.word	0x080075f8
 8004db8:	080075fc 	.word	0x080075fc
 8004dbc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004dbe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004dc0:	920a      	str	r2, [sp, #40]	; 0x28
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	dd00      	ble.n	8004dc8 <_printf_float+0x31c>
 8004dc6:	930a      	str	r3, [sp, #40]	; 0x28
 8004dc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	dc3d      	bgt.n	8004e4a <_printf_float+0x39e>
 8004dce:	2300      	movs	r3, #0
 8004dd0:	930e      	str	r3, [sp, #56]	; 0x38
 8004dd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004dd4:	43db      	mvns	r3, r3
 8004dd6:	17db      	asrs	r3, r3, #31
 8004dd8:	930f      	str	r3, [sp, #60]	; 0x3c
 8004dda:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004ddc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004dde:	930c      	str	r3, [sp, #48]	; 0x30
 8004de0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004de2:	4013      	ands	r3, r2
 8004de4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004de6:	1ad3      	subs	r3, r2, r3
 8004de8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004dea:	4293      	cmp	r3, r2
 8004dec:	dc36      	bgt.n	8004e5c <_printf_float+0x3b0>
 8004dee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004df0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004df2:	4293      	cmp	r3, r2
 8004df4:	db40      	blt.n	8004e78 <_printf_float+0x3cc>
 8004df6:	6823      	ldr	r3, [r4, #0]
 8004df8:	07db      	lsls	r3, r3, #31
 8004dfa:	d43d      	bmi.n	8004e78 <_printf_float+0x3cc>
 8004dfc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004dfe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004e00:	9911      	ldr	r1, [sp, #68]	; 0x44
 8004e02:	1ad3      	subs	r3, r2, r3
 8004e04:	1a52      	subs	r2, r2, r1
 8004e06:	920a      	str	r2, [sp, #40]	; 0x28
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	dd00      	ble.n	8004e0e <_printf_float+0x362>
 8004e0c:	930a      	str	r3, [sp, #40]	; 0x28
 8004e0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	dc3a      	bgt.n	8004e8a <_printf_float+0x3de>
 8004e14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e16:	2500      	movs	r5, #0
 8004e18:	43db      	mvns	r3, r3
 8004e1a:	17db      	asrs	r3, r3, #31
 8004e1c:	930b      	str	r3, [sp, #44]	; 0x2c
 8004e1e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004e20:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004e22:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004e24:	1a9b      	subs	r3, r3, r2
 8004e26:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004e28:	400a      	ands	r2, r1
 8004e2a:	1a9b      	subs	r3, r3, r2
 8004e2c:	42ab      	cmp	r3, r5
 8004e2e:	dc00      	bgt.n	8004e32 <_printf_float+0x386>
 8004e30:	e76e      	b.n	8004d10 <_printf_float+0x264>
 8004e32:	0022      	movs	r2, r4
 8004e34:	2301      	movs	r3, #1
 8004e36:	0038      	movs	r0, r7
 8004e38:	9908      	ldr	r1, [sp, #32]
 8004e3a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8004e3c:	321a      	adds	r2, #26
 8004e3e:	47b0      	blx	r6
 8004e40:	1c43      	adds	r3, r0, #1
 8004e42:	d100      	bne.n	8004e46 <_printf_float+0x39a>
 8004e44:	e690      	b.n	8004b68 <_printf_float+0xbc>
 8004e46:	3501      	adds	r5, #1
 8004e48:	e7e9      	b.n	8004e1e <_printf_float+0x372>
 8004e4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e4c:	002a      	movs	r2, r5
 8004e4e:	0038      	movs	r0, r7
 8004e50:	9908      	ldr	r1, [sp, #32]
 8004e52:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8004e54:	47b0      	blx	r6
 8004e56:	1c43      	adds	r3, r0, #1
 8004e58:	d1b9      	bne.n	8004dce <_printf_float+0x322>
 8004e5a:	e685      	b.n	8004b68 <_printf_float+0xbc>
 8004e5c:	0022      	movs	r2, r4
 8004e5e:	2301      	movs	r3, #1
 8004e60:	0038      	movs	r0, r7
 8004e62:	9908      	ldr	r1, [sp, #32]
 8004e64:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8004e66:	321a      	adds	r2, #26
 8004e68:	47b0      	blx	r6
 8004e6a:	1c43      	adds	r3, r0, #1
 8004e6c:	d100      	bne.n	8004e70 <_printf_float+0x3c4>
 8004e6e:	e67b      	b.n	8004b68 <_printf_float+0xbc>
 8004e70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004e72:	3301      	adds	r3, #1
 8004e74:	930e      	str	r3, [sp, #56]	; 0x38
 8004e76:	e7b0      	b.n	8004dda <_printf_float+0x32e>
 8004e78:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e7a:	0038      	movs	r0, r7
 8004e7c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004e7e:	9908      	ldr	r1, [sp, #32]
 8004e80:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8004e82:	47b0      	blx	r6
 8004e84:	1c43      	adds	r3, r0, #1
 8004e86:	d1b9      	bne.n	8004dfc <_printf_float+0x350>
 8004e88:	e66e      	b.n	8004b68 <_printf_float+0xbc>
 8004e8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004e8c:	0038      	movs	r0, r7
 8004e8e:	18ea      	adds	r2, r5, r3
 8004e90:	9908      	ldr	r1, [sp, #32]
 8004e92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e94:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004e96:	47a8      	blx	r5
 8004e98:	1c43      	adds	r3, r0, #1
 8004e9a:	d1bb      	bne.n	8004e14 <_printf_float+0x368>
 8004e9c:	e664      	b.n	8004b68 <_printf_float+0xbc>
 8004e9e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	dc02      	bgt.n	8004eaa <_printf_float+0x3fe>
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	421a      	tst	r2, r3
 8004ea8:	d038      	beq.n	8004f1c <_printf_float+0x470>
 8004eaa:	2301      	movs	r3, #1
 8004eac:	002a      	movs	r2, r5
 8004eae:	0038      	movs	r0, r7
 8004eb0:	9908      	ldr	r1, [sp, #32]
 8004eb2:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8004eb4:	47b0      	blx	r6
 8004eb6:	1c43      	adds	r3, r0, #1
 8004eb8:	d100      	bne.n	8004ebc <_printf_float+0x410>
 8004eba:	e655      	b.n	8004b68 <_printf_float+0xbc>
 8004ebc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004ebe:	0038      	movs	r0, r7
 8004ec0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004ec2:	9908      	ldr	r1, [sp, #32]
 8004ec4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8004ec6:	47b0      	blx	r6
 8004ec8:	1c43      	adds	r3, r0, #1
 8004eca:	d100      	bne.n	8004ece <_printf_float+0x422>
 8004ecc:	e64c      	b.n	8004b68 <_printf_float+0xbc>
 8004ece:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8004ed0:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	f7fb fab7 	bl	8000448 <__aeabi_dcmpeq>
 8004eda:	2800      	cmp	r0, #0
 8004edc:	d11c      	bne.n	8004f18 <_printf_float+0x46c>
 8004ede:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004ee0:	1c6a      	adds	r2, r5, #1
 8004ee2:	3b01      	subs	r3, #1
 8004ee4:	0038      	movs	r0, r7
 8004ee6:	9908      	ldr	r1, [sp, #32]
 8004ee8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004eea:	47a8      	blx	r5
 8004eec:	1c43      	adds	r3, r0, #1
 8004eee:	d10f      	bne.n	8004f10 <_printf_float+0x464>
 8004ef0:	e63a      	b.n	8004b68 <_printf_float+0xbc>
 8004ef2:	0022      	movs	r2, r4
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	0038      	movs	r0, r7
 8004ef8:	9908      	ldr	r1, [sp, #32]
 8004efa:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8004efc:	321a      	adds	r2, #26
 8004efe:	47b0      	blx	r6
 8004f00:	1c43      	adds	r3, r0, #1
 8004f02:	d100      	bne.n	8004f06 <_printf_float+0x45a>
 8004f04:	e630      	b.n	8004b68 <_printf_float+0xbc>
 8004f06:	3501      	adds	r5, #1
 8004f08:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004f0a:	3b01      	subs	r3, #1
 8004f0c:	42ab      	cmp	r3, r5
 8004f0e:	dcf0      	bgt.n	8004ef2 <_printf_float+0x446>
 8004f10:	0022      	movs	r2, r4
 8004f12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f14:	3250      	adds	r2, #80	; 0x50
 8004f16:	e6cb      	b.n	8004cb0 <_printf_float+0x204>
 8004f18:	2500      	movs	r5, #0
 8004f1a:	e7f5      	b.n	8004f08 <_printf_float+0x45c>
 8004f1c:	002a      	movs	r2, r5
 8004f1e:	e7e1      	b.n	8004ee4 <_printf_float+0x438>
 8004f20:	0022      	movs	r2, r4
 8004f22:	2301      	movs	r3, #1
 8004f24:	0038      	movs	r0, r7
 8004f26:	9908      	ldr	r1, [sp, #32]
 8004f28:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8004f2a:	3219      	adds	r2, #25
 8004f2c:	47b0      	blx	r6
 8004f2e:	1c43      	adds	r3, r0, #1
 8004f30:	d100      	bne.n	8004f34 <_printf_float+0x488>
 8004f32:	e619      	b.n	8004b68 <_printf_float+0xbc>
 8004f34:	3501      	adds	r5, #1
 8004f36:	68e3      	ldr	r3, [r4, #12]
 8004f38:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004f3a:	1a9b      	subs	r3, r3, r2
 8004f3c:	42ab      	cmp	r3, r5
 8004f3e:	dcef      	bgt.n	8004f20 <_printf_float+0x474>
 8004f40:	e6ea      	b.n	8004d18 <_printf_float+0x26c>
 8004f42:	2500      	movs	r5, #0
 8004f44:	e7f7      	b.n	8004f36 <_printf_float+0x48a>
 8004f46:	46c0      	nop			; (mov r8, r8)

08004f48 <_printf_common>:
 8004f48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f4a:	0015      	movs	r5, r2
 8004f4c:	9301      	str	r3, [sp, #4]
 8004f4e:	688a      	ldr	r2, [r1, #8]
 8004f50:	690b      	ldr	r3, [r1, #16]
 8004f52:	000c      	movs	r4, r1
 8004f54:	9000      	str	r0, [sp, #0]
 8004f56:	4293      	cmp	r3, r2
 8004f58:	da00      	bge.n	8004f5c <_printf_common+0x14>
 8004f5a:	0013      	movs	r3, r2
 8004f5c:	0022      	movs	r2, r4
 8004f5e:	602b      	str	r3, [r5, #0]
 8004f60:	3243      	adds	r2, #67	; 0x43
 8004f62:	7812      	ldrb	r2, [r2, #0]
 8004f64:	2a00      	cmp	r2, #0
 8004f66:	d001      	beq.n	8004f6c <_printf_common+0x24>
 8004f68:	3301      	adds	r3, #1
 8004f6a:	602b      	str	r3, [r5, #0]
 8004f6c:	6823      	ldr	r3, [r4, #0]
 8004f6e:	069b      	lsls	r3, r3, #26
 8004f70:	d502      	bpl.n	8004f78 <_printf_common+0x30>
 8004f72:	682b      	ldr	r3, [r5, #0]
 8004f74:	3302      	adds	r3, #2
 8004f76:	602b      	str	r3, [r5, #0]
 8004f78:	6822      	ldr	r2, [r4, #0]
 8004f7a:	2306      	movs	r3, #6
 8004f7c:	0017      	movs	r7, r2
 8004f7e:	401f      	ands	r7, r3
 8004f80:	421a      	tst	r2, r3
 8004f82:	d027      	beq.n	8004fd4 <_printf_common+0x8c>
 8004f84:	0023      	movs	r3, r4
 8004f86:	3343      	adds	r3, #67	; 0x43
 8004f88:	781b      	ldrb	r3, [r3, #0]
 8004f8a:	1e5a      	subs	r2, r3, #1
 8004f8c:	4193      	sbcs	r3, r2
 8004f8e:	6822      	ldr	r2, [r4, #0]
 8004f90:	0692      	lsls	r2, r2, #26
 8004f92:	d430      	bmi.n	8004ff6 <_printf_common+0xae>
 8004f94:	0022      	movs	r2, r4
 8004f96:	9901      	ldr	r1, [sp, #4]
 8004f98:	9800      	ldr	r0, [sp, #0]
 8004f9a:	9e08      	ldr	r6, [sp, #32]
 8004f9c:	3243      	adds	r2, #67	; 0x43
 8004f9e:	47b0      	blx	r6
 8004fa0:	1c43      	adds	r3, r0, #1
 8004fa2:	d025      	beq.n	8004ff0 <_printf_common+0xa8>
 8004fa4:	2306      	movs	r3, #6
 8004fa6:	6820      	ldr	r0, [r4, #0]
 8004fa8:	682a      	ldr	r2, [r5, #0]
 8004faa:	68e1      	ldr	r1, [r4, #12]
 8004fac:	2500      	movs	r5, #0
 8004fae:	4003      	ands	r3, r0
 8004fb0:	2b04      	cmp	r3, #4
 8004fb2:	d103      	bne.n	8004fbc <_printf_common+0x74>
 8004fb4:	1a8d      	subs	r5, r1, r2
 8004fb6:	43eb      	mvns	r3, r5
 8004fb8:	17db      	asrs	r3, r3, #31
 8004fba:	401d      	ands	r5, r3
 8004fbc:	68a3      	ldr	r3, [r4, #8]
 8004fbe:	6922      	ldr	r2, [r4, #16]
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	dd01      	ble.n	8004fc8 <_printf_common+0x80>
 8004fc4:	1a9b      	subs	r3, r3, r2
 8004fc6:	18ed      	adds	r5, r5, r3
 8004fc8:	2700      	movs	r7, #0
 8004fca:	42bd      	cmp	r5, r7
 8004fcc:	d120      	bne.n	8005010 <_printf_common+0xc8>
 8004fce:	2000      	movs	r0, #0
 8004fd0:	e010      	b.n	8004ff4 <_printf_common+0xac>
 8004fd2:	3701      	adds	r7, #1
 8004fd4:	68e3      	ldr	r3, [r4, #12]
 8004fd6:	682a      	ldr	r2, [r5, #0]
 8004fd8:	1a9b      	subs	r3, r3, r2
 8004fda:	42bb      	cmp	r3, r7
 8004fdc:	ddd2      	ble.n	8004f84 <_printf_common+0x3c>
 8004fde:	0022      	movs	r2, r4
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	9901      	ldr	r1, [sp, #4]
 8004fe4:	9800      	ldr	r0, [sp, #0]
 8004fe6:	9e08      	ldr	r6, [sp, #32]
 8004fe8:	3219      	adds	r2, #25
 8004fea:	47b0      	blx	r6
 8004fec:	1c43      	adds	r3, r0, #1
 8004fee:	d1f0      	bne.n	8004fd2 <_printf_common+0x8a>
 8004ff0:	2001      	movs	r0, #1
 8004ff2:	4240      	negs	r0, r0
 8004ff4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004ff6:	2030      	movs	r0, #48	; 0x30
 8004ff8:	18e1      	adds	r1, r4, r3
 8004ffa:	3143      	adds	r1, #67	; 0x43
 8004ffc:	7008      	strb	r0, [r1, #0]
 8004ffe:	0021      	movs	r1, r4
 8005000:	1c5a      	adds	r2, r3, #1
 8005002:	3145      	adds	r1, #69	; 0x45
 8005004:	7809      	ldrb	r1, [r1, #0]
 8005006:	18a2      	adds	r2, r4, r2
 8005008:	3243      	adds	r2, #67	; 0x43
 800500a:	3302      	adds	r3, #2
 800500c:	7011      	strb	r1, [r2, #0]
 800500e:	e7c1      	b.n	8004f94 <_printf_common+0x4c>
 8005010:	0022      	movs	r2, r4
 8005012:	2301      	movs	r3, #1
 8005014:	9901      	ldr	r1, [sp, #4]
 8005016:	9800      	ldr	r0, [sp, #0]
 8005018:	9e08      	ldr	r6, [sp, #32]
 800501a:	321a      	adds	r2, #26
 800501c:	47b0      	blx	r6
 800501e:	1c43      	adds	r3, r0, #1
 8005020:	d0e6      	beq.n	8004ff0 <_printf_common+0xa8>
 8005022:	3701      	adds	r7, #1
 8005024:	e7d1      	b.n	8004fca <_printf_common+0x82>
	...

08005028 <_printf_i>:
 8005028:	b5f0      	push	{r4, r5, r6, r7, lr}
 800502a:	b08b      	sub	sp, #44	; 0x2c
 800502c:	9206      	str	r2, [sp, #24]
 800502e:	000a      	movs	r2, r1
 8005030:	3243      	adds	r2, #67	; 0x43
 8005032:	9307      	str	r3, [sp, #28]
 8005034:	9005      	str	r0, [sp, #20]
 8005036:	9204      	str	r2, [sp, #16]
 8005038:	7e0a      	ldrb	r2, [r1, #24]
 800503a:	000c      	movs	r4, r1
 800503c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800503e:	2a78      	cmp	r2, #120	; 0x78
 8005040:	d806      	bhi.n	8005050 <_printf_i+0x28>
 8005042:	2a62      	cmp	r2, #98	; 0x62
 8005044:	d808      	bhi.n	8005058 <_printf_i+0x30>
 8005046:	2a00      	cmp	r2, #0
 8005048:	d100      	bne.n	800504c <_printf_i+0x24>
 800504a:	e0c0      	b.n	80051ce <_printf_i+0x1a6>
 800504c:	2a58      	cmp	r2, #88	; 0x58
 800504e:	d052      	beq.n	80050f6 <_printf_i+0xce>
 8005050:	0026      	movs	r6, r4
 8005052:	3642      	adds	r6, #66	; 0x42
 8005054:	7032      	strb	r2, [r6, #0]
 8005056:	e022      	b.n	800509e <_printf_i+0x76>
 8005058:	0010      	movs	r0, r2
 800505a:	3863      	subs	r0, #99	; 0x63
 800505c:	2815      	cmp	r0, #21
 800505e:	d8f7      	bhi.n	8005050 <_printf_i+0x28>
 8005060:	f7fb f862 	bl	8000128 <__gnu_thumb1_case_shi>
 8005064:	001f0016 	.word	0x001f0016
 8005068:	fff6fff6 	.word	0xfff6fff6
 800506c:	fff6fff6 	.word	0xfff6fff6
 8005070:	fff6001f 	.word	0xfff6001f
 8005074:	fff6fff6 	.word	0xfff6fff6
 8005078:	00a8fff6 	.word	0x00a8fff6
 800507c:	009a0036 	.word	0x009a0036
 8005080:	fff6fff6 	.word	0xfff6fff6
 8005084:	fff600b9 	.word	0xfff600b9
 8005088:	fff60036 	.word	0xfff60036
 800508c:	009efff6 	.word	0x009efff6
 8005090:	0026      	movs	r6, r4
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	3642      	adds	r6, #66	; 0x42
 8005096:	1d11      	adds	r1, r2, #4
 8005098:	6019      	str	r1, [r3, #0]
 800509a:	6813      	ldr	r3, [r2, #0]
 800509c:	7033      	strb	r3, [r6, #0]
 800509e:	2301      	movs	r3, #1
 80050a0:	e0a7      	b.n	80051f2 <_printf_i+0x1ca>
 80050a2:	6808      	ldr	r0, [r1, #0]
 80050a4:	6819      	ldr	r1, [r3, #0]
 80050a6:	1d0a      	adds	r2, r1, #4
 80050a8:	0605      	lsls	r5, r0, #24
 80050aa:	d50b      	bpl.n	80050c4 <_printf_i+0x9c>
 80050ac:	680d      	ldr	r5, [r1, #0]
 80050ae:	601a      	str	r2, [r3, #0]
 80050b0:	2d00      	cmp	r5, #0
 80050b2:	da03      	bge.n	80050bc <_printf_i+0x94>
 80050b4:	232d      	movs	r3, #45	; 0x2d
 80050b6:	9a04      	ldr	r2, [sp, #16]
 80050b8:	426d      	negs	r5, r5
 80050ba:	7013      	strb	r3, [r2, #0]
 80050bc:	4b61      	ldr	r3, [pc, #388]	; (8005244 <_printf_i+0x21c>)
 80050be:	270a      	movs	r7, #10
 80050c0:	9303      	str	r3, [sp, #12]
 80050c2:	e032      	b.n	800512a <_printf_i+0x102>
 80050c4:	680d      	ldr	r5, [r1, #0]
 80050c6:	601a      	str	r2, [r3, #0]
 80050c8:	0641      	lsls	r1, r0, #25
 80050ca:	d5f1      	bpl.n	80050b0 <_printf_i+0x88>
 80050cc:	b22d      	sxth	r5, r5
 80050ce:	e7ef      	b.n	80050b0 <_printf_i+0x88>
 80050d0:	680d      	ldr	r5, [r1, #0]
 80050d2:	6819      	ldr	r1, [r3, #0]
 80050d4:	1d08      	adds	r0, r1, #4
 80050d6:	6018      	str	r0, [r3, #0]
 80050d8:	062e      	lsls	r6, r5, #24
 80050da:	d501      	bpl.n	80050e0 <_printf_i+0xb8>
 80050dc:	680d      	ldr	r5, [r1, #0]
 80050de:	e003      	b.n	80050e8 <_printf_i+0xc0>
 80050e0:	066d      	lsls	r5, r5, #25
 80050e2:	d5fb      	bpl.n	80050dc <_printf_i+0xb4>
 80050e4:	680d      	ldr	r5, [r1, #0]
 80050e6:	b2ad      	uxth	r5, r5
 80050e8:	4b56      	ldr	r3, [pc, #344]	; (8005244 <_printf_i+0x21c>)
 80050ea:	270a      	movs	r7, #10
 80050ec:	9303      	str	r3, [sp, #12]
 80050ee:	2a6f      	cmp	r2, #111	; 0x6f
 80050f0:	d117      	bne.n	8005122 <_printf_i+0xfa>
 80050f2:	2708      	movs	r7, #8
 80050f4:	e015      	b.n	8005122 <_printf_i+0xfa>
 80050f6:	3145      	adds	r1, #69	; 0x45
 80050f8:	700a      	strb	r2, [r1, #0]
 80050fa:	4a52      	ldr	r2, [pc, #328]	; (8005244 <_printf_i+0x21c>)
 80050fc:	9203      	str	r2, [sp, #12]
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	6821      	ldr	r1, [r4, #0]
 8005102:	ca20      	ldmia	r2!, {r5}
 8005104:	601a      	str	r2, [r3, #0]
 8005106:	0608      	lsls	r0, r1, #24
 8005108:	d550      	bpl.n	80051ac <_printf_i+0x184>
 800510a:	07cb      	lsls	r3, r1, #31
 800510c:	d502      	bpl.n	8005114 <_printf_i+0xec>
 800510e:	2320      	movs	r3, #32
 8005110:	4319      	orrs	r1, r3
 8005112:	6021      	str	r1, [r4, #0]
 8005114:	2710      	movs	r7, #16
 8005116:	2d00      	cmp	r5, #0
 8005118:	d103      	bne.n	8005122 <_printf_i+0xfa>
 800511a:	2320      	movs	r3, #32
 800511c:	6822      	ldr	r2, [r4, #0]
 800511e:	439a      	bics	r2, r3
 8005120:	6022      	str	r2, [r4, #0]
 8005122:	0023      	movs	r3, r4
 8005124:	2200      	movs	r2, #0
 8005126:	3343      	adds	r3, #67	; 0x43
 8005128:	701a      	strb	r2, [r3, #0]
 800512a:	6863      	ldr	r3, [r4, #4]
 800512c:	60a3      	str	r3, [r4, #8]
 800512e:	2b00      	cmp	r3, #0
 8005130:	db03      	blt.n	800513a <_printf_i+0x112>
 8005132:	2204      	movs	r2, #4
 8005134:	6821      	ldr	r1, [r4, #0]
 8005136:	4391      	bics	r1, r2
 8005138:	6021      	str	r1, [r4, #0]
 800513a:	2d00      	cmp	r5, #0
 800513c:	d102      	bne.n	8005144 <_printf_i+0x11c>
 800513e:	9e04      	ldr	r6, [sp, #16]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d00c      	beq.n	800515e <_printf_i+0x136>
 8005144:	9e04      	ldr	r6, [sp, #16]
 8005146:	0028      	movs	r0, r5
 8005148:	0039      	movs	r1, r7
 800514a:	f7fb f87d 	bl	8000248 <__aeabi_uidivmod>
 800514e:	9b03      	ldr	r3, [sp, #12]
 8005150:	3e01      	subs	r6, #1
 8005152:	5c5b      	ldrb	r3, [r3, r1]
 8005154:	7033      	strb	r3, [r6, #0]
 8005156:	002b      	movs	r3, r5
 8005158:	0005      	movs	r5, r0
 800515a:	429f      	cmp	r7, r3
 800515c:	d9f3      	bls.n	8005146 <_printf_i+0x11e>
 800515e:	2f08      	cmp	r7, #8
 8005160:	d109      	bne.n	8005176 <_printf_i+0x14e>
 8005162:	6823      	ldr	r3, [r4, #0]
 8005164:	07db      	lsls	r3, r3, #31
 8005166:	d506      	bpl.n	8005176 <_printf_i+0x14e>
 8005168:	6863      	ldr	r3, [r4, #4]
 800516a:	6922      	ldr	r2, [r4, #16]
 800516c:	4293      	cmp	r3, r2
 800516e:	dc02      	bgt.n	8005176 <_printf_i+0x14e>
 8005170:	2330      	movs	r3, #48	; 0x30
 8005172:	3e01      	subs	r6, #1
 8005174:	7033      	strb	r3, [r6, #0]
 8005176:	9b04      	ldr	r3, [sp, #16]
 8005178:	1b9b      	subs	r3, r3, r6
 800517a:	6123      	str	r3, [r4, #16]
 800517c:	9b07      	ldr	r3, [sp, #28]
 800517e:	0021      	movs	r1, r4
 8005180:	9300      	str	r3, [sp, #0]
 8005182:	9805      	ldr	r0, [sp, #20]
 8005184:	9b06      	ldr	r3, [sp, #24]
 8005186:	aa09      	add	r2, sp, #36	; 0x24
 8005188:	f7ff fede 	bl	8004f48 <_printf_common>
 800518c:	1c43      	adds	r3, r0, #1
 800518e:	d135      	bne.n	80051fc <_printf_i+0x1d4>
 8005190:	2001      	movs	r0, #1
 8005192:	4240      	negs	r0, r0
 8005194:	b00b      	add	sp, #44	; 0x2c
 8005196:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005198:	2220      	movs	r2, #32
 800519a:	6809      	ldr	r1, [r1, #0]
 800519c:	430a      	orrs	r2, r1
 800519e:	6022      	str	r2, [r4, #0]
 80051a0:	0022      	movs	r2, r4
 80051a2:	2178      	movs	r1, #120	; 0x78
 80051a4:	3245      	adds	r2, #69	; 0x45
 80051a6:	7011      	strb	r1, [r2, #0]
 80051a8:	4a27      	ldr	r2, [pc, #156]	; (8005248 <_printf_i+0x220>)
 80051aa:	e7a7      	b.n	80050fc <_printf_i+0xd4>
 80051ac:	0648      	lsls	r0, r1, #25
 80051ae:	d5ac      	bpl.n	800510a <_printf_i+0xe2>
 80051b0:	b2ad      	uxth	r5, r5
 80051b2:	e7aa      	b.n	800510a <_printf_i+0xe2>
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	680d      	ldr	r5, [r1, #0]
 80051b8:	1d10      	adds	r0, r2, #4
 80051ba:	6949      	ldr	r1, [r1, #20]
 80051bc:	6018      	str	r0, [r3, #0]
 80051be:	6813      	ldr	r3, [r2, #0]
 80051c0:	062e      	lsls	r6, r5, #24
 80051c2:	d501      	bpl.n	80051c8 <_printf_i+0x1a0>
 80051c4:	6019      	str	r1, [r3, #0]
 80051c6:	e002      	b.n	80051ce <_printf_i+0x1a6>
 80051c8:	066d      	lsls	r5, r5, #25
 80051ca:	d5fb      	bpl.n	80051c4 <_printf_i+0x19c>
 80051cc:	8019      	strh	r1, [r3, #0]
 80051ce:	2300      	movs	r3, #0
 80051d0:	9e04      	ldr	r6, [sp, #16]
 80051d2:	6123      	str	r3, [r4, #16]
 80051d4:	e7d2      	b.n	800517c <_printf_i+0x154>
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	1d11      	adds	r1, r2, #4
 80051da:	6019      	str	r1, [r3, #0]
 80051dc:	6816      	ldr	r6, [r2, #0]
 80051de:	2100      	movs	r1, #0
 80051e0:	0030      	movs	r0, r6
 80051e2:	6862      	ldr	r2, [r4, #4]
 80051e4:	f001 f80a 	bl	80061fc <memchr>
 80051e8:	2800      	cmp	r0, #0
 80051ea:	d001      	beq.n	80051f0 <_printf_i+0x1c8>
 80051ec:	1b80      	subs	r0, r0, r6
 80051ee:	6060      	str	r0, [r4, #4]
 80051f0:	6863      	ldr	r3, [r4, #4]
 80051f2:	6123      	str	r3, [r4, #16]
 80051f4:	2300      	movs	r3, #0
 80051f6:	9a04      	ldr	r2, [sp, #16]
 80051f8:	7013      	strb	r3, [r2, #0]
 80051fa:	e7bf      	b.n	800517c <_printf_i+0x154>
 80051fc:	6923      	ldr	r3, [r4, #16]
 80051fe:	0032      	movs	r2, r6
 8005200:	9906      	ldr	r1, [sp, #24]
 8005202:	9805      	ldr	r0, [sp, #20]
 8005204:	9d07      	ldr	r5, [sp, #28]
 8005206:	47a8      	blx	r5
 8005208:	1c43      	adds	r3, r0, #1
 800520a:	d0c1      	beq.n	8005190 <_printf_i+0x168>
 800520c:	6823      	ldr	r3, [r4, #0]
 800520e:	079b      	lsls	r3, r3, #30
 8005210:	d415      	bmi.n	800523e <_printf_i+0x216>
 8005212:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005214:	68e0      	ldr	r0, [r4, #12]
 8005216:	4298      	cmp	r0, r3
 8005218:	dabc      	bge.n	8005194 <_printf_i+0x16c>
 800521a:	0018      	movs	r0, r3
 800521c:	e7ba      	b.n	8005194 <_printf_i+0x16c>
 800521e:	0022      	movs	r2, r4
 8005220:	2301      	movs	r3, #1
 8005222:	9906      	ldr	r1, [sp, #24]
 8005224:	9805      	ldr	r0, [sp, #20]
 8005226:	9e07      	ldr	r6, [sp, #28]
 8005228:	3219      	adds	r2, #25
 800522a:	47b0      	blx	r6
 800522c:	1c43      	adds	r3, r0, #1
 800522e:	d0af      	beq.n	8005190 <_printf_i+0x168>
 8005230:	3501      	adds	r5, #1
 8005232:	68e3      	ldr	r3, [r4, #12]
 8005234:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005236:	1a9b      	subs	r3, r3, r2
 8005238:	42ab      	cmp	r3, r5
 800523a:	dcf0      	bgt.n	800521e <_printf_i+0x1f6>
 800523c:	e7e9      	b.n	8005212 <_printf_i+0x1ea>
 800523e:	2500      	movs	r5, #0
 8005240:	e7f7      	b.n	8005232 <_printf_i+0x20a>
 8005242:	46c0      	nop			; (mov r8, r8)
 8005244:	080075fe 	.word	0x080075fe
 8005248:	0800760f 	.word	0x0800760f

0800524c <iprintf>:
 800524c:	b40f      	push	{r0, r1, r2, r3}
 800524e:	4b0b      	ldr	r3, [pc, #44]	; (800527c <iprintf+0x30>)
 8005250:	b513      	push	{r0, r1, r4, lr}
 8005252:	681c      	ldr	r4, [r3, #0]
 8005254:	2c00      	cmp	r4, #0
 8005256:	d005      	beq.n	8005264 <iprintf+0x18>
 8005258:	69a3      	ldr	r3, [r4, #24]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d102      	bne.n	8005264 <iprintf+0x18>
 800525e:	0020      	movs	r0, r4
 8005260:	f000 ff1a 	bl	8006098 <__sinit>
 8005264:	ab05      	add	r3, sp, #20
 8005266:	0020      	movs	r0, r4
 8005268:	9a04      	ldr	r2, [sp, #16]
 800526a:	68a1      	ldr	r1, [r4, #8]
 800526c:	9301      	str	r3, [sp, #4]
 800526e:	f001 fc55 	bl	8006b1c <_vfiprintf_r>
 8005272:	bc16      	pop	{r1, r2, r4}
 8005274:	bc08      	pop	{r3}
 8005276:	b004      	add	sp, #16
 8005278:	4718      	bx	r3
 800527a:	46c0      	nop			; (mov r8, r8)
 800527c:	2000000c 	.word	0x2000000c

08005280 <quorem>:
 8005280:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005282:	0006      	movs	r6, r0
 8005284:	690d      	ldr	r5, [r1, #16]
 8005286:	6933      	ldr	r3, [r6, #16]
 8005288:	b087      	sub	sp, #28
 800528a:	2000      	movs	r0, #0
 800528c:	9102      	str	r1, [sp, #8]
 800528e:	42ab      	cmp	r3, r5
 8005290:	db6b      	blt.n	800536a <quorem+0xea>
 8005292:	000b      	movs	r3, r1
 8005294:	3d01      	subs	r5, #1
 8005296:	00ac      	lsls	r4, r5, #2
 8005298:	3314      	adds	r3, #20
 800529a:	9305      	str	r3, [sp, #20]
 800529c:	191b      	adds	r3, r3, r4
 800529e:	9303      	str	r3, [sp, #12]
 80052a0:	0033      	movs	r3, r6
 80052a2:	3314      	adds	r3, #20
 80052a4:	9301      	str	r3, [sp, #4]
 80052a6:	191c      	adds	r4, r3, r4
 80052a8:	9b03      	ldr	r3, [sp, #12]
 80052aa:	6827      	ldr	r7, [r4, #0]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	0038      	movs	r0, r7
 80052b0:	9300      	str	r3, [sp, #0]
 80052b2:	3301      	adds	r3, #1
 80052b4:	0019      	movs	r1, r3
 80052b6:	9304      	str	r3, [sp, #16]
 80052b8:	f7fa ff40 	bl	800013c <__udivsi3>
 80052bc:	9b04      	ldr	r3, [sp, #16]
 80052be:	9000      	str	r0, [sp, #0]
 80052c0:	429f      	cmp	r7, r3
 80052c2:	d329      	bcc.n	8005318 <quorem+0x98>
 80052c4:	2300      	movs	r3, #0
 80052c6:	469c      	mov	ip, r3
 80052c8:	9801      	ldr	r0, [sp, #4]
 80052ca:	9f05      	ldr	r7, [sp, #20]
 80052cc:	9304      	str	r3, [sp, #16]
 80052ce:	cf08      	ldmia	r7!, {r3}
 80052d0:	9a00      	ldr	r2, [sp, #0]
 80052d2:	b299      	uxth	r1, r3
 80052d4:	4351      	muls	r1, r2
 80052d6:	0c1b      	lsrs	r3, r3, #16
 80052d8:	4353      	muls	r3, r2
 80052da:	4461      	add	r1, ip
 80052dc:	0c0a      	lsrs	r2, r1, #16
 80052de:	189b      	adds	r3, r3, r2
 80052e0:	0c1a      	lsrs	r2, r3, #16
 80052e2:	9305      	str	r3, [sp, #20]
 80052e4:	6803      	ldr	r3, [r0, #0]
 80052e6:	4694      	mov	ip, r2
 80052e8:	b29a      	uxth	r2, r3
 80052ea:	9b04      	ldr	r3, [sp, #16]
 80052ec:	b289      	uxth	r1, r1
 80052ee:	18d2      	adds	r2, r2, r3
 80052f0:	6803      	ldr	r3, [r0, #0]
 80052f2:	1a52      	subs	r2, r2, r1
 80052f4:	0c19      	lsrs	r1, r3, #16
 80052f6:	466b      	mov	r3, sp
 80052f8:	8a9b      	ldrh	r3, [r3, #20]
 80052fa:	1acb      	subs	r3, r1, r3
 80052fc:	1411      	asrs	r1, r2, #16
 80052fe:	185b      	adds	r3, r3, r1
 8005300:	1419      	asrs	r1, r3, #16
 8005302:	b292      	uxth	r2, r2
 8005304:	041b      	lsls	r3, r3, #16
 8005306:	431a      	orrs	r2, r3
 8005308:	9b03      	ldr	r3, [sp, #12]
 800530a:	9104      	str	r1, [sp, #16]
 800530c:	c004      	stmia	r0!, {r2}
 800530e:	42bb      	cmp	r3, r7
 8005310:	d2dd      	bcs.n	80052ce <quorem+0x4e>
 8005312:	6823      	ldr	r3, [r4, #0]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d02e      	beq.n	8005376 <quorem+0xf6>
 8005318:	0030      	movs	r0, r6
 800531a:	9902      	ldr	r1, [sp, #8]
 800531c:	f001 fa08 	bl	8006730 <__mcmp>
 8005320:	2800      	cmp	r0, #0
 8005322:	db21      	blt.n	8005368 <quorem+0xe8>
 8005324:	0030      	movs	r0, r6
 8005326:	2400      	movs	r4, #0
 8005328:	9b00      	ldr	r3, [sp, #0]
 800532a:	9902      	ldr	r1, [sp, #8]
 800532c:	3301      	adds	r3, #1
 800532e:	9300      	str	r3, [sp, #0]
 8005330:	3014      	adds	r0, #20
 8005332:	3114      	adds	r1, #20
 8005334:	6802      	ldr	r2, [r0, #0]
 8005336:	c908      	ldmia	r1!, {r3}
 8005338:	b292      	uxth	r2, r2
 800533a:	1914      	adds	r4, r2, r4
 800533c:	b29a      	uxth	r2, r3
 800533e:	1aa2      	subs	r2, r4, r2
 8005340:	6804      	ldr	r4, [r0, #0]
 8005342:	0c1b      	lsrs	r3, r3, #16
 8005344:	0c24      	lsrs	r4, r4, #16
 8005346:	1ae3      	subs	r3, r4, r3
 8005348:	1414      	asrs	r4, r2, #16
 800534a:	191b      	adds	r3, r3, r4
 800534c:	141c      	asrs	r4, r3, #16
 800534e:	b292      	uxth	r2, r2
 8005350:	041b      	lsls	r3, r3, #16
 8005352:	4313      	orrs	r3, r2
 8005354:	c008      	stmia	r0!, {r3}
 8005356:	9b03      	ldr	r3, [sp, #12]
 8005358:	428b      	cmp	r3, r1
 800535a:	d2eb      	bcs.n	8005334 <quorem+0xb4>
 800535c:	9a01      	ldr	r2, [sp, #4]
 800535e:	00ab      	lsls	r3, r5, #2
 8005360:	18d3      	adds	r3, r2, r3
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	2a00      	cmp	r2, #0
 8005366:	d010      	beq.n	800538a <quorem+0x10a>
 8005368:	9800      	ldr	r0, [sp, #0]
 800536a:	b007      	add	sp, #28
 800536c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800536e:	6823      	ldr	r3, [r4, #0]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d104      	bne.n	800537e <quorem+0xfe>
 8005374:	3d01      	subs	r5, #1
 8005376:	9b01      	ldr	r3, [sp, #4]
 8005378:	3c04      	subs	r4, #4
 800537a:	42a3      	cmp	r3, r4
 800537c:	d3f7      	bcc.n	800536e <quorem+0xee>
 800537e:	6135      	str	r5, [r6, #16]
 8005380:	e7ca      	b.n	8005318 <quorem+0x98>
 8005382:	681a      	ldr	r2, [r3, #0]
 8005384:	2a00      	cmp	r2, #0
 8005386:	d104      	bne.n	8005392 <quorem+0x112>
 8005388:	3d01      	subs	r5, #1
 800538a:	9a01      	ldr	r2, [sp, #4]
 800538c:	3b04      	subs	r3, #4
 800538e:	429a      	cmp	r2, r3
 8005390:	d3f7      	bcc.n	8005382 <quorem+0x102>
 8005392:	6135      	str	r5, [r6, #16]
 8005394:	e7e8      	b.n	8005368 <quorem+0xe8>
	...

08005398 <_dtoa_r>:
 8005398:	b5f0      	push	{r4, r5, r6, r7, lr}
 800539a:	b09d      	sub	sp, #116	; 0x74
 800539c:	9202      	str	r2, [sp, #8]
 800539e:	9303      	str	r3, [sp, #12]
 80053a0:	9b02      	ldr	r3, [sp, #8]
 80053a2:	9c03      	ldr	r4, [sp, #12]
 80053a4:	930a      	str	r3, [sp, #40]	; 0x28
 80053a6:	940b      	str	r4, [sp, #44]	; 0x2c
 80053a8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80053aa:	0007      	movs	r7, r0
 80053ac:	9d25      	ldr	r5, [sp, #148]	; 0x94
 80053ae:	2c00      	cmp	r4, #0
 80053b0:	d10e      	bne.n	80053d0 <_dtoa_r+0x38>
 80053b2:	2010      	movs	r0, #16
 80053b4:	f000 ff18 	bl	80061e8 <malloc>
 80053b8:	1e02      	subs	r2, r0, #0
 80053ba:	6278      	str	r0, [r7, #36]	; 0x24
 80053bc:	d104      	bne.n	80053c8 <_dtoa_r+0x30>
 80053be:	21ea      	movs	r1, #234	; 0xea
 80053c0:	4bc0      	ldr	r3, [pc, #768]	; (80056c4 <_dtoa_r+0x32c>)
 80053c2:	48c1      	ldr	r0, [pc, #772]	; (80056c8 <_dtoa_r+0x330>)
 80053c4:	f001 fe24 	bl	8007010 <__assert_func>
 80053c8:	6044      	str	r4, [r0, #4]
 80053ca:	6084      	str	r4, [r0, #8]
 80053cc:	6004      	str	r4, [r0, #0]
 80053ce:	60c4      	str	r4, [r0, #12]
 80053d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d2:	6819      	ldr	r1, [r3, #0]
 80053d4:	2900      	cmp	r1, #0
 80053d6:	d00a      	beq.n	80053ee <_dtoa_r+0x56>
 80053d8:	685a      	ldr	r2, [r3, #4]
 80053da:	2301      	movs	r3, #1
 80053dc:	4093      	lsls	r3, r2
 80053de:	604a      	str	r2, [r1, #4]
 80053e0:	608b      	str	r3, [r1, #8]
 80053e2:	0038      	movs	r0, r7
 80053e4:	f000 ff62 	bl	80062ac <_Bfree>
 80053e8:	2200      	movs	r2, #0
 80053ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ec:	601a      	str	r2, [r3, #0]
 80053ee:	9b03      	ldr	r3, [sp, #12]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	da21      	bge.n	8005438 <_dtoa_r+0xa0>
 80053f4:	2301      	movs	r3, #1
 80053f6:	602b      	str	r3, [r5, #0]
 80053f8:	9b03      	ldr	r3, [sp, #12]
 80053fa:	005b      	lsls	r3, r3, #1
 80053fc:	085b      	lsrs	r3, r3, #1
 80053fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8005400:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8005402:	4bb2      	ldr	r3, [pc, #712]	; (80056cc <_dtoa_r+0x334>)
 8005404:	002a      	movs	r2, r5
 8005406:	9318      	str	r3, [sp, #96]	; 0x60
 8005408:	401a      	ands	r2, r3
 800540a:	429a      	cmp	r2, r3
 800540c:	d117      	bne.n	800543e <_dtoa_r+0xa6>
 800540e:	4bb0      	ldr	r3, [pc, #704]	; (80056d0 <_dtoa_r+0x338>)
 8005410:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005412:	0328      	lsls	r0, r5, #12
 8005414:	6013      	str	r3, [r2, #0]
 8005416:	9b02      	ldr	r3, [sp, #8]
 8005418:	0b00      	lsrs	r0, r0, #12
 800541a:	4318      	orrs	r0, r3
 800541c:	d101      	bne.n	8005422 <_dtoa_r+0x8a>
 800541e:	f000 fdc3 	bl	8005fa8 <_dtoa_r+0xc10>
 8005422:	48ac      	ldr	r0, [pc, #688]	; (80056d4 <_dtoa_r+0x33c>)
 8005424:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005426:	9005      	str	r0, [sp, #20]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d002      	beq.n	8005432 <_dtoa_r+0x9a>
 800542c:	4baa      	ldr	r3, [pc, #680]	; (80056d8 <_dtoa_r+0x340>)
 800542e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005430:	6013      	str	r3, [r2, #0]
 8005432:	9805      	ldr	r0, [sp, #20]
 8005434:	b01d      	add	sp, #116	; 0x74
 8005436:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005438:	2300      	movs	r3, #0
 800543a:	602b      	str	r3, [r5, #0]
 800543c:	e7e0      	b.n	8005400 <_dtoa_r+0x68>
 800543e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005440:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8005442:	9312      	str	r3, [sp, #72]	; 0x48
 8005444:	9413      	str	r4, [sp, #76]	; 0x4c
 8005446:	9812      	ldr	r0, [sp, #72]	; 0x48
 8005448:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800544a:	2200      	movs	r2, #0
 800544c:	2300      	movs	r3, #0
 800544e:	f7fa fffb 	bl	8000448 <__aeabi_dcmpeq>
 8005452:	1e04      	subs	r4, r0, #0
 8005454:	d00b      	beq.n	800546e <_dtoa_r+0xd6>
 8005456:	2301      	movs	r3, #1
 8005458:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800545a:	6013      	str	r3, [r2, #0]
 800545c:	4b9f      	ldr	r3, [pc, #636]	; (80056dc <_dtoa_r+0x344>)
 800545e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005460:	9305      	str	r3, [sp, #20]
 8005462:	2a00      	cmp	r2, #0
 8005464:	d0e5      	beq.n	8005432 <_dtoa_r+0x9a>
 8005466:	4a9e      	ldr	r2, [pc, #632]	; (80056e0 <_dtoa_r+0x348>)
 8005468:	9926      	ldr	r1, [sp, #152]	; 0x98
 800546a:	600a      	str	r2, [r1, #0]
 800546c:	e7e1      	b.n	8005432 <_dtoa_r+0x9a>
 800546e:	ab1a      	add	r3, sp, #104	; 0x68
 8005470:	9301      	str	r3, [sp, #4]
 8005472:	ab1b      	add	r3, sp, #108	; 0x6c
 8005474:	9300      	str	r3, [sp, #0]
 8005476:	0038      	movs	r0, r7
 8005478:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800547a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800547c:	f001 fa0c 	bl	8006898 <__d2b>
 8005480:	006e      	lsls	r6, r5, #1
 8005482:	9004      	str	r0, [sp, #16]
 8005484:	0d76      	lsrs	r6, r6, #21
 8005486:	d100      	bne.n	800548a <_dtoa_r+0xf2>
 8005488:	e07c      	b.n	8005584 <_dtoa_r+0x1ec>
 800548a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800548c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800548e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005490:	4a94      	ldr	r2, [pc, #592]	; (80056e4 <_dtoa_r+0x34c>)
 8005492:	031b      	lsls	r3, r3, #12
 8005494:	0b1b      	lsrs	r3, r3, #12
 8005496:	431a      	orrs	r2, r3
 8005498:	0011      	movs	r1, r2
 800549a:	4b93      	ldr	r3, [pc, #588]	; (80056e8 <_dtoa_r+0x350>)
 800549c:	9416      	str	r4, [sp, #88]	; 0x58
 800549e:	18f6      	adds	r6, r6, r3
 80054a0:	2200      	movs	r2, #0
 80054a2:	4b92      	ldr	r3, [pc, #584]	; (80056ec <_dtoa_r+0x354>)
 80054a4:	f7fc fac6 	bl	8001a34 <__aeabi_dsub>
 80054a8:	4a91      	ldr	r2, [pc, #580]	; (80056f0 <_dtoa_r+0x358>)
 80054aa:	4b92      	ldr	r3, [pc, #584]	; (80056f4 <_dtoa_r+0x35c>)
 80054ac:	f7fc f856 	bl	800155c <__aeabi_dmul>
 80054b0:	4a91      	ldr	r2, [pc, #580]	; (80056f8 <_dtoa_r+0x360>)
 80054b2:	4b92      	ldr	r3, [pc, #584]	; (80056fc <_dtoa_r+0x364>)
 80054b4:	f7fb f8e2 	bl	800067c <__aeabi_dadd>
 80054b8:	0004      	movs	r4, r0
 80054ba:	0030      	movs	r0, r6
 80054bc:	000d      	movs	r5, r1
 80054be:	f7fc fe9f 	bl	8002200 <__aeabi_i2d>
 80054c2:	4a8f      	ldr	r2, [pc, #572]	; (8005700 <_dtoa_r+0x368>)
 80054c4:	4b8f      	ldr	r3, [pc, #572]	; (8005704 <_dtoa_r+0x36c>)
 80054c6:	f7fc f849 	bl	800155c <__aeabi_dmul>
 80054ca:	0002      	movs	r2, r0
 80054cc:	000b      	movs	r3, r1
 80054ce:	0020      	movs	r0, r4
 80054d0:	0029      	movs	r1, r5
 80054d2:	f7fb f8d3 	bl	800067c <__aeabi_dadd>
 80054d6:	0004      	movs	r4, r0
 80054d8:	000d      	movs	r5, r1
 80054da:	f7fc fe5b 	bl	8002194 <__aeabi_d2iz>
 80054de:	2200      	movs	r2, #0
 80054e0:	9002      	str	r0, [sp, #8]
 80054e2:	2300      	movs	r3, #0
 80054e4:	0020      	movs	r0, r4
 80054e6:	0029      	movs	r1, r5
 80054e8:	f7fa ffb4 	bl	8000454 <__aeabi_dcmplt>
 80054ec:	2800      	cmp	r0, #0
 80054ee:	d00b      	beq.n	8005508 <_dtoa_r+0x170>
 80054f0:	9802      	ldr	r0, [sp, #8]
 80054f2:	f7fc fe85 	bl	8002200 <__aeabi_i2d>
 80054f6:	002b      	movs	r3, r5
 80054f8:	0022      	movs	r2, r4
 80054fa:	f7fa ffa5 	bl	8000448 <__aeabi_dcmpeq>
 80054fe:	4243      	negs	r3, r0
 8005500:	4158      	adcs	r0, r3
 8005502:	9b02      	ldr	r3, [sp, #8]
 8005504:	1a1b      	subs	r3, r3, r0
 8005506:	9302      	str	r3, [sp, #8]
 8005508:	2301      	movs	r3, #1
 800550a:	9315      	str	r3, [sp, #84]	; 0x54
 800550c:	9b02      	ldr	r3, [sp, #8]
 800550e:	2b16      	cmp	r3, #22
 8005510:	d80f      	bhi.n	8005532 <_dtoa_r+0x19a>
 8005512:	9812      	ldr	r0, [sp, #72]	; 0x48
 8005514:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8005516:	00da      	lsls	r2, r3, #3
 8005518:	4b7b      	ldr	r3, [pc, #492]	; (8005708 <_dtoa_r+0x370>)
 800551a:	189b      	adds	r3, r3, r2
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	f7fa ff98 	bl	8000454 <__aeabi_dcmplt>
 8005524:	2800      	cmp	r0, #0
 8005526:	d049      	beq.n	80055bc <_dtoa_r+0x224>
 8005528:	9b02      	ldr	r3, [sp, #8]
 800552a:	3b01      	subs	r3, #1
 800552c:	9302      	str	r3, [sp, #8]
 800552e:	2300      	movs	r3, #0
 8005530:	9315      	str	r3, [sp, #84]	; 0x54
 8005532:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8005534:	1b9e      	subs	r6, r3, r6
 8005536:	2300      	movs	r3, #0
 8005538:	9308      	str	r3, [sp, #32]
 800553a:	0033      	movs	r3, r6
 800553c:	3b01      	subs	r3, #1
 800553e:	930d      	str	r3, [sp, #52]	; 0x34
 8005540:	d504      	bpl.n	800554c <_dtoa_r+0x1b4>
 8005542:	2301      	movs	r3, #1
 8005544:	1b9b      	subs	r3, r3, r6
 8005546:	9308      	str	r3, [sp, #32]
 8005548:	2300      	movs	r3, #0
 800554a:	930d      	str	r3, [sp, #52]	; 0x34
 800554c:	9b02      	ldr	r3, [sp, #8]
 800554e:	2b00      	cmp	r3, #0
 8005550:	db36      	blt.n	80055c0 <_dtoa_r+0x228>
 8005552:	9a02      	ldr	r2, [sp, #8]
 8005554:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005556:	4694      	mov	ip, r2
 8005558:	4463      	add	r3, ip
 800555a:	930d      	str	r3, [sp, #52]	; 0x34
 800555c:	2300      	movs	r3, #0
 800555e:	9214      	str	r2, [sp, #80]	; 0x50
 8005560:	930e      	str	r3, [sp, #56]	; 0x38
 8005562:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005564:	2401      	movs	r4, #1
 8005566:	2b09      	cmp	r3, #9
 8005568:	d862      	bhi.n	8005630 <_dtoa_r+0x298>
 800556a:	2b05      	cmp	r3, #5
 800556c:	dd02      	ble.n	8005574 <_dtoa_r+0x1dc>
 800556e:	2400      	movs	r4, #0
 8005570:	3b04      	subs	r3, #4
 8005572:	9322      	str	r3, [sp, #136]	; 0x88
 8005574:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005576:	1e98      	subs	r0, r3, #2
 8005578:	2803      	cmp	r0, #3
 800557a:	d862      	bhi.n	8005642 <_dtoa_r+0x2aa>
 800557c:	f7fa fdca 	bl	8000114 <__gnu_thumb1_case_uqi>
 8005580:	56343629 	.word	0x56343629
 8005584:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8005586:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8005588:	189e      	adds	r6, r3, r2
 800558a:	4b60      	ldr	r3, [pc, #384]	; (800570c <_dtoa_r+0x374>)
 800558c:	18f2      	adds	r2, r6, r3
 800558e:	2a20      	cmp	r2, #32
 8005590:	dd0f      	ble.n	80055b2 <_dtoa_r+0x21a>
 8005592:	2340      	movs	r3, #64	; 0x40
 8005594:	1a9b      	subs	r3, r3, r2
 8005596:	409d      	lsls	r5, r3
 8005598:	4b5d      	ldr	r3, [pc, #372]	; (8005710 <_dtoa_r+0x378>)
 800559a:	9802      	ldr	r0, [sp, #8]
 800559c:	18f3      	adds	r3, r6, r3
 800559e:	40d8      	lsrs	r0, r3
 80055a0:	4328      	orrs	r0, r5
 80055a2:	f7fc fe5d 	bl	8002260 <__aeabi_ui2d>
 80055a6:	2301      	movs	r3, #1
 80055a8:	4c5a      	ldr	r4, [pc, #360]	; (8005714 <_dtoa_r+0x37c>)
 80055aa:	3e01      	subs	r6, #1
 80055ac:	1909      	adds	r1, r1, r4
 80055ae:	9316      	str	r3, [sp, #88]	; 0x58
 80055b0:	e776      	b.n	80054a0 <_dtoa_r+0x108>
 80055b2:	2320      	movs	r3, #32
 80055b4:	9802      	ldr	r0, [sp, #8]
 80055b6:	1a9b      	subs	r3, r3, r2
 80055b8:	4098      	lsls	r0, r3
 80055ba:	e7f2      	b.n	80055a2 <_dtoa_r+0x20a>
 80055bc:	9015      	str	r0, [sp, #84]	; 0x54
 80055be:	e7b8      	b.n	8005532 <_dtoa_r+0x19a>
 80055c0:	9b08      	ldr	r3, [sp, #32]
 80055c2:	9a02      	ldr	r2, [sp, #8]
 80055c4:	1a9b      	subs	r3, r3, r2
 80055c6:	9308      	str	r3, [sp, #32]
 80055c8:	4253      	negs	r3, r2
 80055ca:	930e      	str	r3, [sp, #56]	; 0x38
 80055cc:	2300      	movs	r3, #0
 80055ce:	9314      	str	r3, [sp, #80]	; 0x50
 80055d0:	e7c7      	b.n	8005562 <_dtoa_r+0x1ca>
 80055d2:	2300      	movs	r3, #0
 80055d4:	930f      	str	r3, [sp, #60]	; 0x3c
 80055d6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80055d8:	2b00      	cmp	r3, #0
 80055da:	dc36      	bgt.n	800564a <_dtoa_r+0x2b2>
 80055dc:	2301      	movs	r3, #1
 80055de:	001a      	movs	r2, r3
 80055e0:	930c      	str	r3, [sp, #48]	; 0x30
 80055e2:	9306      	str	r3, [sp, #24]
 80055e4:	9223      	str	r2, [sp, #140]	; 0x8c
 80055e6:	e00d      	b.n	8005604 <_dtoa_r+0x26c>
 80055e8:	2301      	movs	r3, #1
 80055ea:	e7f3      	b.n	80055d4 <_dtoa_r+0x23c>
 80055ec:	2300      	movs	r3, #0
 80055ee:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80055f0:	930f      	str	r3, [sp, #60]	; 0x3c
 80055f2:	4694      	mov	ip, r2
 80055f4:	9b02      	ldr	r3, [sp, #8]
 80055f6:	4463      	add	r3, ip
 80055f8:	930c      	str	r3, [sp, #48]	; 0x30
 80055fa:	3301      	adds	r3, #1
 80055fc:	9306      	str	r3, [sp, #24]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	dc00      	bgt.n	8005604 <_dtoa_r+0x26c>
 8005602:	2301      	movs	r3, #1
 8005604:	2200      	movs	r2, #0
 8005606:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005608:	6042      	str	r2, [r0, #4]
 800560a:	3204      	adds	r2, #4
 800560c:	0015      	movs	r5, r2
 800560e:	3514      	adds	r5, #20
 8005610:	6841      	ldr	r1, [r0, #4]
 8005612:	429d      	cmp	r5, r3
 8005614:	d91d      	bls.n	8005652 <_dtoa_r+0x2ba>
 8005616:	0038      	movs	r0, r7
 8005618:	f000 fe04 	bl	8006224 <_Balloc>
 800561c:	9005      	str	r0, [sp, #20]
 800561e:	2800      	cmp	r0, #0
 8005620:	d11b      	bne.n	800565a <_dtoa_r+0x2c2>
 8005622:	21d5      	movs	r1, #213	; 0xd5
 8005624:	0002      	movs	r2, r0
 8005626:	4b3c      	ldr	r3, [pc, #240]	; (8005718 <_dtoa_r+0x380>)
 8005628:	0049      	lsls	r1, r1, #1
 800562a:	e6ca      	b.n	80053c2 <_dtoa_r+0x2a>
 800562c:	2301      	movs	r3, #1
 800562e:	e7de      	b.n	80055ee <_dtoa_r+0x256>
 8005630:	2300      	movs	r3, #0
 8005632:	940f      	str	r4, [sp, #60]	; 0x3c
 8005634:	9322      	str	r3, [sp, #136]	; 0x88
 8005636:	3b01      	subs	r3, #1
 8005638:	930c      	str	r3, [sp, #48]	; 0x30
 800563a:	9306      	str	r3, [sp, #24]
 800563c:	2200      	movs	r2, #0
 800563e:	3313      	adds	r3, #19
 8005640:	e7d0      	b.n	80055e4 <_dtoa_r+0x24c>
 8005642:	2301      	movs	r3, #1
 8005644:	930f      	str	r3, [sp, #60]	; 0x3c
 8005646:	3b02      	subs	r3, #2
 8005648:	e7f6      	b.n	8005638 <_dtoa_r+0x2a0>
 800564a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800564c:	930c      	str	r3, [sp, #48]	; 0x30
 800564e:	9306      	str	r3, [sp, #24]
 8005650:	e7d8      	b.n	8005604 <_dtoa_r+0x26c>
 8005652:	3101      	adds	r1, #1
 8005654:	6041      	str	r1, [r0, #4]
 8005656:	0052      	lsls	r2, r2, #1
 8005658:	e7d8      	b.n	800560c <_dtoa_r+0x274>
 800565a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565c:	9a05      	ldr	r2, [sp, #20]
 800565e:	601a      	str	r2, [r3, #0]
 8005660:	9b06      	ldr	r3, [sp, #24]
 8005662:	2b0e      	cmp	r3, #14
 8005664:	d900      	bls.n	8005668 <_dtoa_r+0x2d0>
 8005666:	e0eb      	b.n	8005840 <_dtoa_r+0x4a8>
 8005668:	2c00      	cmp	r4, #0
 800566a:	d100      	bne.n	800566e <_dtoa_r+0x2d6>
 800566c:	e0e8      	b.n	8005840 <_dtoa_r+0x4a8>
 800566e:	9b02      	ldr	r3, [sp, #8]
 8005670:	2b00      	cmp	r3, #0
 8005672:	dd68      	ble.n	8005746 <_dtoa_r+0x3ae>
 8005674:	001a      	movs	r2, r3
 8005676:	210f      	movs	r1, #15
 8005678:	4b23      	ldr	r3, [pc, #140]	; (8005708 <_dtoa_r+0x370>)
 800567a:	400a      	ands	r2, r1
 800567c:	00d2      	lsls	r2, r2, #3
 800567e:	189b      	adds	r3, r3, r2
 8005680:	681d      	ldr	r5, [r3, #0]
 8005682:	685e      	ldr	r6, [r3, #4]
 8005684:	9b02      	ldr	r3, [sp, #8]
 8005686:	111c      	asrs	r4, r3, #4
 8005688:	2302      	movs	r3, #2
 800568a:	9310      	str	r3, [sp, #64]	; 0x40
 800568c:	9b02      	ldr	r3, [sp, #8]
 800568e:	05db      	lsls	r3, r3, #23
 8005690:	d50b      	bpl.n	80056aa <_dtoa_r+0x312>
 8005692:	4b22      	ldr	r3, [pc, #136]	; (800571c <_dtoa_r+0x384>)
 8005694:	400c      	ands	r4, r1
 8005696:	6a1a      	ldr	r2, [r3, #32]
 8005698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800569c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800569e:	f7fb fb57 	bl	8000d50 <__aeabi_ddiv>
 80056a2:	2303      	movs	r3, #3
 80056a4:	900a      	str	r0, [sp, #40]	; 0x28
 80056a6:	910b      	str	r1, [sp, #44]	; 0x2c
 80056a8:	9310      	str	r3, [sp, #64]	; 0x40
 80056aa:	4b1c      	ldr	r3, [pc, #112]	; (800571c <_dtoa_r+0x384>)
 80056ac:	9307      	str	r3, [sp, #28]
 80056ae:	2c00      	cmp	r4, #0
 80056b0:	d136      	bne.n	8005720 <_dtoa_r+0x388>
 80056b2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80056b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80056b6:	002a      	movs	r2, r5
 80056b8:	0033      	movs	r3, r6
 80056ba:	f7fb fb49 	bl	8000d50 <__aeabi_ddiv>
 80056be:	900a      	str	r0, [sp, #40]	; 0x28
 80056c0:	910b      	str	r1, [sp, #44]	; 0x2c
 80056c2:	e05c      	b.n	800577e <_dtoa_r+0x3e6>
 80056c4:	0800762d 	.word	0x0800762d
 80056c8:	08007644 	.word	0x08007644
 80056cc:	7ff00000 	.word	0x7ff00000
 80056d0:	0000270f 	.word	0x0000270f
 80056d4:	08007629 	.word	0x08007629
 80056d8:	0800762c 	.word	0x0800762c
 80056dc:	080075fc 	.word	0x080075fc
 80056e0:	080075fd 	.word	0x080075fd
 80056e4:	3ff00000 	.word	0x3ff00000
 80056e8:	fffffc01 	.word	0xfffffc01
 80056ec:	3ff80000 	.word	0x3ff80000
 80056f0:	636f4361 	.word	0x636f4361
 80056f4:	3fd287a7 	.word	0x3fd287a7
 80056f8:	8b60c8b3 	.word	0x8b60c8b3
 80056fc:	3fc68a28 	.word	0x3fc68a28
 8005700:	509f79fb 	.word	0x509f79fb
 8005704:	3fd34413 	.word	0x3fd34413
 8005708:	080077a0 	.word	0x080077a0
 800570c:	00000432 	.word	0x00000432
 8005710:	00000412 	.word	0x00000412
 8005714:	fe100000 	.word	0xfe100000
 8005718:	080076a3 	.word	0x080076a3
 800571c:	08007778 	.word	0x08007778
 8005720:	2301      	movs	r3, #1
 8005722:	421c      	tst	r4, r3
 8005724:	d00b      	beq.n	800573e <_dtoa_r+0x3a6>
 8005726:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005728:	0028      	movs	r0, r5
 800572a:	3301      	adds	r3, #1
 800572c:	9310      	str	r3, [sp, #64]	; 0x40
 800572e:	9b07      	ldr	r3, [sp, #28]
 8005730:	0031      	movs	r1, r6
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	f7fb ff11 	bl	800155c <__aeabi_dmul>
 800573a:	0005      	movs	r5, r0
 800573c:	000e      	movs	r6, r1
 800573e:	9b07      	ldr	r3, [sp, #28]
 8005740:	1064      	asrs	r4, r4, #1
 8005742:	3308      	adds	r3, #8
 8005744:	e7b2      	b.n	80056ac <_dtoa_r+0x314>
 8005746:	2302      	movs	r3, #2
 8005748:	9310      	str	r3, [sp, #64]	; 0x40
 800574a:	9b02      	ldr	r3, [sp, #8]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d016      	beq.n	800577e <_dtoa_r+0x3e6>
 8005750:	9812      	ldr	r0, [sp, #72]	; 0x48
 8005752:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8005754:	425c      	negs	r4, r3
 8005756:	230f      	movs	r3, #15
 8005758:	4ab5      	ldr	r2, [pc, #724]	; (8005a30 <_dtoa_r+0x698>)
 800575a:	4023      	ands	r3, r4
 800575c:	00db      	lsls	r3, r3, #3
 800575e:	18d3      	adds	r3, r2, r3
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	f7fb fefa 	bl	800155c <__aeabi_dmul>
 8005768:	2601      	movs	r6, #1
 800576a:	2300      	movs	r3, #0
 800576c:	900a      	str	r0, [sp, #40]	; 0x28
 800576e:	910b      	str	r1, [sp, #44]	; 0x2c
 8005770:	4db0      	ldr	r5, [pc, #704]	; (8005a34 <_dtoa_r+0x69c>)
 8005772:	1124      	asrs	r4, r4, #4
 8005774:	2c00      	cmp	r4, #0
 8005776:	d000      	beq.n	800577a <_dtoa_r+0x3e2>
 8005778:	e094      	b.n	80058a4 <_dtoa_r+0x50c>
 800577a:	2b00      	cmp	r3, #0
 800577c:	d19f      	bne.n	80056be <_dtoa_r+0x326>
 800577e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005780:	2b00      	cmp	r3, #0
 8005782:	d100      	bne.n	8005786 <_dtoa_r+0x3ee>
 8005784:	e09b      	b.n	80058be <_dtoa_r+0x526>
 8005786:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005788:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800578a:	2200      	movs	r2, #0
 800578c:	0020      	movs	r0, r4
 800578e:	0029      	movs	r1, r5
 8005790:	4ba9      	ldr	r3, [pc, #676]	; (8005a38 <_dtoa_r+0x6a0>)
 8005792:	f7fa fe5f 	bl	8000454 <__aeabi_dcmplt>
 8005796:	2800      	cmp	r0, #0
 8005798:	d100      	bne.n	800579c <_dtoa_r+0x404>
 800579a:	e090      	b.n	80058be <_dtoa_r+0x526>
 800579c:	9b06      	ldr	r3, [sp, #24]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d100      	bne.n	80057a4 <_dtoa_r+0x40c>
 80057a2:	e08c      	b.n	80058be <_dtoa_r+0x526>
 80057a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	dd46      	ble.n	8005838 <_dtoa_r+0x4a0>
 80057aa:	9b02      	ldr	r3, [sp, #8]
 80057ac:	2200      	movs	r2, #0
 80057ae:	0020      	movs	r0, r4
 80057b0:	0029      	movs	r1, r5
 80057b2:	1e5e      	subs	r6, r3, #1
 80057b4:	4ba1      	ldr	r3, [pc, #644]	; (8005a3c <_dtoa_r+0x6a4>)
 80057b6:	f7fb fed1 	bl	800155c <__aeabi_dmul>
 80057ba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80057bc:	900a      	str	r0, [sp, #40]	; 0x28
 80057be:	910b      	str	r1, [sp, #44]	; 0x2c
 80057c0:	3301      	adds	r3, #1
 80057c2:	9310      	str	r3, [sp, #64]	; 0x40
 80057c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80057c6:	9810      	ldr	r0, [sp, #64]	; 0x40
 80057c8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80057ca:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80057cc:	9307      	str	r3, [sp, #28]
 80057ce:	f7fc fd17 	bl	8002200 <__aeabi_i2d>
 80057d2:	0022      	movs	r2, r4
 80057d4:	002b      	movs	r3, r5
 80057d6:	f7fb fec1 	bl	800155c <__aeabi_dmul>
 80057da:	2200      	movs	r2, #0
 80057dc:	4b98      	ldr	r3, [pc, #608]	; (8005a40 <_dtoa_r+0x6a8>)
 80057de:	f7fa ff4d 	bl	800067c <__aeabi_dadd>
 80057e2:	9010      	str	r0, [sp, #64]	; 0x40
 80057e4:	9111      	str	r1, [sp, #68]	; 0x44
 80057e6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80057e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80057ea:	920a      	str	r2, [sp, #40]	; 0x28
 80057ec:	930b      	str	r3, [sp, #44]	; 0x2c
 80057ee:	4a95      	ldr	r2, [pc, #596]	; (8005a44 <_dtoa_r+0x6ac>)
 80057f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80057f2:	4694      	mov	ip, r2
 80057f4:	4463      	add	r3, ip
 80057f6:	9317      	str	r3, [sp, #92]	; 0x5c
 80057f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80057fa:	9b07      	ldr	r3, [sp, #28]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d161      	bne.n	80058c4 <_dtoa_r+0x52c>
 8005800:	2200      	movs	r2, #0
 8005802:	0020      	movs	r0, r4
 8005804:	0029      	movs	r1, r5
 8005806:	4b90      	ldr	r3, [pc, #576]	; (8005a48 <_dtoa_r+0x6b0>)
 8005808:	f7fc f914 	bl	8001a34 <__aeabi_dsub>
 800580c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800580e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005810:	0004      	movs	r4, r0
 8005812:	000d      	movs	r5, r1
 8005814:	f7fa fe32 	bl	800047c <__aeabi_dcmpgt>
 8005818:	2800      	cmp	r0, #0
 800581a:	d000      	beq.n	800581e <_dtoa_r+0x486>
 800581c:	e2b5      	b.n	8005d8a <_dtoa_r+0x9f2>
 800581e:	488b      	ldr	r0, [pc, #556]	; (8005a4c <_dtoa_r+0x6b4>)
 8005820:	9911      	ldr	r1, [sp, #68]	; 0x44
 8005822:	4684      	mov	ip, r0
 8005824:	4461      	add	r1, ip
 8005826:	000b      	movs	r3, r1
 8005828:	0020      	movs	r0, r4
 800582a:	0029      	movs	r1, r5
 800582c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800582e:	f7fa fe11 	bl	8000454 <__aeabi_dcmplt>
 8005832:	2800      	cmp	r0, #0
 8005834:	d000      	beq.n	8005838 <_dtoa_r+0x4a0>
 8005836:	e2a5      	b.n	8005d84 <_dtoa_r+0x9ec>
 8005838:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800583a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800583c:	930a      	str	r3, [sp, #40]	; 0x28
 800583e:	940b      	str	r4, [sp, #44]	; 0x2c
 8005840:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005842:	2b00      	cmp	r3, #0
 8005844:	da00      	bge.n	8005848 <_dtoa_r+0x4b0>
 8005846:	e171      	b.n	8005b2c <_dtoa_r+0x794>
 8005848:	9a02      	ldr	r2, [sp, #8]
 800584a:	2a0e      	cmp	r2, #14
 800584c:	dd00      	ble.n	8005850 <_dtoa_r+0x4b8>
 800584e:	e16d      	b.n	8005b2c <_dtoa_r+0x794>
 8005850:	4b77      	ldr	r3, [pc, #476]	; (8005a30 <_dtoa_r+0x698>)
 8005852:	00d2      	lsls	r2, r2, #3
 8005854:	189b      	adds	r3, r3, r2
 8005856:	685c      	ldr	r4, [r3, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	9308      	str	r3, [sp, #32]
 800585c:	9409      	str	r4, [sp, #36]	; 0x24
 800585e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005860:	2b00      	cmp	r3, #0
 8005862:	db00      	blt.n	8005866 <_dtoa_r+0x4ce>
 8005864:	e0f6      	b.n	8005a54 <_dtoa_r+0x6bc>
 8005866:	9b06      	ldr	r3, [sp, #24]
 8005868:	2b00      	cmp	r3, #0
 800586a:	dd00      	ble.n	800586e <_dtoa_r+0x4d6>
 800586c:	e0f2      	b.n	8005a54 <_dtoa_r+0x6bc>
 800586e:	d000      	beq.n	8005872 <_dtoa_r+0x4da>
 8005870:	e288      	b.n	8005d84 <_dtoa_r+0x9ec>
 8005872:	9808      	ldr	r0, [sp, #32]
 8005874:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005876:	2200      	movs	r2, #0
 8005878:	4b73      	ldr	r3, [pc, #460]	; (8005a48 <_dtoa_r+0x6b0>)
 800587a:	f7fb fe6f 	bl	800155c <__aeabi_dmul>
 800587e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005880:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005882:	f7fa fe05 	bl	8000490 <__aeabi_dcmpge>
 8005886:	9e06      	ldr	r6, [sp, #24]
 8005888:	0035      	movs	r5, r6
 800588a:	2800      	cmp	r0, #0
 800588c:	d000      	beq.n	8005890 <_dtoa_r+0x4f8>
 800588e:	e25f      	b.n	8005d50 <_dtoa_r+0x9b8>
 8005890:	9b05      	ldr	r3, [sp, #20]
 8005892:	9a05      	ldr	r2, [sp, #20]
 8005894:	3301      	adds	r3, #1
 8005896:	9307      	str	r3, [sp, #28]
 8005898:	2331      	movs	r3, #49	; 0x31
 800589a:	7013      	strb	r3, [r2, #0]
 800589c:	9b02      	ldr	r3, [sp, #8]
 800589e:	3301      	adds	r3, #1
 80058a0:	9302      	str	r3, [sp, #8]
 80058a2:	e25a      	b.n	8005d5a <_dtoa_r+0x9c2>
 80058a4:	4234      	tst	r4, r6
 80058a6:	d007      	beq.n	80058b8 <_dtoa_r+0x520>
 80058a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80058aa:	3301      	adds	r3, #1
 80058ac:	9310      	str	r3, [sp, #64]	; 0x40
 80058ae:	682a      	ldr	r2, [r5, #0]
 80058b0:	686b      	ldr	r3, [r5, #4]
 80058b2:	f7fb fe53 	bl	800155c <__aeabi_dmul>
 80058b6:	0033      	movs	r3, r6
 80058b8:	1064      	asrs	r4, r4, #1
 80058ba:	3508      	adds	r5, #8
 80058bc:	e75a      	b.n	8005774 <_dtoa_r+0x3dc>
 80058be:	9e02      	ldr	r6, [sp, #8]
 80058c0:	9b06      	ldr	r3, [sp, #24]
 80058c2:	e780      	b.n	80057c6 <_dtoa_r+0x42e>
 80058c4:	9b07      	ldr	r3, [sp, #28]
 80058c6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80058c8:	1e5a      	subs	r2, r3, #1
 80058ca:	4b59      	ldr	r3, [pc, #356]	; (8005a30 <_dtoa_r+0x698>)
 80058cc:	00d2      	lsls	r2, r2, #3
 80058ce:	189b      	adds	r3, r3, r2
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	2900      	cmp	r1, #0
 80058d6:	d051      	beq.n	800597c <_dtoa_r+0x5e4>
 80058d8:	2000      	movs	r0, #0
 80058da:	495d      	ldr	r1, [pc, #372]	; (8005a50 <_dtoa_r+0x6b8>)
 80058dc:	f7fb fa38 	bl	8000d50 <__aeabi_ddiv>
 80058e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80058e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80058e4:	f7fc f8a6 	bl	8001a34 <__aeabi_dsub>
 80058e8:	9a05      	ldr	r2, [sp, #20]
 80058ea:	9b05      	ldr	r3, [sp, #20]
 80058ec:	4694      	mov	ip, r2
 80058ee:	9310      	str	r3, [sp, #64]	; 0x40
 80058f0:	9b07      	ldr	r3, [sp, #28]
 80058f2:	900a      	str	r0, [sp, #40]	; 0x28
 80058f4:	910b      	str	r1, [sp, #44]	; 0x2c
 80058f6:	4463      	add	r3, ip
 80058f8:	9319      	str	r3, [sp, #100]	; 0x64
 80058fa:	0029      	movs	r1, r5
 80058fc:	0020      	movs	r0, r4
 80058fe:	f7fc fc49 	bl	8002194 <__aeabi_d2iz>
 8005902:	9017      	str	r0, [sp, #92]	; 0x5c
 8005904:	f7fc fc7c 	bl	8002200 <__aeabi_i2d>
 8005908:	0002      	movs	r2, r0
 800590a:	000b      	movs	r3, r1
 800590c:	0020      	movs	r0, r4
 800590e:	0029      	movs	r1, r5
 8005910:	f7fc f890 	bl	8001a34 <__aeabi_dsub>
 8005914:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005916:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005918:	3301      	adds	r3, #1
 800591a:	9307      	str	r3, [sp, #28]
 800591c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800591e:	0004      	movs	r4, r0
 8005920:	3330      	adds	r3, #48	; 0x30
 8005922:	7013      	strb	r3, [r2, #0]
 8005924:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005926:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005928:	000d      	movs	r5, r1
 800592a:	f7fa fd93 	bl	8000454 <__aeabi_dcmplt>
 800592e:	2800      	cmp	r0, #0
 8005930:	d175      	bne.n	8005a1e <_dtoa_r+0x686>
 8005932:	0022      	movs	r2, r4
 8005934:	002b      	movs	r3, r5
 8005936:	2000      	movs	r0, #0
 8005938:	493f      	ldr	r1, [pc, #252]	; (8005a38 <_dtoa_r+0x6a0>)
 800593a:	f7fc f87b 	bl	8001a34 <__aeabi_dsub>
 800593e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005940:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005942:	f7fa fd87 	bl	8000454 <__aeabi_dcmplt>
 8005946:	2800      	cmp	r0, #0
 8005948:	d000      	beq.n	800594c <_dtoa_r+0x5b4>
 800594a:	e0d1      	b.n	8005af0 <_dtoa_r+0x758>
 800594c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800594e:	9a07      	ldr	r2, [sp, #28]
 8005950:	4293      	cmp	r3, r2
 8005952:	d100      	bne.n	8005956 <_dtoa_r+0x5be>
 8005954:	e770      	b.n	8005838 <_dtoa_r+0x4a0>
 8005956:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005958:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800595a:	2200      	movs	r2, #0
 800595c:	4b37      	ldr	r3, [pc, #220]	; (8005a3c <_dtoa_r+0x6a4>)
 800595e:	f7fb fdfd 	bl	800155c <__aeabi_dmul>
 8005962:	4b36      	ldr	r3, [pc, #216]	; (8005a3c <_dtoa_r+0x6a4>)
 8005964:	900a      	str	r0, [sp, #40]	; 0x28
 8005966:	910b      	str	r1, [sp, #44]	; 0x2c
 8005968:	2200      	movs	r2, #0
 800596a:	0020      	movs	r0, r4
 800596c:	0029      	movs	r1, r5
 800596e:	f7fb fdf5 	bl	800155c <__aeabi_dmul>
 8005972:	9b07      	ldr	r3, [sp, #28]
 8005974:	0004      	movs	r4, r0
 8005976:	000d      	movs	r5, r1
 8005978:	9310      	str	r3, [sp, #64]	; 0x40
 800597a:	e7be      	b.n	80058fa <_dtoa_r+0x562>
 800597c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800597e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005980:	f7fb fdec 	bl	800155c <__aeabi_dmul>
 8005984:	9a05      	ldr	r2, [sp, #20]
 8005986:	9b05      	ldr	r3, [sp, #20]
 8005988:	4694      	mov	ip, r2
 800598a:	930a      	str	r3, [sp, #40]	; 0x28
 800598c:	9b07      	ldr	r3, [sp, #28]
 800598e:	9010      	str	r0, [sp, #64]	; 0x40
 8005990:	9111      	str	r1, [sp, #68]	; 0x44
 8005992:	4463      	add	r3, ip
 8005994:	9319      	str	r3, [sp, #100]	; 0x64
 8005996:	0029      	movs	r1, r5
 8005998:	0020      	movs	r0, r4
 800599a:	f7fc fbfb 	bl	8002194 <__aeabi_d2iz>
 800599e:	9017      	str	r0, [sp, #92]	; 0x5c
 80059a0:	f7fc fc2e 	bl	8002200 <__aeabi_i2d>
 80059a4:	0002      	movs	r2, r0
 80059a6:	000b      	movs	r3, r1
 80059a8:	0020      	movs	r0, r4
 80059aa:	0029      	movs	r1, r5
 80059ac:	f7fc f842 	bl	8001a34 <__aeabi_dsub>
 80059b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80059b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80059b4:	3330      	adds	r3, #48	; 0x30
 80059b6:	7013      	strb	r3, [r2, #0]
 80059b8:	0013      	movs	r3, r2
 80059ba:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80059bc:	3301      	adds	r3, #1
 80059be:	0004      	movs	r4, r0
 80059c0:	000d      	movs	r5, r1
 80059c2:	930a      	str	r3, [sp, #40]	; 0x28
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d12c      	bne.n	8005a22 <_dtoa_r+0x68a>
 80059c8:	9810      	ldr	r0, [sp, #64]	; 0x40
 80059ca:	9911      	ldr	r1, [sp, #68]	; 0x44
 80059cc:	9a05      	ldr	r2, [sp, #20]
 80059ce:	9b07      	ldr	r3, [sp, #28]
 80059d0:	4694      	mov	ip, r2
 80059d2:	4463      	add	r3, ip
 80059d4:	2200      	movs	r2, #0
 80059d6:	9307      	str	r3, [sp, #28]
 80059d8:	4b1d      	ldr	r3, [pc, #116]	; (8005a50 <_dtoa_r+0x6b8>)
 80059da:	f7fa fe4f 	bl	800067c <__aeabi_dadd>
 80059de:	0002      	movs	r2, r0
 80059e0:	000b      	movs	r3, r1
 80059e2:	0020      	movs	r0, r4
 80059e4:	0029      	movs	r1, r5
 80059e6:	f7fa fd49 	bl	800047c <__aeabi_dcmpgt>
 80059ea:	2800      	cmp	r0, #0
 80059ec:	d000      	beq.n	80059f0 <_dtoa_r+0x658>
 80059ee:	e07f      	b.n	8005af0 <_dtoa_r+0x758>
 80059f0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80059f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80059f4:	2000      	movs	r0, #0
 80059f6:	4916      	ldr	r1, [pc, #88]	; (8005a50 <_dtoa_r+0x6b8>)
 80059f8:	f7fc f81c 	bl	8001a34 <__aeabi_dsub>
 80059fc:	0002      	movs	r2, r0
 80059fe:	000b      	movs	r3, r1
 8005a00:	0020      	movs	r0, r4
 8005a02:	0029      	movs	r1, r5
 8005a04:	f7fa fd26 	bl	8000454 <__aeabi_dcmplt>
 8005a08:	2800      	cmp	r0, #0
 8005a0a:	d100      	bne.n	8005a0e <_dtoa_r+0x676>
 8005a0c:	e714      	b.n	8005838 <_dtoa_r+0x4a0>
 8005a0e:	9b07      	ldr	r3, [sp, #28]
 8005a10:	001a      	movs	r2, r3
 8005a12:	3a01      	subs	r2, #1
 8005a14:	9207      	str	r2, [sp, #28]
 8005a16:	7812      	ldrb	r2, [r2, #0]
 8005a18:	2a30      	cmp	r2, #48	; 0x30
 8005a1a:	d0f8      	beq.n	8005a0e <_dtoa_r+0x676>
 8005a1c:	9307      	str	r3, [sp, #28]
 8005a1e:	9602      	str	r6, [sp, #8]
 8005a20:	e054      	b.n	8005acc <_dtoa_r+0x734>
 8005a22:	2200      	movs	r2, #0
 8005a24:	4b05      	ldr	r3, [pc, #20]	; (8005a3c <_dtoa_r+0x6a4>)
 8005a26:	f7fb fd99 	bl	800155c <__aeabi_dmul>
 8005a2a:	0004      	movs	r4, r0
 8005a2c:	000d      	movs	r5, r1
 8005a2e:	e7b2      	b.n	8005996 <_dtoa_r+0x5fe>
 8005a30:	080077a0 	.word	0x080077a0
 8005a34:	08007778 	.word	0x08007778
 8005a38:	3ff00000 	.word	0x3ff00000
 8005a3c:	40240000 	.word	0x40240000
 8005a40:	401c0000 	.word	0x401c0000
 8005a44:	fcc00000 	.word	0xfcc00000
 8005a48:	40140000 	.word	0x40140000
 8005a4c:	7cc00000 	.word	0x7cc00000
 8005a50:	3fe00000 	.word	0x3fe00000
 8005a54:	9b06      	ldr	r3, [sp, #24]
 8005a56:	9e05      	ldr	r6, [sp, #20]
 8005a58:	3b01      	subs	r3, #1
 8005a5a:	199b      	adds	r3, r3, r6
 8005a5c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005a5e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8005a60:	930a      	str	r3, [sp, #40]	; 0x28
 8005a62:	9a08      	ldr	r2, [sp, #32]
 8005a64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a66:	0020      	movs	r0, r4
 8005a68:	0029      	movs	r1, r5
 8005a6a:	f7fb f971 	bl	8000d50 <__aeabi_ddiv>
 8005a6e:	f7fc fb91 	bl	8002194 <__aeabi_d2iz>
 8005a72:	9006      	str	r0, [sp, #24]
 8005a74:	f7fc fbc4 	bl	8002200 <__aeabi_i2d>
 8005a78:	9a08      	ldr	r2, [sp, #32]
 8005a7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a7c:	f7fb fd6e 	bl	800155c <__aeabi_dmul>
 8005a80:	0002      	movs	r2, r0
 8005a82:	000b      	movs	r3, r1
 8005a84:	0020      	movs	r0, r4
 8005a86:	0029      	movs	r1, r5
 8005a88:	f7fb ffd4 	bl	8001a34 <__aeabi_dsub>
 8005a8c:	0033      	movs	r3, r6
 8005a8e:	9a06      	ldr	r2, [sp, #24]
 8005a90:	3601      	adds	r6, #1
 8005a92:	3230      	adds	r2, #48	; 0x30
 8005a94:	701a      	strb	r2, [r3, #0]
 8005a96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a98:	9607      	str	r6, [sp, #28]
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	d139      	bne.n	8005b12 <_dtoa_r+0x77a>
 8005a9e:	0002      	movs	r2, r0
 8005aa0:	000b      	movs	r3, r1
 8005aa2:	f7fa fdeb 	bl	800067c <__aeabi_dadd>
 8005aa6:	9a08      	ldr	r2, [sp, #32]
 8005aa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005aaa:	0004      	movs	r4, r0
 8005aac:	000d      	movs	r5, r1
 8005aae:	f7fa fce5 	bl	800047c <__aeabi_dcmpgt>
 8005ab2:	2800      	cmp	r0, #0
 8005ab4:	d11b      	bne.n	8005aee <_dtoa_r+0x756>
 8005ab6:	9a08      	ldr	r2, [sp, #32]
 8005ab8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005aba:	0020      	movs	r0, r4
 8005abc:	0029      	movs	r1, r5
 8005abe:	f7fa fcc3 	bl	8000448 <__aeabi_dcmpeq>
 8005ac2:	2800      	cmp	r0, #0
 8005ac4:	d002      	beq.n	8005acc <_dtoa_r+0x734>
 8005ac6:	9b06      	ldr	r3, [sp, #24]
 8005ac8:	07db      	lsls	r3, r3, #31
 8005aca:	d410      	bmi.n	8005aee <_dtoa_r+0x756>
 8005acc:	0038      	movs	r0, r7
 8005ace:	9904      	ldr	r1, [sp, #16]
 8005ad0:	f000 fbec 	bl	80062ac <_Bfree>
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	9a07      	ldr	r2, [sp, #28]
 8005ad8:	9802      	ldr	r0, [sp, #8]
 8005ada:	7013      	strb	r3, [r2, #0]
 8005adc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005ade:	3001      	adds	r0, #1
 8005ae0:	6018      	str	r0, [r3, #0]
 8005ae2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d100      	bne.n	8005aea <_dtoa_r+0x752>
 8005ae8:	e4a3      	b.n	8005432 <_dtoa_r+0x9a>
 8005aea:	601a      	str	r2, [r3, #0]
 8005aec:	e4a1      	b.n	8005432 <_dtoa_r+0x9a>
 8005aee:	9e02      	ldr	r6, [sp, #8]
 8005af0:	9b07      	ldr	r3, [sp, #28]
 8005af2:	9307      	str	r3, [sp, #28]
 8005af4:	3b01      	subs	r3, #1
 8005af6:	781a      	ldrb	r2, [r3, #0]
 8005af8:	2a39      	cmp	r2, #57	; 0x39
 8005afa:	d106      	bne.n	8005b0a <_dtoa_r+0x772>
 8005afc:	9a05      	ldr	r2, [sp, #20]
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d1f7      	bne.n	8005af2 <_dtoa_r+0x75a>
 8005b02:	2230      	movs	r2, #48	; 0x30
 8005b04:	9905      	ldr	r1, [sp, #20]
 8005b06:	3601      	adds	r6, #1
 8005b08:	700a      	strb	r2, [r1, #0]
 8005b0a:	781a      	ldrb	r2, [r3, #0]
 8005b0c:	3201      	adds	r2, #1
 8005b0e:	701a      	strb	r2, [r3, #0]
 8005b10:	e785      	b.n	8005a1e <_dtoa_r+0x686>
 8005b12:	2200      	movs	r2, #0
 8005b14:	4bad      	ldr	r3, [pc, #692]	; (8005dcc <_dtoa_r+0xa34>)
 8005b16:	f7fb fd21 	bl	800155c <__aeabi_dmul>
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	0004      	movs	r4, r0
 8005b20:	000d      	movs	r5, r1
 8005b22:	f7fa fc91 	bl	8000448 <__aeabi_dcmpeq>
 8005b26:	2800      	cmp	r0, #0
 8005b28:	d09b      	beq.n	8005a62 <_dtoa_r+0x6ca>
 8005b2a:	e7cf      	b.n	8005acc <_dtoa_r+0x734>
 8005b2c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005b2e:	2a00      	cmp	r2, #0
 8005b30:	d100      	bne.n	8005b34 <_dtoa_r+0x79c>
 8005b32:	e082      	b.n	8005c3a <_dtoa_r+0x8a2>
 8005b34:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005b36:	2a01      	cmp	r2, #1
 8005b38:	dc66      	bgt.n	8005c08 <_dtoa_r+0x870>
 8005b3a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005b3c:	2a00      	cmp	r2, #0
 8005b3e:	d05f      	beq.n	8005c00 <_dtoa_r+0x868>
 8005b40:	4aa3      	ldr	r2, [pc, #652]	; (8005dd0 <_dtoa_r+0xa38>)
 8005b42:	189b      	adds	r3, r3, r2
 8005b44:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8005b46:	9c08      	ldr	r4, [sp, #32]
 8005b48:	9a08      	ldr	r2, [sp, #32]
 8005b4a:	2101      	movs	r1, #1
 8005b4c:	18d2      	adds	r2, r2, r3
 8005b4e:	9208      	str	r2, [sp, #32]
 8005b50:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005b52:	0038      	movs	r0, r7
 8005b54:	18d3      	adds	r3, r2, r3
 8005b56:	930d      	str	r3, [sp, #52]	; 0x34
 8005b58:	f000 fc58 	bl	800640c <__i2b>
 8005b5c:	0005      	movs	r5, r0
 8005b5e:	2c00      	cmp	r4, #0
 8005b60:	dd0e      	ble.n	8005b80 <_dtoa_r+0x7e8>
 8005b62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	dd0b      	ble.n	8005b80 <_dtoa_r+0x7e8>
 8005b68:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005b6a:	0023      	movs	r3, r4
 8005b6c:	4294      	cmp	r4, r2
 8005b6e:	dd00      	ble.n	8005b72 <_dtoa_r+0x7da>
 8005b70:	0013      	movs	r3, r2
 8005b72:	9a08      	ldr	r2, [sp, #32]
 8005b74:	1ae4      	subs	r4, r4, r3
 8005b76:	1ad2      	subs	r2, r2, r3
 8005b78:	9208      	str	r2, [sp, #32]
 8005b7a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005b7c:	1ad3      	subs	r3, r2, r3
 8005b7e:	930d      	str	r3, [sp, #52]	; 0x34
 8005b80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d01f      	beq.n	8005bc6 <_dtoa_r+0x82e>
 8005b86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d05a      	beq.n	8005c42 <_dtoa_r+0x8aa>
 8005b8c:	2e00      	cmp	r6, #0
 8005b8e:	dd11      	ble.n	8005bb4 <_dtoa_r+0x81c>
 8005b90:	0029      	movs	r1, r5
 8005b92:	0032      	movs	r2, r6
 8005b94:	0038      	movs	r0, r7
 8005b96:	f000 fcff 	bl	8006598 <__pow5mult>
 8005b9a:	9a04      	ldr	r2, [sp, #16]
 8005b9c:	0001      	movs	r1, r0
 8005b9e:	0005      	movs	r5, r0
 8005ba0:	0038      	movs	r0, r7
 8005ba2:	f000 fc49 	bl	8006438 <__multiply>
 8005ba6:	9904      	ldr	r1, [sp, #16]
 8005ba8:	9007      	str	r0, [sp, #28]
 8005baa:	0038      	movs	r0, r7
 8005bac:	f000 fb7e 	bl	80062ac <_Bfree>
 8005bb0:	9b07      	ldr	r3, [sp, #28]
 8005bb2:	9304      	str	r3, [sp, #16]
 8005bb4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005bb6:	1b9a      	subs	r2, r3, r6
 8005bb8:	42b3      	cmp	r3, r6
 8005bba:	d004      	beq.n	8005bc6 <_dtoa_r+0x82e>
 8005bbc:	0038      	movs	r0, r7
 8005bbe:	9904      	ldr	r1, [sp, #16]
 8005bc0:	f000 fcea 	bl	8006598 <__pow5mult>
 8005bc4:	9004      	str	r0, [sp, #16]
 8005bc6:	2101      	movs	r1, #1
 8005bc8:	0038      	movs	r0, r7
 8005bca:	f000 fc1f 	bl	800640c <__i2b>
 8005bce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005bd0:	0006      	movs	r6, r0
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	dd37      	ble.n	8005c46 <_dtoa_r+0x8ae>
 8005bd6:	001a      	movs	r2, r3
 8005bd8:	0001      	movs	r1, r0
 8005bda:	0038      	movs	r0, r7
 8005bdc:	f000 fcdc 	bl	8006598 <__pow5mult>
 8005be0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005be2:	0006      	movs	r6, r0
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	dd33      	ble.n	8005c50 <_dtoa_r+0x8b8>
 8005be8:	2300      	movs	r3, #0
 8005bea:	9307      	str	r3, [sp, #28]
 8005bec:	6933      	ldr	r3, [r6, #16]
 8005bee:	3303      	adds	r3, #3
 8005bf0:	009b      	lsls	r3, r3, #2
 8005bf2:	18f3      	adds	r3, r6, r3
 8005bf4:	6858      	ldr	r0, [r3, #4]
 8005bf6:	f000 fbc1 	bl	800637c <__hi0bits>
 8005bfa:	2320      	movs	r3, #32
 8005bfc:	1a18      	subs	r0, r3, r0
 8005bfe:	e03f      	b.n	8005c80 <_dtoa_r+0x8e8>
 8005c00:	2336      	movs	r3, #54	; 0x36
 8005c02:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005c04:	1a9b      	subs	r3, r3, r2
 8005c06:	e79d      	b.n	8005b44 <_dtoa_r+0x7ac>
 8005c08:	9b06      	ldr	r3, [sp, #24]
 8005c0a:	1e5e      	subs	r6, r3, #1
 8005c0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c0e:	42b3      	cmp	r3, r6
 8005c10:	db08      	blt.n	8005c24 <_dtoa_r+0x88c>
 8005c12:	1b9e      	subs	r6, r3, r6
 8005c14:	9b06      	ldr	r3, [sp, #24]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	da0c      	bge.n	8005c34 <_dtoa_r+0x89c>
 8005c1a:	9b08      	ldr	r3, [sp, #32]
 8005c1c:	9a06      	ldr	r2, [sp, #24]
 8005c1e:	1a9c      	subs	r4, r3, r2
 8005c20:	2300      	movs	r3, #0
 8005c22:	e791      	b.n	8005b48 <_dtoa_r+0x7b0>
 8005c24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c26:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005c28:	1af3      	subs	r3, r6, r3
 8005c2a:	18d3      	adds	r3, r2, r3
 8005c2c:	960e      	str	r6, [sp, #56]	; 0x38
 8005c2e:	9314      	str	r3, [sp, #80]	; 0x50
 8005c30:	2600      	movs	r6, #0
 8005c32:	e7ef      	b.n	8005c14 <_dtoa_r+0x87c>
 8005c34:	9c08      	ldr	r4, [sp, #32]
 8005c36:	9b06      	ldr	r3, [sp, #24]
 8005c38:	e786      	b.n	8005b48 <_dtoa_r+0x7b0>
 8005c3a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8005c3c:	9c08      	ldr	r4, [sp, #32]
 8005c3e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005c40:	e78d      	b.n	8005b5e <_dtoa_r+0x7c6>
 8005c42:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005c44:	e7ba      	b.n	8005bbc <_dtoa_r+0x824>
 8005c46:	2300      	movs	r3, #0
 8005c48:	9307      	str	r3, [sp, #28]
 8005c4a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	dc13      	bgt.n	8005c78 <_dtoa_r+0x8e0>
 8005c50:	2300      	movs	r3, #0
 8005c52:	9307      	str	r3, [sp, #28]
 8005c54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d10e      	bne.n	8005c78 <_dtoa_r+0x8e0>
 8005c5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c5c:	031b      	lsls	r3, r3, #12
 8005c5e:	d10b      	bne.n	8005c78 <_dtoa_r+0x8e0>
 8005c60:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8005c62:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005c64:	4213      	tst	r3, r2
 8005c66:	d007      	beq.n	8005c78 <_dtoa_r+0x8e0>
 8005c68:	9b08      	ldr	r3, [sp, #32]
 8005c6a:	3301      	adds	r3, #1
 8005c6c:	9308      	str	r3, [sp, #32]
 8005c6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c70:	3301      	adds	r3, #1
 8005c72:	930d      	str	r3, [sp, #52]	; 0x34
 8005c74:	2301      	movs	r3, #1
 8005c76:	9307      	str	r3, [sp, #28]
 8005c78:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005c7a:	2001      	movs	r0, #1
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d1b5      	bne.n	8005bec <_dtoa_r+0x854>
 8005c80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c82:	221f      	movs	r2, #31
 8005c84:	1818      	adds	r0, r3, r0
 8005c86:	0003      	movs	r3, r0
 8005c88:	4013      	ands	r3, r2
 8005c8a:	4210      	tst	r0, r2
 8005c8c:	d046      	beq.n	8005d1c <_dtoa_r+0x984>
 8005c8e:	3201      	adds	r2, #1
 8005c90:	1ad2      	subs	r2, r2, r3
 8005c92:	2a04      	cmp	r2, #4
 8005c94:	dd3f      	ble.n	8005d16 <_dtoa_r+0x97e>
 8005c96:	221c      	movs	r2, #28
 8005c98:	1ad3      	subs	r3, r2, r3
 8005c9a:	9a08      	ldr	r2, [sp, #32]
 8005c9c:	18e4      	adds	r4, r4, r3
 8005c9e:	18d2      	adds	r2, r2, r3
 8005ca0:	9208      	str	r2, [sp, #32]
 8005ca2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005ca4:	18d3      	adds	r3, r2, r3
 8005ca6:	930d      	str	r3, [sp, #52]	; 0x34
 8005ca8:	9b08      	ldr	r3, [sp, #32]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	dd05      	ble.n	8005cba <_dtoa_r+0x922>
 8005cae:	001a      	movs	r2, r3
 8005cb0:	0038      	movs	r0, r7
 8005cb2:	9904      	ldr	r1, [sp, #16]
 8005cb4:	f000 fccc 	bl	8006650 <__lshift>
 8005cb8:	9004      	str	r0, [sp, #16]
 8005cba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	dd05      	ble.n	8005ccc <_dtoa_r+0x934>
 8005cc0:	0031      	movs	r1, r6
 8005cc2:	001a      	movs	r2, r3
 8005cc4:	0038      	movs	r0, r7
 8005cc6:	f000 fcc3 	bl	8006650 <__lshift>
 8005cca:	0006      	movs	r6, r0
 8005ccc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d026      	beq.n	8005d20 <_dtoa_r+0x988>
 8005cd2:	0031      	movs	r1, r6
 8005cd4:	9804      	ldr	r0, [sp, #16]
 8005cd6:	f000 fd2b 	bl	8006730 <__mcmp>
 8005cda:	2800      	cmp	r0, #0
 8005cdc:	da20      	bge.n	8005d20 <_dtoa_r+0x988>
 8005cde:	9b02      	ldr	r3, [sp, #8]
 8005ce0:	220a      	movs	r2, #10
 8005ce2:	3b01      	subs	r3, #1
 8005ce4:	9302      	str	r3, [sp, #8]
 8005ce6:	0038      	movs	r0, r7
 8005ce8:	2300      	movs	r3, #0
 8005cea:	9904      	ldr	r1, [sp, #16]
 8005cec:	f000 fb02 	bl	80062f4 <__multadd>
 8005cf0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005cf2:	9004      	str	r0, [sp, #16]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d100      	bne.n	8005cfa <_dtoa_r+0x962>
 8005cf8:	e160      	b.n	8005fbc <_dtoa_r+0xc24>
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	0029      	movs	r1, r5
 8005cfe:	220a      	movs	r2, #10
 8005d00:	0038      	movs	r0, r7
 8005d02:	f000 faf7 	bl	80062f4 <__multadd>
 8005d06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005d08:	0005      	movs	r5, r0
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	dc47      	bgt.n	8005d9e <_dtoa_r+0xa06>
 8005d0e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005d10:	2b02      	cmp	r3, #2
 8005d12:	dc0d      	bgt.n	8005d30 <_dtoa_r+0x998>
 8005d14:	e043      	b.n	8005d9e <_dtoa_r+0xa06>
 8005d16:	2a04      	cmp	r2, #4
 8005d18:	d0c6      	beq.n	8005ca8 <_dtoa_r+0x910>
 8005d1a:	0013      	movs	r3, r2
 8005d1c:	331c      	adds	r3, #28
 8005d1e:	e7bc      	b.n	8005c9a <_dtoa_r+0x902>
 8005d20:	9b06      	ldr	r3, [sp, #24]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	dc35      	bgt.n	8005d92 <_dtoa_r+0x9fa>
 8005d26:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005d28:	2b02      	cmp	r3, #2
 8005d2a:	dd32      	ble.n	8005d92 <_dtoa_r+0x9fa>
 8005d2c:	9b06      	ldr	r3, [sp, #24]
 8005d2e:	930c      	str	r3, [sp, #48]	; 0x30
 8005d30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d10c      	bne.n	8005d50 <_dtoa_r+0x9b8>
 8005d36:	0031      	movs	r1, r6
 8005d38:	2205      	movs	r2, #5
 8005d3a:	0038      	movs	r0, r7
 8005d3c:	f000 fada 	bl	80062f4 <__multadd>
 8005d40:	0006      	movs	r6, r0
 8005d42:	0001      	movs	r1, r0
 8005d44:	9804      	ldr	r0, [sp, #16]
 8005d46:	f000 fcf3 	bl	8006730 <__mcmp>
 8005d4a:	2800      	cmp	r0, #0
 8005d4c:	dd00      	ble.n	8005d50 <_dtoa_r+0x9b8>
 8005d4e:	e59f      	b.n	8005890 <_dtoa_r+0x4f8>
 8005d50:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005d52:	43db      	mvns	r3, r3
 8005d54:	9302      	str	r3, [sp, #8]
 8005d56:	9b05      	ldr	r3, [sp, #20]
 8005d58:	9307      	str	r3, [sp, #28]
 8005d5a:	2400      	movs	r4, #0
 8005d5c:	0031      	movs	r1, r6
 8005d5e:	0038      	movs	r0, r7
 8005d60:	f000 faa4 	bl	80062ac <_Bfree>
 8005d64:	2d00      	cmp	r5, #0
 8005d66:	d100      	bne.n	8005d6a <_dtoa_r+0x9d2>
 8005d68:	e6b0      	b.n	8005acc <_dtoa_r+0x734>
 8005d6a:	2c00      	cmp	r4, #0
 8005d6c:	d005      	beq.n	8005d7a <_dtoa_r+0x9e2>
 8005d6e:	42ac      	cmp	r4, r5
 8005d70:	d003      	beq.n	8005d7a <_dtoa_r+0x9e2>
 8005d72:	0021      	movs	r1, r4
 8005d74:	0038      	movs	r0, r7
 8005d76:	f000 fa99 	bl	80062ac <_Bfree>
 8005d7a:	0029      	movs	r1, r5
 8005d7c:	0038      	movs	r0, r7
 8005d7e:	f000 fa95 	bl	80062ac <_Bfree>
 8005d82:	e6a3      	b.n	8005acc <_dtoa_r+0x734>
 8005d84:	2600      	movs	r6, #0
 8005d86:	0035      	movs	r5, r6
 8005d88:	e7e2      	b.n	8005d50 <_dtoa_r+0x9b8>
 8005d8a:	9602      	str	r6, [sp, #8]
 8005d8c:	9e07      	ldr	r6, [sp, #28]
 8005d8e:	0035      	movs	r5, r6
 8005d90:	e57e      	b.n	8005890 <_dtoa_r+0x4f8>
 8005d92:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d100      	bne.n	8005d9a <_dtoa_r+0xa02>
 8005d98:	e0c8      	b.n	8005f2c <_dtoa_r+0xb94>
 8005d9a:	9b06      	ldr	r3, [sp, #24]
 8005d9c:	930c      	str	r3, [sp, #48]	; 0x30
 8005d9e:	2c00      	cmp	r4, #0
 8005da0:	dd05      	ble.n	8005dae <_dtoa_r+0xa16>
 8005da2:	0029      	movs	r1, r5
 8005da4:	0022      	movs	r2, r4
 8005da6:	0038      	movs	r0, r7
 8005da8:	f000 fc52 	bl	8006650 <__lshift>
 8005dac:	0005      	movs	r5, r0
 8005dae:	9b07      	ldr	r3, [sp, #28]
 8005db0:	0028      	movs	r0, r5
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d01f      	beq.n	8005df6 <_dtoa_r+0xa5e>
 8005db6:	0038      	movs	r0, r7
 8005db8:	6869      	ldr	r1, [r5, #4]
 8005dba:	f000 fa33 	bl	8006224 <_Balloc>
 8005dbe:	1e04      	subs	r4, r0, #0
 8005dc0:	d10c      	bne.n	8005ddc <_dtoa_r+0xa44>
 8005dc2:	0002      	movs	r2, r0
 8005dc4:	4b03      	ldr	r3, [pc, #12]	; (8005dd4 <_dtoa_r+0xa3c>)
 8005dc6:	4904      	ldr	r1, [pc, #16]	; (8005dd8 <_dtoa_r+0xa40>)
 8005dc8:	f7ff fafb 	bl	80053c2 <_dtoa_r+0x2a>
 8005dcc:	40240000 	.word	0x40240000
 8005dd0:	00000433 	.word	0x00000433
 8005dd4:	080076a3 	.word	0x080076a3
 8005dd8:	000002ea 	.word	0x000002ea
 8005ddc:	0029      	movs	r1, r5
 8005dde:	692b      	ldr	r3, [r5, #16]
 8005de0:	310c      	adds	r1, #12
 8005de2:	1c9a      	adds	r2, r3, #2
 8005de4:	0092      	lsls	r2, r2, #2
 8005de6:	300c      	adds	r0, #12
 8005de8:	f000 fa13 	bl	8006212 <memcpy>
 8005dec:	2201      	movs	r2, #1
 8005dee:	0021      	movs	r1, r4
 8005df0:	0038      	movs	r0, r7
 8005df2:	f000 fc2d 	bl	8006650 <__lshift>
 8005df6:	002c      	movs	r4, r5
 8005df8:	0005      	movs	r5, r0
 8005dfa:	9b05      	ldr	r3, [sp, #20]
 8005dfc:	9308      	str	r3, [sp, #32]
 8005dfe:	0031      	movs	r1, r6
 8005e00:	9804      	ldr	r0, [sp, #16]
 8005e02:	f7ff fa3d 	bl	8005280 <quorem>
 8005e06:	0003      	movs	r3, r0
 8005e08:	0021      	movs	r1, r4
 8005e0a:	3330      	adds	r3, #48	; 0x30
 8005e0c:	900e      	str	r0, [sp, #56]	; 0x38
 8005e0e:	9804      	ldr	r0, [sp, #16]
 8005e10:	9306      	str	r3, [sp, #24]
 8005e12:	f000 fc8d 	bl	8006730 <__mcmp>
 8005e16:	002a      	movs	r2, r5
 8005e18:	900f      	str	r0, [sp, #60]	; 0x3c
 8005e1a:	0031      	movs	r1, r6
 8005e1c:	0038      	movs	r0, r7
 8005e1e:	f000 fca3 	bl	8006768 <__mdiff>
 8005e22:	68c3      	ldr	r3, [r0, #12]
 8005e24:	9007      	str	r0, [sp, #28]
 8005e26:	9310      	str	r3, [sp, #64]	; 0x40
 8005e28:	2301      	movs	r3, #1
 8005e2a:	930d      	str	r3, [sp, #52]	; 0x34
 8005e2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d104      	bne.n	8005e3c <_dtoa_r+0xaa4>
 8005e32:	0001      	movs	r1, r0
 8005e34:	9804      	ldr	r0, [sp, #16]
 8005e36:	f000 fc7b 	bl	8006730 <__mcmp>
 8005e3a:	900d      	str	r0, [sp, #52]	; 0x34
 8005e3c:	0038      	movs	r0, r7
 8005e3e:	9907      	ldr	r1, [sp, #28]
 8005e40:	f000 fa34 	bl	80062ac <_Bfree>
 8005e44:	2301      	movs	r3, #1
 8005e46:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005e48:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005e4a:	4018      	ands	r0, r3
 8005e4c:	9b08      	ldr	r3, [sp, #32]
 8005e4e:	3301      	adds	r3, #1
 8005e50:	9307      	str	r3, [sp, #28]
 8005e52:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005e54:	4313      	orrs	r3, r2
 8005e56:	4303      	orrs	r3, r0
 8005e58:	d10c      	bne.n	8005e74 <_dtoa_r+0xadc>
 8005e5a:	9b06      	ldr	r3, [sp, #24]
 8005e5c:	2b39      	cmp	r3, #57	; 0x39
 8005e5e:	d025      	beq.n	8005eac <_dtoa_r+0xb14>
 8005e60:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	dd02      	ble.n	8005e6c <_dtoa_r+0xad4>
 8005e66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e68:	3331      	adds	r3, #49	; 0x31
 8005e6a:	9306      	str	r3, [sp, #24]
 8005e6c:	9b08      	ldr	r3, [sp, #32]
 8005e6e:	9a06      	ldr	r2, [sp, #24]
 8005e70:	701a      	strb	r2, [r3, #0]
 8005e72:	e773      	b.n	8005d5c <_dtoa_r+0x9c4>
 8005e74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	db03      	blt.n	8005e82 <_dtoa_r+0xaea>
 8005e7a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	4303      	orrs	r3, r0
 8005e80:	d11f      	bne.n	8005ec2 <_dtoa_r+0xb2a>
 8005e82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	ddf1      	ble.n	8005e6c <_dtoa_r+0xad4>
 8005e88:	9904      	ldr	r1, [sp, #16]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	0038      	movs	r0, r7
 8005e8e:	f000 fbdf 	bl	8006650 <__lshift>
 8005e92:	0031      	movs	r1, r6
 8005e94:	9004      	str	r0, [sp, #16]
 8005e96:	f000 fc4b 	bl	8006730 <__mcmp>
 8005e9a:	2800      	cmp	r0, #0
 8005e9c:	dc03      	bgt.n	8005ea6 <_dtoa_r+0xb0e>
 8005e9e:	d1e5      	bne.n	8005e6c <_dtoa_r+0xad4>
 8005ea0:	9b06      	ldr	r3, [sp, #24]
 8005ea2:	07db      	lsls	r3, r3, #31
 8005ea4:	d5e2      	bpl.n	8005e6c <_dtoa_r+0xad4>
 8005ea6:	9b06      	ldr	r3, [sp, #24]
 8005ea8:	2b39      	cmp	r3, #57	; 0x39
 8005eaa:	d1dc      	bne.n	8005e66 <_dtoa_r+0xace>
 8005eac:	2339      	movs	r3, #57	; 0x39
 8005eae:	9a08      	ldr	r2, [sp, #32]
 8005eb0:	7013      	strb	r3, [r2, #0]
 8005eb2:	9b07      	ldr	r3, [sp, #28]
 8005eb4:	9307      	str	r3, [sp, #28]
 8005eb6:	3b01      	subs	r3, #1
 8005eb8:	781a      	ldrb	r2, [r3, #0]
 8005eba:	2a39      	cmp	r2, #57	; 0x39
 8005ebc:	d06c      	beq.n	8005f98 <_dtoa_r+0xc00>
 8005ebe:	3201      	adds	r2, #1
 8005ec0:	e7d6      	b.n	8005e70 <_dtoa_r+0xad8>
 8005ec2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	dd07      	ble.n	8005ed8 <_dtoa_r+0xb40>
 8005ec8:	9b06      	ldr	r3, [sp, #24]
 8005eca:	2b39      	cmp	r3, #57	; 0x39
 8005ecc:	d0ee      	beq.n	8005eac <_dtoa_r+0xb14>
 8005ece:	9b06      	ldr	r3, [sp, #24]
 8005ed0:	9a08      	ldr	r2, [sp, #32]
 8005ed2:	3301      	adds	r3, #1
 8005ed4:	7013      	strb	r3, [r2, #0]
 8005ed6:	e741      	b.n	8005d5c <_dtoa_r+0x9c4>
 8005ed8:	9b08      	ldr	r3, [sp, #32]
 8005eda:	9a06      	ldr	r2, [sp, #24]
 8005edc:	701a      	strb	r2, [r3, #0]
 8005ede:	2301      	movs	r3, #1
 8005ee0:	9a05      	ldr	r2, [sp, #20]
 8005ee2:	1a9b      	subs	r3, r3, r2
 8005ee4:	9a08      	ldr	r2, [sp, #32]
 8005ee6:	189b      	adds	r3, r3, r2
 8005ee8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005eea:	429a      	cmp	r2, r3
 8005eec:	d03e      	beq.n	8005f6c <_dtoa_r+0xbd4>
 8005eee:	2300      	movs	r3, #0
 8005ef0:	220a      	movs	r2, #10
 8005ef2:	9904      	ldr	r1, [sp, #16]
 8005ef4:	0038      	movs	r0, r7
 8005ef6:	f000 f9fd 	bl	80062f4 <__multadd>
 8005efa:	2300      	movs	r3, #0
 8005efc:	9004      	str	r0, [sp, #16]
 8005efe:	220a      	movs	r2, #10
 8005f00:	0021      	movs	r1, r4
 8005f02:	0038      	movs	r0, r7
 8005f04:	42ac      	cmp	r4, r5
 8005f06:	d106      	bne.n	8005f16 <_dtoa_r+0xb7e>
 8005f08:	f000 f9f4 	bl	80062f4 <__multadd>
 8005f0c:	0004      	movs	r4, r0
 8005f0e:	0005      	movs	r5, r0
 8005f10:	9b07      	ldr	r3, [sp, #28]
 8005f12:	9308      	str	r3, [sp, #32]
 8005f14:	e773      	b.n	8005dfe <_dtoa_r+0xa66>
 8005f16:	f000 f9ed 	bl	80062f4 <__multadd>
 8005f1a:	0029      	movs	r1, r5
 8005f1c:	0004      	movs	r4, r0
 8005f1e:	2300      	movs	r3, #0
 8005f20:	220a      	movs	r2, #10
 8005f22:	0038      	movs	r0, r7
 8005f24:	f000 f9e6 	bl	80062f4 <__multadd>
 8005f28:	0005      	movs	r5, r0
 8005f2a:	e7f1      	b.n	8005f10 <_dtoa_r+0xb78>
 8005f2c:	9b06      	ldr	r3, [sp, #24]
 8005f2e:	930c      	str	r3, [sp, #48]	; 0x30
 8005f30:	2400      	movs	r4, #0
 8005f32:	0031      	movs	r1, r6
 8005f34:	9804      	ldr	r0, [sp, #16]
 8005f36:	f7ff f9a3 	bl	8005280 <quorem>
 8005f3a:	9b05      	ldr	r3, [sp, #20]
 8005f3c:	3030      	adds	r0, #48	; 0x30
 8005f3e:	5518      	strb	r0, [r3, r4]
 8005f40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005f42:	3401      	adds	r4, #1
 8005f44:	9006      	str	r0, [sp, #24]
 8005f46:	42a3      	cmp	r3, r4
 8005f48:	dd07      	ble.n	8005f5a <_dtoa_r+0xbc2>
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	220a      	movs	r2, #10
 8005f4e:	0038      	movs	r0, r7
 8005f50:	9904      	ldr	r1, [sp, #16]
 8005f52:	f000 f9cf 	bl	80062f4 <__multadd>
 8005f56:	9004      	str	r0, [sp, #16]
 8005f58:	e7eb      	b.n	8005f32 <_dtoa_r+0xb9a>
 8005f5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005f5c:	2001      	movs	r0, #1
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	dd00      	ble.n	8005f64 <_dtoa_r+0xbcc>
 8005f62:	0018      	movs	r0, r3
 8005f64:	2400      	movs	r4, #0
 8005f66:	9b05      	ldr	r3, [sp, #20]
 8005f68:	181b      	adds	r3, r3, r0
 8005f6a:	9307      	str	r3, [sp, #28]
 8005f6c:	9904      	ldr	r1, [sp, #16]
 8005f6e:	2201      	movs	r2, #1
 8005f70:	0038      	movs	r0, r7
 8005f72:	f000 fb6d 	bl	8006650 <__lshift>
 8005f76:	0031      	movs	r1, r6
 8005f78:	9004      	str	r0, [sp, #16]
 8005f7a:	f000 fbd9 	bl	8006730 <__mcmp>
 8005f7e:	2800      	cmp	r0, #0
 8005f80:	dc97      	bgt.n	8005eb2 <_dtoa_r+0xb1a>
 8005f82:	d102      	bne.n	8005f8a <_dtoa_r+0xbf2>
 8005f84:	9b06      	ldr	r3, [sp, #24]
 8005f86:	07db      	lsls	r3, r3, #31
 8005f88:	d493      	bmi.n	8005eb2 <_dtoa_r+0xb1a>
 8005f8a:	9b07      	ldr	r3, [sp, #28]
 8005f8c:	9307      	str	r3, [sp, #28]
 8005f8e:	3b01      	subs	r3, #1
 8005f90:	781a      	ldrb	r2, [r3, #0]
 8005f92:	2a30      	cmp	r2, #48	; 0x30
 8005f94:	d0fa      	beq.n	8005f8c <_dtoa_r+0xbf4>
 8005f96:	e6e1      	b.n	8005d5c <_dtoa_r+0x9c4>
 8005f98:	9a05      	ldr	r2, [sp, #20]
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d18a      	bne.n	8005eb4 <_dtoa_r+0xb1c>
 8005f9e:	9b02      	ldr	r3, [sp, #8]
 8005fa0:	3301      	adds	r3, #1
 8005fa2:	9302      	str	r3, [sp, #8]
 8005fa4:	2331      	movs	r3, #49	; 0x31
 8005fa6:	e795      	b.n	8005ed4 <_dtoa_r+0xb3c>
 8005fa8:	4b08      	ldr	r3, [pc, #32]	; (8005fcc <_dtoa_r+0xc34>)
 8005faa:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005fac:	9305      	str	r3, [sp, #20]
 8005fae:	4b08      	ldr	r3, [pc, #32]	; (8005fd0 <_dtoa_r+0xc38>)
 8005fb0:	2a00      	cmp	r2, #0
 8005fb2:	d001      	beq.n	8005fb8 <_dtoa_r+0xc20>
 8005fb4:	f7ff fa3b 	bl	800542e <_dtoa_r+0x96>
 8005fb8:	f7ff fa3b 	bl	8005432 <_dtoa_r+0x9a>
 8005fbc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	dcb6      	bgt.n	8005f30 <_dtoa_r+0xb98>
 8005fc2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005fc4:	2b02      	cmp	r3, #2
 8005fc6:	dd00      	ble.n	8005fca <_dtoa_r+0xc32>
 8005fc8:	e6b2      	b.n	8005d30 <_dtoa_r+0x998>
 8005fca:	e7b1      	b.n	8005f30 <_dtoa_r+0xb98>
 8005fcc:	08007620 	.word	0x08007620
 8005fd0:	08007628 	.word	0x08007628

08005fd4 <std>:
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	b510      	push	{r4, lr}
 8005fd8:	0004      	movs	r4, r0
 8005fda:	6003      	str	r3, [r0, #0]
 8005fdc:	6043      	str	r3, [r0, #4]
 8005fde:	6083      	str	r3, [r0, #8]
 8005fe0:	8181      	strh	r1, [r0, #12]
 8005fe2:	6643      	str	r3, [r0, #100]	; 0x64
 8005fe4:	0019      	movs	r1, r3
 8005fe6:	81c2      	strh	r2, [r0, #14]
 8005fe8:	6103      	str	r3, [r0, #16]
 8005fea:	6143      	str	r3, [r0, #20]
 8005fec:	6183      	str	r3, [r0, #24]
 8005fee:	2208      	movs	r2, #8
 8005ff0:	305c      	adds	r0, #92	; 0x5c
 8005ff2:	f7fe fca9 	bl	8004948 <memset>
 8005ff6:	4b05      	ldr	r3, [pc, #20]	; (800600c <std+0x38>)
 8005ff8:	6263      	str	r3, [r4, #36]	; 0x24
 8005ffa:	4b05      	ldr	r3, [pc, #20]	; (8006010 <std+0x3c>)
 8005ffc:	6224      	str	r4, [r4, #32]
 8005ffe:	62a3      	str	r3, [r4, #40]	; 0x28
 8006000:	4b04      	ldr	r3, [pc, #16]	; (8006014 <std+0x40>)
 8006002:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006004:	4b04      	ldr	r3, [pc, #16]	; (8006018 <std+0x44>)
 8006006:	6323      	str	r3, [r4, #48]	; 0x30
 8006008:	bd10      	pop	{r4, pc}
 800600a:	46c0      	nop			; (mov r8, r8)
 800600c:	08006db5 	.word	0x08006db5
 8006010:	08006ddd 	.word	0x08006ddd
 8006014:	08006e15 	.word	0x08006e15
 8006018:	08006e41 	.word	0x08006e41

0800601c <_cleanup_r>:
 800601c:	b510      	push	{r4, lr}
 800601e:	4902      	ldr	r1, [pc, #8]	; (8006028 <_cleanup_r+0xc>)
 8006020:	f000 f8ba 	bl	8006198 <_fwalk_reent>
 8006024:	bd10      	pop	{r4, pc}
 8006026:	46c0      	nop			; (mov r8, r8)
 8006028:	08007189 	.word	0x08007189

0800602c <__sfmoreglue>:
 800602c:	b570      	push	{r4, r5, r6, lr}
 800602e:	2568      	movs	r5, #104	; 0x68
 8006030:	1e4a      	subs	r2, r1, #1
 8006032:	4355      	muls	r5, r2
 8006034:	000e      	movs	r6, r1
 8006036:	0029      	movs	r1, r5
 8006038:	3174      	adds	r1, #116	; 0x74
 800603a:	f000 fce9 	bl	8006a10 <_malloc_r>
 800603e:	1e04      	subs	r4, r0, #0
 8006040:	d008      	beq.n	8006054 <__sfmoreglue+0x28>
 8006042:	2100      	movs	r1, #0
 8006044:	002a      	movs	r2, r5
 8006046:	6001      	str	r1, [r0, #0]
 8006048:	6046      	str	r6, [r0, #4]
 800604a:	300c      	adds	r0, #12
 800604c:	60a0      	str	r0, [r4, #8]
 800604e:	3268      	adds	r2, #104	; 0x68
 8006050:	f7fe fc7a 	bl	8004948 <memset>
 8006054:	0020      	movs	r0, r4
 8006056:	bd70      	pop	{r4, r5, r6, pc}

08006058 <__sfp_lock_acquire>:
 8006058:	b510      	push	{r4, lr}
 800605a:	4802      	ldr	r0, [pc, #8]	; (8006064 <__sfp_lock_acquire+0xc>)
 800605c:	f000 f8c1 	bl	80061e2 <__retarget_lock_acquire_recursive>
 8006060:	bd10      	pop	{r4, pc}
 8006062:	46c0      	nop			; (mov r8, r8)
 8006064:	200002a0 	.word	0x200002a0

08006068 <__sfp_lock_release>:
 8006068:	b510      	push	{r4, lr}
 800606a:	4802      	ldr	r0, [pc, #8]	; (8006074 <__sfp_lock_release+0xc>)
 800606c:	f000 f8ba 	bl	80061e4 <__retarget_lock_release_recursive>
 8006070:	bd10      	pop	{r4, pc}
 8006072:	46c0      	nop			; (mov r8, r8)
 8006074:	200002a0 	.word	0x200002a0

08006078 <__sinit_lock_acquire>:
 8006078:	b510      	push	{r4, lr}
 800607a:	4802      	ldr	r0, [pc, #8]	; (8006084 <__sinit_lock_acquire+0xc>)
 800607c:	f000 f8b1 	bl	80061e2 <__retarget_lock_acquire_recursive>
 8006080:	bd10      	pop	{r4, pc}
 8006082:	46c0      	nop			; (mov r8, r8)
 8006084:	2000029b 	.word	0x2000029b

08006088 <__sinit_lock_release>:
 8006088:	b510      	push	{r4, lr}
 800608a:	4802      	ldr	r0, [pc, #8]	; (8006094 <__sinit_lock_release+0xc>)
 800608c:	f000 f8aa 	bl	80061e4 <__retarget_lock_release_recursive>
 8006090:	bd10      	pop	{r4, pc}
 8006092:	46c0      	nop			; (mov r8, r8)
 8006094:	2000029b 	.word	0x2000029b

08006098 <__sinit>:
 8006098:	b513      	push	{r0, r1, r4, lr}
 800609a:	0004      	movs	r4, r0
 800609c:	f7ff ffec 	bl	8006078 <__sinit_lock_acquire>
 80060a0:	69a3      	ldr	r3, [r4, #24]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d002      	beq.n	80060ac <__sinit+0x14>
 80060a6:	f7ff ffef 	bl	8006088 <__sinit_lock_release>
 80060aa:	bd13      	pop	{r0, r1, r4, pc}
 80060ac:	64a3      	str	r3, [r4, #72]	; 0x48
 80060ae:	64e3      	str	r3, [r4, #76]	; 0x4c
 80060b0:	6523      	str	r3, [r4, #80]	; 0x50
 80060b2:	4b13      	ldr	r3, [pc, #76]	; (8006100 <__sinit+0x68>)
 80060b4:	4a13      	ldr	r2, [pc, #76]	; (8006104 <__sinit+0x6c>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	62a2      	str	r2, [r4, #40]	; 0x28
 80060ba:	9301      	str	r3, [sp, #4]
 80060bc:	42a3      	cmp	r3, r4
 80060be:	d101      	bne.n	80060c4 <__sinit+0x2c>
 80060c0:	2301      	movs	r3, #1
 80060c2:	61a3      	str	r3, [r4, #24]
 80060c4:	0020      	movs	r0, r4
 80060c6:	f000 f81f 	bl	8006108 <__sfp>
 80060ca:	6060      	str	r0, [r4, #4]
 80060cc:	0020      	movs	r0, r4
 80060ce:	f000 f81b 	bl	8006108 <__sfp>
 80060d2:	60a0      	str	r0, [r4, #8]
 80060d4:	0020      	movs	r0, r4
 80060d6:	f000 f817 	bl	8006108 <__sfp>
 80060da:	2200      	movs	r2, #0
 80060dc:	2104      	movs	r1, #4
 80060de:	60e0      	str	r0, [r4, #12]
 80060e0:	6860      	ldr	r0, [r4, #4]
 80060e2:	f7ff ff77 	bl	8005fd4 <std>
 80060e6:	2201      	movs	r2, #1
 80060e8:	2109      	movs	r1, #9
 80060ea:	68a0      	ldr	r0, [r4, #8]
 80060ec:	f7ff ff72 	bl	8005fd4 <std>
 80060f0:	2202      	movs	r2, #2
 80060f2:	2112      	movs	r1, #18
 80060f4:	68e0      	ldr	r0, [r4, #12]
 80060f6:	f7ff ff6d 	bl	8005fd4 <std>
 80060fa:	2301      	movs	r3, #1
 80060fc:	61a3      	str	r3, [r4, #24]
 80060fe:	e7d2      	b.n	80060a6 <__sinit+0xe>
 8006100:	080075e8 	.word	0x080075e8
 8006104:	0800601d 	.word	0x0800601d

08006108 <__sfp>:
 8006108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800610a:	0007      	movs	r7, r0
 800610c:	f7ff ffa4 	bl	8006058 <__sfp_lock_acquire>
 8006110:	4b1f      	ldr	r3, [pc, #124]	; (8006190 <__sfp+0x88>)
 8006112:	681e      	ldr	r6, [r3, #0]
 8006114:	69b3      	ldr	r3, [r6, #24]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d102      	bne.n	8006120 <__sfp+0x18>
 800611a:	0030      	movs	r0, r6
 800611c:	f7ff ffbc 	bl	8006098 <__sinit>
 8006120:	3648      	adds	r6, #72	; 0x48
 8006122:	68b4      	ldr	r4, [r6, #8]
 8006124:	6873      	ldr	r3, [r6, #4]
 8006126:	3b01      	subs	r3, #1
 8006128:	d504      	bpl.n	8006134 <__sfp+0x2c>
 800612a:	6833      	ldr	r3, [r6, #0]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d022      	beq.n	8006176 <__sfp+0x6e>
 8006130:	6836      	ldr	r6, [r6, #0]
 8006132:	e7f6      	b.n	8006122 <__sfp+0x1a>
 8006134:	220c      	movs	r2, #12
 8006136:	5ea5      	ldrsh	r5, [r4, r2]
 8006138:	2d00      	cmp	r5, #0
 800613a:	d11a      	bne.n	8006172 <__sfp+0x6a>
 800613c:	0020      	movs	r0, r4
 800613e:	4b15      	ldr	r3, [pc, #84]	; (8006194 <__sfp+0x8c>)
 8006140:	3058      	adds	r0, #88	; 0x58
 8006142:	60e3      	str	r3, [r4, #12]
 8006144:	6665      	str	r5, [r4, #100]	; 0x64
 8006146:	f000 f84b 	bl	80061e0 <__retarget_lock_init_recursive>
 800614a:	f7ff ff8d 	bl	8006068 <__sfp_lock_release>
 800614e:	0020      	movs	r0, r4
 8006150:	2208      	movs	r2, #8
 8006152:	0029      	movs	r1, r5
 8006154:	6025      	str	r5, [r4, #0]
 8006156:	60a5      	str	r5, [r4, #8]
 8006158:	6065      	str	r5, [r4, #4]
 800615a:	6125      	str	r5, [r4, #16]
 800615c:	6165      	str	r5, [r4, #20]
 800615e:	61a5      	str	r5, [r4, #24]
 8006160:	305c      	adds	r0, #92	; 0x5c
 8006162:	f7fe fbf1 	bl	8004948 <memset>
 8006166:	6365      	str	r5, [r4, #52]	; 0x34
 8006168:	63a5      	str	r5, [r4, #56]	; 0x38
 800616a:	64a5      	str	r5, [r4, #72]	; 0x48
 800616c:	64e5      	str	r5, [r4, #76]	; 0x4c
 800616e:	0020      	movs	r0, r4
 8006170:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006172:	3468      	adds	r4, #104	; 0x68
 8006174:	e7d7      	b.n	8006126 <__sfp+0x1e>
 8006176:	2104      	movs	r1, #4
 8006178:	0038      	movs	r0, r7
 800617a:	f7ff ff57 	bl	800602c <__sfmoreglue>
 800617e:	1e04      	subs	r4, r0, #0
 8006180:	6030      	str	r0, [r6, #0]
 8006182:	d1d5      	bne.n	8006130 <__sfp+0x28>
 8006184:	f7ff ff70 	bl	8006068 <__sfp_lock_release>
 8006188:	230c      	movs	r3, #12
 800618a:	603b      	str	r3, [r7, #0]
 800618c:	e7ef      	b.n	800616e <__sfp+0x66>
 800618e:	46c0      	nop			; (mov r8, r8)
 8006190:	080075e8 	.word	0x080075e8
 8006194:	ffff0001 	.word	0xffff0001

08006198 <_fwalk_reent>:
 8006198:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800619a:	0004      	movs	r4, r0
 800619c:	0006      	movs	r6, r0
 800619e:	2700      	movs	r7, #0
 80061a0:	9101      	str	r1, [sp, #4]
 80061a2:	3448      	adds	r4, #72	; 0x48
 80061a4:	6863      	ldr	r3, [r4, #4]
 80061a6:	68a5      	ldr	r5, [r4, #8]
 80061a8:	9300      	str	r3, [sp, #0]
 80061aa:	9b00      	ldr	r3, [sp, #0]
 80061ac:	3b01      	subs	r3, #1
 80061ae:	9300      	str	r3, [sp, #0]
 80061b0:	d504      	bpl.n	80061bc <_fwalk_reent+0x24>
 80061b2:	6824      	ldr	r4, [r4, #0]
 80061b4:	2c00      	cmp	r4, #0
 80061b6:	d1f5      	bne.n	80061a4 <_fwalk_reent+0xc>
 80061b8:	0038      	movs	r0, r7
 80061ba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80061bc:	89ab      	ldrh	r3, [r5, #12]
 80061be:	2b01      	cmp	r3, #1
 80061c0:	d908      	bls.n	80061d4 <_fwalk_reent+0x3c>
 80061c2:	220e      	movs	r2, #14
 80061c4:	5eab      	ldrsh	r3, [r5, r2]
 80061c6:	3301      	adds	r3, #1
 80061c8:	d004      	beq.n	80061d4 <_fwalk_reent+0x3c>
 80061ca:	0029      	movs	r1, r5
 80061cc:	0030      	movs	r0, r6
 80061ce:	9b01      	ldr	r3, [sp, #4]
 80061d0:	4798      	blx	r3
 80061d2:	4307      	orrs	r7, r0
 80061d4:	3568      	adds	r5, #104	; 0x68
 80061d6:	e7e8      	b.n	80061aa <_fwalk_reent+0x12>

080061d8 <_localeconv_r>:
 80061d8:	4800      	ldr	r0, [pc, #0]	; (80061dc <_localeconv_r+0x4>)
 80061da:	4770      	bx	lr
 80061dc:	20000160 	.word	0x20000160

080061e0 <__retarget_lock_init_recursive>:
 80061e0:	4770      	bx	lr

080061e2 <__retarget_lock_acquire_recursive>:
 80061e2:	4770      	bx	lr

080061e4 <__retarget_lock_release_recursive>:
 80061e4:	4770      	bx	lr
	...

080061e8 <malloc>:
 80061e8:	b510      	push	{r4, lr}
 80061ea:	4b03      	ldr	r3, [pc, #12]	; (80061f8 <malloc+0x10>)
 80061ec:	0001      	movs	r1, r0
 80061ee:	6818      	ldr	r0, [r3, #0]
 80061f0:	f000 fc0e 	bl	8006a10 <_malloc_r>
 80061f4:	bd10      	pop	{r4, pc}
 80061f6:	46c0      	nop			; (mov r8, r8)
 80061f8:	2000000c 	.word	0x2000000c

080061fc <memchr>:
 80061fc:	b2c9      	uxtb	r1, r1
 80061fe:	1882      	adds	r2, r0, r2
 8006200:	4290      	cmp	r0, r2
 8006202:	d101      	bne.n	8006208 <memchr+0xc>
 8006204:	2000      	movs	r0, #0
 8006206:	4770      	bx	lr
 8006208:	7803      	ldrb	r3, [r0, #0]
 800620a:	428b      	cmp	r3, r1
 800620c:	d0fb      	beq.n	8006206 <memchr+0xa>
 800620e:	3001      	adds	r0, #1
 8006210:	e7f6      	b.n	8006200 <memchr+0x4>

08006212 <memcpy>:
 8006212:	2300      	movs	r3, #0
 8006214:	b510      	push	{r4, lr}
 8006216:	429a      	cmp	r2, r3
 8006218:	d100      	bne.n	800621c <memcpy+0xa>
 800621a:	bd10      	pop	{r4, pc}
 800621c:	5ccc      	ldrb	r4, [r1, r3]
 800621e:	54c4      	strb	r4, [r0, r3]
 8006220:	3301      	adds	r3, #1
 8006222:	e7f8      	b.n	8006216 <memcpy+0x4>

08006224 <_Balloc>:
 8006224:	b570      	push	{r4, r5, r6, lr}
 8006226:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006228:	0006      	movs	r6, r0
 800622a:	000c      	movs	r4, r1
 800622c:	2d00      	cmp	r5, #0
 800622e:	d10e      	bne.n	800624e <_Balloc+0x2a>
 8006230:	2010      	movs	r0, #16
 8006232:	f7ff ffd9 	bl	80061e8 <malloc>
 8006236:	1e02      	subs	r2, r0, #0
 8006238:	6270      	str	r0, [r6, #36]	; 0x24
 800623a:	d104      	bne.n	8006246 <_Balloc+0x22>
 800623c:	2166      	movs	r1, #102	; 0x66
 800623e:	4b19      	ldr	r3, [pc, #100]	; (80062a4 <_Balloc+0x80>)
 8006240:	4819      	ldr	r0, [pc, #100]	; (80062a8 <_Balloc+0x84>)
 8006242:	f000 fee5 	bl	8007010 <__assert_func>
 8006246:	6045      	str	r5, [r0, #4]
 8006248:	6085      	str	r5, [r0, #8]
 800624a:	6005      	str	r5, [r0, #0]
 800624c:	60c5      	str	r5, [r0, #12]
 800624e:	6a75      	ldr	r5, [r6, #36]	; 0x24
 8006250:	68eb      	ldr	r3, [r5, #12]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d013      	beq.n	800627e <_Balloc+0x5a>
 8006256:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006258:	00a2      	lsls	r2, r4, #2
 800625a:	68db      	ldr	r3, [r3, #12]
 800625c:	189b      	adds	r3, r3, r2
 800625e:	6818      	ldr	r0, [r3, #0]
 8006260:	2800      	cmp	r0, #0
 8006262:	d118      	bne.n	8006296 <_Balloc+0x72>
 8006264:	2101      	movs	r1, #1
 8006266:	000d      	movs	r5, r1
 8006268:	40a5      	lsls	r5, r4
 800626a:	1d6a      	adds	r2, r5, #5
 800626c:	0030      	movs	r0, r6
 800626e:	0092      	lsls	r2, r2, #2
 8006270:	f000 fb76 	bl	8006960 <_calloc_r>
 8006274:	2800      	cmp	r0, #0
 8006276:	d00c      	beq.n	8006292 <_Balloc+0x6e>
 8006278:	6044      	str	r4, [r0, #4]
 800627a:	6085      	str	r5, [r0, #8]
 800627c:	e00d      	b.n	800629a <_Balloc+0x76>
 800627e:	2221      	movs	r2, #33	; 0x21
 8006280:	2104      	movs	r1, #4
 8006282:	0030      	movs	r0, r6
 8006284:	f000 fb6c 	bl	8006960 <_calloc_r>
 8006288:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800628a:	60e8      	str	r0, [r5, #12]
 800628c:	68db      	ldr	r3, [r3, #12]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d1e1      	bne.n	8006256 <_Balloc+0x32>
 8006292:	2000      	movs	r0, #0
 8006294:	bd70      	pop	{r4, r5, r6, pc}
 8006296:	6802      	ldr	r2, [r0, #0]
 8006298:	601a      	str	r2, [r3, #0]
 800629a:	2300      	movs	r3, #0
 800629c:	6103      	str	r3, [r0, #16]
 800629e:	60c3      	str	r3, [r0, #12]
 80062a0:	e7f8      	b.n	8006294 <_Balloc+0x70>
 80062a2:	46c0      	nop			; (mov r8, r8)
 80062a4:	0800762d 	.word	0x0800762d
 80062a8:	08007714 	.word	0x08007714

080062ac <_Bfree>:
 80062ac:	b570      	push	{r4, r5, r6, lr}
 80062ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80062b0:	0005      	movs	r5, r0
 80062b2:	000c      	movs	r4, r1
 80062b4:	2e00      	cmp	r6, #0
 80062b6:	d10e      	bne.n	80062d6 <_Bfree+0x2a>
 80062b8:	2010      	movs	r0, #16
 80062ba:	f7ff ff95 	bl	80061e8 <malloc>
 80062be:	1e02      	subs	r2, r0, #0
 80062c0:	6268      	str	r0, [r5, #36]	; 0x24
 80062c2:	d104      	bne.n	80062ce <_Bfree+0x22>
 80062c4:	218a      	movs	r1, #138	; 0x8a
 80062c6:	4b09      	ldr	r3, [pc, #36]	; (80062ec <_Bfree+0x40>)
 80062c8:	4809      	ldr	r0, [pc, #36]	; (80062f0 <_Bfree+0x44>)
 80062ca:	f000 fea1 	bl	8007010 <__assert_func>
 80062ce:	6046      	str	r6, [r0, #4]
 80062d0:	6086      	str	r6, [r0, #8]
 80062d2:	6006      	str	r6, [r0, #0]
 80062d4:	60c6      	str	r6, [r0, #12]
 80062d6:	2c00      	cmp	r4, #0
 80062d8:	d007      	beq.n	80062ea <_Bfree+0x3e>
 80062da:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80062dc:	6862      	ldr	r2, [r4, #4]
 80062de:	68db      	ldr	r3, [r3, #12]
 80062e0:	0092      	lsls	r2, r2, #2
 80062e2:	189b      	adds	r3, r3, r2
 80062e4:	681a      	ldr	r2, [r3, #0]
 80062e6:	6022      	str	r2, [r4, #0]
 80062e8:	601c      	str	r4, [r3, #0]
 80062ea:	bd70      	pop	{r4, r5, r6, pc}
 80062ec:	0800762d 	.word	0x0800762d
 80062f0:	08007714 	.word	0x08007714

080062f4 <__multadd>:
 80062f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80062f6:	000e      	movs	r6, r1
 80062f8:	9001      	str	r0, [sp, #4]
 80062fa:	000c      	movs	r4, r1
 80062fc:	001d      	movs	r5, r3
 80062fe:	2000      	movs	r0, #0
 8006300:	690f      	ldr	r7, [r1, #16]
 8006302:	3614      	adds	r6, #20
 8006304:	6833      	ldr	r3, [r6, #0]
 8006306:	3001      	adds	r0, #1
 8006308:	b299      	uxth	r1, r3
 800630a:	4351      	muls	r1, r2
 800630c:	0c1b      	lsrs	r3, r3, #16
 800630e:	4353      	muls	r3, r2
 8006310:	1949      	adds	r1, r1, r5
 8006312:	0c0d      	lsrs	r5, r1, #16
 8006314:	195b      	adds	r3, r3, r5
 8006316:	0c1d      	lsrs	r5, r3, #16
 8006318:	b289      	uxth	r1, r1
 800631a:	041b      	lsls	r3, r3, #16
 800631c:	185b      	adds	r3, r3, r1
 800631e:	c608      	stmia	r6!, {r3}
 8006320:	4287      	cmp	r7, r0
 8006322:	dcef      	bgt.n	8006304 <__multadd+0x10>
 8006324:	2d00      	cmp	r5, #0
 8006326:	d022      	beq.n	800636e <__multadd+0x7a>
 8006328:	68a3      	ldr	r3, [r4, #8]
 800632a:	42bb      	cmp	r3, r7
 800632c:	dc19      	bgt.n	8006362 <__multadd+0x6e>
 800632e:	6863      	ldr	r3, [r4, #4]
 8006330:	9801      	ldr	r0, [sp, #4]
 8006332:	1c59      	adds	r1, r3, #1
 8006334:	f7ff ff76 	bl	8006224 <_Balloc>
 8006338:	1e06      	subs	r6, r0, #0
 800633a:	d105      	bne.n	8006348 <__multadd+0x54>
 800633c:	0002      	movs	r2, r0
 800633e:	21b5      	movs	r1, #181	; 0xb5
 8006340:	4b0c      	ldr	r3, [pc, #48]	; (8006374 <__multadd+0x80>)
 8006342:	480d      	ldr	r0, [pc, #52]	; (8006378 <__multadd+0x84>)
 8006344:	f000 fe64 	bl	8007010 <__assert_func>
 8006348:	0021      	movs	r1, r4
 800634a:	6923      	ldr	r3, [r4, #16]
 800634c:	310c      	adds	r1, #12
 800634e:	1c9a      	adds	r2, r3, #2
 8006350:	0092      	lsls	r2, r2, #2
 8006352:	300c      	adds	r0, #12
 8006354:	f7ff ff5d 	bl	8006212 <memcpy>
 8006358:	0021      	movs	r1, r4
 800635a:	9801      	ldr	r0, [sp, #4]
 800635c:	f7ff ffa6 	bl	80062ac <_Bfree>
 8006360:	0034      	movs	r4, r6
 8006362:	1d3b      	adds	r3, r7, #4
 8006364:	009b      	lsls	r3, r3, #2
 8006366:	18e3      	adds	r3, r4, r3
 8006368:	605d      	str	r5, [r3, #4]
 800636a:	1c7b      	adds	r3, r7, #1
 800636c:	6123      	str	r3, [r4, #16]
 800636e:	0020      	movs	r0, r4
 8006370:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006372:	46c0      	nop			; (mov r8, r8)
 8006374:	080076a3 	.word	0x080076a3
 8006378:	08007714 	.word	0x08007714

0800637c <__hi0bits>:
 800637c:	0003      	movs	r3, r0
 800637e:	0c02      	lsrs	r2, r0, #16
 8006380:	2000      	movs	r0, #0
 8006382:	4282      	cmp	r2, r0
 8006384:	d101      	bne.n	800638a <__hi0bits+0xe>
 8006386:	041b      	lsls	r3, r3, #16
 8006388:	3010      	adds	r0, #16
 800638a:	0e1a      	lsrs	r2, r3, #24
 800638c:	d101      	bne.n	8006392 <__hi0bits+0x16>
 800638e:	3008      	adds	r0, #8
 8006390:	021b      	lsls	r3, r3, #8
 8006392:	0f1a      	lsrs	r2, r3, #28
 8006394:	d101      	bne.n	800639a <__hi0bits+0x1e>
 8006396:	3004      	adds	r0, #4
 8006398:	011b      	lsls	r3, r3, #4
 800639a:	0f9a      	lsrs	r2, r3, #30
 800639c:	d101      	bne.n	80063a2 <__hi0bits+0x26>
 800639e:	3002      	adds	r0, #2
 80063a0:	009b      	lsls	r3, r3, #2
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	db03      	blt.n	80063ae <__hi0bits+0x32>
 80063a6:	3001      	adds	r0, #1
 80063a8:	005b      	lsls	r3, r3, #1
 80063aa:	d400      	bmi.n	80063ae <__hi0bits+0x32>
 80063ac:	2020      	movs	r0, #32
 80063ae:	4770      	bx	lr

080063b0 <__lo0bits>:
 80063b0:	6803      	ldr	r3, [r0, #0]
 80063b2:	0002      	movs	r2, r0
 80063b4:	2107      	movs	r1, #7
 80063b6:	0018      	movs	r0, r3
 80063b8:	4008      	ands	r0, r1
 80063ba:	420b      	tst	r3, r1
 80063bc:	d00d      	beq.n	80063da <__lo0bits+0x2a>
 80063be:	3906      	subs	r1, #6
 80063c0:	2000      	movs	r0, #0
 80063c2:	420b      	tst	r3, r1
 80063c4:	d105      	bne.n	80063d2 <__lo0bits+0x22>
 80063c6:	3002      	adds	r0, #2
 80063c8:	4203      	tst	r3, r0
 80063ca:	d003      	beq.n	80063d4 <__lo0bits+0x24>
 80063cc:	40cb      	lsrs	r3, r1
 80063ce:	0008      	movs	r0, r1
 80063d0:	6013      	str	r3, [r2, #0]
 80063d2:	4770      	bx	lr
 80063d4:	089b      	lsrs	r3, r3, #2
 80063d6:	6013      	str	r3, [r2, #0]
 80063d8:	e7fb      	b.n	80063d2 <__lo0bits+0x22>
 80063da:	b299      	uxth	r1, r3
 80063dc:	2900      	cmp	r1, #0
 80063de:	d101      	bne.n	80063e4 <__lo0bits+0x34>
 80063e0:	2010      	movs	r0, #16
 80063e2:	0c1b      	lsrs	r3, r3, #16
 80063e4:	b2d9      	uxtb	r1, r3
 80063e6:	2900      	cmp	r1, #0
 80063e8:	d101      	bne.n	80063ee <__lo0bits+0x3e>
 80063ea:	3008      	adds	r0, #8
 80063ec:	0a1b      	lsrs	r3, r3, #8
 80063ee:	0719      	lsls	r1, r3, #28
 80063f0:	d101      	bne.n	80063f6 <__lo0bits+0x46>
 80063f2:	3004      	adds	r0, #4
 80063f4:	091b      	lsrs	r3, r3, #4
 80063f6:	0799      	lsls	r1, r3, #30
 80063f8:	d101      	bne.n	80063fe <__lo0bits+0x4e>
 80063fa:	3002      	adds	r0, #2
 80063fc:	089b      	lsrs	r3, r3, #2
 80063fe:	07d9      	lsls	r1, r3, #31
 8006400:	d4e9      	bmi.n	80063d6 <__lo0bits+0x26>
 8006402:	3001      	adds	r0, #1
 8006404:	085b      	lsrs	r3, r3, #1
 8006406:	d1e6      	bne.n	80063d6 <__lo0bits+0x26>
 8006408:	2020      	movs	r0, #32
 800640a:	e7e2      	b.n	80063d2 <__lo0bits+0x22>

0800640c <__i2b>:
 800640c:	b510      	push	{r4, lr}
 800640e:	000c      	movs	r4, r1
 8006410:	2101      	movs	r1, #1
 8006412:	f7ff ff07 	bl	8006224 <_Balloc>
 8006416:	2800      	cmp	r0, #0
 8006418:	d106      	bne.n	8006428 <__i2b+0x1c>
 800641a:	21a0      	movs	r1, #160	; 0xa0
 800641c:	0002      	movs	r2, r0
 800641e:	4b04      	ldr	r3, [pc, #16]	; (8006430 <__i2b+0x24>)
 8006420:	4804      	ldr	r0, [pc, #16]	; (8006434 <__i2b+0x28>)
 8006422:	0049      	lsls	r1, r1, #1
 8006424:	f000 fdf4 	bl	8007010 <__assert_func>
 8006428:	2301      	movs	r3, #1
 800642a:	6144      	str	r4, [r0, #20]
 800642c:	6103      	str	r3, [r0, #16]
 800642e:	bd10      	pop	{r4, pc}
 8006430:	080076a3 	.word	0x080076a3
 8006434:	08007714 	.word	0x08007714

08006438 <__multiply>:
 8006438:	b5f0      	push	{r4, r5, r6, r7, lr}
 800643a:	690b      	ldr	r3, [r1, #16]
 800643c:	0014      	movs	r4, r2
 800643e:	6912      	ldr	r2, [r2, #16]
 8006440:	000d      	movs	r5, r1
 8006442:	b089      	sub	sp, #36	; 0x24
 8006444:	4293      	cmp	r3, r2
 8006446:	da01      	bge.n	800644c <__multiply+0x14>
 8006448:	0025      	movs	r5, r4
 800644a:	000c      	movs	r4, r1
 800644c:	692f      	ldr	r7, [r5, #16]
 800644e:	6926      	ldr	r6, [r4, #16]
 8006450:	6869      	ldr	r1, [r5, #4]
 8006452:	19bb      	adds	r3, r7, r6
 8006454:	9302      	str	r3, [sp, #8]
 8006456:	68ab      	ldr	r3, [r5, #8]
 8006458:	19ba      	adds	r2, r7, r6
 800645a:	4293      	cmp	r3, r2
 800645c:	da00      	bge.n	8006460 <__multiply+0x28>
 800645e:	3101      	adds	r1, #1
 8006460:	f7ff fee0 	bl	8006224 <_Balloc>
 8006464:	9001      	str	r0, [sp, #4]
 8006466:	2800      	cmp	r0, #0
 8006468:	d106      	bne.n	8006478 <__multiply+0x40>
 800646a:	215e      	movs	r1, #94	; 0x5e
 800646c:	0002      	movs	r2, r0
 800646e:	4b48      	ldr	r3, [pc, #288]	; (8006590 <__multiply+0x158>)
 8006470:	4848      	ldr	r0, [pc, #288]	; (8006594 <__multiply+0x15c>)
 8006472:	31ff      	adds	r1, #255	; 0xff
 8006474:	f000 fdcc 	bl	8007010 <__assert_func>
 8006478:	9b01      	ldr	r3, [sp, #4]
 800647a:	2200      	movs	r2, #0
 800647c:	3314      	adds	r3, #20
 800647e:	469c      	mov	ip, r3
 8006480:	19bb      	adds	r3, r7, r6
 8006482:	009b      	lsls	r3, r3, #2
 8006484:	4463      	add	r3, ip
 8006486:	9303      	str	r3, [sp, #12]
 8006488:	4663      	mov	r3, ip
 800648a:	9903      	ldr	r1, [sp, #12]
 800648c:	428b      	cmp	r3, r1
 800648e:	d32c      	bcc.n	80064ea <__multiply+0xb2>
 8006490:	002b      	movs	r3, r5
 8006492:	0022      	movs	r2, r4
 8006494:	3314      	adds	r3, #20
 8006496:	00bf      	lsls	r7, r7, #2
 8006498:	3214      	adds	r2, #20
 800649a:	9306      	str	r3, [sp, #24]
 800649c:	00b6      	lsls	r6, r6, #2
 800649e:	19db      	adds	r3, r3, r7
 80064a0:	9304      	str	r3, [sp, #16]
 80064a2:	1993      	adds	r3, r2, r6
 80064a4:	9307      	str	r3, [sp, #28]
 80064a6:	2304      	movs	r3, #4
 80064a8:	9305      	str	r3, [sp, #20]
 80064aa:	002b      	movs	r3, r5
 80064ac:	9904      	ldr	r1, [sp, #16]
 80064ae:	3315      	adds	r3, #21
 80064b0:	9200      	str	r2, [sp, #0]
 80064b2:	4299      	cmp	r1, r3
 80064b4:	d305      	bcc.n	80064c2 <__multiply+0x8a>
 80064b6:	1b4b      	subs	r3, r1, r5
 80064b8:	3b15      	subs	r3, #21
 80064ba:	089b      	lsrs	r3, r3, #2
 80064bc:	3301      	adds	r3, #1
 80064be:	009b      	lsls	r3, r3, #2
 80064c0:	9305      	str	r3, [sp, #20]
 80064c2:	9b07      	ldr	r3, [sp, #28]
 80064c4:	9a00      	ldr	r2, [sp, #0]
 80064c6:	429a      	cmp	r2, r3
 80064c8:	d311      	bcc.n	80064ee <__multiply+0xb6>
 80064ca:	9b02      	ldr	r3, [sp, #8]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	dd06      	ble.n	80064de <__multiply+0xa6>
 80064d0:	9b03      	ldr	r3, [sp, #12]
 80064d2:	3b04      	subs	r3, #4
 80064d4:	9303      	str	r3, [sp, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	9300      	str	r3, [sp, #0]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d054      	beq.n	8006588 <__multiply+0x150>
 80064de:	9b01      	ldr	r3, [sp, #4]
 80064e0:	9a02      	ldr	r2, [sp, #8]
 80064e2:	0018      	movs	r0, r3
 80064e4:	611a      	str	r2, [r3, #16]
 80064e6:	b009      	add	sp, #36	; 0x24
 80064e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064ea:	c304      	stmia	r3!, {r2}
 80064ec:	e7cd      	b.n	800648a <__multiply+0x52>
 80064ee:	9b00      	ldr	r3, [sp, #0]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	b298      	uxth	r0, r3
 80064f4:	2800      	cmp	r0, #0
 80064f6:	d01c      	beq.n	8006532 <__multiply+0xfa>
 80064f8:	4667      	mov	r7, ip
 80064fa:	2400      	movs	r4, #0
 80064fc:	9e06      	ldr	r6, [sp, #24]
 80064fe:	ce02      	ldmia	r6!, {r1}
 8006500:	683a      	ldr	r2, [r7, #0]
 8006502:	b28b      	uxth	r3, r1
 8006504:	4343      	muls	r3, r0
 8006506:	0c09      	lsrs	r1, r1, #16
 8006508:	4341      	muls	r1, r0
 800650a:	b292      	uxth	r2, r2
 800650c:	189b      	adds	r3, r3, r2
 800650e:	191b      	adds	r3, r3, r4
 8006510:	000c      	movs	r4, r1
 8006512:	683a      	ldr	r2, [r7, #0]
 8006514:	0c11      	lsrs	r1, r2, #16
 8006516:	1861      	adds	r1, r4, r1
 8006518:	0c1c      	lsrs	r4, r3, #16
 800651a:	1909      	adds	r1, r1, r4
 800651c:	0c0c      	lsrs	r4, r1, #16
 800651e:	b29b      	uxth	r3, r3
 8006520:	0409      	lsls	r1, r1, #16
 8006522:	430b      	orrs	r3, r1
 8006524:	c708      	stmia	r7!, {r3}
 8006526:	9b04      	ldr	r3, [sp, #16]
 8006528:	42b3      	cmp	r3, r6
 800652a:	d8e8      	bhi.n	80064fe <__multiply+0xc6>
 800652c:	4663      	mov	r3, ip
 800652e:	9a05      	ldr	r2, [sp, #20]
 8006530:	509c      	str	r4, [r3, r2]
 8006532:	9b00      	ldr	r3, [sp, #0]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	0c1e      	lsrs	r6, r3, #16
 8006538:	d020      	beq.n	800657c <__multiply+0x144>
 800653a:	4663      	mov	r3, ip
 800653c:	002c      	movs	r4, r5
 800653e:	4660      	mov	r0, ip
 8006540:	2700      	movs	r7, #0
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	3414      	adds	r4, #20
 8006546:	6822      	ldr	r2, [r4, #0]
 8006548:	b29b      	uxth	r3, r3
 800654a:	b291      	uxth	r1, r2
 800654c:	4371      	muls	r1, r6
 800654e:	6802      	ldr	r2, [r0, #0]
 8006550:	0c12      	lsrs	r2, r2, #16
 8006552:	1889      	adds	r1, r1, r2
 8006554:	19cf      	adds	r7, r1, r7
 8006556:	0439      	lsls	r1, r7, #16
 8006558:	430b      	orrs	r3, r1
 800655a:	6003      	str	r3, [r0, #0]
 800655c:	cc02      	ldmia	r4!, {r1}
 800655e:	6843      	ldr	r3, [r0, #4]
 8006560:	0c09      	lsrs	r1, r1, #16
 8006562:	4371      	muls	r1, r6
 8006564:	b29b      	uxth	r3, r3
 8006566:	0c3f      	lsrs	r7, r7, #16
 8006568:	18cb      	adds	r3, r1, r3
 800656a:	9a04      	ldr	r2, [sp, #16]
 800656c:	19db      	adds	r3, r3, r7
 800656e:	0c1f      	lsrs	r7, r3, #16
 8006570:	3004      	adds	r0, #4
 8006572:	42a2      	cmp	r2, r4
 8006574:	d8e7      	bhi.n	8006546 <__multiply+0x10e>
 8006576:	4662      	mov	r2, ip
 8006578:	9905      	ldr	r1, [sp, #20]
 800657a:	5053      	str	r3, [r2, r1]
 800657c:	9b00      	ldr	r3, [sp, #0]
 800657e:	3304      	adds	r3, #4
 8006580:	9300      	str	r3, [sp, #0]
 8006582:	2304      	movs	r3, #4
 8006584:	449c      	add	ip, r3
 8006586:	e79c      	b.n	80064c2 <__multiply+0x8a>
 8006588:	9b02      	ldr	r3, [sp, #8]
 800658a:	3b01      	subs	r3, #1
 800658c:	9302      	str	r3, [sp, #8]
 800658e:	e79c      	b.n	80064ca <__multiply+0x92>
 8006590:	080076a3 	.word	0x080076a3
 8006594:	08007714 	.word	0x08007714

08006598 <__pow5mult>:
 8006598:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800659a:	2303      	movs	r3, #3
 800659c:	0015      	movs	r5, r2
 800659e:	0007      	movs	r7, r0
 80065a0:	000e      	movs	r6, r1
 80065a2:	401a      	ands	r2, r3
 80065a4:	421d      	tst	r5, r3
 80065a6:	d008      	beq.n	80065ba <__pow5mult+0x22>
 80065a8:	4925      	ldr	r1, [pc, #148]	; (8006640 <__pow5mult+0xa8>)
 80065aa:	3a01      	subs	r2, #1
 80065ac:	0092      	lsls	r2, r2, #2
 80065ae:	5852      	ldr	r2, [r2, r1]
 80065b0:	2300      	movs	r3, #0
 80065b2:	0031      	movs	r1, r6
 80065b4:	f7ff fe9e 	bl	80062f4 <__multadd>
 80065b8:	0006      	movs	r6, r0
 80065ba:	10ad      	asrs	r5, r5, #2
 80065bc:	d03d      	beq.n	800663a <__pow5mult+0xa2>
 80065be:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80065c0:	2c00      	cmp	r4, #0
 80065c2:	d10f      	bne.n	80065e4 <__pow5mult+0x4c>
 80065c4:	2010      	movs	r0, #16
 80065c6:	f7ff fe0f 	bl	80061e8 <malloc>
 80065ca:	1e02      	subs	r2, r0, #0
 80065cc:	6278      	str	r0, [r7, #36]	; 0x24
 80065ce:	d105      	bne.n	80065dc <__pow5mult+0x44>
 80065d0:	21d7      	movs	r1, #215	; 0xd7
 80065d2:	4b1c      	ldr	r3, [pc, #112]	; (8006644 <__pow5mult+0xac>)
 80065d4:	481c      	ldr	r0, [pc, #112]	; (8006648 <__pow5mult+0xb0>)
 80065d6:	0049      	lsls	r1, r1, #1
 80065d8:	f000 fd1a 	bl	8007010 <__assert_func>
 80065dc:	6044      	str	r4, [r0, #4]
 80065de:	6084      	str	r4, [r0, #8]
 80065e0:	6004      	str	r4, [r0, #0]
 80065e2:	60c4      	str	r4, [r0, #12]
 80065e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e6:	689c      	ldr	r4, [r3, #8]
 80065e8:	9301      	str	r3, [sp, #4]
 80065ea:	2c00      	cmp	r4, #0
 80065ec:	d108      	bne.n	8006600 <__pow5mult+0x68>
 80065ee:	0038      	movs	r0, r7
 80065f0:	4916      	ldr	r1, [pc, #88]	; (800664c <__pow5mult+0xb4>)
 80065f2:	f7ff ff0b 	bl	800640c <__i2b>
 80065f6:	9b01      	ldr	r3, [sp, #4]
 80065f8:	0004      	movs	r4, r0
 80065fa:	6098      	str	r0, [r3, #8]
 80065fc:	2300      	movs	r3, #0
 80065fe:	6003      	str	r3, [r0, #0]
 8006600:	2301      	movs	r3, #1
 8006602:	421d      	tst	r5, r3
 8006604:	d00a      	beq.n	800661c <__pow5mult+0x84>
 8006606:	0031      	movs	r1, r6
 8006608:	0022      	movs	r2, r4
 800660a:	0038      	movs	r0, r7
 800660c:	f7ff ff14 	bl	8006438 <__multiply>
 8006610:	0031      	movs	r1, r6
 8006612:	9001      	str	r0, [sp, #4]
 8006614:	0038      	movs	r0, r7
 8006616:	f7ff fe49 	bl	80062ac <_Bfree>
 800661a:	9e01      	ldr	r6, [sp, #4]
 800661c:	106d      	asrs	r5, r5, #1
 800661e:	d00c      	beq.n	800663a <__pow5mult+0xa2>
 8006620:	6820      	ldr	r0, [r4, #0]
 8006622:	2800      	cmp	r0, #0
 8006624:	d107      	bne.n	8006636 <__pow5mult+0x9e>
 8006626:	0022      	movs	r2, r4
 8006628:	0021      	movs	r1, r4
 800662a:	0038      	movs	r0, r7
 800662c:	f7ff ff04 	bl	8006438 <__multiply>
 8006630:	2300      	movs	r3, #0
 8006632:	6020      	str	r0, [r4, #0]
 8006634:	6003      	str	r3, [r0, #0]
 8006636:	0004      	movs	r4, r0
 8006638:	e7e2      	b.n	8006600 <__pow5mult+0x68>
 800663a:	0030      	movs	r0, r6
 800663c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800663e:	46c0      	nop			; (mov r8, r8)
 8006640:	08007868 	.word	0x08007868
 8006644:	0800762d 	.word	0x0800762d
 8006648:	08007714 	.word	0x08007714
 800664c:	00000271 	.word	0x00000271

08006650 <__lshift>:
 8006650:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006652:	000c      	movs	r4, r1
 8006654:	0017      	movs	r7, r2
 8006656:	6923      	ldr	r3, [r4, #16]
 8006658:	1155      	asrs	r5, r2, #5
 800665a:	b087      	sub	sp, #28
 800665c:	18eb      	adds	r3, r5, r3
 800665e:	9302      	str	r3, [sp, #8]
 8006660:	3301      	adds	r3, #1
 8006662:	9301      	str	r3, [sp, #4]
 8006664:	6849      	ldr	r1, [r1, #4]
 8006666:	68a3      	ldr	r3, [r4, #8]
 8006668:	9004      	str	r0, [sp, #16]
 800666a:	9a01      	ldr	r2, [sp, #4]
 800666c:	4293      	cmp	r3, r2
 800666e:	db11      	blt.n	8006694 <__lshift+0x44>
 8006670:	9804      	ldr	r0, [sp, #16]
 8006672:	f7ff fdd7 	bl	8006224 <_Balloc>
 8006676:	0002      	movs	r2, r0
 8006678:	2300      	movs	r3, #0
 800667a:	3214      	adds	r2, #20
 800667c:	0006      	movs	r6, r0
 800667e:	0011      	movs	r1, r2
 8006680:	9203      	str	r2, [sp, #12]
 8006682:	4298      	cmp	r0, r3
 8006684:	d10d      	bne.n	80066a2 <__lshift+0x52>
 8006686:	21da      	movs	r1, #218	; 0xda
 8006688:	0002      	movs	r2, r0
 800668a:	4b27      	ldr	r3, [pc, #156]	; (8006728 <__lshift+0xd8>)
 800668c:	4827      	ldr	r0, [pc, #156]	; (800672c <__lshift+0xdc>)
 800668e:	31ff      	adds	r1, #255	; 0xff
 8006690:	f000 fcbe 	bl	8007010 <__assert_func>
 8006694:	3101      	adds	r1, #1
 8006696:	005b      	lsls	r3, r3, #1
 8006698:	e7e7      	b.n	800666a <__lshift+0x1a>
 800669a:	2200      	movs	r2, #0
 800669c:	0098      	lsls	r0, r3, #2
 800669e:	500a      	str	r2, [r1, r0]
 80066a0:	3301      	adds	r3, #1
 80066a2:	42ab      	cmp	r3, r5
 80066a4:	dbf9      	blt.n	800669a <__lshift+0x4a>
 80066a6:	43eb      	mvns	r3, r5
 80066a8:	17db      	asrs	r3, r3, #31
 80066aa:	401d      	ands	r5, r3
 80066ac:	9b03      	ldr	r3, [sp, #12]
 80066ae:	00ad      	lsls	r5, r5, #2
 80066b0:	211f      	movs	r1, #31
 80066b2:	0038      	movs	r0, r7
 80066b4:	195d      	adds	r5, r3, r5
 80066b6:	0023      	movs	r3, r4
 80066b8:	6922      	ldr	r2, [r4, #16]
 80066ba:	3314      	adds	r3, #20
 80066bc:	0092      	lsls	r2, r2, #2
 80066be:	4008      	ands	r0, r1
 80066c0:	4684      	mov	ip, r0
 80066c2:	189a      	adds	r2, r3, r2
 80066c4:	420f      	tst	r7, r1
 80066c6:	d02a      	beq.n	800671e <__lshift+0xce>
 80066c8:	3101      	adds	r1, #1
 80066ca:	1a09      	subs	r1, r1, r0
 80066cc:	9105      	str	r1, [sp, #20]
 80066ce:	2100      	movs	r1, #0
 80066d0:	9503      	str	r5, [sp, #12]
 80066d2:	4667      	mov	r7, ip
 80066d4:	6818      	ldr	r0, [r3, #0]
 80066d6:	40b8      	lsls	r0, r7
 80066d8:	4301      	orrs	r1, r0
 80066da:	9803      	ldr	r0, [sp, #12]
 80066dc:	c002      	stmia	r0!, {r1}
 80066de:	cb02      	ldmia	r3!, {r1}
 80066e0:	9003      	str	r0, [sp, #12]
 80066e2:	9805      	ldr	r0, [sp, #20]
 80066e4:	40c1      	lsrs	r1, r0
 80066e6:	429a      	cmp	r2, r3
 80066e8:	d8f3      	bhi.n	80066d2 <__lshift+0x82>
 80066ea:	0020      	movs	r0, r4
 80066ec:	3015      	adds	r0, #21
 80066ee:	2304      	movs	r3, #4
 80066f0:	4282      	cmp	r2, r0
 80066f2:	d304      	bcc.n	80066fe <__lshift+0xae>
 80066f4:	1b13      	subs	r3, r2, r4
 80066f6:	3b15      	subs	r3, #21
 80066f8:	089b      	lsrs	r3, r3, #2
 80066fa:	3301      	adds	r3, #1
 80066fc:	009b      	lsls	r3, r3, #2
 80066fe:	50e9      	str	r1, [r5, r3]
 8006700:	2900      	cmp	r1, #0
 8006702:	d002      	beq.n	800670a <__lshift+0xba>
 8006704:	9b02      	ldr	r3, [sp, #8]
 8006706:	3302      	adds	r3, #2
 8006708:	9301      	str	r3, [sp, #4]
 800670a:	9b01      	ldr	r3, [sp, #4]
 800670c:	9804      	ldr	r0, [sp, #16]
 800670e:	3b01      	subs	r3, #1
 8006710:	0021      	movs	r1, r4
 8006712:	6133      	str	r3, [r6, #16]
 8006714:	f7ff fdca 	bl	80062ac <_Bfree>
 8006718:	0030      	movs	r0, r6
 800671a:	b007      	add	sp, #28
 800671c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800671e:	cb02      	ldmia	r3!, {r1}
 8006720:	c502      	stmia	r5!, {r1}
 8006722:	429a      	cmp	r2, r3
 8006724:	d8fb      	bhi.n	800671e <__lshift+0xce>
 8006726:	e7f0      	b.n	800670a <__lshift+0xba>
 8006728:	080076a3 	.word	0x080076a3
 800672c:	08007714 	.word	0x08007714

08006730 <__mcmp>:
 8006730:	6902      	ldr	r2, [r0, #16]
 8006732:	690b      	ldr	r3, [r1, #16]
 8006734:	b530      	push	{r4, r5, lr}
 8006736:	0004      	movs	r4, r0
 8006738:	1ad0      	subs	r0, r2, r3
 800673a:	429a      	cmp	r2, r3
 800673c:	d10d      	bne.n	800675a <__mcmp+0x2a>
 800673e:	009b      	lsls	r3, r3, #2
 8006740:	3414      	adds	r4, #20
 8006742:	3114      	adds	r1, #20
 8006744:	18e2      	adds	r2, r4, r3
 8006746:	18c9      	adds	r1, r1, r3
 8006748:	3a04      	subs	r2, #4
 800674a:	3904      	subs	r1, #4
 800674c:	6815      	ldr	r5, [r2, #0]
 800674e:	680b      	ldr	r3, [r1, #0]
 8006750:	429d      	cmp	r5, r3
 8006752:	d003      	beq.n	800675c <__mcmp+0x2c>
 8006754:	2001      	movs	r0, #1
 8006756:	429d      	cmp	r5, r3
 8006758:	d303      	bcc.n	8006762 <__mcmp+0x32>
 800675a:	bd30      	pop	{r4, r5, pc}
 800675c:	4294      	cmp	r4, r2
 800675e:	d3f3      	bcc.n	8006748 <__mcmp+0x18>
 8006760:	e7fb      	b.n	800675a <__mcmp+0x2a>
 8006762:	4240      	negs	r0, r0
 8006764:	e7f9      	b.n	800675a <__mcmp+0x2a>
	...

08006768 <__mdiff>:
 8006768:	b5f0      	push	{r4, r5, r6, r7, lr}
 800676a:	000e      	movs	r6, r1
 800676c:	0007      	movs	r7, r0
 800676e:	0011      	movs	r1, r2
 8006770:	0030      	movs	r0, r6
 8006772:	b087      	sub	sp, #28
 8006774:	0014      	movs	r4, r2
 8006776:	f7ff ffdb 	bl	8006730 <__mcmp>
 800677a:	1e05      	subs	r5, r0, #0
 800677c:	d110      	bne.n	80067a0 <__mdiff+0x38>
 800677e:	0001      	movs	r1, r0
 8006780:	0038      	movs	r0, r7
 8006782:	f7ff fd4f 	bl	8006224 <_Balloc>
 8006786:	1e02      	subs	r2, r0, #0
 8006788:	d104      	bne.n	8006794 <__mdiff+0x2c>
 800678a:	4b40      	ldr	r3, [pc, #256]	; (800688c <__mdiff+0x124>)
 800678c:	4940      	ldr	r1, [pc, #256]	; (8006890 <__mdiff+0x128>)
 800678e:	4841      	ldr	r0, [pc, #260]	; (8006894 <__mdiff+0x12c>)
 8006790:	f000 fc3e 	bl	8007010 <__assert_func>
 8006794:	2301      	movs	r3, #1
 8006796:	6145      	str	r5, [r0, #20]
 8006798:	6103      	str	r3, [r0, #16]
 800679a:	0010      	movs	r0, r2
 800679c:	b007      	add	sp, #28
 800679e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067a0:	2301      	movs	r3, #1
 80067a2:	9301      	str	r3, [sp, #4]
 80067a4:	2800      	cmp	r0, #0
 80067a6:	db04      	blt.n	80067b2 <__mdiff+0x4a>
 80067a8:	0023      	movs	r3, r4
 80067aa:	0034      	movs	r4, r6
 80067ac:	001e      	movs	r6, r3
 80067ae:	2300      	movs	r3, #0
 80067b0:	9301      	str	r3, [sp, #4]
 80067b2:	0038      	movs	r0, r7
 80067b4:	6861      	ldr	r1, [r4, #4]
 80067b6:	f7ff fd35 	bl	8006224 <_Balloc>
 80067ba:	1e02      	subs	r2, r0, #0
 80067bc:	d103      	bne.n	80067c6 <__mdiff+0x5e>
 80067be:	2190      	movs	r1, #144	; 0x90
 80067c0:	4b32      	ldr	r3, [pc, #200]	; (800688c <__mdiff+0x124>)
 80067c2:	0089      	lsls	r1, r1, #2
 80067c4:	e7e3      	b.n	800678e <__mdiff+0x26>
 80067c6:	9b01      	ldr	r3, [sp, #4]
 80067c8:	2700      	movs	r7, #0
 80067ca:	60c3      	str	r3, [r0, #12]
 80067cc:	6920      	ldr	r0, [r4, #16]
 80067ce:	3414      	adds	r4, #20
 80067d0:	9401      	str	r4, [sp, #4]
 80067d2:	9b01      	ldr	r3, [sp, #4]
 80067d4:	0084      	lsls	r4, r0, #2
 80067d6:	191b      	adds	r3, r3, r4
 80067d8:	0034      	movs	r4, r6
 80067da:	9302      	str	r3, [sp, #8]
 80067dc:	6933      	ldr	r3, [r6, #16]
 80067de:	3414      	adds	r4, #20
 80067e0:	0099      	lsls	r1, r3, #2
 80067e2:	1863      	adds	r3, r4, r1
 80067e4:	9303      	str	r3, [sp, #12]
 80067e6:	0013      	movs	r3, r2
 80067e8:	3314      	adds	r3, #20
 80067ea:	469c      	mov	ip, r3
 80067ec:	9305      	str	r3, [sp, #20]
 80067ee:	9b01      	ldr	r3, [sp, #4]
 80067f0:	9304      	str	r3, [sp, #16]
 80067f2:	9b04      	ldr	r3, [sp, #16]
 80067f4:	cc02      	ldmia	r4!, {r1}
 80067f6:	cb20      	ldmia	r3!, {r5}
 80067f8:	9304      	str	r3, [sp, #16]
 80067fa:	b2ab      	uxth	r3, r5
 80067fc:	19df      	adds	r7, r3, r7
 80067fe:	b28b      	uxth	r3, r1
 8006800:	1afb      	subs	r3, r7, r3
 8006802:	0c2d      	lsrs	r5, r5, #16
 8006804:	0c09      	lsrs	r1, r1, #16
 8006806:	1a69      	subs	r1, r5, r1
 8006808:	141d      	asrs	r5, r3, #16
 800680a:	1949      	adds	r1, r1, r5
 800680c:	140f      	asrs	r7, r1, #16
 800680e:	b29b      	uxth	r3, r3
 8006810:	0409      	lsls	r1, r1, #16
 8006812:	430b      	orrs	r3, r1
 8006814:	4661      	mov	r1, ip
 8006816:	c108      	stmia	r1!, {r3}
 8006818:	9b03      	ldr	r3, [sp, #12]
 800681a:	468c      	mov	ip, r1
 800681c:	42a3      	cmp	r3, r4
 800681e:	d8e8      	bhi.n	80067f2 <__mdiff+0x8a>
 8006820:	0031      	movs	r1, r6
 8006822:	9c03      	ldr	r4, [sp, #12]
 8006824:	3115      	adds	r1, #21
 8006826:	2304      	movs	r3, #4
 8006828:	428c      	cmp	r4, r1
 800682a:	d304      	bcc.n	8006836 <__mdiff+0xce>
 800682c:	1ba3      	subs	r3, r4, r6
 800682e:	3b15      	subs	r3, #21
 8006830:	089b      	lsrs	r3, r3, #2
 8006832:	3301      	adds	r3, #1
 8006834:	009b      	lsls	r3, r3, #2
 8006836:	9901      	ldr	r1, [sp, #4]
 8006838:	18cc      	adds	r4, r1, r3
 800683a:	9905      	ldr	r1, [sp, #20]
 800683c:	0026      	movs	r6, r4
 800683e:	18cb      	adds	r3, r1, r3
 8006840:	469c      	mov	ip, r3
 8006842:	9902      	ldr	r1, [sp, #8]
 8006844:	428e      	cmp	r6, r1
 8006846:	d310      	bcc.n	800686a <__mdiff+0x102>
 8006848:	9e02      	ldr	r6, [sp, #8]
 800684a:	1ee5      	subs	r5, r4, #3
 800684c:	2100      	movs	r1, #0
 800684e:	42ae      	cmp	r6, r5
 8006850:	d304      	bcc.n	800685c <__mdiff+0xf4>
 8006852:	0031      	movs	r1, r6
 8006854:	3103      	adds	r1, #3
 8006856:	1b09      	subs	r1, r1, r4
 8006858:	0889      	lsrs	r1, r1, #2
 800685a:	0089      	lsls	r1, r1, #2
 800685c:	185b      	adds	r3, r3, r1
 800685e:	3b04      	subs	r3, #4
 8006860:	6819      	ldr	r1, [r3, #0]
 8006862:	2900      	cmp	r1, #0
 8006864:	d00f      	beq.n	8006886 <__mdiff+0x11e>
 8006866:	6110      	str	r0, [r2, #16]
 8006868:	e797      	b.n	800679a <__mdiff+0x32>
 800686a:	ce02      	ldmia	r6!, {r1}
 800686c:	b28d      	uxth	r5, r1
 800686e:	19ed      	adds	r5, r5, r7
 8006870:	0c0f      	lsrs	r7, r1, #16
 8006872:	1429      	asrs	r1, r5, #16
 8006874:	1879      	adds	r1, r7, r1
 8006876:	140f      	asrs	r7, r1, #16
 8006878:	b2ad      	uxth	r5, r5
 800687a:	0409      	lsls	r1, r1, #16
 800687c:	430d      	orrs	r5, r1
 800687e:	4661      	mov	r1, ip
 8006880:	c120      	stmia	r1!, {r5}
 8006882:	468c      	mov	ip, r1
 8006884:	e7dd      	b.n	8006842 <__mdiff+0xda>
 8006886:	3801      	subs	r0, #1
 8006888:	e7e9      	b.n	800685e <__mdiff+0xf6>
 800688a:	46c0      	nop			; (mov r8, r8)
 800688c:	080076a3 	.word	0x080076a3
 8006890:	00000232 	.word	0x00000232
 8006894:	08007714 	.word	0x08007714

08006898 <__d2b>:
 8006898:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800689a:	2101      	movs	r1, #1
 800689c:	0014      	movs	r4, r2
 800689e:	001e      	movs	r6, r3
 80068a0:	9f08      	ldr	r7, [sp, #32]
 80068a2:	f7ff fcbf 	bl	8006224 <_Balloc>
 80068a6:	1e05      	subs	r5, r0, #0
 80068a8:	d105      	bne.n	80068b6 <__d2b+0x1e>
 80068aa:	0002      	movs	r2, r0
 80068ac:	4b26      	ldr	r3, [pc, #152]	; (8006948 <__d2b+0xb0>)
 80068ae:	4927      	ldr	r1, [pc, #156]	; (800694c <__d2b+0xb4>)
 80068b0:	4827      	ldr	r0, [pc, #156]	; (8006950 <__d2b+0xb8>)
 80068b2:	f000 fbad 	bl	8007010 <__assert_func>
 80068b6:	0333      	lsls	r3, r6, #12
 80068b8:	0076      	lsls	r6, r6, #1
 80068ba:	0b1b      	lsrs	r3, r3, #12
 80068bc:	0d76      	lsrs	r6, r6, #21
 80068be:	d124      	bne.n	800690a <__d2b+0x72>
 80068c0:	9301      	str	r3, [sp, #4]
 80068c2:	2c00      	cmp	r4, #0
 80068c4:	d027      	beq.n	8006916 <__d2b+0x7e>
 80068c6:	4668      	mov	r0, sp
 80068c8:	9400      	str	r4, [sp, #0]
 80068ca:	f7ff fd71 	bl	80063b0 <__lo0bits>
 80068ce:	9c00      	ldr	r4, [sp, #0]
 80068d0:	2800      	cmp	r0, #0
 80068d2:	d01e      	beq.n	8006912 <__d2b+0x7a>
 80068d4:	9b01      	ldr	r3, [sp, #4]
 80068d6:	2120      	movs	r1, #32
 80068d8:	001a      	movs	r2, r3
 80068da:	1a09      	subs	r1, r1, r0
 80068dc:	408a      	lsls	r2, r1
 80068de:	40c3      	lsrs	r3, r0
 80068e0:	4322      	orrs	r2, r4
 80068e2:	616a      	str	r2, [r5, #20]
 80068e4:	9301      	str	r3, [sp, #4]
 80068e6:	9c01      	ldr	r4, [sp, #4]
 80068e8:	61ac      	str	r4, [r5, #24]
 80068ea:	1e63      	subs	r3, r4, #1
 80068ec:	419c      	sbcs	r4, r3
 80068ee:	3401      	adds	r4, #1
 80068f0:	612c      	str	r4, [r5, #16]
 80068f2:	2e00      	cmp	r6, #0
 80068f4:	d018      	beq.n	8006928 <__d2b+0x90>
 80068f6:	4b17      	ldr	r3, [pc, #92]	; (8006954 <__d2b+0xbc>)
 80068f8:	18f6      	adds	r6, r6, r3
 80068fa:	2335      	movs	r3, #53	; 0x35
 80068fc:	1836      	adds	r6, r6, r0
 80068fe:	1a18      	subs	r0, r3, r0
 8006900:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006902:	603e      	str	r6, [r7, #0]
 8006904:	6018      	str	r0, [r3, #0]
 8006906:	0028      	movs	r0, r5
 8006908:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800690a:	2280      	movs	r2, #128	; 0x80
 800690c:	0352      	lsls	r2, r2, #13
 800690e:	4313      	orrs	r3, r2
 8006910:	e7d6      	b.n	80068c0 <__d2b+0x28>
 8006912:	616c      	str	r4, [r5, #20]
 8006914:	e7e7      	b.n	80068e6 <__d2b+0x4e>
 8006916:	a801      	add	r0, sp, #4
 8006918:	f7ff fd4a 	bl	80063b0 <__lo0bits>
 800691c:	2401      	movs	r4, #1
 800691e:	9b01      	ldr	r3, [sp, #4]
 8006920:	612c      	str	r4, [r5, #16]
 8006922:	616b      	str	r3, [r5, #20]
 8006924:	3020      	adds	r0, #32
 8006926:	e7e4      	b.n	80068f2 <__d2b+0x5a>
 8006928:	4b0b      	ldr	r3, [pc, #44]	; (8006958 <__d2b+0xc0>)
 800692a:	18c0      	adds	r0, r0, r3
 800692c:	4b0b      	ldr	r3, [pc, #44]	; (800695c <__d2b+0xc4>)
 800692e:	6038      	str	r0, [r7, #0]
 8006930:	18e3      	adds	r3, r4, r3
 8006932:	009b      	lsls	r3, r3, #2
 8006934:	18eb      	adds	r3, r5, r3
 8006936:	6958      	ldr	r0, [r3, #20]
 8006938:	f7ff fd20 	bl	800637c <__hi0bits>
 800693c:	0164      	lsls	r4, r4, #5
 800693e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006940:	1a24      	subs	r4, r4, r0
 8006942:	601c      	str	r4, [r3, #0]
 8006944:	e7df      	b.n	8006906 <__d2b+0x6e>
 8006946:	46c0      	nop			; (mov r8, r8)
 8006948:	080076a3 	.word	0x080076a3
 800694c:	0000030a 	.word	0x0000030a
 8006950:	08007714 	.word	0x08007714
 8006954:	fffffbcd 	.word	0xfffffbcd
 8006958:	fffffbce 	.word	0xfffffbce
 800695c:	3fffffff 	.word	0x3fffffff

08006960 <_calloc_r>:
 8006960:	434a      	muls	r2, r1
 8006962:	b570      	push	{r4, r5, r6, lr}
 8006964:	0011      	movs	r1, r2
 8006966:	0015      	movs	r5, r2
 8006968:	f000 f852 	bl	8006a10 <_malloc_r>
 800696c:	1e04      	subs	r4, r0, #0
 800696e:	d003      	beq.n	8006978 <_calloc_r+0x18>
 8006970:	002a      	movs	r2, r5
 8006972:	2100      	movs	r1, #0
 8006974:	f7fd ffe8 	bl	8004948 <memset>
 8006978:	0020      	movs	r0, r4
 800697a:	bd70      	pop	{r4, r5, r6, pc}

0800697c <_free_r>:
 800697c:	b570      	push	{r4, r5, r6, lr}
 800697e:	0005      	movs	r5, r0
 8006980:	2900      	cmp	r1, #0
 8006982:	d010      	beq.n	80069a6 <_free_r+0x2a>
 8006984:	1f0c      	subs	r4, r1, #4
 8006986:	6823      	ldr	r3, [r4, #0]
 8006988:	2b00      	cmp	r3, #0
 800698a:	da00      	bge.n	800698e <_free_r+0x12>
 800698c:	18e4      	adds	r4, r4, r3
 800698e:	0028      	movs	r0, r5
 8006990:	f000 fcdc 	bl	800734c <__malloc_lock>
 8006994:	4a1d      	ldr	r2, [pc, #116]	; (8006a0c <_free_r+0x90>)
 8006996:	6813      	ldr	r3, [r2, #0]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d105      	bne.n	80069a8 <_free_r+0x2c>
 800699c:	6063      	str	r3, [r4, #4]
 800699e:	6014      	str	r4, [r2, #0]
 80069a0:	0028      	movs	r0, r5
 80069a2:	f000 fcdb 	bl	800735c <__malloc_unlock>
 80069a6:	bd70      	pop	{r4, r5, r6, pc}
 80069a8:	42a3      	cmp	r3, r4
 80069aa:	d908      	bls.n	80069be <_free_r+0x42>
 80069ac:	6821      	ldr	r1, [r4, #0]
 80069ae:	1860      	adds	r0, r4, r1
 80069b0:	4283      	cmp	r3, r0
 80069b2:	d1f3      	bne.n	800699c <_free_r+0x20>
 80069b4:	6818      	ldr	r0, [r3, #0]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	1841      	adds	r1, r0, r1
 80069ba:	6021      	str	r1, [r4, #0]
 80069bc:	e7ee      	b.n	800699c <_free_r+0x20>
 80069be:	001a      	movs	r2, r3
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d001      	beq.n	80069ca <_free_r+0x4e>
 80069c6:	42a3      	cmp	r3, r4
 80069c8:	d9f9      	bls.n	80069be <_free_r+0x42>
 80069ca:	6811      	ldr	r1, [r2, #0]
 80069cc:	1850      	adds	r0, r2, r1
 80069ce:	42a0      	cmp	r0, r4
 80069d0:	d10b      	bne.n	80069ea <_free_r+0x6e>
 80069d2:	6820      	ldr	r0, [r4, #0]
 80069d4:	1809      	adds	r1, r1, r0
 80069d6:	1850      	adds	r0, r2, r1
 80069d8:	6011      	str	r1, [r2, #0]
 80069da:	4283      	cmp	r3, r0
 80069dc:	d1e0      	bne.n	80069a0 <_free_r+0x24>
 80069de:	6818      	ldr	r0, [r3, #0]
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	1841      	adds	r1, r0, r1
 80069e4:	6011      	str	r1, [r2, #0]
 80069e6:	6053      	str	r3, [r2, #4]
 80069e8:	e7da      	b.n	80069a0 <_free_r+0x24>
 80069ea:	42a0      	cmp	r0, r4
 80069ec:	d902      	bls.n	80069f4 <_free_r+0x78>
 80069ee:	230c      	movs	r3, #12
 80069f0:	602b      	str	r3, [r5, #0]
 80069f2:	e7d5      	b.n	80069a0 <_free_r+0x24>
 80069f4:	6821      	ldr	r1, [r4, #0]
 80069f6:	1860      	adds	r0, r4, r1
 80069f8:	4283      	cmp	r3, r0
 80069fa:	d103      	bne.n	8006a04 <_free_r+0x88>
 80069fc:	6818      	ldr	r0, [r3, #0]
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	1841      	adds	r1, r0, r1
 8006a02:	6021      	str	r1, [r4, #0]
 8006a04:	6063      	str	r3, [r4, #4]
 8006a06:	6054      	str	r4, [r2, #4]
 8006a08:	e7ca      	b.n	80069a0 <_free_r+0x24>
 8006a0a:	46c0      	nop			; (mov r8, r8)
 8006a0c:	200001fc 	.word	0x200001fc

08006a10 <_malloc_r>:
 8006a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a12:	2303      	movs	r3, #3
 8006a14:	1ccd      	adds	r5, r1, #3
 8006a16:	439d      	bics	r5, r3
 8006a18:	3508      	adds	r5, #8
 8006a1a:	0006      	movs	r6, r0
 8006a1c:	2d0c      	cmp	r5, #12
 8006a1e:	d21f      	bcs.n	8006a60 <_malloc_r+0x50>
 8006a20:	250c      	movs	r5, #12
 8006a22:	42a9      	cmp	r1, r5
 8006a24:	d81e      	bhi.n	8006a64 <_malloc_r+0x54>
 8006a26:	0030      	movs	r0, r6
 8006a28:	f000 fc90 	bl	800734c <__malloc_lock>
 8006a2c:	4925      	ldr	r1, [pc, #148]	; (8006ac4 <_malloc_r+0xb4>)
 8006a2e:	680a      	ldr	r2, [r1, #0]
 8006a30:	0014      	movs	r4, r2
 8006a32:	2c00      	cmp	r4, #0
 8006a34:	d11a      	bne.n	8006a6c <_malloc_r+0x5c>
 8006a36:	4f24      	ldr	r7, [pc, #144]	; (8006ac8 <_malloc_r+0xb8>)
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d104      	bne.n	8006a48 <_malloc_r+0x38>
 8006a3e:	0021      	movs	r1, r4
 8006a40:	0030      	movs	r0, r6
 8006a42:	f000 f9a5 	bl	8006d90 <_sbrk_r>
 8006a46:	6038      	str	r0, [r7, #0]
 8006a48:	0029      	movs	r1, r5
 8006a4a:	0030      	movs	r0, r6
 8006a4c:	f000 f9a0 	bl	8006d90 <_sbrk_r>
 8006a50:	1c43      	adds	r3, r0, #1
 8006a52:	d12b      	bne.n	8006aac <_malloc_r+0x9c>
 8006a54:	230c      	movs	r3, #12
 8006a56:	0030      	movs	r0, r6
 8006a58:	6033      	str	r3, [r6, #0]
 8006a5a:	f000 fc7f 	bl	800735c <__malloc_unlock>
 8006a5e:	e003      	b.n	8006a68 <_malloc_r+0x58>
 8006a60:	2d00      	cmp	r5, #0
 8006a62:	dade      	bge.n	8006a22 <_malloc_r+0x12>
 8006a64:	230c      	movs	r3, #12
 8006a66:	6033      	str	r3, [r6, #0]
 8006a68:	2000      	movs	r0, #0
 8006a6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a6c:	6823      	ldr	r3, [r4, #0]
 8006a6e:	1b5b      	subs	r3, r3, r5
 8006a70:	d419      	bmi.n	8006aa6 <_malloc_r+0x96>
 8006a72:	2b0b      	cmp	r3, #11
 8006a74:	d903      	bls.n	8006a7e <_malloc_r+0x6e>
 8006a76:	6023      	str	r3, [r4, #0]
 8006a78:	18e4      	adds	r4, r4, r3
 8006a7a:	6025      	str	r5, [r4, #0]
 8006a7c:	e003      	b.n	8006a86 <_malloc_r+0x76>
 8006a7e:	6863      	ldr	r3, [r4, #4]
 8006a80:	42a2      	cmp	r2, r4
 8006a82:	d10e      	bne.n	8006aa2 <_malloc_r+0x92>
 8006a84:	600b      	str	r3, [r1, #0]
 8006a86:	0030      	movs	r0, r6
 8006a88:	f000 fc68 	bl	800735c <__malloc_unlock>
 8006a8c:	0020      	movs	r0, r4
 8006a8e:	2207      	movs	r2, #7
 8006a90:	300b      	adds	r0, #11
 8006a92:	1d23      	adds	r3, r4, #4
 8006a94:	4390      	bics	r0, r2
 8006a96:	1ac2      	subs	r2, r0, r3
 8006a98:	4298      	cmp	r0, r3
 8006a9a:	d0e6      	beq.n	8006a6a <_malloc_r+0x5a>
 8006a9c:	1a1b      	subs	r3, r3, r0
 8006a9e:	50a3      	str	r3, [r4, r2]
 8006aa0:	e7e3      	b.n	8006a6a <_malloc_r+0x5a>
 8006aa2:	6053      	str	r3, [r2, #4]
 8006aa4:	e7ef      	b.n	8006a86 <_malloc_r+0x76>
 8006aa6:	0022      	movs	r2, r4
 8006aa8:	6864      	ldr	r4, [r4, #4]
 8006aaa:	e7c2      	b.n	8006a32 <_malloc_r+0x22>
 8006aac:	2303      	movs	r3, #3
 8006aae:	1cc4      	adds	r4, r0, #3
 8006ab0:	439c      	bics	r4, r3
 8006ab2:	42a0      	cmp	r0, r4
 8006ab4:	d0e1      	beq.n	8006a7a <_malloc_r+0x6a>
 8006ab6:	1a21      	subs	r1, r4, r0
 8006ab8:	0030      	movs	r0, r6
 8006aba:	f000 f969 	bl	8006d90 <_sbrk_r>
 8006abe:	1c43      	adds	r3, r0, #1
 8006ac0:	d1db      	bne.n	8006a7a <_malloc_r+0x6a>
 8006ac2:	e7c7      	b.n	8006a54 <_malloc_r+0x44>
 8006ac4:	200001fc 	.word	0x200001fc
 8006ac8:	20000200 	.word	0x20000200

08006acc <__sfputc_r>:
 8006acc:	6893      	ldr	r3, [r2, #8]
 8006ace:	b510      	push	{r4, lr}
 8006ad0:	3b01      	subs	r3, #1
 8006ad2:	6093      	str	r3, [r2, #8]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	da04      	bge.n	8006ae2 <__sfputc_r+0x16>
 8006ad8:	6994      	ldr	r4, [r2, #24]
 8006ada:	42a3      	cmp	r3, r4
 8006adc:	db07      	blt.n	8006aee <__sfputc_r+0x22>
 8006ade:	290a      	cmp	r1, #10
 8006ae0:	d005      	beq.n	8006aee <__sfputc_r+0x22>
 8006ae2:	6813      	ldr	r3, [r2, #0]
 8006ae4:	1c58      	adds	r0, r3, #1
 8006ae6:	6010      	str	r0, [r2, #0]
 8006ae8:	7019      	strb	r1, [r3, #0]
 8006aea:	0008      	movs	r0, r1
 8006aec:	bd10      	pop	{r4, pc}
 8006aee:	f000 f9ad 	bl	8006e4c <__swbuf_r>
 8006af2:	0001      	movs	r1, r0
 8006af4:	e7f9      	b.n	8006aea <__sfputc_r+0x1e>

08006af6 <__sfputs_r>:
 8006af6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006af8:	0006      	movs	r6, r0
 8006afa:	000f      	movs	r7, r1
 8006afc:	0014      	movs	r4, r2
 8006afe:	18d5      	adds	r5, r2, r3
 8006b00:	42ac      	cmp	r4, r5
 8006b02:	d101      	bne.n	8006b08 <__sfputs_r+0x12>
 8006b04:	2000      	movs	r0, #0
 8006b06:	e007      	b.n	8006b18 <__sfputs_r+0x22>
 8006b08:	7821      	ldrb	r1, [r4, #0]
 8006b0a:	003a      	movs	r2, r7
 8006b0c:	0030      	movs	r0, r6
 8006b0e:	f7ff ffdd 	bl	8006acc <__sfputc_r>
 8006b12:	3401      	adds	r4, #1
 8006b14:	1c43      	adds	r3, r0, #1
 8006b16:	d1f3      	bne.n	8006b00 <__sfputs_r+0xa>
 8006b18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006b1c <_vfiprintf_r>:
 8006b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b1e:	b0a1      	sub	sp, #132	; 0x84
 8006b20:	0006      	movs	r6, r0
 8006b22:	000c      	movs	r4, r1
 8006b24:	001f      	movs	r7, r3
 8006b26:	9203      	str	r2, [sp, #12]
 8006b28:	2800      	cmp	r0, #0
 8006b2a:	d004      	beq.n	8006b36 <_vfiprintf_r+0x1a>
 8006b2c:	6983      	ldr	r3, [r0, #24]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d101      	bne.n	8006b36 <_vfiprintf_r+0x1a>
 8006b32:	f7ff fab1 	bl	8006098 <__sinit>
 8006b36:	4b8e      	ldr	r3, [pc, #568]	; (8006d70 <_vfiprintf_r+0x254>)
 8006b38:	429c      	cmp	r4, r3
 8006b3a:	d11c      	bne.n	8006b76 <_vfiprintf_r+0x5a>
 8006b3c:	6874      	ldr	r4, [r6, #4]
 8006b3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b40:	07db      	lsls	r3, r3, #31
 8006b42:	d405      	bmi.n	8006b50 <_vfiprintf_r+0x34>
 8006b44:	89a3      	ldrh	r3, [r4, #12]
 8006b46:	059b      	lsls	r3, r3, #22
 8006b48:	d402      	bmi.n	8006b50 <_vfiprintf_r+0x34>
 8006b4a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b4c:	f7ff fb49 	bl	80061e2 <__retarget_lock_acquire_recursive>
 8006b50:	89a3      	ldrh	r3, [r4, #12]
 8006b52:	071b      	lsls	r3, r3, #28
 8006b54:	d502      	bpl.n	8006b5c <_vfiprintf_r+0x40>
 8006b56:	6923      	ldr	r3, [r4, #16]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d11d      	bne.n	8006b98 <_vfiprintf_r+0x7c>
 8006b5c:	0021      	movs	r1, r4
 8006b5e:	0030      	movs	r0, r6
 8006b60:	f000 f9de 	bl	8006f20 <__swsetup_r>
 8006b64:	2800      	cmp	r0, #0
 8006b66:	d017      	beq.n	8006b98 <_vfiprintf_r+0x7c>
 8006b68:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b6a:	07db      	lsls	r3, r3, #31
 8006b6c:	d50d      	bpl.n	8006b8a <_vfiprintf_r+0x6e>
 8006b6e:	2001      	movs	r0, #1
 8006b70:	4240      	negs	r0, r0
 8006b72:	b021      	add	sp, #132	; 0x84
 8006b74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b76:	4b7f      	ldr	r3, [pc, #508]	; (8006d74 <_vfiprintf_r+0x258>)
 8006b78:	429c      	cmp	r4, r3
 8006b7a:	d101      	bne.n	8006b80 <_vfiprintf_r+0x64>
 8006b7c:	68b4      	ldr	r4, [r6, #8]
 8006b7e:	e7de      	b.n	8006b3e <_vfiprintf_r+0x22>
 8006b80:	4b7d      	ldr	r3, [pc, #500]	; (8006d78 <_vfiprintf_r+0x25c>)
 8006b82:	429c      	cmp	r4, r3
 8006b84:	d1db      	bne.n	8006b3e <_vfiprintf_r+0x22>
 8006b86:	68f4      	ldr	r4, [r6, #12]
 8006b88:	e7d9      	b.n	8006b3e <_vfiprintf_r+0x22>
 8006b8a:	89a3      	ldrh	r3, [r4, #12]
 8006b8c:	059b      	lsls	r3, r3, #22
 8006b8e:	d4ee      	bmi.n	8006b6e <_vfiprintf_r+0x52>
 8006b90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b92:	f7ff fb27 	bl	80061e4 <__retarget_lock_release_recursive>
 8006b96:	e7ea      	b.n	8006b6e <_vfiprintf_r+0x52>
 8006b98:	2300      	movs	r3, #0
 8006b9a:	ad08      	add	r5, sp, #32
 8006b9c:	616b      	str	r3, [r5, #20]
 8006b9e:	3320      	adds	r3, #32
 8006ba0:	766b      	strb	r3, [r5, #25]
 8006ba2:	3310      	adds	r3, #16
 8006ba4:	76ab      	strb	r3, [r5, #26]
 8006ba6:	9707      	str	r7, [sp, #28]
 8006ba8:	9f03      	ldr	r7, [sp, #12]
 8006baa:	783b      	ldrb	r3, [r7, #0]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d001      	beq.n	8006bb4 <_vfiprintf_r+0x98>
 8006bb0:	2b25      	cmp	r3, #37	; 0x25
 8006bb2:	d14e      	bne.n	8006c52 <_vfiprintf_r+0x136>
 8006bb4:	9b03      	ldr	r3, [sp, #12]
 8006bb6:	1afb      	subs	r3, r7, r3
 8006bb8:	9305      	str	r3, [sp, #20]
 8006bba:	9b03      	ldr	r3, [sp, #12]
 8006bbc:	429f      	cmp	r7, r3
 8006bbe:	d00d      	beq.n	8006bdc <_vfiprintf_r+0xc0>
 8006bc0:	9b05      	ldr	r3, [sp, #20]
 8006bc2:	0021      	movs	r1, r4
 8006bc4:	0030      	movs	r0, r6
 8006bc6:	9a03      	ldr	r2, [sp, #12]
 8006bc8:	f7ff ff95 	bl	8006af6 <__sfputs_r>
 8006bcc:	1c43      	adds	r3, r0, #1
 8006bce:	d100      	bne.n	8006bd2 <_vfiprintf_r+0xb6>
 8006bd0:	e0b5      	b.n	8006d3e <_vfiprintf_r+0x222>
 8006bd2:	696a      	ldr	r2, [r5, #20]
 8006bd4:	9b05      	ldr	r3, [sp, #20]
 8006bd6:	4694      	mov	ip, r2
 8006bd8:	4463      	add	r3, ip
 8006bda:	616b      	str	r3, [r5, #20]
 8006bdc:	783b      	ldrb	r3, [r7, #0]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d100      	bne.n	8006be4 <_vfiprintf_r+0xc8>
 8006be2:	e0ac      	b.n	8006d3e <_vfiprintf_r+0x222>
 8006be4:	2201      	movs	r2, #1
 8006be6:	1c7b      	adds	r3, r7, #1
 8006be8:	9303      	str	r3, [sp, #12]
 8006bea:	2300      	movs	r3, #0
 8006bec:	4252      	negs	r2, r2
 8006bee:	606a      	str	r2, [r5, #4]
 8006bf0:	a904      	add	r1, sp, #16
 8006bf2:	3254      	adds	r2, #84	; 0x54
 8006bf4:	1852      	adds	r2, r2, r1
 8006bf6:	602b      	str	r3, [r5, #0]
 8006bf8:	60eb      	str	r3, [r5, #12]
 8006bfa:	60ab      	str	r3, [r5, #8]
 8006bfc:	7013      	strb	r3, [r2, #0]
 8006bfe:	65ab      	str	r3, [r5, #88]	; 0x58
 8006c00:	9b03      	ldr	r3, [sp, #12]
 8006c02:	2205      	movs	r2, #5
 8006c04:	7819      	ldrb	r1, [r3, #0]
 8006c06:	485d      	ldr	r0, [pc, #372]	; (8006d7c <_vfiprintf_r+0x260>)
 8006c08:	f7ff faf8 	bl	80061fc <memchr>
 8006c0c:	9b03      	ldr	r3, [sp, #12]
 8006c0e:	1c5f      	adds	r7, r3, #1
 8006c10:	2800      	cmp	r0, #0
 8006c12:	d120      	bne.n	8006c56 <_vfiprintf_r+0x13a>
 8006c14:	682a      	ldr	r2, [r5, #0]
 8006c16:	06d3      	lsls	r3, r2, #27
 8006c18:	d504      	bpl.n	8006c24 <_vfiprintf_r+0x108>
 8006c1a:	2353      	movs	r3, #83	; 0x53
 8006c1c:	a904      	add	r1, sp, #16
 8006c1e:	185b      	adds	r3, r3, r1
 8006c20:	2120      	movs	r1, #32
 8006c22:	7019      	strb	r1, [r3, #0]
 8006c24:	0713      	lsls	r3, r2, #28
 8006c26:	d504      	bpl.n	8006c32 <_vfiprintf_r+0x116>
 8006c28:	2353      	movs	r3, #83	; 0x53
 8006c2a:	a904      	add	r1, sp, #16
 8006c2c:	185b      	adds	r3, r3, r1
 8006c2e:	212b      	movs	r1, #43	; 0x2b
 8006c30:	7019      	strb	r1, [r3, #0]
 8006c32:	9b03      	ldr	r3, [sp, #12]
 8006c34:	781b      	ldrb	r3, [r3, #0]
 8006c36:	2b2a      	cmp	r3, #42	; 0x2a
 8006c38:	d016      	beq.n	8006c68 <_vfiprintf_r+0x14c>
 8006c3a:	2100      	movs	r1, #0
 8006c3c:	68eb      	ldr	r3, [r5, #12]
 8006c3e:	9f03      	ldr	r7, [sp, #12]
 8006c40:	783a      	ldrb	r2, [r7, #0]
 8006c42:	1c78      	adds	r0, r7, #1
 8006c44:	3a30      	subs	r2, #48	; 0x30
 8006c46:	4684      	mov	ip, r0
 8006c48:	2a09      	cmp	r2, #9
 8006c4a:	d94f      	bls.n	8006cec <_vfiprintf_r+0x1d0>
 8006c4c:	2900      	cmp	r1, #0
 8006c4e:	d111      	bne.n	8006c74 <_vfiprintf_r+0x158>
 8006c50:	e017      	b.n	8006c82 <_vfiprintf_r+0x166>
 8006c52:	3701      	adds	r7, #1
 8006c54:	e7a9      	b.n	8006baa <_vfiprintf_r+0x8e>
 8006c56:	4b49      	ldr	r3, [pc, #292]	; (8006d7c <_vfiprintf_r+0x260>)
 8006c58:	682a      	ldr	r2, [r5, #0]
 8006c5a:	1ac0      	subs	r0, r0, r3
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	4083      	lsls	r3, r0
 8006c60:	4313      	orrs	r3, r2
 8006c62:	602b      	str	r3, [r5, #0]
 8006c64:	9703      	str	r7, [sp, #12]
 8006c66:	e7cb      	b.n	8006c00 <_vfiprintf_r+0xe4>
 8006c68:	9b07      	ldr	r3, [sp, #28]
 8006c6a:	1d19      	adds	r1, r3, #4
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	9107      	str	r1, [sp, #28]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	db01      	blt.n	8006c78 <_vfiprintf_r+0x15c>
 8006c74:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c76:	e004      	b.n	8006c82 <_vfiprintf_r+0x166>
 8006c78:	425b      	negs	r3, r3
 8006c7a:	60eb      	str	r3, [r5, #12]
 8006c7c:	2302      	movs	r3, #2
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	602b      	str	r3, [r5, #0]
 8006c82:	783b      	ldrb	r3, [r7, #0]
 8006c84:	2b2e      	cmp	r3, #46	; 0x2e
 8006c86:	d10a      	bne.n	8006c9e <_vfiprintf_r+0x182>
 8006c88:	787b      	ldrb	r3, [r7, #1]
 8006c8a:	2b2a      	cmp	r3, #42	; 0x2a
 8006c8c:	d137      	bne.n	8006cfe <_vfiprintf_r+0x1e2>
 8006c8e:	9b07      	ldr	r3, [sp, #28]
 8006c90:	3702      	adds	r7, #2
 8006c92:	1d1a      	adds	r2, r3, #4
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	9207      	str	r2, [sp, #28]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	db2d      	blt.n	8006cf8 <_vfiprintf_r+0x1dc>
 8006c9c:	9309      	str	r3, [sp, #36]	; 0x24
 8006c9e:	2203      	movs	r2, #3
 8006ca0:	7839      	ldrb	r1, [r7, #0]
 8006ca2:	4837      	ldr	r0, [pc, #220]	; (8006d80 <_vfiprintf_r+0x264>)
 8006ca4:	f7ff faaa 	bl	80061fc <memchr>
 8006ca8:	2800      	cmp	r0, #0
 8006caa:	d007      	beq.n	8006cbc <_vfiprintf_r+0x1a0>
 8006cac:	4b34      	ldr	r3, [pc, #208]	; (8006d80 <_vfiprintf_r+0x264>)
 8006cae:	682a      	ldr	r2, [r5, #0]
 8006cb0:	1ac0      	subs	r0, r0, r3
 8006cb2:	2340      	movs	r3, #64	; 0x40
 8006cb4:	4083      	lsls	r3, r0
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	3701      	adds	r7, #1
 8006cba:	602b      	str	r3, [r5, #0]
 8006cbc:	7839      	ldrb	r1, [r7, #0]
 8006cbe:	1c7b      	adds	r3, r7, #1
 8006cc0:	2206      	movs	r2, #6
 8006cc2:	4830      	ldr	r0, [pc, #192]	; (8006d84 <_vfiprintf_r+0x268>)
 8006cc4:	9303      	str	r3, [sp, #12]
 8006cc6:	7629      	strb	r1, [r5, #24]
 8006cc8:	f7ff fa98 	bl	80061fc <memchr>
 8006ccc:	2800      	cmp	r0, #0
 8006cce:	d045      	beq.n	8006d5c <_vfiprintf_r+0x240>
 8006cd0:	4b2d      	ldr	r3, [pc, #180]	; (8006d88 <_vfiprintf_r+0x26c>)
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d127      	bne.n	8006d26 <_vfiprintf_r+0x20a>
 8006cd6:	2207      	movs	r2, #7
 8006cd8:	9b07      	ldr	r3, [sp, #28]
 8006cda:	3307      	adds	r3, #7
 8006cdc:	4393      	bics	r3, r2
 8006cde:	3308      	adds	r3, #8
 8006ce0:	9307      	str	r3, [sp, #28]
 8006ce2:	696b      	ldr	r3, [r5, #20]
 8006ce4:	9a04      	ldr	r2, [sp, #16]
 8006ce6:	189b      	adds	r3, r3, r2
 8006ce8:	616b      	str	r3, [r5, #20]
 8006cea:	e75d      	b.n	8006ba8 <_vfiprintf_r+0x8c>
 8006cec:	210a      	movs	r1, #10
 8006cee:	434b      	muls	r3, r1
 8006cf0:	4667      	mov	r7, ip
 8006cf2:	189b      	adds	r3, r3, r2
 8006cf4:	3909      	subs	r1, #9
 8006cf6:	e7a3      	b.n	8006c40 <_vfiprintf_r+0x124>
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	425b      	negs	r3, r3
 8006cfc:	e7ce      	b.n	8006c9c <_vfiprintf_r+0x180>
 8006cfe:	2300      	movs	r3, #0
 8006d00:	001a      	movs	r2, r3
 8006d02:	3701      	adds	r7, #1
 8006d04:	606b      	str	r3, [r5, #4]
 8006d06:	7839      	ldrb	r1, [r7, #0]
 8006d08:	1c78      	adds	r0, r7, #1
 8006d0a:	3930      	subs	r1, #48	; 0x30
 8006d0c:	4684      	mov	ip, r0
 8006d0e:	2909      	cmp	r1, #9
 8006d10:	d903      	bls.n	8006d1a <_vfiprintf_r+0x1fe>
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d0c3      	beq.n	8006c9e <_vfiprintf_r+0x182>
 8006d16:	9209      	str	r2, [sp, #36]	; 0x24
 8006d18:	e7c1      	b.n	8006c9e <_vfiprintf_r+0x182>
 8006d1a:	230a      	movs	r3, #10
 8006d1c:	435a      	muls	r2, r3
 8006d1e:	4667      	mov	r7, ip
 8006d20:	1852      	adds	r2, r2, r1
 8006d22:	3b09      	subs	r3, #9
 8006d24:	e7ef      	b.n	8006d06 <_vfiprintf_r+0x1ea>
 8006d26:	ab07      	add	r3, sp, #28
 8006d28:	9300      	str	r3, [sp, #0]
 8006d2a:	0022      	movs	r2, r4
 8006d2c:	0029      	movs	r1, r5
 8006d2e:	0030      	movs	r0, r6
 8006d30:	4b16      	ldr	r3, [pc, #88]	; (8006d8c <_vfiprintf_r+0x270>)
 8006d32:	f7fd febb 	bl	8004aac <_printf_float>
 8006d36:	9004      	str	r0, [sp, #16]
 8006d38:	9b04      	ldr	r3, [sp, #16]
 8006d3a:	3301      	adds	r3, #1
 8006d3c:	d1d1      	bne.n	8006ce2 <_vfiprintf_r+0x1c6>
 8006d3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006d40:	07db      	lsls	r3, r3, #31
 8006d42:	d405      	bmi.n	8006d50 <_vfiprintf_r+0x234>
 8006d44:	89a3      	ldrh	r3, [r4, #12]
 8006d46:	059b      	lsls	r3, r3, #22
 8006d48:	d402      	bmi.n	8006d50 <_vfiprintf_r+0x234>
 8006d4a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d4c:	f7ff fa4a 	bl	80061e4 <__retarget_lock_release_recursive>
 8006d50:	89a3      	ldrh	r3, [r4, #12]
 8006d52:	065b      	lsls	r3, r3, #25
 8006d54:	d500      	bpl.n	8006d58 <_vfiprintf_r+0x23c>
 8006d56:	e70a      	b.n	8006b6e <_vfiprintf_r+0x52>
 8006d58:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006d5a:	e70a      	b.n	8006b72 <_vfiprintf_r+0x56>
 8006d5c:	ab07      	add	r3, sp, #28
 8006d5e:	9300      	str	r3, [sp, #0]
 8006d60:	0022      	movs	r2, r4
 8006d62:	0029      	movs	r1, r5
 8006d64:	0030      	movs	r0, r6
 8006d66:	4b09      	ldr	r3, [pc, #36]	; (8006d8c <_vfiprintf_r+0x270>)
 8006d68:	f7fe f95e 	bl	8005028 <_printf_i>
 8006d6c:	e7e3      	b.n	8006d36 <_vfiprintf_r+0x21a>
 8006d6e:	46c0      	nop			; (mov r8, r8)
 8006d70:	080076d4 	.word	0x080076d4
 8006d74:	080076f4 	.word	0x080076f4
 8006d78:	080076b4 	.word	0x080076b4
 8006d7c:	08007874 	.word	0x08007874
 8006d80:	0800787a 	.word	0x0800787a
 8006d84:	0800787e 	.word	0x0800787e
 8006d88:	08004aad 	.word	0x08004aad
 8006d8c:	08006af7 	.word	0x08006af7

08006d90 <_sbrk_r>:
 8006d90:	2300      	movs	r3, #0
 8006d92:	b570      	push	{r4, r5, r6, lr}
 8006d94:	4d06      	ldr	r5, [pc, #24]	; (8006db0 <_sbrk_r+0x20>)
 8006d96:	0004      	movs	r4, r0
 8006d98:	0008      	movs	r0, r1
 8006d9a:	602b      	str	r3, [r5, #0]
 8006d9c:	f7fb fd0e 	bl	80027bc <_sbrk>
 8006da0:	1c43      	adds	r3, r0, #1
 8006da2:	d103      	bne.n	8006dac <_sbrk_r+0x1c>
 8006da4:	682b      	ldr	r3, [r5, #0]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d000      	beq.n	8006dac <_sbrk_r+0x1c>
 8006daa:	6023      	str	r3, [r4, #0]
 8006dac:	bd70      	pop	{r4, r5, r6, pc}
 8006dae:	46c0      	nop			; (mov r8, r8)
 8006db0:	200002a4 	.word	0x200002a4

08006db4 <__sread>:
 8006db4:	b570      	push	{r4, r5, r6, lr}
 8006db6:	000c      	movs	r4, r1
 8006db8:	250e      	movs	r5, #14
 8006dba:	5f49      	ldrsh	r1, [r1, r5]
 8006dbc:	f000 fad6 	bl	800736c <_read_r>
 8006dc0:	2800      	cmp	r0, #0
 8006dc2:	db03      	blt.n	8006dcc <__sread+0x18>
 8006dc4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006dc6:	181b      	adds	r3, r3, r0
 8006dc8:	6563      	str	r3, [r4, #84]	; 0x54
 8006dca:	bd70      	pop	{r4, r5, r6, pc}
 8006dcc:	89a3      	ldrh	r3, [r4, #12]
 8006dce:	4a02      	ldr	r2, [pc, #8]	; (8006dd8 <__sread+0x24>)
 8006dd0:	4013      	ands	r3, r2
 8006dd2:	81a3      	strh	r3, [r4, #12]
 8006dd4:	e7f9      	b.n	8006dca <__sread+0x16>
 8006dd6:	46c0      	nop			; (mov r8, r8)
 8006dd8:	ffffefff 	.word	0xffffefff

08006ddc <__swrite>:
 8006ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dde:	001f      	movs	r7, r3
 8006de0:	898b      	ldrh	r3, [r1, #12]
 8006de2:	0005      	movs	r5, r0
 8006de4:	000c      	movs	r4, r1
 8006de6:	0016      	movs	r6, r2
 8006de8:	05db      	lsls	r3, r3, #23
 8006dea:	d505      	bpl.n	8006df8 <__swrite+0x1c>
 8006dec:	230e      	movs	r3, #14
 8006dee:	5ec9      	ldrsh	r1, [r1, r3]
 8006df0:	2200      	movs	r2, #0
 8006df2:	2302      	movs	r3, #2
 8006df4:	f000 fa18 	bl	8007228 <_lseek_r>
 8006df8:	89a3      	ldrh	r3, [r4, #12]
 8006dfa:	4a05      	ldr	r2, [pc, #20]	; (8006e10 <__swrite+0x34>)
 8006dfc:	0028      	movs	r0, r5
 8006dfe:	4013      	ands	r3, r2
 8006e00:	81a3      	strh	r3, [r4, #12]
 8006e02:	0032      	movs	r2, r6
 8006e04:	230e      	movs	r3, #14
 8006e06:	5ee1      	ldrsh	r1, [r4, r3]
 8006e08:	003b      	movs	r3, r7
 8006e0a:	f000 f875 	bl	8006ef8 <_write_r>
 8006e0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e10:	ffffefff 	.word	0xffffefff

08006e14 <__sseek>:
 8006e14:	b570      	push	{r4, r5, r6, lr}
 8006e16:	000c      	movs	r4, r1
 8006e18:	250e      	movs	r5, #14
 8006e1a:	5f49      	ldrsh	r1, [r1, r5]
 8006e1c:	f000 fa04 	bl	8007228 <_lseek_r>
 8006e20:	89a3      	ldrh	r3, [r4, #12]
 8006e22:	1c42      	adds	r2, r0, #1
 8006e24:	d103      	bne.n	8006e2e <__sseek+0x1a>
 8006e26:	4a05      	ldr	r2, [pc, #20]	; (8006e3c <__sseek+0x28>)
 8006e28:	4013      	ands	r3, r2
 8006e2a:	81a3      	strh	r3, [r4, #12]
 8006e2c:	bd70      	pop	{r4, r5, r6, pc}
 8006e2e:	2280      	movs	r2, #128	; 0x80
 8006e30:	0152      	lsls	r2, r2, #5
 8006e32:	4313      	orrs	r3, r2
 8006e34:	81a3      	strh	r3, [r4, #12]
 8006e36:	6560      	str	r0, [r4, #84]	; 0x54
 8006e38:	e7f8      	b.n	8006e2c <__sseek+0x18>
 8006e3a:	46c0      	nop			; (mov r8, r8)
 8006e3c:	ffffefff 	.word	0xffffefff

08006e40 <__sclose>:
 8006e40:	b510      	push	{r4, lr}
 8006e42:	230e      	movs	r3, #14
 8006e44:	5ec9      	ldrsh	r1, [r1, r3]
 8006e46:	f000 f901 	bl	800704c <_close_r>
 8006e4a:	bd10      	pop	{r4, pc}

08006e4c <__swbuf_r>:
 8006e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e4e:	0005      	movs	r5, r0
 8006e50:	000e      	movs	r6, r1
 8006e52:	0014      	movs	r4, r2
 8006e54:	2800      	cmp	r0, #0
 8006e56:	d004      	beq.n	8006e62 <__swbuf_r+0x16>
 8006e58:	6983      	ldr	r3, [r0, #24]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d101      	bne.n	8006e62 <__swbuf_r+0x16>
 8006e5e:	f7ff f91b 	bl	8006098 <__sinit>
 8006e62:	4b22      	ldr	r3, [pc, #136]	; (8006eec <__swbuf_r+0xa0>)
 8006e64:	429c      	cmp	r4, r3
 8006e66:	d12e      	bne.n	8006ec6 <__swbuf_r+0x7a>
 8006e68:	686c      	ldr	r4, [r5, #4]
 8006e6a:	69a3      	ldr	r3, [r4, #24]
 8006e6c:	60a3      	str	r3, [r4, #8]
 8006e6e:	89a3      	ldrh	r3, [r4, #12]
 8006e70:	071b      	lsls	r3, r3, #28
 8006e72:	d532      	bpl.n	8006eda <__swbuf_r+0x8e>
 8006e74:	6923      	ldr	r3, [r4, #16]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d02f      	beq.n	8006eda <__swbuf_r+0x8e>
 8006e7a:	6823      	ldr	r3, [r4, #0]
 8006e7c:	6922      	ldr	r2, [r4, #16]
 8006e7e:	b2f7      	uxtb	r7, r6
 8006e80:	1a98      	subs	r0, r3, r2
 8006e82:	6963      	ldr	r3, [r4, #20]
 8006e84:	b2f6      	uxtb	r6, r6
 8006e86:	4283      	cmp	r3, r0
 8006e88:	dc05      	bgt.n	8006e96 <__swbuf_r+0x4a>
 8006e8a:	0021      	movs	r1, r4
 8006e8c:	0028      	movs	r0, r5
 8006e8e:	f000 f97b 	bl	8007188 <_fflush_r>
 8006e92:	2800      	cmp	r0, #0
 8006e94:	d127      	bne.n	8006ee6 <__swbuf_r+0x9a>
 8006e96:	68a3      	ldr	r3, [r4, #8]
 8006e98:	3001      	adds	r0, #1
 8006e9a:	3b01      	subs	r3, #1
 8006e9c:	60a3      	str	r3, [r4, #8]
 8006e9e:	6823      	ldr	r3, [r4, #0]
 8006ea0:	1c5a      	adds	r2, r3, #1
 8006ea2:	6022      	str	r2, [r4, #0]
 8006ea4:	701f      	strb	r7, [r3, #0]
 8006ea6:	6963      	ldr	r3, [r4, #20]
 8006ea8:	4283      	cmp	r3, r0
 8006eaa:	d004      	beq.n	8006eb6 <__swbuf_r+0x6a>
 8006eac:	89a3      	ldrh	r3, [r4, #12]
 8006eae:	07db      	lsls	r3, r3, #31
 8006eb0:	d507      	bpl.n	8006ec2 <__swbuf_r+0x76>
 8006eb2:	2e0a      	cmp	r6, #10
 8006eb4:	d105      	bne.n	8006ec2 <__swbuf_r+0x76>
 8006eb6:	0021      	movs	r1, r4
 8006eb8:	0028      	movs	r0, r5
 8006eba:	f000 f965 	bl	8007188 <_fflush_r>
 8006ebe:	2800      	cmp	r0, #0
 8006ec0:	d111      	bne.n	8006ee6 <__swbuf_r+0x9a>
 8006ec2:	0030      	movs	r0, r6
 8006ec4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ec6:	4b0a      	ldr	r3, [pc, #40]	; (8006ef0 <__swbuf_r+0xa4>)
 8006ec8:	429c      	cmp	r4, r3
 8006eca:	d101      	bne.n	8006ed0 <__swbuf_r+0x84>
 8006ecc:	68ac      	ldr	r4, [r5, #8]
 8006ece:	e7cc      	b.n	8006e6a <__swbuf_r+0x1e>
 8006ed0:	4b08      	ldr	r3, [pc, #32]	; (8006ef4 <__swbuf_r+0xa8>)
 8006ed2:	429c      	cmp	r4, r3
 8006ed4:	d1c9      	bne.n	8006e6a <__swbuf_r+0x1e>
 8006ed6:	68ec      	ldr	r4, [r5, #12]
 8006ed8:	e7c7      	b.n	8006e6a <__swbuf_r+0x1e>
 8006eda:	0021      	movs	r1, r4
 8006edc:	0028      	movs	r0, r5
 8006ede:	f000 f81f 	bl	8006f20 <__swsetup_r>
 8006ee2:	2800      	cmp	r0, #0
 8006ee4:	d0c9      	beq.n	8006e7a <__swbuf_r+0x2e>
 8006ee6:	2601      	movs	r6, #1
 8006ee8:	4276      	negs	r6, r6
 8006eea:	e7ea      	b.n	8006ec2 <__swbuf_r+0x76>
 8006eec:	080076d4 	.word	0x080076d4
 8006ef0:	080076f4 	.word	0x080076f4
 8006ef4:	080076b4 	.word	0x080076b4

08006ef8 <_write_r>:
 8006ef8:	b570      	push	{r4, r5, r6, lr}
 8006efa:	0004      	movs	r4, r0
 8006efc:	0008      	movs	r0, r1
 8006efe:	0011      	movs	r1, r2
 8006f00:	001a      	movs	r2, r3
 8006f02:	2300      	movs	r3, #0
 8006f04:	4d05      	ldr	r5, [pc, #20]	; (8006f1c <_write_r+0x24>)
 8006f06:	602b      	str	r3, [r5, #0]
 8006f08:	f7fb fa42 	bl	8002390 <_write>
 8006f0c:	1c43      	adds	r3, r0, #1
 8006f0e:	d103      	bne.n	8006f18 <_write_r+0x20>
 8006f10:	682b      	ldr	r3, [r5, #0]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d000      	beq.n	8006f18 <_write_r+0x20>
 8006f16:	6023      	str	r3, [r4, #0]
 8006f18:	bd70      	pop	{r4, r5, r6, pc}
 8006f1a:	46c0      	nop			; (mov r8, r8)
 8006f1c:	200002a4 	.word	0x200002a4

08006f20 <__swsetup_r>:
 8006f20:	4b37      	ldr	r3, [pc, #220]	; (8007000 <__swsetup_r+0xe0>)
 8006f22:	b570      	push	{r4, r5, r6, lr}
 8006f24:	681d      	ldr	r5, [r3, #0]
 8006f26:	0006      	movs	r6, r0
 8006f28:	000c      	movs	r4, r1
 8006f2a:	2d00      	cmp	r5, #0
 8006f2c:	d005      	beq.n	8006f3a <__swsetup_r+0x1a>
 8006f2e:	69ab      	ldr	r3, [r5, #24]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d102      	bne.n	8006f3a <__swsetup_r+0x1a>
 8006f34:	0028      	movs	r0, r5
 8006f36:	f7ff f8af 	bl	8006098 <__sinit>
 8006f3a:	4b32      	ldr	r3, [pc, #200]	; (8007004 <__swsetup_r+0xe4>)
 8006f3c:	429c      	cmp	r4, r3
 8006f3e:	d10f      	bne.n	8006f60 <__swsetup_r+0x40>
 8006f40:	686c      	ldr	r4, [r5, #4]
 8006f42:	230c      	movs	r3, #12
 8006f44:	5ee2      	ldrsh	r2, [r4, r3]
 8006f46:	b293      	uxth	r3, r2
 8006f48:	0711      	lsls	r1, r2, #28
 8006f4a:	d42d      	bmi.n	8006fa8 <__swsetup_r+0x88>
 8006f4c:	06d9      	lsls	r1, r3, #27
 8006f4e:	d411      	bmi.n	8006f74 <__swsetup_r+0x54>
 8006f50:	2309      	movs	r3, #9
 8006f52:	2001      	movs	r0, #1
 8006f54:	6033      	str	r3, [r6, #0]
 8006f56:	3337      	adds	r3, #55	; 0x37
 8006f58:	4313      	orrs	r3, r2
 8006f5a:	81a3      	strh	r3, [r4, #12]
 8006f5c:	4240      	negs	r0, r0
 8006f5e:	bd70      	pop	{r4, r5, r6, pc}
 8006f60:	4b29      	ldr	r3, [pc, #164]	; (8007008 <__swsetup_r+0xe8>)
 8006f62:	429c      	cmp	r4, r3
 8006f64:	d101      	bne.n	8006f6a <__swsetup_r+0x4a>
 8006f66:	68ac      	ldr	r4, [r5, #8]
 8006f68:	e7eb      	b.n	8006f42 <__swsetup_r+0x22>
 8006f6a:	4b28      	ldr	r3, [pc, #160]	; (800700c <__swsetup_r+0xec>)
 8006f6c:	429c      	cmp	r4, r3
 8006f6e:	d1e8      	bne.n	8006f42 <__swsetup_r+0x22>
 8006f70:	68ec      	ldr	r4, [r5, #12]
 8006f72:	e7e6      	b.n	8006f42 <__swsetup_r+0x22>
 8006f74:	075b      	lsls	r3, r3, #29
 8006f76:	d513      	bpl.n	8006fa0 <__swsetup_r+0x80>
 8006f78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f7a:	2900      	cmp	r1, #0
 8006f7c:	d008      	beq.n	8006f90 <__swsetup_r+0x70>
 8006f7e:	0023      	movs	r3, r4
 8006f80:	3344      	adds	r3, #68	; 0x44
 8006f82:	4299      	cmp	r1, r3
 8006f84:	d002      	beq.n	8006f8c <__swsetup_r+0x6c>
 8006f86:	0030      	movs	r0, r6
 8006f88:	f7ff fcf8 	bl	800697c <_free_r>
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	6363      	str	r3, [r4, #52]	; 0x34
 8006f90:	2224      	movs	r2, #36	; 0x24
 8006f92:	89a3      	ldrh	r3, [r4, #12]
 8006f94:	4393      	bics	r3, r2
 8006f96:	81a3      	strh	r3, [r4, #12]
 8006f98:	2300      	movs	r3, #0
 8006f9a:	6063      	str	r3, [r4, #4]
 8006f9c:	6923      	ldr	r3, [r4, #16]
 8006f9e:	6023      	str	r3, [r4, #0]
 8006fa0:	2308      	movs	r3, #8
 8006fa2:	89a2      	ldrh	r2, [r4, #12]
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	81a3      	strh	r3, [r4, #12]
 8006fa8:	6923      	ldr	r3, [r4, #16]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d10b      	bne.n	8006fc6 <__swsetup_r+0xa6>
 8006fae:	21a0      	movs	r1, #160	; 0xa0
 8006fb0:	2280      	movs	r2, #128	; 0x80
 8006fb2:	89a3      	ldrh	r3, [r4, #12]
 8006fb4:	0089      	lsls	r1, r1, #2
 8006fb6:	0092      	lsls	r2, r2, #2
 8006fb8:	400b      	ands	r3, r1
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d003      	beq.n	8006fc6 <__swsetup_r+0xa6>
 8006fbe:	0021      	movs	r1, r4
 8006fc0:	0030      	movs	r0, r6
 8006fc2:	f000 f96d 	bl	80072a0 <__smakebuf_r>
 8006fc6:	220c      	movs	r2, #12
 8006fc8:	5ea3      	ldrsh	r3, [r4, r2]
 8006fca:	2001      	movs	r0, #1
 8006fcc:	001a      	movs	r2, r3
 8006fce:	b299      	uxth	r1, r3
 8006fd0:	4002      	ands	r2, r0
 8006fd2:	4203      	tst	r3, r0
 8006fd4:	d00f      	beq.n	8006ff6 <__swsetup_r+0xd6>
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	60a2      	str	r2, [r4, #8]
 8006fda:	6962      	ldr	r2, [r4, #20]
 8006fdc:	4252      	negs	r2, r2
 8006fde:	61a2      	str	r2, [r4, #24]
 8006fe0:	2000      	movs	r0, #0
 8006fe2:	6922      	ldr	r2, [r4, #16]
 8006fe4:	4282      	cmp	r2, r0
 8006fe6:	d1ba      	bne.n	8006f5e <__swsetup_r+0x3e>
 8006fe8:	060a      	lsls	r2, r1, #24
 8006fea:	d5b8      	bpl.n	8006f5e <__swsetup_r+0x3e>
 8006fec:	2240      	movs	r2, #64	; 0x40
 8006fee:	4313      	orrs	r3, r2
 8006ff0:	81a3      	strh	r3, [r4, #12]
 8006ff2:	3801      	subs	r0, #1
 8006ff4:	e7b3      	b.n	8006f5e <__swsetup_r+0x3e>
 8006ff6:	0788      	lsls	r0, r1, #30
 8006ff8:	d400      	bmi.n	8006ffc <__swsetup_r+0xdc>
 8006ffa:	6962      	ldr	r2, [r4, #20]
 8006ffc:	60a2      	str	r2, [r4, #8]
 8006ffe:	e7ef      	b.n	8006fe0 <__swsetup_r+0xc0>
 8007000:	2000000c 	.word	0x2000000c
 8007004:	080076d4 	.word	0x080076d4
 8007008:	080076f4 	.word	0x080076f4
 800700c:	080076b4 	.word	0x080076b4

08007010 <__assert_func>:
 8007010:	b530      	push	{r4, r5, lr}
 8007012:	0014      	movs	r4, r2
 8007014:	001a      	movs	r2, r3
 8007016:	4b09      	ldr	r3, [pc, #36]	; (800703c <__assert_func+0x2c>)
 8007018:	0005      	movs	r5, r0
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	b085      	sub	sp, #20
 800701e:	68d8      	ldr	r0, [r3, #12]
 8007020:	4b07      	ldr	r3, [pc, #28]	; (8007040 <__assert_func+0x30>)
 8007022:	2c00      	cmp	r4, #0
 8007024:	d101      	bne.n	800702a <__assert_func+0x1a>
 8007026:	4b07      	ldr	r3, [pc, #28]	; (8007044 <__assert_func+0x34>)
 8007028:	001c      	movs	r4, r3
 800702a:	9301      	str	r3, [sp, #4]
 800702c:	9100      	str	r1, [sp, #0]
 800702e:	002b      	movs	r3, r5
 8007030:	4905      	ldr	r1, [pc, #20]	; (8007048 <__assert_func+0x38>)
 8007032:	9402      	str	r4, [sp, #8]
 8007034:	f000 f8e8 	bl	8007208 <fiprintf>
 8007038:	f000 f9b9 	bl	80073ae <abort>
 800703c:	2000000c 	.word	0x2000000c
 8007040:	08007885 	.word	0x08007885
 8007044:	080078c0 	.word	0x080078c0
 8007048:	08007892 	.word	0x08007892

0800704c <_close_r>:
 800704c:	2300      	movs	r3, #0
 800704e:	b570      	push	{r4, r5, r6, lr}
 8007050:	4d06      	ldr	r5, [pc, #24]	; (800706c <_close_r+0x20>)
 8007052:	0004      	movs	r4, r0
 8007054:	0008      	movs	r0, r1
 8007056:	602b      	str	r3, [r5, #0]
 8007058:	f7fb fb84 	bl	8002764 <_close>
 800705c:	1c43      	adds	r3, r0, #1
 800705e:	d103      	bne.n	8007068 <_close_r+0x1c>
 8007060:	682b      	ldr	r3, [r5, #0]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d000      	beq.n	8007068 <_close_r+0x1c>
 8007066:	6023      	str	r3, [r4, #0]
 8007068:	bd70      	pop	{r4, r5, r6, pc}
 800706a:	46c0      	nop			; (mov r8, r8)
 800706c:	200002a4 	.word	0x200002a4

08007070 <__sflush_r>:
 8007070:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007072:	898b      	ldrh	r3, [r1, #12]
 8007074:	0005      	movs	r5, r0
 8007076:	000c      	movs	r4, r1
 8007078:	071a      	lsls	r2, r3, #28
 800707a:	d45f      	bmi.n	800713c <__sflush_r+0xcc>
 800707c:	684a      	ldr	r2, [r1, #4]
 800707e:	2a00      	cmp	r2, #0
 8007080:	dc04      	bgt.n	800708c <__sflush_r+0x1c>
 8007082:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8007084:	2a00      	cmp	r2, #0
 8007086:	dc01      	bgt.n	800708c <__sflush_r+0x1c>
 8007088:	2000      	movs	r0, #0
 800708a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800708c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800708e:	2f00      	cmp	r7, #0
 8007090:	d0fa      	beq.n	8007088 <__sflush_r+0x18>
 8007092:	2200      	movs	r2, #0
 8007094:	2180      	movs	r1, #128	; 0x80
 8007096:	682e      	ldr	r6, [r5, #0]
 8007098:	602a      	str	r2, [r5, #0]
 800709a:	001a      	movs	r2, r3
 800709c:	0149      	lsls	r1, r1, #5
 800709e:	400a      	ands	r2, r1
 80070a0:	420b      	tst	r3, r1
 80070a2:	d034      	beq.n	800710e <__sflush_r+0x9e>
 80070a4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80070a6:	89a3      	ldrh	r3, [r4, #12]
 80070a8:	075b      	lsls	r3, r3, #29
 80070aa:	d506      	bpl.n	80070ba <__sflush_r+0x4a>
 80070ac:	6863      	ldr	r3, [r4, #4]
 80070ae:	1ac0      	subs	r0, r0, r3
 80070b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d001      	beq.n	80070ba <__sflush_r+0x4a>
 80070b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80070b8:	1ac0      	subs	r0, r0, r3
 80070ba:	0002      	movs	r2, r0
 80070bc:	6a21      	ldr	r1, [r4, #32]
 80070be:	2300      	movs	r3, #0
 80070c0:	0028      	movs	r0, r5
 80070c2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80070c4:	47b8      	blx	r7
 80070c6:	89a1      	ldrh	r1, [r4, #12]
 80070c8:	1c43      	adds	r3, r0, #1
 80070ca:	d106      	bne.n	80070da <__sflush_r+0x6a>
 80070cc:	682b      	ldr	r3, [r5, #0]
 80070ce:	2b1d      	cmp	r3, #29
 80070d0:	d831      	bhi.n	8007136 <__sflush_r+0xc6>
 80070d2:	4a2c      	ldr	r2, [pc, #176]	; (8007184 <__sflush_r+0x114>)
 80070d4:	40da      	lsrs	r2, r3
 80070d6:	07d3      	lsls	r3, r2, #31
 80070d8:	d52d      	bpl.n	8007136 <__sflush_r+0xc6>
 80070da:	2300      	movs	r3, #0
 80070dc:	6063      	str	r3, [r4, #4]
 80070de:	6923      	ldr	r3, [r4, #16]
 80070e0:	6023      	str	r3, [r4, #0]
 80070e2:	04cb      	lsls	r3, r1, #19
 80070e4:	d505      	bpl.n	80070f2 <__sflush_r+0x82>
 80070e6:	1c43      	adds	r3, r0, #1
 80070e8:	d102      	bne.n	80070f0 <__sflush_r+0x80>
 80070ea:	682b      	ldr	r3, [r5, #0]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d100      	bne.n	80070f2 <__sflush_r+0x82>
 80070f0:	6560      	str	r0, [r4, #84]	; 0x54
 80070f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80070f4:	602e      	str	r6, [r5, #0]
 80070f6:	2900      	cmp	r1, #0
 80070f8:	d0c6      	beq.n	8007088 <__sflush_r+0x18>
 80070fa:	0023      	movs	r3, r4
 80070fc:	3344      	adds	r3, #68	; 0x44
 80070fe:	4299      	cmp	r1, r3
 8007100:	d002      	beq.n	8007108 <__sflush_r+0x98>
 8007102:	0028      	movs	r0, r5
 8007104:	f7ff fc3a 	bl	800697c <_free_r>
 8007108:	2000      	movs	r0, #0
 800710a:	6360      	str	r0, [r4, #52]	; 0x34
 800710c:	e7bd      	b.n	800708a <__sflush_r+0x1a>
 800710e:	2301      	movs	r3, #1
 8007110:	0028      	movs	r0, r5
 8007112:	6a21      	ldr	r1, [r4, #32]
 8007114:	47b8      	blx	r7
 8007116:	1c43      	adds	r3, r0, #1
 8007118:	d1c5      	bne.n	80070a6 <__sflush_r+0x36>
 800711a:	682b      	ldr	r3, [r5, #0]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d0c2      	beq.n	80070a6 <__sflush_r+0x36>
 8007120:	2b1d      	cmp	r3, #29
 8007122:	d001      	beq.n	8007128 <__sflush_r+0xb8>
 8007124:	2b16      	cmp	r3, #22
 8007126:	d101      	bne.n	800712c <__sflush_r+0xbc>
 8007128:	602e      	str	r6, [r5, #0]
 800712a:	e7ad      	b.n	8007088 <__sflush_r+0x18>
 800712c:	2340      	movs	r3, #64	; 0x40
 800712e:	89a2      	ldrh	r2, [r4, #12]
 8007130:	4313      	orrs	r3, r2
 8007132:	81a3      	strh	r3, [r4, #12]
 8007134:	e7a9      	b.n	800708a <__sflush_r+0x1a>
 8007136:	2340      	movs	r3, #64	; 0x40
 8007138:	430b      	orrs	r3, r1
 800713a:	e7fa      	b.n	8007132 <__sflush_r+0xc2>
 800713c:	690f      	ldr	r7, [r1, #16]
 800713e:	2f00      	cmp	r7, #0
 8007140:	d0a2      	beq.n	8007088 <__sflush_r+0x18>
 8007142:	680a      	ldr	r2, [r1, #0]
 8007144:	600f      	str	r7, [r1, #0]
 8007146:	1bd2      	subs	r2, r2, r7
 8007148:	9201      	str	r2, [sp, #4]
 800714a:	2200      	movs	r2, #0
 800714c:	079b      	lsls	r3, r3, #30
 800714e:	d100      	bne.n	8007152 <__sflush_r+0xe2>
 8007150:	694a      	ldr	r2, [r1, #20]
 8007152:	60a2      	str	r2, [r4, #8]
 8007154:	9b01      	ldr	r3, [sp, #4]
 8007156:	2b00      	cmp	r3, #0
 8007158:	dc00      	bgt.n	800715c <__sflush_r+0xec>
 800715a:	e795      	b.n	8007088 <__sflush_r+0x18>
 800715c:	003a      	movs	r2, r7
 800715e:	0028      	movs	r0, r5
 8007160:	9b01      	ldr	r3, [sp, #4]
 8007162:	6a21      	ldr	r1, [r4, #32]
 8007164:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007166:	47b0      	blx	r6
 8007168:	2800      	cmp	r0, #0
 800716a:	dc06      	bgt.n	800717a <__sflush_r+0x10a>
 800716c:	2340      	movs	r3, #64	; 0x40
 800716e:	2001      	movs	r0, #1
 8007170:	89a2      	ldrh	r2, [r4, #12]
 8007172:	4240      	negs	r0, r0
 8007174:	4313      	orrs	r3, r2
 8007176:	81a3      	strh	r3, [r4, #12]
 8007178:	e787      	b.n	800708a <__sflush_r+0x1a>
 800717a:	9b01      	ldr	r3, [sp, #4]
 800717c:	183f      	adds	r7, r7, r0
 800717e:	1a1b      	subs	r3, r3, r0
 8007180:	9301      	str	r3, [sp, #4]
 8007182:	e7e7      	b.n	8007154 <__sflush_r+0xe4>
 8007184:	20400001 	.word	0x20400001

08007188 <_fflush_r>:
 8007188:	690b      	ldr	r3, [r1, #16]
 800718a:	b570      	push	{r4, r5, r6, lr}
 800718c:	0005      	movs	r5, r0
 800718e:	000c      	movs	r4, r1
 8007190:	2b00      	cmp	r3, #0
 8007192:	d102      	bne.n	800719a <_fflush_r+0x12>
 8007194:	2500      	movs	r5, #0
 8007196:	0028      	movs	r0, r5
 8007198:	bd70      	pop	{r4, r5, r6, pc}
 800719a:	2800      	cmp	r0, #0
 800719c:	d004      	beq.n	80071a8 <_fflush_r+0x20>
 800719e:	6983      	ldr	r3, [r0, #24]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d101      	bne.n	80071a8 <_fflush_r+0x20>
 80071a4:	f7fe ff78 	bl	8006098 <__sinit>
 80071a8:	4b14      	ldr	r3, [pc, #80]	; (80071fc <_fflush_r+0x74>)
 80071aa:	429c      	cmp	r4, r3
 80071ac:	d11b      	bne.n	80071e6 <_fflush_r+0x5e>
 80071ae:	686c      	ldr	r4, [r5, #4]
 80071b0:	220c      	movs	r2, #12
 80071b2:	5ea3      	ldrsh	r3, [r4, r2]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d0ed      	beq.n	8007194 <_fflush_r+0xc>
 80071b8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80071ba:	07d2      	lsls	r2, r2, #31
 80071bc:	d404      	bmi.n	80071c8 <_fflush_r+0x40>
 80071be:	059b      	lsls	r3, r3, #22
 80071c0:	d402      	bmi.n	80071c8 <_fflush_r+0x40>
 80071c2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80071c4:	f7ff f80d 	bl	80061e2 <__retarget_lock_acquire_recursive>
 80071c8:	0028      	movs	r0, r5
 80071ca:	0021      	movs	r1, r4
 80071cc:	f7ff ff50 	bl	8007070 <__sflush_r>
 80071d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80071d2:	0005      	movs	r5, r0
 80071d4:	07db      	lsls	r3, r3, #31
 80071d6:	d4de      	bmi.n	8007196 <_fflush_r+0xe>
 80071d8:	89a3      	ldrh	r3, [r4, #12]
 80071da:	059b      	lsls	r3, r3, #22
 80071dc:	d4db      	bmi.n	8007196 <_fflush_r+0xe>
 80071de:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80071e0:	f7ff f800 	bl	80061e4 <__retarget_lock_release_recursive>
 80071e4:	e7d7      	b.n	8007196 <_fflush_r+0xe>
 80071e6:	4b06      	ldr	r3, [pc, #24]	; (8007200 <_fflush_r+0x78>)
 80071e8:	429c      	cmp	r4, r3
 80071ea:	d101      	bne.n	80071f0 <_fflush_r+0x68>
 80071ec:	68ac      	ldr	r4, [r5, #8]
 80071ee:	e7df      	b.n	80071b0 <_fflush_r+0x28>
 80071f0:	4b04      	ldr	r3, [pc, #16]	; (8007204 <_fflush_r+0x7c>)
 80071f2:	429c      	cmp	r4, r3
 80071f4:	d1dc      	bne.n	80071b0 <_fflush_r+0x28>
 80071f6:	68ec      	ldr	r4, [r5, #12]
 80071f8:	e7da      	b.n	80071b0 <_fflush_r+0x28>
 80071fa:	46c0      	nop			; (mov r8, r8)
 80071fc:	080076d4 	.word	0x080076d4
 8007200:	080076f4 	.word	0x080076f4
 8007204:	080076b4 	.word	0x080076b4

08007208 <fiprintf>:
 8007208:	b40e      	push	{r1, r2, r3}
 800720a:	b503      	push	{r0, r1, lr}
 800720c:	0001      	movs	r1, r0
 800720e:	ab03      	add	r3, sp, #12
 8007210:	4804      	ldr	r0, [pc, #16]	; (8007224 <fiprintf+0x1c>)
 8007212:	cb04      	ldmia	r3!, {r2}
 8007214:	6800      	ldr	r0, [r0, #0]
 8007216:	9301      	str	r3, [sp, #4]
 8007218:	f7ff fc80 	bl	8006b1c <_vfiprintf_r>
 800721c:	b002      	add	sp, #8
 800721e:	bc08      	pop	{r3}
 8007220:	b003      	add	sp, #12
 8007222:	4718      	bx	r3
 8007224:	2000000c 	.word	0x2000000c

08007228 <_lseek_r>:
 8007228:	b570      	push	{r4, r5, r6, lr}
 800722a:	0004      	movs	r4, r0
 800722c:	0008      	movs	r0, r1
 800722e:	0011      	movs	r1, r2
 8007230:	001a      	movs	r2, r3
 8007232:	2300      	movs	r3, #0
 8007234:	4d05      	ldr	r5, [pc, #20]	; (800724c <_lseek_r+0x24>)
 8007236:	602b      	str	r3, [r5, #0]
 8007238:	f7fb fab5 	bl	80027a6 <_lseek>
 800723c:	1c43      	adds	r3, r0, #1
 800723e:	d103      	bne.n	8007248 <_lseek_r+0x20>
 8007240:	682b      	ldr	r3, [r5, #0]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d000      	beq.n	8007248 <_lseek_r+0x20>
 8007246:	6023      	str	r3, [r4, #0]
 8007248:	bd70      	pop	{r4, r5, r6, pc}
 800724a:	46c0      	nop			; (mov r8, r8)
 800724c:	200002a4 	.word	0x200002a4

08007250 <__swhatbuf_r>:
 8007250:	b570      	push	{r4, r5, r6, lr}
 8007252:	000e      	movs	r6, r1
 8007254:	001d      	movs	r5, r3
 8007256:	230e      	movs	r3, #14
 8007258:	5ec9      	ldrsh	r1, [r1, r3]
 800725a:	0014      	movs	r4, r2
 800725c:	b096      	sub	sp, #88	; 0x58
 800725e:	2900      	cmp	r1, #0
 8007260:	da07      	bge.n	8007272 <__swhatbuf_r+0x22>
 8007262:	2300      	movs	r3, #0
 8007264:	602b      	str	r3, [r5, #0]
 8007266:	89b3      	ldrh	r3, [r6, #12]
 8007268:	061b      	lsls	r3, r3, #24
 800726a:	d411      	bmi.n	8007290 <__swhatbuf_r+0x40>
 800726c:	2380      	movs	r3, #128	; 0x80
 800726e:	00db      	lsls	r3, r3, #3
 8007270:	e00f      	b.n	8007292 <__swhatbuf_r+0x42>
 8007272:	466a      	mov	r2, sp
 8007274:	f000 f8a2 	bl	80073bc <_fstat_r>
 8007278:	2800      	cmp	r0, #0
 800727a:	dbf2      	blt.n	8007262 <__swhatbuf_r+0x12>
 800727c:	23f0      	movs	r3, #240	; 0xf0
 800727e:	9901      	ldr	r1, [sp, #4]
 8007280:	021b      	lsls	r3, r3, #8
 8007282:	4019      	ands	r1, r3
 8007284:	4b05      	ldr	r3, [pc, #20]	; (800729c <__swhatbuf_r+0x4c>)
 8007286:	18c9      	adds	r1, r1, r3
 8007288:	424b      	negs	r3, r1
 800728a:	4159      	adcs	r1, r3
 800728c:	6029      	str	r1, [r5, #0]
 800728e:	e7ed      	b.n	800726c <__swhatbuf_r+0x1c>
 8007290:	2340      	movs	r3, #64	; 0x40
 8007292:	2000      	movs	r0, #0
 8007294:	6023      	str	r3, [r4, #0]
 8007296:	b016      	add	sp, #88	; 0x58
 8007298:	bd70      	pop	{r4, r5, r6, pc}
 800729a:	46c0      	nop			; (mov r8, r8)
 800729c:	ffffe000 	.word	0xffffe000

080072a0 <__smakebuf_r>:
 80072a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80072a2:	2602      	movs	r6, #2
 80072a4:	898b      	ldrh	r3, [r1, #12]
 80072a6:	0005      	movs	r5, r0
 80072a8:	000c      	movs	r4, r1
 80072aa:	4233      	tst	r3, r6
 80072ac:	d006      	beq.n	80072bc <__smakebuf_r+0x1c>
 80072ae:	0023      	movs	r3, r4
 80072b0:	3347      	adds	r3, #71	; 0x47
 80072b2:	6023      	str	r3, [r4, #0]
 80072b4:	6123      	str	r3, [r4, #16]
 80072b6:	2301      	movs	r3, #1
 80072b8:	6163      	str	r3, [r4, #20]
 80072ba:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80072bc:	466a      	mov	r2, sp
 80072be:	ab01      	add	r3, sp, #4
 80072c0:	f7ff ffc6 	bl	8007250 <__swhatbuf_r>
 80072c4:	9900      	ldr	r1, [sp, #0]
 80072c6:	0007      	movs	r7, r0
 80072c8:	0028      	movs	r0, r5
 80072ca:	f7ff fba1 	bl	8006a10 <_malloc_r>
 80072ce:	2800      	cmp	r0, #0
 80072d0:	d108      	bne.n	80072e4 <__smakebuf_r+0x44>
 80072d2:	220c      	movs	r2, #12
 80072d4:	5ea3      	ldrsh	r3, [r4, r2]
 80072d6:	059a      	lsls	r2, r3, #22
 80072d8:	d4ef      	bmi.n	80072ba <__smakebuf_r+0x1a>
 80072da:	2203      	movs	r2, #3
 80072dc:	4393      	bics	r3, r2
 80072de:	431e      	orrs	r6, r3
 80072e0:	81a6      	strh	r6, [r4, #12]
 80072e2:	e7e4      	b.n	80072ae <__smakebuf_r+0xe>
 80072e4:	4b0f      	ldr	r3, [pc, #60]	; (8007324 <__smakebuf_r+0x84>)
 80072e6:	62ab      	str	r3, [r5, #40]	; 0x28
 80072e8:	2380      	movs	r3, #128	; 0x80
 80072ea:	89a2      	ldrh	r2, [r4, #12]
 80072ec:	6020      	str	r0, [r4, #0]
 80072ee:	4313      	orrs	r3, r2
 80072f0:	81a3      	strh	r3, [r4, #12]
 80072f2:	9b00      	ldr	r3, [sp, #0]
 80072f4:	6120      	str	r0, [r4, #16]
 80072f6:	6163      	str	r3, [r4, #20]
 80072f8:	9b01      	ldr	r3, [sp, #4]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d00d      	beq.n	800731a <__smakebuf_r+0x7a>
 80072fe:	0028      	movs	r0, r5
 8007300:	230e      	movs	r3, #14
 8007302:	5ee1      	ldrsh	r1, [r4, r3]
 8007304:	f000 f86c 	bl	80073e0 <_isatty_r>
 8007308:	2800      	cmp	r0, #0
 800730a:	d006      	beq.n	800731a <__smakebuf_r+0x7a>
 800730c:	2203      	movs	r2, #3
 800730e:	89a3      	ldrh	r3, [r4, #12]
 8007310:	4393      	bics	r3, r2
 8007312:	001a      	movs	r2, r3
 8007314:	2301      	movs	r3, #1
 8007316:	4313      	orrs	r3, r2
 8007318:	81a3      	strh	r3, [r4, #12]
 800731a:	89a0      	ldrh	r0, [r4, #12]
 800731c:	4307      	orrs	r7, r0
 800731e:	81a7      	strh	r7, [r4, #12]
 8007320:	e7cb      	b.n	80072ba <__smakebuf_r+0x1a>
 8007322:	46c0      	nop			; (mov r8, r8)
 8007324:	0800601d 	.word	0x0800601d

08007328 <__ascii_mbtowc>:
 8007328:	b082      	sub	sp, #8
 800732a:	2900      	cmp	r1, #0
 800732c:	d100      	bne.n	8007330 <__ascii_mbtowc+0x8>
 800732e:	a901      	add	r1, sp, #4
 8007330:	1e10      	subs	r0, r2, #0
 8007332:	d006      	beq.n	8007342 <__ascii_mbtowc+0x1a>
 8007334:	2b00      	cmp	r3, #0
 8007336:	d006      	beq.n	8007346 <__ascii_mbtowc+0x1e>
 8007338:	7813      	ldrb	r3, [r2, #0]
 800733a:	600b      	str	r3, [r1, #0]
 800733c:	7810      	ldrb	r0, [r2, #0]
 800733e:	1e43      	subs	r3, r0, #1
 8007340:	4198      	sbcs	r0, r3
 8007342:	b002      	add	sp, #8
 8007344:	4770      	bx	lr
 8007346:	2002      	movs	r0, #2
 8007348:	4240      	negs	r0, r0
 800734a:	e7fa      	b.n	8007342 <__ascii_mbtowc+0x1a>

0800734c <__malloc_lock>:
 800734c:	b510      	push	{r4, lr}
 800734e:	4802      	ldr	r0, [pc, #8]	; (8007358 <__malloc_lock+0xc>)
 8007350:	f7fe ff47 	bl	80061e2 <__retarget_lock_acquire_recursive>
 8007354:	bd10      	pop	{r4, pc}
 8007356:	46c0      	nop			; (mov r8, r8)
 8007358:	2000029c 	.word	0x2000029c

0800735c <__malloc_unlock>:
 800735c:	b510      	push	{r4, lr}
 800735e:	4802      	ldr	r0, [pc, #8]	; (8007368 <__malloc_unlock+0xc>)
 8007360:	f7fe ff40 	bl	80061e4 <__retarget_lock_release_recursive>
 8007364:	bd10      	pop	{r4, pc}
 8007366:	46c0      	nop			; (mov r8, r8)
 8007368:	2000029c 	.word	0x2000029c

0800736c <_read_r>:
 800736c:	b570      	push	{r4, r5, r6, lr}
 800736e:	0004      	movs	r4, r0
 8007370:	0008      	movs	r0, r1
 8007372:	0011      	movs	r1, r2
 8007374:	001a      	movs	r2, r3
 8007376:	2300      	movs	r3, #0
 8007378:	4d05      	ldr	r5, [pc, #20]	; (8007390 <_read_r+0x24>)
 800737a:	602b      	str	r3, [r5, #0]
 800737c:	f7fb f9d5 	bl	800272a <_read>
 8007380:	1c43      	adds	r3, r0, #1
 8007382:	d103      	bne.n	800738c <_read_r+0x20>
 8007384:	682b      	ldr	r3, [r5, #0]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d000      	beq.n	800738c <_read_r+0x20>
 800738a:	6023      	str	r3, [r4, #0]
 800738c:	bd70      	pop	{r4, r5, r6, pc}
 800738e:	46c0      	nop			; (mov r8, r8)
 8007390:	200002a4 	.word	0x200002a4

08007394 <__ascii_wctomb>:
 8007394:	0003      	movs	r3, r0
 8007396:	1e08      	subs	r0, r1, #0
 8007398:	d005      	beq.n	80073a6 <__ascii_wctomb+0x12>
 800739a:	2aff      	cmp	r2, #255	; 0xff
 800739c:	d904      	bls.n	80073a8 <__ascii_wctomb+0x14>
 800739e:	228a      	movs	r2, #138	; 0x8a
 80073a0:	2001      	movs	r0, #1
 80073a2:	601a      	str	r2, [r3, #0]
 80073a4:	4240      	negs	r0, r0
 80073a6:	4770      	bx	lr
 80073a8:	2001      	movs	r0, #1
 80073aa:	700a      	strb	r2, [r1, #0]
 80073ac:	e7fb      	b.n	80073a6 <__ascii_wctomb+0x12>

080073ae <abort>:
 80073ae:	2006      	movs	r0, #6
 80073b0:	b510      	push	{r4, lr}
 80073b2:	f000 f851 	bl	8007458 <raise>
 80073b6:	2001      	movs	r0, #1
 80073b8:	f7fb f9ab 	bl	8002712 <_exit>

080073bc <_fstat_r>:
 80073bc:	2300      	movs	r3, #0
 80073be:	b570      	push	{r4, r5, r6, lr}
 80073c0:	4d06      	ldr	r5, [pc, #24]	; (80073dc <_fstat_r+0x20>)
 80073c2:	0004      	movs	r4, r0
 80073c4:	0008      	movs	r0, r1
 80073c6:	0011      	movs	r1, r2
 80073c8:	602b      	str	r3, [r5, #0]
 80073ca:	f7fb f9d5 	bl	8002778 <_fstat>
 80073ce:	1c43      	adds	r3, r0, #1
 80073d0:	d103      	bne.n	80073da <_fstat_r+0x1e>
 80073d2:	682b      	ldr	r3, [r5, #0]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d000      	beq.n	80073da <_fstat_r+0x1e>
 80073d8:	6023      	str	r3, [r4, #0]
 80073da:	bd70      	pop	{r4, r5, r6, pc}
 80073dc:	200002a4 	.word	0x200002a4

080073e0 <_isatty_r>:
 80073e0:	2300      	movs	r3, #0
 80073e2:	b570      	push	{r4, r5, r6, lr}
 80073e4:	4d06      	ldr	r5, [pc, #24]	; (8007400 <_isatty_r+0x20>)
 80073e6:	0004      	movs	r4, r0
 80073e8:	0008      	movs	r0, r1
 80073ea:	602b      	str	r3, [r5, #0]
 80073ec:	f7fb f9d2 	bl	8002794 <_isatty>
 80073f0:	1c43      	adds	r3, r0, #1
 80073f2:	d103      	bne.n	80073fc <_isatty_r+0x1c>
 80073f4:	682b      	ldr	r3, [r5, #0]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d000      	beq.n	80073fc <_isatty_r+0x1c>
 80073fa:	6023      	str	r3, [r4, #0]
 80073fc:	bd70      	pop	{r4, r5, r6, pc}
 80073fe:	46c0      	nop			; (mov r8, r8)
 8007400:	200002a4 	.word	0x200002a4

08007404 <_raise_r>:
 8007404:	b570      	push	{r4, r5, r6, lr}
 8007406:	0004      	movs	r4, r0
 8007408:	000d      	movs	r5, r1
 800740a:	291f      	cmp	r1, #31
 800740c:	d904      	bls.n	8007418 <_raise_r+0x14>
 800740e:	2316      	movs	r3, #22
 8007410:	6003      	str	r3, [r0, #0]
 8007412:	2001      	movs	r0, #1
 8007414:	4240      	negs	r0, r0
 8007416:	bd70      	pop	{r4, r5, r6, pc}
 8007418:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800741a:	2b00      	cmp	r3, #0
 800741c:	d004      	beq.n	8007428 <_raise_r+0x24>
 800741e:	008a      	lsls	r2, r1, #2
 8007420:	189b      	adds	r3, r3, r2
 8007422:	681a      	ldr	r2, [r3, #0]
 8007424:	2a00      	cmp	r2, #0
 8007426:	d108      	bne.n	800743a <_raise_r+0x36>
 8007428:	0020      	movs	r0, r4
 800742a:	f000 f831 	bl	8007490 <_getpid_r>
 800742e:	002a      	movs	r2, r5
 8007430:	0001      	movs	r1, r0
 8007432:	0020      	movs	r0, r4
 8007434:	f000 f81a 	bl	800746c <_kill_r>
 8007438:	e7ed      	b.n	8007416 <_raise_r+0x12>
 800743a:	2000      	movs	r0, #0
 800743c:	2a01      	cmp	r2, #1
 800743e:	d0ea      	beq.n	8007416 <_raise_r+0x12>
 8007440:	1c51      	adds	r1, r2, #1
 8007442:	d103      	bne.n	800744c <_raise_r+0x48>
 8007444:	2316      	movs	r3, #22
 8007446:	3001      	adds	r0, #1
 8007448:	6023      	str	r3, [r4, #0]
 800744a:	e7e4      	b.n	8007416 <_raise_r+0x12>
 800744c:	2400      	movs	r4, #0
 800744e:	0028      	movs	r0, r5
 8007450:	601c      	str	r4, [r3, #0]
 8007452:	4790      	blx	r2
 8007454:	0020      	movs	r0, r4
 8007456:	e7de      	b.n	8007416 <_raise_r+0x12>

08007458 <raise>:
 8007458:	b510      	push	{r4, lr}
 800745a:	4b03      	ldr	r3, [pc, #12]	; (8007468 <raise+0x10>)
 800745c:	0001      	movs	r1, r0
 800745e:	6818      	ldr	r0, [r3, #0]
 8007460:	f7ff ffd0 	bl	8007404 <_raise_r>
 8007464:	bd10      	pop	{r4, pc}
 8007466:	46c0      	nop			; (mov r8, r8)
 8007468:	2000000c 	.word	0x2000000c

0800746c <_kill_r>:
 800746c:	2300      	movs	r3, #0
 800746e:	b570      	push	{r4, r5, r6, lr}
 8007470:	4d06      	ldr	r5, [pc, #24]	; (800748c <_kill_r+0x20>)
 8007472:	0004      	movs	r4, r0
 8007474:	0008      	movs	r0, r1
 8007476:	0011      	movs	r1, r2
 8007478:	602b      	str	r3, [r5, #0]
 800747a:	f7fb f93a 	bl	80026f2 <_kill>
 800747e:	1c43      	adds	r3, r0, #1
 8007480:	d103      	bne.n	800748a <_kill_r+0x1e>
 8007482:	682b      	ldr	r3, [r5, #0]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d000      	beq.n	800748a <_kill_r+0x1e>
 8007488:	6023      	str	r3, [r4, #0]
 800748a:	bd70      	pop	{r4, r5, r6, pc}
 800748c:	200002a4 	.word	0x200002a4

08007490 <_getpid_r>:
 8007490:	b510      	push	{r4, lr}
 8007492:	f7fb f928 	bl	80026e6 <_getpid>
 8007496:	bd10      	pop	{r4, pc}

08007498 <_init>:
 8007498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800749a:	46c0      	nop			; (mov r8, r8)
 800749c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800749e:	bc08      	pop	{r3}
 80074a0:	469e      	mov	lr, r3
 80074a2:	4770      	bx	lr

080074a4 <_fini>:
 80074a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074a6:	46c0      	nop			; (mov r8, r8)
 80074a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074aa:	bc08      	pop	{r3}
 80074ac:	469e      	mov	lr, r3
 80074ae:	4770      	bx	lr
