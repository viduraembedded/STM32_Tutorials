
Button_Polling.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001488  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08001544  08001544  00011544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001584  08001584  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001584  08001584  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001584  08001584  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001584  08001584  00011584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001588  08001588  00011588  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800158c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08001598  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08001598  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000044ed  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001117  00000000  00000000  00024521  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000004c8  00000000  00000000  00025638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000430  00000000  00000000  00025b00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015c0c  00000000  00000000  00025f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005511  00000000  00000000  0003bb3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008aab8  00000000  00000000  0004104d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cbb05  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000f34  00000000  00000000  000cbb58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800152c 	.word	0x0800152c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	0800152c 	.word	0x0800152c

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000220:	f000 f95c 	bl	80004dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000224:	f000 f82a 	bl	800027c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000228:	f000 f886 	bl	8000338 <MX_GPIO_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 if ( HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin) == GPIO_PIN_RESET) {
 800022c:	2380      	movs	r3, #128	; 0x80
 800022e:	019b      	lsls	r3, r3, #6
 8000230:	4a11      	ldr	r2, [pc, #68]	; (8000278 <main+0x5c>)
 8000232:	0019      	movs	r1, r3
 8000234:	0010      	movs	r0, r2
 8000236:	f000 fc29 	bl	8000a8c <HAL_GPIO_ReadPin>
 800023a:	1e03      	subs	r3, r0, #0
 800023c:	d113      	bne.n	8000266 <main+0x4a>
		 HAL_Delay(50); // Reduce the de-bouncing effect
 800023e:	2032      	movs	r0, #50	; 0x32
 8000240:	f000 f9d2 	bl	80005e8 <HAL_Delay>
		 if (HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin) == GPIO_PIN_RESET){
 8000244:	2380      	movs	r3, #128	; 0x80
 8000246:	019b      	lsls	r3, r3, #6
 8000248:	4a0b      	ldr	r2, [pc, #44]	; (8000278 <main+0x5c>)
 800024a:	0019      	movs	r1, r3
 800024c:	0010      	movs	r0, r2
 800024e:	f000 fc1d 	bl	8000a8c <HAL_GPIO_ReadPin>
 8000252:	1e03      	subs	r3, r0, #0
 8000254:	d1ea      	bne.n	800022c <main+0x10>
			 HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
 8000256:	23a0      	movs	r3, #160	; 0xa0
 8000258:	05db      	lsls	r3, r3, #23
 800025a:	2201      	movs	r2, #1
 800025c:	2120      	movs	r1, #32
 800025e:	0018      	movs	r0, r3
 8000260:	f000 fc31 	bl	8000ac6 <HAL_GPIO_WritePin>
 8000264:	e7e2      	b.n	800022c <main+0x10>
		 }

	} else {
		HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8000266:	23a0      	movs	r3, #160	; 0xa0
 8000268:	05db      	lsls	r3, r3, #23
 800026a:	2200      	movs	r2, #0
 800026c:	2120      	movs	r1, #32
 800026e:	0018      	movs	r0, r3
 8000270:	f000 fc29 	bl	8000ac6 <HAL_GPIO_WritePin>
	 if ( HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin) == GPIO_PIN_RESET) {
 8000274:	e7da      	b.n	800022c <main+0x10>
 8000276:	46c0      	nop			; (mov r8, r8)
 8000278:	50000800 	.word	0x50000800

0800027c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800027c:	b590      	push	{r4, r7, lr}
 800027e:	b093      	sub	sp, #76	; 0x4c
 8000280:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000282:	2410      	movs	r4, #16
 8000284:	193b      	adds	r3, r7, r4
 8000286:	0018      	movs	r0, r3
 8000288:	2338      	movs	r3, #56	; 0x38
 800028a:	001a      	movs	r2, r3
 800028c:	2100      	movs	r1, #0
 800028e:	f001 f945 	bl	800151c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000292:	003b      	movs	r3, r7
 8000294:	0018      	movs	r0, r3
 8000296:	2310      	movs	r3, #16
 8000298:	001a      	movs	r2, r3
 800029a:	2100      	movs	r1, #0
 800029c:	f001 f93e 	bl	800151c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002a0:	2380      	movs	r3, #128	; 0x80
 80002a2:	009b      	lsls	r3, r3, #2
 80002a4:	0018      	movs	r0, r3
 80002a6:	f000 fc2b 	bl	8000b00 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002aa:	193b      	adds	r3, r7, r4
 80002ac:	2202      	movs	r2, #2
 80002ae:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002b0:	193b      	adds	r3, r7, r4
 80002b2:	2280      	movs	r2, #128	; 0x80
 80002b4:	0052      	lsls	r2, r2, #1
 80002b6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80002b8:	0021      	movs	r1, r4
 80002ba:	187b      	adds	r3, r7, r1
 80002bc:	2200      	movs	r2, #0
 80002be:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002c0:	187b      	adds	r3, r7, r1
 80002c2:	2240      	movs	r2, #64	; 0x40
 80002c4:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002c6:	187b      	adds	r3, r7, r1
 80002c8:	2202      	movs	r2, #2
 80002ca:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002cc:	187b      	adds	r3, r7, r1
 80002ce:	2202      	movs	r2, #2
 80002d0:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80002d2:	187b      	adds	r3, r7, r1
 80002d4:	2200      	movs	r2, #0
 80002d6:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80002d8:	187b      	adds	r3, r7, r1
 80002da:	2208      	movs	r2, #8
 80002dc:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80002de:	187b      	adds	r3, r7, r1
 80002e0:	2280      	movs	r2, #128	; 0x80
 80002e2:	0292      	lsls	r2, r2, #10
 80002e4:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002e6:	187b      	adds	r3, r7, r1
 80002e8:	2280      	movs	r2, #128	; 0x80
 80002ea:	0492      	lsls	r2, r2, #18
 80002ec:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002ee:	187b      	adds	r3, r7, r1
 80002f0:	2280      	movs	r2, #128	; 0x80
 80002f2:	0592      	lsls	r2, r2, #22
 80002f4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002f6:	187b      	adds	r3, r7, r1
 80002f8:	0018      	movs	r0, r3
 80002fa:	f000 fc41 	bl	8000b80 <HAL_RCC_OscConfig>
 80002fe:	1e03      	subs	r3, r0, #0
 8000300:	d001      	beq.n	8000306 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000302:	f000 f86f 	bl	80003e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000306:	003b      	movs	r3, r7
 8000308:	2207      	movs	r2, #7
 800030a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800030c:	003b      	movs	r3, r7
 800030e:	2202      	movs	r2, #2
 8000310:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000312:	003b      	movs	r3, r7
 8000314:	2200      	movs	r2, #0
 8000316:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000318:	003b      	movs	r3, r7
 800031a:	2200      	movs	r2, #0
 800031c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800031e:	003b      	movs	r3, r7
 8000320:	2102      	movs	r1, #2
 8000322:	0018      	movs	r0, r3
 8000324:	f000 ff4c 	bl	80011c0 <HAL_RCC_ClockConfig>
 8000328:	1e03      	subs	r3, r0, #0
 800032a:	d001      	beq.n	8000330 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800032c:	f000 f85a 	bl	80003e4 <Error_Handler>
  }
}
 8000330:	46c0      	nop			; (mov r8, r8)
 8000332:	46bd      	mov	sp, r7
 8000334:	b013      	add	sp, #76	; 0x4c
 8000336:	bd90      	pop	{r4, r7, pc}

08000338 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000338:	b590      	push	{r4, r7, lr}
 800033a:	b089      	sub	sp, #36	; 0x24
 800033c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800033e:	240c      	movs	r4, #12
 8000340:	193b      	adds	r3, r7, r4
 8000342:	0018      	movs	r0, r3
 8000344:	2314      	movs	r3, #20
 8000346:	001a      	movs	r2, r3
 8000348:	2100      	movs	r1, #0
 800034a:	f001 f8e7 	bl	800151c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800034e:	4b23      	ldr	r3, [pc, #140]	; (80003dc <MX_GPIO_Init+0xa4>)
 8000350:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000352:	4b22      	ldr	r3, [pc, #136]	; (80003dc <MX_GPIO_Init+0xa4>)
 8000354:	2104      	movs	r1, #4
 8000356:	430a      	orrs	r2, r1
 8000358:	635a      	str	r2, [r3, #52]	; 0x34
 800035a:	4b20      	ldr	r3, [pc, #128]	; (80003dc <MX_GPIO_Init+0xa4>)
 800035c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800035e:	2204      	movs	r2, #4
 8000360:	4013      	ands	r3, r2
 8000362:	60bb      	str	r3, [r7, #8]
 8000364:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000366:	4b1d      	ldr	r3, [pc, #116]	; (80003dc <MX_GPIO_Init+0xa4>)
 8000368:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800036a:	4b1c      	ldr	r3, [pc, #112]	; (80003dc <MX_GPIO_Init+0xa4>)
 800036c:	2101      	movs	r1, #1
 800036e:	430a      	orrs	r2, r1
 8000370:	635a      	str	r2, [r3, #52]	; 0x34
 8000372:	4b1a      	ldr	r3, [pc, #104]	; (80003dc <MX_GPIO_Init+0xa4>)
 8000374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000376:	2201      	movs	r2, #1
 8000378:	4013      	ands	r3, r2
 800037a:	607b      	str	r3, [r7, #4]
 800037c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 800037e:	23a0      	movs	r3, #160	; 0xa0
 8000380:	05db      	lsls	r3, r3, #23
 8000382:	2200      	movs	r2, #0
 8000384:	2120      	movs	r1, #32
 8000386:	0018      	movs	r0, r3
 8000388:	f000 fb9d 	bl	8000ac6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 800038c:	193b      	adds	r3, r7, r4
 800038e:	2280      	movs	r2, #128	; 0x80
 8000390:	0192      	lsls	r2, r2, #6
 8000392:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000394:	193b      	adds	r3, r7, r4
 8000396:	2200      	movs	r2, #0
 8000398:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800039a:	193b      	adds	r3, r7, r4
 800039c:	2200      	movs	r2, #0
 800039e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80003a0:	193b      	adds	r3, r7, r4
 80003a2:	4a0f      	ldr	r2, [pc, #60]	; (80003e0 <MX_GPIO_Init+0xa8>)
 80003a4:	0019      	movs	r1, r3
 80003a6:	0010      	movs	r0, r2
 80003a8:	f000 fa0c 	bl	80007c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : GREEN_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin;
 80003ac:	0021      	movs	r1, r4
 80003ae:	187b      	adds	r3, r7, r1
 80003b0:	2220      	movs	r2, #32
 80003b2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003b4:	187b      	adds	r3, r7, r1
 80003b6:	2201      	movs	r2, #1
 80003b8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ba:	187b      	adds	r3, r7, r1
 80003bc:	2200      	movs	r2, #0
 80003be:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003c0:	187b      	adds	r3, r7, r1
 80003c2:	2200      	movs	r2, #0
 80003c4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 80003c6:	187a      	adds	r2, r7, r1
 80003c8:	23a0      	movs	r3, #160	; 0xa0
 80003ca:	05db      	lsls	r3, r3, #23
 80003cc:	0011      	movs	r1, r2
 80003ce:	0018      	movs	r0, r3
 80003d0:	f000 f9f8 	bl	80007c4 <HAL_GPIO_Init>

}
 80003d4:	46c0      	nop			; (mov r8, r8)
 80003d6:	46bd      	mov	sp, r7
 80003d8:	b009      	add	sp, #36	; 0x24
 80003da:	bd90      	pop	{r4, r7, pc}
 80003dc:	40021000 	.word	0x40021000
 80003e0:	50000800 	.word	0x50000800

080003e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003e8:	b672      	cpsid	i
}
 80003ea:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003ec:	e7fe      	b.n	80003ec <Error_Handler+0x8>
	...

080003f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b082      	sub	sp, #8
 80003f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003f6:	4b11      	ldr	r3, [pc, #68]	; (800043c <HAL_MspInit+0x4c>)
 80003f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80003fa:	4b10      	ldr	r3, [pc, #64]	; (800043c <HAL_MspInit+0x4c>)
 80003fc:	2101      	movs	r1, #1
 80003fe:	430a      	orrs	r2, r1
 8000400:	641a      	str	r2, [r3, #64]	; 0x40
 8000402:	4b0e      	ldr	r3, [pc, #56]	; (800043c <HAL_MspInit+0x4c>)
 8000404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000406:	2201      	movs	r2, #1
 8000408:	4013      	ands	r3, r2
 800040a:	607b      	str	r3, [r7, #4]
 800040c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800040e:	4b0b      	ldr	r3, [pc, #44]	; (800043c <HAL_MspInit+0x4c>)
 8000410:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000412:	4b0a      	ldr	r3, [pc, #40]	; (800043c <HAL_MspInit+0x4c>)
 8000414:	2180      	movs	r1, #128	; 0x80
 8000416:	0549      	lsls	r1, r1, #21
 8000418:	430a      	orrs	r2, r1
 800041a:	63da      	str	r2, [r3, #60]	; 0x3c
 800041c:	4b07      	ldr	r3, [pc, #28]	; (800043c <HAL_MspInit+0x4c>)
 800041e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000420:	2380      	movs	r3, #128	; 0x80
 8000422:	055b      	lsls	r3, r3, #21
 8000424:	4013      	ands	r3, r2
 8000426:	603b      	str	r3, [r7, #0]
 8000428:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 800042a:	23c0      	movs	r3, #192	; 0xc0
 800042c:	00db      	lsls	r3, r3, #3
 800042e:	0018      	movs	r0, r3
 8000430:	f000 f8fe 	bl	8000630 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000434:	46c0      	nop			; (mov r8, r8)
 8000436:	46bd      	mov	sp, r7
 8000438:	b002      	add	sp, #8
 800043a:	bd80      	pop	{r7, pc}
 800043c:	40021000 	.word	0x40021000

08000440 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000444:	e7fe      	b.n	8000444 <NMI_Handler+0x4>

08000446 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000446:	b580      	push	{r7, lr}
 8000448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800044a:	e7fe      	b.n	800044a <HardFault_Handler+0x4>

0800044c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000450:	46c0      	nop			; (mov r8, r8)
 8000452:	46bd      	mov	sp, r7
 8000454:	bd80      	pop	{r7, pc}

08000456 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000456:	b580      	push	{r7, lr}
 8000458:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800045a:	46c0      	nop			; (mov r8, r8)
 800045c:	46bd      	mov	sp, r7
 800045e:	bd80      	pop	{r7, pc}

08000460 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000464:	f000 f8a4 	bl	80005b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000468:	46c0      	nop			; (mov r8, r8)
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}
	...

08000470 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000474:	4b03      	ldr	r3, [pc, #12]	; (8000484 <SystemInit+0x14>)
 8000476:	2280      	movs	r2, #128	; 0x80
 8000478:	0512      	lsls	r2, r2, #20
 800047a:	609a      	str	r2, [r3, #8]
#endif
}
 800047c:	46c0      	nop			; (mov r8, r8)
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}
 8000482:	46c0      	nop			; (mov r8, r8)
 8000484:	e000ed00 	.word	0xe000ed00

08000488 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000488:	480d      	ldr	r0, [pc, #52]	; (80004c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800048a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800048c:	f7ff fff0 	bl	8000470 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000490:	480c      	ldr	r0, [pc, #48]	; (80004c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000492:	490d      	ldr	r1, [pc, #52]	; (80004c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000494:	4a0d      	ldr	r2, [pc, #52]	; (80004cc <LoopForever+0xe>)
  movs r3, #0
 8000496:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000498:	e002      	b.n	80004a0 <LoopCopyDataInit>

0800049a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800049a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800049c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800049e:	3304      	adds	r3, #4

080004a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004a4:	d3f9      	bcc.n	800049a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004a6:	4a0a      	ldr	r2, [pc, #40]	; (80004d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004a8:	4c0a      	ldr	r4, [pc, #40]	; (80004d4 <LoopForever+0x16>)
  movs r3, #0
 80004aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004ac:	e001      	b.n	80004b2 <LoopFillZerobss>

080004ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004b0:	3204      	adds	r2, #4

080004b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004b4:	d3fb      	bcc.n	80004ae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004b6:	f001 f80d 	bl	80014d4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80004ba:	f7ff feaf 	bl	800021c <main>

080004be <LoopForever>:

LoopForever:
  b LoopForever
 80004be:	e7fe      	b.n	80004be <LoopForever>
  ldr   r0, =_estack
 80004c0:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80004c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004c8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80004cc:	0800158c 	.word	0x0800158c
  ldr r2, =_sbss
 80004d0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80004d4:	2000002c 	.word	0x2000002c

080004d8 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004d8:	e7fe      	b.n	80004d8 <ADC1_COMP_IRQHandler>
	...

080004dc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80004e2:	1dfb      	adds	r3, r7, #7
 80004e4:	2200      	movs	r2, #0
 80004e6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004e8:	4b0b      	ldr	r3, [pc, #44]	; (8000518 <HAL_Init+0x3c>)
 80004ea:	681a      	ldr	r2, [r3, #0]
 80004ec:	4b0a      	ldr	r3, [pc, #40]	; (8000518 <HAL_Init+0x3c>)
 80004ee:	2180      	movs	r1, #128	; 0x80
 80004f0:	0049      	lsls	r1, r1, #1
 80004f2:	430a      	orrs	r2, r1
 80004f4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80004f6:	2000      	movs	r0, #0
 80004f8:	f000 f810 	bl	800051c <HAL_InitTick>
 80004fc:	1e03      	subs	r3, r0, #0
 80004fe:	d003      	beq.n	8000508 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000500:	1dfb      	adds	r3, r7, #7
 8000502:	2201      	movs	r2, #1
 8000504:	701a      	strb	r2, [r3, #0]
 8000506:	e001      	b.n	800050c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000508:	f7ff ff72 	bl	80003f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800050c:	1dfb      	adds	r3, r7, #7
 800050e:	781b      	ldrb	r3, [r3, #0]
}
 8000510:	0018      	movs	r0, r3
 8000512:	46bd      	mov	sp, r7
 8000514:	b002      	add	sp, #8
 8000516:	bd80      	pop	{r7, pc}
 8000518:	40022000 	.word	0x40022000

0800051c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800051c:	b590      	push	{r4, r7, lr}
 800051e:	b085      	sub	sp, #20
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000524:	230f      	movs	r3, #15
 8000526:	18fb      	adds	r3, r7, r3
 8000528:	2200      	movs	r2, #0
 800052a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800052c:	4b1d      	ldr	r3, [pc, #116]	; (80005a4 <HAL_InitTick+0x88>)
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	2b00      	cmp	r3, #0
 8000532:	d02b      	beq.n	800058c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000534:	4b1c      	ldr	r3, [pc, #112]	; (80005a8 <HAL_InitTick+0x8c>)
 8000536:	681c      	ldr	r4, [r3, #0]
 8000538:	4b1a      	ldr	r3, [pc, #104]	; (80005a4 <HAL_InitTick+0x88>)
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	0019      	movs	r1, r3
 800053e:	23fa      	movs	r3, #250	; 0xfa
 8000540:	0098      	lsls	r0, r3, #2
 8000542:	f7ff fddf 	bl	8000104 <__udivsi3>
 8000546:	0003      	movs	r3, r0
 8000548:	0019      	movs	r1, r3
 800054a:	0020      	movs	r0, r4
 800054c:	f7ff fdda 	bl	8000104 <__udivsi3>
 8000550:	0003      	movs	r3, r0
 8000552:	0018      	movs	r0, r3
 8000554:	f000 f929 	bl	80007aa <HAL_SYSTICK_Config>
 8000558:	1e03      	subs	r3, r0, #0
 800055a:	d112      	bne.n	8000582 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	2b03      	cmp	r3, #3
 8000560:	d80a      	bhi.n	8000578 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000562:	6879      	ldr	r1, [r7, #4]
 8000564:	2301      	movs	r3, #1
 8000566:	425b      	negs	r3, r3
 8000568:	2200      	movs	r2, #0
 800056a:	0018      	movs	r0, r3
 800056c:	f000 f908 	bl	8000780 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000570:	4b0e      	ldr	r3, [pc, #56]	; (80005ac <HAL_InitTick+0x90>)
 8000572:	687a      	ldr	r2, [r7, #4]
 8000574:	601a      	str	r2, [r3, #0]
 8000576:	e00d      	b.n	8000594 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000578:	230f      	movs	r3, #15
 800057a:	18fb      	adds	r3, r7, r3
 800057c:	2201      	movs	r2, #1
 800057e:	701a      	strb	r2, [r3, #0]
 8000580:	e008      	b.n	8000594 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000582:	230f      	movs	r3, #15
 8000584:	18fb      	adds	r3, r7, r3
 8000586:	2201      	movs	r2, #1
 8000588:	701a      	strb	r2, [r3, #0]
 800058a:	e003      	b.n	8000594 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800058c:	230f      	movs	r3, #15
 800058e:	18fb      	adds	r3, r7, r3
 8000590:	2201      	movs	r2, #1
 8000592:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000594:	230f      	movs	r3, #15
 8000596:	18fb      	adds	r3, r7, r3
 8000598:	781b      	ldrb	r3, [r3, #0]
}
 800059a:	0018      	movs	r0, r3
 800059c:	46bd      	mov	sp, r7
 800059e:	b005      	add	sp, #20
 80005a0:	bd90      	pop	{r4, r7, pc}
 80005a2:	46c0      	nop			; (mov r8, r8)
 80005a4:	20000008 	.word	0x20000008
 80005a8:	20000000 	.word	0x20000000
 80005ac:	20000004 	.word	0x20000004

080005b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80005b4:	4b05      	ldr	r3, [pc, #20]	; (80005cc <HAL_IncTick+0x1c>)
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	001a      	movs	r2, r3
 80005ba:	4b05      	ldr	r3, [pc, #20]	; (80005d0 <HAL_IncTick+0x20>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	18d2      	adds	r2, r2, r3
 80005c0:	4b03      	ldr	r3, [pc, #12]	; (80005d0 <HAL_IncTick+0x20>)
 80005c2:	601a      	str	r2, [r3, #0]
}
 80005c4:	46c0      	nop			; (mov r8, r8)
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	46c0      	nop			; (mov r8, r8)
 80005cc:	20000008 	.word	0x20000008
 80005d0:	20000028 	.word	0x20000028

080005d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  return uwTick;
 80005d8:	4b02      	ldr	r3, [pc, #8]	; (80005e4 <HAL_GetTick+0x10>)
 80005da:	681b      	ldr	r3, [r3, #0]
}
 80005dc:	0018      	movs	r0, r3
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	46c0      	nop			; (mov r8, r8)
 80005e4:	20000028 	.word	0x20000028

080005e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005f0:	f7ff fff0 	bl	80005d4 <HAL_GetTick>
 80005f4:	0003      	movs	r3, r0
 80005f6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	3301      	adds	r3, #1
 8000600:	d005      	beq.n	800060e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000602:	4b0a      	ldr	r3, [pc, #40]	; (800062c <HAL_Delay+0x44>)
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	001a      	movs	r2, r3
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	189b      	adds	r3, r3, r2
 800060c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800060e:	46c0      	nop			; (mov r8, r8)
 8000610:	f7ff ffe0 	bl	80005d4 <HAL_GetTick>
 8000614:	0002      	movs	r2, r0
 8000616:	68bb      	ldr	r3, [r7, #8]
 8000618:	1ad3      	subs	r3, r2, r3
 800061a:	68fa      	ldr	r2, [r7, #12]
 800061c:	429a      	cmp	r2, r3
 800061e:	d8f7      	bhi.n	8000610 <HAL_Delay+0x28>
  {
  }
}
 8000620:	46c0      	nop			; (mov r8, r8)
 8000622:	46c0      	nop			; (mov r8, r8)
 8000624:	46bd      	mov	sp, r7
 8000626:	b004      	add	sp, #16
 8000628:	bd80      	pop	{r7, pc}
 800062a:	46c0      	nop			; (mov r8, r8)
 800062c:	20000008 	.word	0x20000008

08000630 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000638:	4b06      	ldr	r3, [pc, #24]	; (8000654 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a06      	ldr	r2, [pc, #24]	; (8000658 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 800063e:	4013      	ands	r3, r2
 8000640:	0019      	movs	r1, r3
 8000642:	4b04      	ldr	r3, [pc, #16]	; (8000654 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000644:	687a      	ldr	r2, [r7, #4]
 8000646:	430a      	orrs	r2, r1
 8000648:	601a      	str	r2, [r3, #0]
}
 800064a:	46c0      	nop			; (mov r8, r8)
 800064c:	46bd      	mov	sp, r7
 800064e:	b002      	add	sp, #8
 8000650:	bd80      	pop	{r7, pc}
 8000652:	46c0      	nop			; (mov r8, r8)
 8000654:	40010000 	.word	0x40010000
 8000658:	fffff9ff 	.word	0xfffff9ff

0800065c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800065c:	b590      	push	{r4, r7, lr}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
 8000662:	0002      	movs	r2, r0
 8000664:	6039      	str	r1, [r7, #0]
 8000666:	1dfb      	adds	r3, r7, #7
 8000668:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800066a:	1dfb      	adds	r3, r7, #7
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	2b7f      	cmp	r3, #127	; 0x7f
 8000670:	d828      	bhi.n	80006c4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000672:	4a2f      	ldr	r2, [pc, #188]	; (8000730 <__NVIC_SetPriority+0xd4>)
 8000674:	1dfb      	adds	r3, r7, #7
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	b25b      	sxtb	r3, r3
 800067a:	089b      	lsrs	r3, r3, #2
 800067c:	33c0      	adds	r3, #192	; 0xc0
 800067e:	009b      	lsls	r3, r3, #2
 8000680:	589b      	ldr	r3, [r3, r2]
 8000682:	1dfa      	adds	r2, r7, #7
 8000684:	7812      	ldrb	r2, [r2, #0]
 8000686:	0011      	movs	r1, r2
 8000688:	2203      	movs	r2, #3
 800068a:	400a      	ands	r2, r1
 800068c:	00d2      	lsls	r2, r2, #3
 800068e:	21ff      	movs	r1, #255	; 0xff
 8000690:	4091      	lsls	r1, r2
 8000692:	000a      	movs	r2, r1
 8000694:	43d2      	mvns	r2, r2
 8000696:	401a      	ands	r2, r3
 8000698:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	019b      	lsls	r3, r3, #6
 800069e:	22ff      	movs	r2, #255	; 0xff
 80006a0:	401a      	ands	r2, r3
 80006a2:	1dfb      	adds	r3, r7, #7
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	0018      	movs	r0, r3
 80006a8:	2303      	movs	r3, #3
 80006aa:	4003      	ands	r3, r0
 80006ac:	00db      	lsls	r3, r3, #3
 80006ae:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006b0:	481f      	ldr	r0, [pc, #124]	; (8000730 <__NVIC_SetPriority+0xd4>)
 80006b2:	1dfb      	adds	r3, r7, #7
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	b25b      	sxtb	r3, r3
 80006b8:	089b      	lsrs	r3, r3, #2
 80006ba:	430a      	orrs	r2, r1
 80006bc:	33c0      	adds	r3, #192	; 0xc0
 80006be:	009b      	lsls	r3, r3, #2
 80006c0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80006c2:	e031      	b.n	8000728 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006c4:	4a1b      	ldr	r2, [pc, #108]	; (8000734 <__NVIC_SetPriority+0xd8>)
 80006c6:	1dfb      	adds	r3, r7, #7
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	0019      	movs	r1, r3
 80006cc:	230f      	movs	r3, #15
 80006ce:	400b      	ands	r3, r1
 80006d0:	3b08      	subs	r3, #8
 80006d2:	089b      	lsrs	r3, r3, #2
 80006d4:	3306      	adds	r3, #6
 80006d6:	009b      	lsls	r3, r3, #2
 80006d8:	18d3      	adds	r3, r2, r3
 80006da:	3304      	adds	r3, #4
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	1dfa      	adds	r2, r7, #7
 80006e0:	7812      	ldrb	r2, [r2, #0]
 80006e2:	0011      	movs	r1, r2
 80006e4:	2203      	movs	r2, #3
 80006e6:	400a      	ands	r2, r1
 80006e8:	00d2      	lsls	r2, r2, #3
 80006ea:	21ff      	movs	r1, #255	; 0xff
 80006ec:	4091      	lsls	r1, r2
 80006ee:	000a      	movs	r2, r1
 80006f0:	43d2      	mvns	r2, r2
 80006f2:	401a      	ands	r2, r3
 80006f4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	019b      	lsls	r3, r3, #6
 80006fa:	22ff      	movs	r2, #255	; 0xff
 80006fc:	401a      	ands	r2, r3
 80006fe:	1dfb      	adds	r3, r7, #7
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	0018      	movs	r0, r3
 8000704:	2303      	movs	r3, #3
 8000706:	4003      	ands	r3, r0
 8000708:	00db      	lsls	r3, r3, #3
 800070a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800070c:	4809      	ldr	r0, [pc, #36]	; (8000734 <__NVIC_SetPriority+0xd8>)
 800070e:	1dfb      	adds	r3, r7, #7
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	001c      	movs	r4, r3
 8000714:	230f      	movs	r3, #15
 8000716:	4023      	ands	r3, r4
 8000718:	3b08      	subs	r3, #8
 800071a:	089b      	lsrs	r3, r3, #2
 800071c:	430a      	orrs	r2, r1
 800071e:	3306      	adds	r3, #6
 8000720:	009b      	lsls	r3, r3, #2
 8000722:	18c3      	adds	r3, r0, r3
 8000724:	3304      	adds	r3, #4
 8000726:	601a      	str	r2, [r3, #0]
}
 8000728:	46c0      	nop			; (mov r8, r8)
 800072a:	46bd      	mov	sp, r7
 800072c:	b003      	add	sp, #12
 800072e:	bd90      	pop	{r4, r7, pc}
 8000730:	e000e100 	.word	0xe000e100
 8000734:	e000ed00 	.word	0xe000ed00

08000738 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	1e5a      	subs	r2, r3, #1
 8000744:	2380      	movs	r3, #128	; 0x80
 8000746:	045b      	lsls	r3, r3, #17
 8000748:	429a      	cmp	r2, r3
 800074a:	d301      	bcc.n	8000750 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800074c:	2301      	movs	r3, #1
 800074e:	e010      	b.n	8000772 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000750:	4b0a      	ldr	r3, [pc, #40]	; (800077c <SysTick_Config+0x44>)
 8000752:	687a      	ldr	r2, [r7, #4]
 8000754:	3a01      	subs	r2, #1
 8000756:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000758:	2301      	movs	r3, #1
 800075a:	425b      	negs	r3, r3
 800075c:	2103      	movs	r1, #3
 800075e:	0018      	movs	r0, r3
 8000760:	f7ff ff7c 	bl	800065c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000764:	4b05      	ldr	r3, [pc, #20]	; (800077c <SysTick_Config+0x44>)
 8000766:	2200      	movs	r2, #0
 8000768:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800076a:	4b04      	ldr	r3, [pc, #16]	; (800077c <SysTick_Config+0x44>)
 800076c:	2207      	movs	r2, #7
 800076e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000770:	2300      	movs	r3, #0
}
 8000772:	0018      	movs	r0, r3
 8000774:	46bd      	mov	sp, r7
 8000776:	b002      	add	sp, #8
 8000778:	bd80      	pop	{r7, pc}
 800077a:	46c0      	nop			; (mov r8, r8)
 800077c:	e000e010 	.word	0xe000e010

08000780 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0
 8000786:	60b9      	str	r1, [r7, #8]
 8000788:	607a      	str	r2, [r7, #4]
 800078a:	210f      	movs	r1, #15
 800078c:	187b      	adds	r3, r7, r1
 800078e:	1c02      	adds	r2, r0, #0
 8000790:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000792:	68ba      	ldr	r2, [r7, #8]
 8000794:	187b      	adds	r3, r7, r1
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	b25b      	sxtb	r3, r3
 800079a:	0011      	movs	r1, r2
 800079c:	0018      	movs	r0, r3
 800079e:	f7ff ff5d 	bl	800065c <__NVIC_SetPriority>
}
 80007a2:	46c0      	nop			; (mov r8, r8)
 80007a4:	46bd      	mov	sp, r7
 80007a6:	b004      	add	sp, #16
 80007a8:	bd80      	pop	{r7, pc}

080007aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007aa:	b580      	push	{r7, lr}
 80007ac:	b082      	sub	sp, #8
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	0018      	movs	r0, r3
 80007b6:	f7ff ffbf 	bl	8000738 <SysTick_Config>
 80007ba:	0003      	movs	r3, r0
}
 80007bc:	0018      	movs	r0, r3
 80007be:	46bd      	mov	sp, r7
 80007c0:	b002      	add	sp, #8
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b086      	sub	sp, #24
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
 80007cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80007ce:	2300      	movs	r3, #0
 80007d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007d2:	e147      	b.n	8000a64 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	2101      	movs	r1, #1
 80007da:	697a      	ldr	r2, [r7, #20]
 80007dc:	4091      	lsls	r1, r2
 80007de:	000a      	movs	r2, r1
 80007e0:	4013      	ands	r3, r2
 80007e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d100      	bne.n	80007ec <HAL_GPIO_Init+0x28>
 80007ea:	e138      	b.n	8000a5e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	685b      	ldr	r3, [r3, #4]
 80007f0:	2b01      	cmp	r3, #1
 80007f2:	d00b      	beq.n	800080c <HAL_GPIO_Init+0x48>
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	685b      	ldr	r3, [r3, #4]
 80007f8:	2b02      	cmp	r3, #2
 80007fa:	d007      	beq.n	800080c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000800:	2b11      	cmp	r3, #17
 8000802:	d003      	beq.n	800080c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	685b      	ldr	r3, [r3, #4]
 8000808:	2b12      	cmp	r3, #18
 800080a:	d130      	bne.n	800086e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	689b      	ldr	r3, [r3, #8]
 8000810:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000812:	697b      	ldr	r3, [r7, #20]
 8000814:	005b      	lsls	r3, r3, #1
 8000816:	2203      	movs	r2, #3
 8000818:	409a      	lsls	r2, r3
 800081a:	0013      	movs	r3, r2
 800081c:	43da      	mvns	r2, r3
 800081e:	693b      	ldr	r3, [r7, #16]
 8000820:	4013      	ands	r3, r2
 8000822:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	68da      	ldr	r2, [r3, #12]
 8000828:	697b      	ldr	r3, [r7, #20]
 800082a:	005b      	lsls	r3, r3, #1
 800082c:	409a      	lsls	r2, r3
 800082e:	0013      	movs	r3, r2
 8000830:	693a      	ldr	r2, [r7, #16]
 8000832:	4313      	orrs	r3, r2
 8000834:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	693a      	ldr	r2, [r7, #16]
 800083a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	685b      	ldr	r3, [r3, #4]
 8000840:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000842:	2201      	movs	r2, #1
 8000844:	697b      	ldr	r3, [r7, #20]
 8000846:	409a      	lsls	r2, r3
 8000848:	0013      	movs	r3, r2
 800084a:	43da      	mvns	r2, r3
 800084c:	693b      	ldr	r3, [r7, #16]
 800084e:	4013      	ands	r3, r2
 8000850:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	685b      	ldr	r3, [r3, #4]
 8000856:	091b      	lsrs	r3, r3, #4
 8000858:	2201      	movs	r2, #1
 800085a:	401a      	ands	r2, r3
 800085c:	697b      	ldr	r3, [r7, #20]
 800085e:	409a      	lsls	r2, r3
 8000860:	0013      	movs	r3, r2
 8000862:	693a      	ldr	r2, [r7, #16]
 8000864:	4313      	orrs	r3, r2
 8000866:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	693a      	ldr	r2, [r7, #16]
 800086c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	68db      	ldr	r3, [r3, #12]
 8000872:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000874:	697b      	ldr	r3, [r7, #20]
 8000876:	005b      	lsls	r3, r3, #1
 8000878:	2203      	movs	r2, #3
 800087a:	409a      	lsls	r2, r3
 800087c:	0013      	movs	r3, r2
 800087e:	43da      	mvns	r2, r3
 8000880:	693b      	ldr	r3, [r7, #16]
 8000882:	4013      	ands	r3, r2
 8000884:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	689a      	ldr	r2, [r3, #8]
 800088a:	697b      	ldr	r3, [r7, #20]
 800088c:	005b      	lsls	r3, r3, #1
 800088e:	409a      	lsls	r2, r3
 8000890:	0013      	movs	r3, r2
 8000892:	693a      	ldr	r2, [r7, #16]
 8000894:	4313      	orrs	r3, r2
 8000896:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	693a      	ldr	r2, [r7, #16]
 800089c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	685b      	ldr	r3, [r3, #4]
 80008a2:	2b02      	cmp	r3, #2
 80008a4:	d003      	beq.n	80008ae <HAL_GPIO_Init+0xea>
 80008a6:	683b      	ldr	r3, [r7, #0]
 80008a8:	685b      	ldr	r3, [r3, #4]
 80008aa:	2b12      	cmp	r3, #18
 80008ac:	d123      	bne.n	80008f6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80008ae:	697b      	ldr	r3, [r7, #20]
 80008b0:	08da      	lsrs	r2, r3, #3
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	3208      	adds	r2, #8
 80008b6:	0092      	lsls	r2, r2, #2
 80008b8:	58d3      	ldr	r3, [r2, r3]
 80008ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80008bc:	697b      	ldr	r3, [r7, #20]
 80008be:	2207      	movs	r2, #7
 80008c0:	4013      	ands	r3, r2
 80008c2:	009b      	lsls	r3, r3, #2
 80008c4:	220f      	movs	r2, #15
 80008c6:	409a      	lsls	r2, r3
 80008c8:	0013      	movs	r3, r2
 80008ca:	43da      	mvns	r2, r3
 80008cc:	693b      	ldr	r3, [r7, #16]
 80008ce:	4013      	ands	r3, r2
 80008d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	691a      	ldr	r2, [r3, #16]
 80008d6:	697b      	ldr	r3, [r7, #20]
 80008d8:	2107      	movs	r1, #7
 80008da:	400b      	ands	r3, r1
 80008dc:	009b      	lsls	r3, r3, #2
 80008de:	409a      	lsls	r2, r3
 80008e0:	0013      	movs	r3, r2
 80008e2:	693a      	ldr	r2, [r7, #16]
 80008e4:	4313      	orrs	r3, r2
 80008e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	08da      	lsrs	r2, r3, #3
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	3208      	adds	r2, #8
 80008f0:	0092      	lsls	r2, r2, #2
 80008f2:	6939      	ldr	r1, [r7, #16]
 80008f4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	005b      	lsls	r3, r3, #1
 8000900:	2203      	movs	r2, #3
 8000902:	409a      	lsls	r2, r3
 8000904:	0013      	movs	r3, r2
 8000906:	43da      	mvns	r2, r3
 8000908:	693b      	ldr	r3, [r7, #16]
 800090a:	4013      	ands	r3, r2
 800090c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	685b      	ldr	r3, [r3, #4]
 8000912:	2203      	movs	r2, #3
 8000914:	401a      	ands	r2, r3
 8000916:	697b      	ldr	r3, [r7, #20]
 8000918:	005b      	lsls	r3, r3, #1
 800091a:	409a      	lsls	r2, r3
 800091c:	0013      	movs	r3, r2
 800091e:	693a      	ldr	r2, [r7, #16]
 8000920:	4313      	orrs	r3, r2
 8000922:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	693a      	ldr	r2, [r7, #16]
 8000928:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	685a      	ldr	r2, [r3, #4]
 800092e:	2380      	movs	r3, #128	; 0x80
 8000930:	055b      	lsls	r3, r3, #21
 8000932:	4013      	ands	r3, r2
 8000934:	d100      	bne.n	8000938 <HAL_GPIO_Init+0x174>
 8000936:	e092      	b.n	8000a5e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000938:	4a50      	ldr	r2, [pc, #320]	; (8000a7c <HAL_GPIO_Init+0x2b8>)
 800093a:	697b      	ldr	r3, [r7, #20]
 800093c:	089b      	lsrs	r3, r3, #2
 800093e:	3318      	adds	r3, #24
 8000940:	009b      	lsls	r3, r3, #2
 8000942:	589b      	ldr	r3, [r3, r2]
 8000944:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000946:	697b      	ldr	r3, [r7, #20]
 8000948:	2203      	movs	r2, #3
 800094a:	4013      	ands	r3, r2
 800094c:	00db      	lsls	r3, r3, #3
 800094e:	220f      	movs	r2, #15
 8000950:	409a      	lsls	r2, r3
 8000952:	0013      	movs	r3, r2
 8000954:	43da      	mvns	r2, r3
 8000956:	693b      	ldr	r3, [r7, #16]
 8000958:	4013      	ands	r3, r2
 800095a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800095c:	687a      	ldr	r2, [r7, #4]
 800095e:	23a0      	movs	r3, #160	; 0xa0
 8000960:	05db      	lsls	r3, r3, #23
 8000962:	429a      	cmp	r2, r3
 8000964:	d013      	beq.n	800098e <HAL_GPIO_Init+0x1ca>
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	4a45      	ldr	r2, [pc, #276]	; (8000a80 <HAL_GPIO_Init+0x2bc>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d00d      	beq.n	800098a <HAL_GPIO_Init+0x1c6>
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	4a44      	ldr	r2, [pc, #272]	; (8000a84 <HAL_GPIO_Init+0x2c0>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d007      	beq.n	8000986 <HAL_GPIO_Init+0x1c2>
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	4a43      	ldr	r2, [pc, #268]	; (8000a88 <HAL_GPIO_Init+0x2c4>)
 800097a:	4293      	cmp	r3, r2
 800097c:	d101      	bne.n	8000982 <HAL_GPIO_Init+0x1be>
 800097e:	2303      	movs	r3, #3
 8000980:	e006      	b.n	8000990 <HAL_GPIO_Init+0x1cc>
 8000982:	2305      	movs	r3, #5
 8000984:	e004      	b.n	8000990 <HAL_GPIO_Init+0x1cc>
 8000986:	2302      	movs	r3, #2
 8000988:	e002      	b.n	8000990 <HAL_GPIO_Init+0x1cc>
 800098a:	2301      	movs	r3, #1
 800098c:	e000      	b.n	8000990 <HAL_GPIO_Init+0x1cc>
 800098e:	2300      	movs	r3, #0
 8000990:	697a      	ldr	r2, [r7, #20]
 8000992:	2103      	movs	r1, #3
 8000994:	400a      	ands	r2, r1
 8000996:	00d2      	lsls	r2, r2, #3
 8000998:	4093      	lsls	r3, r2
 800099a:	693a      	ldr	r2, [r7, #16]
 800099c:	4313      	orrs	r3, r2
 800099e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80009a0:	4936      	ldr	r1, [pc, #216]	; (8000a7c <HAL_GPIO_Init+0x2b8>)
 80009a2:	697b      	ldr	r3, [r7, #20]
 80009a4:	089b      	lsrs	r3, r3, #2
 80009a6:	3318      	adds	r3, #24
 80009a8:	009b      	lsls	r3, r3, #2
 80009aa:	693a      	ldr	r2, [r7, #16]
 80009ac:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80009ae:	4a33      	ldr	r2, [pc, #204]	; (8000a7c <HAL_GPIO_Init+0x2b8>)
 80009b0:	2380      	movs	r3, #128	; 0x80
 80009b2:	58d3      	ldr	r3, [r2, r3]
 80009b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	43da      	mvns	r2, r3
 80009ba:	693b      	ldr	r3, [r7, #16]
 80009bc:	4013      	ands	r3, r2
 80009be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	685a      	ldr	r2, [r3, #4]
 80009c4:	2380      	movs	r3, #128	; 0x80
 80009c6:	025b      	lsls	r3, r3, #9
 80009c8:	4013      	ands	r3, r2
 80009ca:	d003      	beq.n	80009d4 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 80009cc:	693a      	ldr	r2, [r7, #16]
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	4313      	orrs	r3, r2
 80009d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80009d4:	4929      	ldr	r1, [pc, #164]	; (8000a7c <HAL_GPIO_Init+0x2b8>)
 80009d6:	2280      	movs	r2, #128	; 0x80
 80009d8:	693b      	ldr	r3, [r7, #16]
 80009da:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 80009dc:	4a27      	ldr	r2, [pc, #156]	; (8000a7c <HAL_GPIO_Init+0x2b8>)
 80009de:	2384      	movs	r3, #132	; 0x84
 80009e0:	58d3      	ldr	r3, [r2, r3]
 80009e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	43da      	mvns	r2, r3
 80009e8:	693b      	ldr	r3, [r7, #16]
 80009ea:	4013      	ands	r3, r2
 80009ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	685a      	ldr	r2, [r3, #4]
 80009f2:	2380      	movs	r3, #128	; 0x80
 80009f4:	029b      	lsls	r3, r3, #10
 80009f6:	4013      	ands	r3, r2
 80009f8:	d003      	beq.n	8000a02 <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 80009fa:	693a      	ldr	r2, [r7, #16]
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	4313      	orrs	r3, r2
 8000a00:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000a02:	491e      	ldr	r1, [pc, #120]	; (8000a7c <HAL_GPIO_Init+0x2b8>)
 8000a04:	2284      	movs	r2, #132	; 0x84
 8000a06:	693b      	ldr	r3, [r7, #16]
 8000a08:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000a0a:	4b1c      	ldr	r3, [pc, #112]	; (8000a7c <HAL_GPIO_Init+0x2b8>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	43da      	mvns	r2, r3
 8000a14:	693b      	ldr	r3, [r7, #16]
 8000a16:	4013      	ands	r3, r2
 8000a18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	685a      	ldr	r2, [r3, #4]
 8000a1e:	2380      	movs	r3, #128	; 0x80
 8000a20:	035b      	lsls	r3, r3, #13
 8000a22:	4013      	ands	r3, r2
 8000a24:	d003      	beq.n	8000a2e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000a26:	693a      	ldr	r2, [r7, #16]
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	4313      	orrs	r3, r2
 8000a2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000a2e:	4b13      	ldr	r3, [pc, #76]	; (8000a7c <HAL_GPIO_Init+0x2b8>)
 8000a30:	693a      	ldr	r2, [r7, #16]
 8000a32:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000a34:	4b11      	ldr	r3, [pc, #68]	; (8000a7c <HAL_GPIO_Init+0x2b8>)
 8000a36:	685b      	ldr	r3, [r3, #4]
 8000a38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	43da      	mvns	r2, r3
 8000a3e:	693b      	ldr	r3, [r7, #16]
 8000a40:	4013      	ands	r3, r2
 8000a42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	685a      	ldr	r2, [r3, #4]
 8000a48:	2380      	movs	r3, #128	; 0x80
 8000a4a:	039b      	lsls	r3, r3, #14
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	d003      	beq.n	8000a58 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000a50:	693a      	ldr	r2, [r7, #16]
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	4313      	orrs	r3, r2
 8000a56:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000a58:	4b08      	ldr	r3, [pc, #32]	; (8000a7c <HAL_GPIO_Init+0x2b8>)
 8000a5a:	693a      	ldr	r2, [r7, #16]
 8000a5c:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8000a5e:	697b      	ldr	r3, [r7, #20]
 8000a60:	3301      	adds	r3, #1
 8000a62:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	681a      	ldr	r2, [r3, #0]
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	40da      	lsrs	r2, r3
 8000a6c:	1e13      	subs	r3, r2, #0
 8000a6e:	d000      	beq.n	8000a72 <HAL_GPIO_Init+0x2ae>
 8000a70:	e6b0      	b.n	80007d4 <HAL_GPIO_Init+0x10>
  }
}
 8000a72:	46c0      	nop			; (mov r8, r8)
 8000a74:	46c0      	nop			; (mov r8, r8)
 8000a76:	46bd      	mov	sp, r7
 8000a78:	b006      	add	sp, #24
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	40021800 	.word	0x40021800
 8000a80:	50000400 	.word	0x50000400
 8000a84:	50000800 	.word	0x50000800
 8000a88:	50000c00 	.word	0x50000c00

08000a8c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b084      	sub	sp, #16
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
 8000a94:	000a      	movs	r2, r1
 8000a96:	1cbb      	adds	r3, r7, #2
 8000a98:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	691b      	ldr	r3, [r3, #16]
 8000a9e:	1cba      	adds	r2, r7, #2
 8000aa0:	8812      	ldrh	r2, [r2, #0]
 8000aa2:	4013      	ands	r3, r2
 8000aa4:	d004      	beq.n	8000ab0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8000aa6:	230f      	movs	r3, #15
 8000aa8:	18fb      	adds	r3, r7, r3
 8000aaa:	2201      	movs	r2, #1
 8000aac:	701a      	strb	r2, [r3, #0]
 8000aae:	e003      	b.n	8000ab8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000ab0:	230f      	movs	r3, #15
 8000ab2:	18fb      	adds	r3, r7, r3
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8000ab8:	230f      	movs	r3, #15
 8000aba:	18fb      	adds	r3, r7, r3
 8000abc:	781b      	ldrb	r3, [r3, #0]
}
 8000abe:	0018      	movs	r0, r3
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	b004      	add	sp, #16
 8000ac4:	bd80      	pop	{r7, pc}

08000ac6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	b082      	sub	sp, #8
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	6078      	str	r0, [r7, #4]
 8000ace:	0008      	movs	r0, r1
 8000ad0:	0011      	movs	r1, r2
 8000ad2:	1cbb      	adds	r3, r7, #2
 8000ad4:	1c02      	adds	r2, r0, #0
 8000ad6:	801a      	strh	r2, [r3, #0]
 8000ad8:	1c7b      	adds	r3, r7, #1
 8000ada:	1c0a      	adds	r2, r1, #0
 8000adc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ade:	1c7b      	adds	r3, r7, #1
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d004      	beq.n	8000af0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ae6:	1cbb      	adds	r3, r7, #2
 8000ae8:	881a      	ldrh	r2, [r3, #0]
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000aee:	e003      	b.n	8000af8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000af0:	1cbb      	adds	r3, r7, #2
 8000af2:	881a      	ldrh	r2, [r3, #0]
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000af8:	46c0      	nop			; (mov r8, r8)
 8000afa:	46bd      	mov	sp, r7
 8000afc:	b002      	add	sp, #8
 8000afe:	bd80      	pop	{r7, pc}

08000b00 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b084      	sub	sp, #16
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000b08:	4b19      	ldr	r3, [pc, #100]	; (8000b70 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a19      	ldr	r2, [pc, #100]	; (8000b74 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8000b0e:	4013      	ands	r3, r2
 8000b10:	0019      	movs	r1, r3
 8000b12:	4b17      	ldr	r3, [pc, #92]	; (8000b70 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000b14:	687a      	ldr	r2, [r7, #4]
 8000b16:	430a      	orrs	r2, r1
 8000b18:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000b1a:	687a      	ldr	r2, [r7, #4]
 8000b1c:	2380      	movs	r3, #128	; 0x80
 8000b1e:	009b      	lsls	r3, r3, #2
 8000b20:	429a      	cmp	r2, r3
 8000b22:	d11f      	bne.n	8000b64 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8000b24:	4b14      	ldr	r3, [pc, #80]	; (8000b78 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8000b26:	681a      	ldr	r2, [r3, #0]
 8000b28:	0013      	movs	r3, r2
 8000b2a:	005b      	lsls	r3, r3, #1
 8000b2c:	189b      	adds	r3, r3, r2
 8000b2e:	005b      	lsls	r3, r3, #1
 8000b30:	4912      	ldr	r1, [pc, #72]	; (8000b7c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8000b32:	0018      	movs	r0, r3
 8000b34:	f7ff fae6 	bl	8000104 <__udivsi3>
 8000b38:	0003      	movs	r3, r0
 8000b3a:	3301      	adds	r3, #1
 8000b3c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000b3e:	e008      	b.n	8000b52 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d003      	beq.n	8000b4e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	3b01      	subs	r3, #1
 8000b4a:	60fb      	str	r3, [r7, #12]
 8000b4c:	e001      	b.n	8000b52 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8000b4e:	2303      	movs	r3, #3
 8000b50:	e009      	b.n	8000b66 <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000b52:	4b07      	ldr	r3, [pc, #28]	; (8000b70 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000b54:	695a      	ldr	r2, [r3, #20]
 8000b56:	2380      	movs	r3, #128	; 0x80
 8000b58:	00db      	lsls	r3, r3, #3
 8000b5a:	401a      	ands	r2, r3
 8000b5c:	2380      	movs	r3, #128	; 0x80
 8000b5e:	00db      	lsls	r3, r3, #3
 8000b60:	429a      	cmp	r2, r3
 8000b62:	d0ed      	beq.n	8000b40 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8000b64:	2300      	movs	r3, #0
}
 8000b66:	0018      	movs	r0, r3
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	b004      	add	sp, #16
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	46c0      	nop			; (mov r8, r8)
 8000b70:	40007000 	.word	0x40007000
 8000b74:	fffff9ff 	.word	0xfffff9ff
 8000b78:	20000000 	.word	0x20000000
 8000b7c:	000f4240 	.word	0x000f4240

08000b80 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b088      	sub	sp, #32
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d101      	bne.n	8000b92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	e304      	b.n	800119c <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	2201      	movs	r2, #1
 8000b98:	4013      	ands	r3, r2
 8000b9a:	d100      	bne.n	8000b9e <HAL_RCC_OscConfig+0x1e>
 8000b9c:	e07c      	b.n	8000c98 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000b9e:	4bc3      	ldr	r3, [pc, #780]	; (8000eac <HAL_RCC_OscConfig+0x32c>)
 8000ba0:	689b      	ldr	r3, [r3, #8]
 8000ba2:	2238      	movs	r2, #56	; 0x38
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000ba8:	4bc0      	ldr	r3, [pc, #768]	; (8000eac <HAL_RCC_OscConfig+0x32c>)
 8000baa:	68db      	ldr	r3, [r3, #12]
 8000bac:	2203      	movs	r2, #3
 8000bae:	4013      	ands	r3, r2
 8000bb0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8000bb2:	69bb      	ldr	r3, [r7, #24]
 8000bb4:	2b10      	cmp	r3, #16
 8000bb6:	d102      	bne.n	8000bbe <HAL_RCC_OscConfig+0x3e>
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	2b03      	cmp	r3, #3
 8000bbc:	d002      	beq.n	8000bc4 <HAL_RCC_OscConfig+0x44>
 8000bbe:	69bb      	ldr	r3, [r7, #24]
 8000bc0:	2b08      	cmp	r3, #8
 8000bc2:	d10b      	bne.n	8000bdc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bc4:	4bb9      	ldr	r3, [pc, #740]	; (8000eac <HAL_RCC_OscConfig+0x32c>)
 8000bc6:	681a      	ldr	r2, [r3, #0]
 8000bc8:	2380      	movs	r3, #128	; 0x80
 8000bca:	029b      	lsls	r3, r3, #10
 8000bcc:	4013      	ands	r3, r2
 8000bce:	d062      	beq.n	8000c96 <HAL_RCC_OscConfig+0x116>
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d15e      	bne.n	8000c96 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	e2df      	b.n	800119c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	685a      	ldr	r2, [r3, #4]
 8000be0:	2380      	movs	r3, #128	; 0x80
 8000be2:	025b      	lsls	r3, r3, #9
 8000be4:	429a      	cmp	r2, r3
 8000be6:	d107      	bne.n	8000bf8 <HAL_RCC_OscConfig+0x78>
 8000be8:	4bb0      	ldr	r3, [pc, #704]	; (8000eac <HAL_RCC_OscConfig+0x32c>)
 8000bea:	681a      	ldr	r2, [r3, #0]
 8000bec:	4baf      	ldr	r3, [pc, #700]	; (8000eac <HAL_RCC_OscConfig+0x32c>)
 8000bee:	2180      	movs	r1, #128	; 0x80
 8000bf0:	0249      	lsls	r1, r1, #9
 8000bf2:	430a      	orrs	r2, r1
 8000bf4:	601a      	str	r2, [r3, #0]
 8000bf6:	e020      	b.n	8000c3a <HAL_RCC_OscConfig+0xba>
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	685a      	ldr	r2, [r3, #4]
 8000bfc:	23a0      	movs	r3, #160	; 0xa0
 8000bfe:	02db      	lsls	r3, r3, #11
 8000c00:	429a      	cmp	r2, r3
 8000c02:	d10e      	bne.n	8000c22 <HAL_RCC_OscConfig+0xa2>
 8000c04:	4ba9      	ldr	r3, [pc, #676]	; (8000eac <HAL_RCC_OscConfig+0x32c>)
 8000c06:	681a      	ldr	r2, [r3, #0]
 8000c08:	4ba8      	ldr	r3, [pc, #672]	; (8000eac <HAL_RCC_OscConfig+0x32c>)
 8000c0a:	2180      	movs	r1, #128	; 0x80
 8000c0c:	02c9      	lsls	r1, r1, #11
 8000c0e:	430a      	orrs	r2, r1
 8000c10:	601a      	str	r2, [r3, #0]
 8000c12:	4ba6      	ldr	r3, [pc, #664]	; (8000eac <HAL_RCC_OscConfig+0x32c>)
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	4ba5      	ldr	r3, [pc, #660]	; (8000eac <HAL_RCC_OscConfig+0x32c>)
 8000c18:	2180      	movs	r1, #128	; 0x80
 8000c1a:	0249      	lsls	r1, r1, #9
 8000c1c:	430a      	orrs	r2, r1
 8000c1e:	601a      	str	r2, [r3, #0]
 8000c20:	e00b      	b.n	8000c3a <HAL_RCC_OscConfig+0xba>
 8000c22:	4ba2      	ldr	r3, [pc, #648]	; (8000eac <HAL_RCC_OscConfig+0x32c>)
 8000c24:	681a      	ldr	r2, [r3, #0]
 8000c26:	4ba1      	ldr	r3, [pc, #644]	; (8000eac <HAL_RCC_OscConfig+0x32c>)
 8000c28:	49a1      	ldr	r1, [pc, #644]	; (8000eb0 <HAL_RCC_OscConfig+0x330>)
 8000c2a:	400a      	ands	r2, r1
 8000c2c:	601a      	str	r2, [r3, #0]
 8000c2e:	4b9f      	ldr	r3, [pc, #636]	; (8000eac <HAL_RCC_OscConfig+0x32c>)
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	4b9e      	ldr	r3, [pc, #632]	; (8000eac <HAL_RCC_OscConfig+0x32c>)
 8000c34:	499f      	ldr	r1, [pc, #636]	; (8000eb4 <HAL_RCC_OscConfig+0x334>)
 8000c36:	400a      	ands	r2, r1
 8000c38:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d014      	beq.n	8000c6c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c42:	f7ff fcc7 	bl	80005d4 <HAL_GetTick>
 8000c46:	0003      	movs	r3, r0
 8000c48:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000c4a:	e008      	b.n	8000c5e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c4c:	f7ff fcc2 	bl	80005d4 <HAL_GetTick>
 8000c50:	0002      	movs	r2, r0
 8000c52:	693b      	ldr	r3, [r7, #16]
 8000c54:	1ad3      	subs	r3, r2, r3
 8000c56:	2b64      	cmp	r3, #100	; 0x64
 8000c58:	d901      	bls.n	8000c5e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8000c5a:	2303      	movs	r3, #3
 8000c5c:	e29e      	b.n	800119c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000c5e:	4b93      	ldr	r3, [pc, #588]	; (8000eac <HAL_RCC_OscConfig+0x32c>)
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	2380      	movs	r3, #128	; 0x80
 8000c64:	029b      	lsls	r3, r3, #10
 8000c66:	4013      	ands	r3, r2
 8000c68:	d0f0      	beq.n	8000c4c <HAL_RCC_OscConfig+0xcc>
 8000c6a:	e015      	b.n	8000c98 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c6c:	f7ff fcb2 	bl	80005d4 <HAL_GetTick>
 8000c70:	0003      	movs	r3, r0
 8000c72:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000c74:	e008      	b.n	8000c88 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c76:	f7ff fcad 	bl	80005d4 <HAL_GetTick>
 8000c7a:	0002      	movs	r2, r0
 8000c7c:	693b      	ldr	r3, [r7, #16]
 8000c7e:	1ad3      	subs	r3, r2, r3
 8000c80:	2b64      	cmp	r3, #100	; 0x64
 8000c82:	d901      	bls.n	8000c88 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8000c84:	2303      	movs	r3, #3
 8000c86:	e289      	b.n	800119c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000c88:	4b88      	ldr	r3, [pc, #544]	; (8000eac <HAL_RCC_OscConfig+0x32c>)
 8000c8a:	681a      	ldr	r2, [r3, #0]
 8000c8c:	2380      	movs	r3, #128	; 0x80
 8000c8e:	029b      	lsls	r3, r3, #10
 8000c90:	4013      	ands	r3, r2
 8000c92:	d1f0      	bne.n	8000c76 <HAL_RCC_OscConfig+0xf6>
 8000c94:	e000      	b.n	8000c98 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c96:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	2202      	movs	r2, #2
 8000c9e:	4013      	ands	r3, r2
 8000ca0:	d100      	bne.n	8000ca4 <HAL_RCC_OscConfig+0x124>
 8000ca2:	e099      	b.n	8000dd8 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000ca4:	4b81      	ldr	r3, [pc, #516]	; (8000eac <HAL_RCC_OscConfig+0x32c>)
 8000ca6:	689b      	ldr	r3, [r3, #8]
 8000ca8:	2238      	movs	r2, #56	; 0x38
 8000caa:	4013      	ands	r3, r2
 8000cac:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000cae:	4b7f      	ldr	r3, [pc, #508]	; (8000eac <HAL_RCC_OscConfig+0x32c>)
 8000cb0:	68db      	ldr	r3, [r3, #12]
 8000cb2:	2203      	movs	r2, #3
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8000cb8:	69bb      	ldr	r3, [r7, #24]
 8000cba:	2b10      	cmp	r3, #16
 8000cbc:	d102      	bne.n	8000cc4 <HAL_RCC_OscConfig+0x144>
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	2b02      	cmp	r3, #2
 8000cc2:	d002      	beq.n	8000cca <HAL_RCC_OscConfig+0x14a>
 8000cc4:	69bb      	ldr	r3, [r7, #24]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d135      	bne.n	8000d36 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000cca:	4b78      	ldr	r3, [pc, #480]	; (8000eac <HAL_RCC_OscConfig+0x32c>)
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	2380      	movs	r3, #128	; 0x80
 8000cd0:	00db      	lsls	r3, r3, #3
 8000cd2:	4013      	ands	r3, r2
 8000cd4:	d005      	beq.n	8000ce2 <HAL_RCC_OscConfig+0x162>
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	68db      	ldr	r3, [r3, #12]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d101      	bne.n	8000ce2 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	e25c      	b.n	800119c <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ce2:	4b72      	ldr	r3, [pc, #456]	; (8000eac <HAL_RCC_OscConfig+0x32c>)
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	4a74      	ldr	r2, [pc, #464]	; (8000eb8 <HAL_RCC_OscConfig+0x338>)
 8000ce8:	4013      	ands	r3, r2
 8000cea:	0019      	movs	r1, r3
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	695b      	ldr	r3, [r3, #20]
 8000cf0:	021a      	lsls	r2, r3, #8
 8000cf2:	4b6e      	ldr	r3, [pc, #440]	; (8000eac <HAL_RCC_OscConfig+0x32c>)
 8000cf4:	430a      	orrs	r2, r1
 8000cf6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000cf8:	69bb      	ldr	r3, [r7, #24]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d112      	bne.n	8000d24 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000cfe:	4b6b      	ldr	r3, [pc, #428]	; (8000eac <HAL_RCC_OscConfig+0x32c>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4a6e      	ldr	r2, [pc, #440]	; (8000ebc <HAL_RCC_OscConfig+0x33c>)
 8000d04:	4013      	ands	r3, r2
 8000d06:	0019      	movs	r1, r3
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	691a      	ldr	r2, [r3, #16]
 8000d0c:	4b67      	ldr	r3, [pc, #412]	; (8000eac <HAL_RCC_OscConfig+0x32c>)
 8000d0e:	430a      	orrs	r2, r1
 8000d10:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8000d12:	4b66      	ldr	r3, [pc, #408]	; (8000eac <HAL_RCC_OscConfig+0x32c>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	0adb      	lsrs	r3, r3, #11
 8000d18:	2207      	movs	r2, #7
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	4a68      	ldr	r2, [pc, #416]	; (8000ec0 <HAL_RCC_OscConfig+0x340>)
 8000d1e:	40da      	lsrs	r2, r3
 8000d20:	4b68      	ldr	r3, [pc, #416]	; (8000ec4 <HAL_RCC_OscConfig+0x344>)
 8000d22:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000d24:	4b68      	ldr	r3, [pc, #416]	; (8000ec8 <HAL_RCC_OscConfig+0x348>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	0018      	movs	r0, r3
 8000d2a:	f7ff fbf7 	bl	800051c <HAL_InitTick>
 8000d2e:	1e03      	subs	r3, r0, #0
 8000d30:	d051      	beq.n	8000dd6 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8000d32:	2301      	movs	r3, #1
 8000d34:	e232      	b.n	800119c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	68db      	ldr	r3, [r3, #12]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d030      	beq.n	8000da0 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000d3e:	4b5b      	ldr	r3, [pc, #364]	; (8000eac <HAL_RCC_OscConfig+0x32c>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a5e      	ldr	r2, [pc, #376]	; (8000ebc <HAL_RCC_OscConfig+0x33c>)
 8000d44:	4013      	ands	r3, r2
 8000d46:	0019      	movs	r1, r3
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	691a      	ldr	r2, [r3, #16]
 8000d4c:	4b57      	ldr	r3, [pc, #348]	; (8000eac <HAL_RCC_OscConfig+0x32c>)
 8000d4e:	430a      	orrs	r2, r1
 8000d50:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8000d52:	4b56      	ldr	r3, [pc, #344]	; (8000eac <HAL_RCC_OscConfig+0x32c>)
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	4b55      	ldr	r3, [pc, #340]	; (8000eac <HAL_RCC_OscConfig+0x32c>)
 8000d58:	2180      	movs	r1, #128	; 0x80
 8000d5a:	0049      	lsls	r1, r1, #1
 8000d5c:	430a      	orrs	r2, r1
 8000d5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d60:	f7ff fc38 	bl	80005d4 <HAL_GetTick>
 8000d64:	0003      	movs	r3, r0
 8000d66:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000d68:	e008      	b.n	8000d7c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d6a:	f7ff fc33 	bl	80005d4 <HAL_GetTick>
 8000d6e:	0002      	movs	r2, r0
 8000d70:	693b      	ldr	r3, [r7, #16]
 8000d72:	1ad3      	subs	r3, r2, r3
 8000d74:	2b02      	cmp	r3, #2
 8000d76:	d901      	bls.n	8000d7c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8000d78:	2303      	movs	r3, #3
 8000d7a:	e20f      	b.n	800119c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000d7c:	4b4b      	ldr	r3, [pc, #300]	; (8000eac <HAL_RCC_OscConfig+0x32c>)
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	2380      	movs	r3, #128	; 0x80
 8000d82:	00db      	lsls	r3, r3, #3
 8000d84:	4013      	ands	r3, r2
 8000d86:	d0f0      	beq.n	8000d6a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d88:	4b48      	ldr	r3, [pc, #288]	; (8000eac <HAL_RCC_OscConfig+0x32c>)
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	4a4a      	ldr	r2, [pc, #296]	; (8000eb8 <HAL_RCC_OscConfig+0x338>)
 8000d8e:	4013      	ands	r3, r2
 8000d90:	0019      	movs	r1, r3
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	695b      	ldr	r3, [r3, #20]
 8000d96:	021a      	lsls	r2, r3, #8
 8000d98:	4b44      	ldr	r3, [pc, #272]	; (8000eac <HAL_RCC_OscConfig+0x32c>)
 8000d9a:	430a      	orrs	r2, r1
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	e01b      	b.n	8000dd8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8000da0:	4b42      	ldr	r3, [pc, #264]	; (8000eac <HAL_RCC_OscConfig+0x32c>)
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	4b41      	ldr	r3, [pc, #260]	; (8000eac <HAL_RCC_OscConfig+0x32c>)
 8000da6:	4949      	ldr	r1, [pc, #292]	; (8000ecc <HAL_RCC_OscConfig+0x34c>)
 8000da8:	400a      	ands	r2, r1
 8000daa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000dac:	f7ff fc12 	bl	80005d4 <HAL_GetTick>
 8000db0:	0003      	movs	r3, r0
 8000db2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000db4:	e008      	b.n	8000dc8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000db6:	f7ff fc0d 	bl	80005d4 <HAL_GetTick>
 8000dba:	0002      	movs	r2, r0
 8000dbc:	693b      	ldr	r3, [r7, #16]
 8000dbe:	1ad3      	subs	r3, r2, r3
 8000dc0:	2b02      	cmp	r3, #2
 8000dc2:	d901      	bls.n	8000dc8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8000dc4:	2303      	movs	r3, #3
 8000dc6:	e1e9      	b.n	800119c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000dc8:	4b38      	ldr	r3, [pc, #224]	; (8000eac <HAL_RCC_OscConfig+0x32c>)
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	2380      	movs	r3, #128	; 0x80
 8000dce:	00db      	lsls	r3, r3, #3
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	d1f0      	bne.n	8000db6 <HAL_RCC_OscConfig+0x236>
 8000dd4:	e000      	b.n	8000dd8 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000dd6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	2208      	movs	r2, #8
 8000dde:	4013      	ands	r3, r2
 8000de0:	d047      	beq.n	8000e72 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8000de2:	4b32      	ldr	r3, [pc, #200]	; (8000eac <HAL_RCC_OscConfig+0x32c>)
 8000de4:	689b      	ldr	r3, [r3, #8]
 8000de6:	2238      	movs	r2, #56	; 0x38
 8000de8:	4013      	ands	r3, r2
 8000dea:	2b18      	cmp	r3, #24
 8000dec:	d10a      	bne.n	8000e04 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8000dee:	4b2f      	ldr	r3, [pc, #188]	; (8000eac <HAL_RCC_OscConfig+0x32c>)
 8000df0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000df2:	2202      	movs	r2, #2
 8000df4:	4013      	ands	r3, r2
 8000df6:	d03c      	beq.n	8000e72 <HAL_RCC_OscConfig+0x2f2>
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	699b      	ldr	r3, [r3, #24]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d138      	bne.n	8000e72 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8000e00:	2301      	movs	r3, #1
 8000e02:	e1cb      	b.n	800119c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	699b      	ldr	r3, [r3, #24]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d019      	beq.n	8000e40 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8000e0c:	4b27      	ldr	r3, [pc, #156]	; (8000eac <HAL_RCC_OscConfig+0x32c>)
 8000e0e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000e10:	4b26      	ldr	r3, [pc, #152]	; (8000eac <HAL_RCC_OscConfig+0x32c>)
 8000e12:	2101      	movs	r1, #1
 8000e14:	430a      	orrs	r2, r1
 8000e16:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e18:	f7ff fbdc 	bl	80005d4 <HAL_GetTick>
 8000e1c:	0003      	movs	r3, r0
 8000e1e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000e20:	e008      	b.n	8000e34 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e22:	f7ff fbd7 	bl	80005d4 <HAL_GetTick>
 8000e26:	0002      	movs	r2, r0
 8000e28:	693b      	ldr	r3, [r7, #16]
 8000e2a:	1ad3      	subs	r3, r2, r3
 8000e2c:	2b02      	cmp	r3, #2
 8000e2e:	d901      	bls.n	8000e34 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8000e30:	2303      	movs	r3, #3
 8000e32:	e1b3      	b.n	800119c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000e34:	4b1d      	ldr	r3, [pc, #116]	; (8000eac <HAL_RCC_OscConfig+0x32c>)
 8000e36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e38:	2202      	movs	r2, #2
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	d0f1      	beq.n	8000e22 <HAL_RCC_OscConfig+0x2a2>
 8000e3e:	e018      	b.n	8000e72 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8000e40:	4b1a      	ldr	r3, [pc, #104]	; (8000eac <HAL_RCC_OscConfig+0x32c>)
 8000e42:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000e44:	4b19      	ldr	r3, [pc, #100]	; (8000eac <HAL_RCC_OscConfig+0x32c>)
 8000e46:	2101      	movs	r1, #1
 8000e48:	438a      	bics	r2, r1
 8000e4a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e4c:	f7ff fbc2 	bl	80005d4 <HAL_GetTick>
 8000e50:	0003      	movs	r3, r0
 8000e52:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000e54:	e008      	b.n	8000e68 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e56:	f7ff fbbd 	bl	80005d4 <HAL_GetTick>
 8000e5a:	0002      	movs	r2, r0
 8000e5c:	693b      	ldr	r3, [r7, #16]
 8000e5e:	1ad3      	subs	r3, r2, r3
 8000e60:	2b02      	cmp	r3, #2
 8000e62:	d901      	bls.n	8000e68 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8000e64:	2303      	movs	r3, #3
 8000e66:	e199      	b.n	800119c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000e68:	4b10      	ldr	r3, [pc, #64]	; (8000eac <HAL_RCC_OscConfig+0x32c>)
 8000e6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e6c:	2202      	movs	r2, #2
 8000e6e:	4013      	ands	r3, r2
 8000e70:	d1f1      	bne.n	8000e56 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	2204      	movs	r2, #4
 8000e78:	4013      	ands	r3, r2
 8000e7a:	d100      	bne.n	8000e7e <HAL_RCC_OscConfig+0x2fe>
 8000e7c:	e0c6      	b.n	800100c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e7e:	231f      	movs	r3, #31
 8000e80:	18fb      	adds	r3, r7, r3
 8000e82:	2200      	movs	r2, #0
 8000e84:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8000e86:	4b09      	ldr	r3, [pc, #36]	; (8000eac <HAL_RCC_OscConfig+0x32c>)
 8000e88:	689b      	ldr	r3, [r3, #8]
 8000e8a:	2238      	movs	r2, #56	; 0x38
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	2b20      	cmp	r3, #32
 8000e90:	d11e      	bne.n	8000ed0 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8000e92:	4b06      	ldr	r3, [pc, #24]	; (8000eac <HAL_RCC_OscConfig+0x32c>)
 8000e94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e96:	2202      	movs	r2, #2
 8000e98:	4013      	ands	r3, r2
 8000e9a:	d100      	bne.n	8000e9e <HAL_RCC_OscConfig+0x31e>
 8000e9c:	e0b6      	b.n	800100c <HAL_RCC_OscConfig+0x48c>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	689b      	ldr	r3, [r3, #8]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d000      	beq.n	8000ea8 <HAL_RCC_OscConfig+0x328>
 8000ea6:	e0b1      	b.n	800100c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	e177      	b.n	800119c <HAL_RCC_OscConfig+0x61c>
 8000eac:	40021000 	.word	0x40021000
 8000eb0:	fffeffff 	.word	0xfffeffff
 8000eb4:	fffbffff 	.word	0xfffbffff
 8000eb8:	ffff80ff 	.word	0xffff80ff
 8000ebc:	ffffc7ff 	.word	0xffffc7ff
 8000ec0:	00f42400 	.word	0x00f42400
 8000ec4:	20000000 	.word	0x20000000
 8000ec8:	20000004 	.word	0x20000004
 8000ecc:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8000ed0:	4bb4      	ldr	r3, [pc, #720]	; (80011a4 <HAL_RCC_OscConfig+0x624>)
 8000ed2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ed4:	2380      	movs	r3, #128	; 0x80
 8000ed6:	055b      	lsls	r3, r3, #21
 8000ed8:	4013      	ands	r3, r2
 8000eda:	d101      	bne.n	8000ee0 <HAL_RCC_OscConfig+0x360>
 8000edc:	2301      	movs	r3, #1
 8000ede:	e000      	b.n	8000ee2 <HAL_RCC_OscConfig+0x362>
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d011      	beq.n	8000f0a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8000ee6:	4baf      	ldr	r3, [pc, #700]	; (80011a4 <HAL_RCC_OscConfig+0x624>)
 8000ee8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000eea:	4bae      	ldr	r3, [pc, #696]	; (80011a4 <HAL_RCC_OscConfig+0x624>)
 8000eec:	2180      	movs	r1, #128	; 0x80
 8000eee:	0549      	lsls	r1, r1, #21
 8000ef0:	430a      	orrs	r2, r1
 8000ef2:	63da      	str	r2, [r3, #60]	; 0x3c
 8000ef4:	4bab      	ldr	r3, [pc, #684]	; (80011a4 <HAL_RCC_OscConfig+0x624>)
 8000ef6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ef8:	2380      	movs	r3, #128	; 0x80
 8000efa:	055b      	lsls	r3, r3, #21
 8000efc:	4013      	ands	r3, r2
 8000efe:	60fb      	str	r3, [r7, #12]
 8000f00:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8000f02:	231f      	movs	r3, #31
 8000f04:	18fb      	adds	r3, r7, r3
 8000f06:	2201      	movs	r2, #1
 8000f08:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000f0a:	4ba7      	ldr	r3, [pc, #668]	; (80011a8 <HAL_RCC_OscConfig+0x628>)
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	2380      	movs	r3, #128	; 0x80
 8000f10:	005b      	lsls	r3, r3, #1
 8000f12:	4013      	ands	r3, r2
 8000f14:	d11a      	bne.n	8000f4c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000f16:	4ba4      	ldr	r3, [pc, #656]	; (80011a8 <HAL_RCC_OscConfig+0x628>)
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	4ba3      	ldr	r3, [pc, #652]	; (80011a8 <HAL_RCC_OscConfig+0x628>)
 8000f1c:	2180      	movs	r1, #128	; 0x80
 8000f1e:	0049      	lsls	r1, r1, #1
 8000f20:	430a      	orrs	r2, r1
 8000f22:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8000f24:	f7ff fb56 	bl	80005d4 <HAL_GetTick>
 8000f28:	0003      	movs	r3, r0
 8000f2a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000f2c:	e008      	b.n	8000f40 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f2e:	f7ff fb51 	bl	80005d4 <HAL_GetTick>
 8000f32:	0002      	movs	r2, r0
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	1ad3      	subs	r3, r2, r3
 8000f38:	2b02      	cmp	r3, #2
 8000f3a:	d901      	bls.n	8000f40 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8000f3c:	2303      	movs	r3, #3
 8000f3e:	e12d      	b.n	800119c <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000f40:	4b99      	ldr	r3, [pc, #612]	; (80011a8 <HAL_RCC_OscConfig+0x628>)
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	2380      	movs	r3, #128	; 0x80
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	4013      	ands	r3, r2
 8000f4a:	d0f0      	beq.n	8000f2e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	689b      	ldr	r3, [r3, #8]
 8000f50:	2b01      	cmp	r3, #1
 8000f52:	d106      	bne.n	8000f62 <HAL_RCC_OscConfig+0x3e2>
 8000f54:	4b93      	ldr	r3, [pc, #588]	; (80011a4 <HAL_RCC_OscConfig+0x624>)
 8000f56:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000f58:	4b92      	ldr	r3, [pc, #584]	; (80011a4 <HAL_RCC_OscConfig+0x624>)
 8000f5a:	2101      	movs	r1, #1
 8000f5c:	430a      	orrs	r2, r1
 8000f5e:	65da      	str	r2, [r3, #92]	; 0x5c
 8000f60:	e01c      	b.n	8000f9c <HAL_RCC_OscConfig+0x41c>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	689b      	ldr	r3, [r3, #8]
 8000f66:	2b05      	cmp	r3, #5
 8000f68:	d10c      	bne.n	8000f84 <HAL_RCC_OscConfig+0x404>
 8000f6a:	4b8e      	ldr	r3, [pc, #568]	; (80011a4 <HAL_RCC_OscConfig+0x624>)
 8000f6c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000f6e:	4b8d      	ldr	r3, [pc, #564]	; (80011a4 <HAL_RCC_OscConfig+0x624>)
 8000f70:	2104      	movs	r1, #4
 8000f72:	430a      	orrs	r2, r1
 8000f74:	65da      	str	r2, [r3, #92]	; 0x5c
 8000f76:	4b8b      	ldr	r3, [pc, #556]	; (80011a4 <HAL_RCC_OscConfig+0x624>)
 8000f78:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000f7a:	4b8a      	ldr	r3, [pc, #552]	; (80011a4 <HAL_RCC_OscConfig+0x624>)
 8000f7c:	2101      	movs	r1, #1
 8000f7e:	430a      	orrs	r2, r1
 8000f80:	65da      	str	r2, [r3, #92]	; 0x5c
 8000f82:	e00b      	b.n	8000f9c <HAL_RCC_OscConfig+0x41c>
 8000f84:	4b87      	ldr	r3, [pc, #540]	; (80011a4 <HAL_RCC_OscConfig+0x624>)
 8000f86:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000f88:	4b86      	ldr	r3, [pc, #536]	; (80011a4 <HAL_RCC_OscConfig+0x624>)
 8000f8a:	2101      	movs	r1, #1
 8000f8c:	438a      	bics	r2, r1
 8000f8e:	65da      	str	r2, [r3, #92]	; 0x5c
 8000f90:	4b84      	ldr	r3, [pc, #528]	; (80011a4 <HAL_RCC_OscConfig+0x624>)
 8000f92:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000f94:	4b83      	ldr	r3, [pc, #524]	; (80011a4 <HAL_RCC_OscConfig+0x624>)
 8000f96:	2104      	movs	r1, #4
 8000f98:	438a      	bics	r2, r1
 8000f9a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	689b      	ldr	r3, [r3, #8]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d014      	beq.n	8000fce <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fa4:	f7ff fb16 	bl	80005d4 <HAL_GetTick>
 8000fa8:	0003      	movs	r3, r0
 8000faa:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000fac:	e009      	b.n	8000fc2 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fae:	f7ff fb11 	bl	80005d4 <HAL_GetTick>
 8000fb2:	0002      	movs	r2, r0
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	1ad3      	subs	r3, r2, r3
 8000fb8:	4a7c      	ldr	r2, [pc, #496]	; (80011ac <HAL_RCC_OscConfig+0x62c>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d901      	bls.n	8000fc2 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	e0ec      	b.n	800119c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000fc2:	4b78      	ldr	r3, [pc, #480]	; (80011a4 <HAL_RCC_OscConfig+0x624>)
 8000fc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fc6:	2202      	movs	r2, #2
 8000fc8:	4013      	ands	r3, r2
 8000fca:	d0f0      	beq.n	8000fae <HAL_RCC_OscConfig+0x42e>
 8000fcc:	e013      	b.n	8000ff6 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fce:	f7ff fb01 	bl	80005d4 <HAL_GetTick>
 8000fd2:	0003      	movs	r3, r0
 8000fd4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000fd6:	e009      	b.n	8000fec <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fd8:	f7ff fafc 	bl	80005d4 <HAL_GetTick>
 8000fdc:	0002      	movs	r2, r0
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	4a72      	ldr	r2, [pc, #456]	; (80011ac <HAL_RCC_OscConfig+0x62c>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d901      	bls.n	8000fec <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8000fe8:	2303      	movs	r3, #3
 8000fea:	e0d7      	b.n	800119c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000fec:	4b6d      	ldr	r3, [pc, #436]	; (80011a4 <HAL_RCC_OscConfig+0x624>)
 8000fee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ff0:	2202      	movs	r2, #2
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	d1f0      	bne.n	8000fd8 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8000ff6:	231f      	movs	r3, #31
 8000ff8:	18fb      	adds	r3, r7, r3
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d105      	bne.n	800100c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001000:	4b68      	ldr	r3, [pc, #416]	; (80011a4 <HAL_RCC_OscConfig+0x624>)
 8001002:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001004:	4b67      	ldr	r3, [pc, #412]	; (80011a4 <HAL_RCC_OscConfig+0x624>)
 8001006:	496a      	ldr	r1, [pc, #424]	; (80011b0 <HAL_RCC_OscConfig+0x630>)
 8001008:	400a      	ands	r2, r1
 800100a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	69db      	ldr	r3, [r3, #28]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d100      	bne.n	8001016 <HAL_RCC_OscConfig+0x496>
 8001014:	e0c1      	b.n	800119a <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001016:	4b63      	ldr	r3, [pc, #396]	; (80011a4 <HAL_RCC_OscConfig+0x624>)
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	2238      	movs	r2, #56	; 0x38
 800101c:	4013      	ands	r3, r2
 800101e:	2b10      	cmp	r3, #16
 8001020:	d100      	bne.n	8001024 <HAL_RCC_OscConfig+0x4a4>
 8001022:	e081      	b.n	8001128 <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	69db      	ldr	r3, [r3, #28]
 8001028:	2b02      	cmp	r3, #2
 800102a:	d156      	bne.n	80010da <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800102c:	4b5d      	ldr	r3, [pc, #372]	; (80011a4 <HAL_RCC_OscConfig+0x624>)
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	4b5c      	ldr	r3, [pc, #368]	; (80011a4 <HAL_RCC_OscConfig+0x624>)
 8001032:	4960      	ldr	r1, [pc, #384]	; (80011b4 <HAL_RCC_OscConfig+0x634>)
 8001034:	400a      	ands	r2, r1
 8001036:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001038:	f7ff facc 	bl	80005d4 <HAL_GetTick>
 800103c:	0003      	movs	r3, r0
 800103e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001040:	e008      	b.n	8001054 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001042:	f7ff fac7 	bl	80005d4 <HAL_GetTick>
 8001046:	0002      	movs	r2, r0
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	1ad3      	subs	r3, r2, r3
 800104c:	2b02      	cmp	r3, #2
 800104e:	d901      	bls.n	8001054 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001050:	2303      	movs	r3, #3
 8001052:	e0a3      	b.n	800119c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001054:	4b53      	ldr	r3, [pc, #332]	; (80011a4 <HAL_RCC_OscConfig+0x624>)
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	2380      	movs	r3, #128	; 0x80
 800105a:	049b      	lsls	r3, r3, #18
 800105c:	4013      	ands	r3, r2
 800105e:	d1f0      	bne.n	8001042 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001060:	4b50      	ldr	r3, [pc, #320]	; (80011a4 <HAL_RCC_OscConfig+0x624>)
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	4a54      	ldr	r2, [pc, #336]	; (80011b8 <HAL_RCC_OscConfig+0x638>)
 8001066:	4013      	ands	r3, r2
 8001068:	0019      	movs	r1, r3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6a1a      	ldr	r2, [r3, #32]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001072:	431a      	orrs	r2, r3
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001078:	021b      	lsls	r3, r3, #8
 800107a:	431a      	orrs	r2, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001080:	431a      	orrs	r2, r3
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	431a      	orrs	r2, r3
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800108c:	431a      	orrs	r2, r3
 800108e:	4b45      	ldr	r3, [pc, #276]	; (80011a4 <HAL_RCC_OscConfig+0x624>)
 8001090:	430a      	orrs	r2, r1
 8001092:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001094:	4b43      	ldr	r3, [pc, #268]	; (80011a4 <HAL_RCC_OscConfig+0x624>)
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	4b42      	ldr	r3, [pc, #264]	; (80011a4 <HAL_RCC_OscConfig+0x624>)
 800109a:	2180      	movs	r1, #128	; 0x80
 800109c:	0449      	lsls	r1, r1, #17
 800109e:	430a      	orrs	r2, r1
 80010a0:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80010a2:	4b40      	ldr	r3, [pc, #256]	; (80011a4 <HAL_RCC_OscConfig+0x624>)
 80010a4:	68da      	ldr	r2, [r3, #12]
 80010a6:	4b3f      	ldr	r3, [pc, #252]	; (80011a4 <HAL_RCC_OscConfig+0x624>)
 80010a8:	2180      	movs	r1, #128	; 0x80
 80010aa:	0549      	lsls	r1, r1, #21
 80010ac:	430a      	orrs	r2, r1
 80010ae:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010b0:	f7ff fa90 	bl	80005d4 <HAL_GetTick>
 80010b4:	0003      	movs	r3, r0
 80010b6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80010b8:	e008      	b.n	80010cc <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010ba:	f7ff fa8b 	bl	80005d4 <HAL_GetTick>
 80010be:	0002      	movs	r2, r0
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	1ad3      	subs	r3, r2, r3
 80010c4:	2b02      	cmp	r3, #2
 80010c6:	d901      	bls.n	80010cc <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80010c8:	2303      	movs	r3, #3
 80010ca:	e067      	b.n	800119c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80010cc:	4b35      	ldr	r3, [pc, #212]	; (80011a4 <HAL_RCC_OscConfig+0x624>)
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	2380      	movs	r3, #128	; 0x80
 80010d2:	049b      	lsls	r3, r3, #18
 80010d4:	4013      	ands	r3, r2
 80010d6:	d0f0      	beq.n	80010ba <HAL_RCC_OscConfig+0x53a>
 80010d8:	e05f      	b.n	800119a <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010da:	4b32      	ldr	r3, [pc, #200]	; (80011a4 <HAL_RCC_OscConfig+0x624>)
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	4b31      	ldr	r3, [pc, #196]	; (80011a4 <HAL_RCC_OscConfig+0x624>)
 80010e0:	4934      	ldr	r1, [pc, #208]	; (80011b4 <HAL_RCC_OscConfig+0x634>)
 80010e2:	400a      	ands	r2, r1
 80010e4:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80010e6:	4b2f      	ldr	r3, [pc, #188]	; (80011a4 <HAL_RCC_OscConfig+0x624>)
 80010e8:	68da      	ldr	r2, [r3, #12]
 80010ea:	4b2e      	ldr	r3, [pc, #184]	; (80011a4 <HAL_RCC_OscConfig+0x624>)
 80010ec:	2103      	movs	r1, #3
 80010ee:	438a      	bics	r2, r1
 80010f0:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80010f2:	4b2c      	ldr	r3, [pc, #176]	; (80011a4 <HAL_RCC_OscConfig+0x624>)
 80010f4:	68da      	ldr	r2, [r3, #12]
 80010f6:	4b2b      	ldr	r3, [pc, #172]	; (80011a4 <HAL_RCC_OscConfig+0x624>)
 80010f8:	4930      	ldr	r1, [pc, #192]	; (80011bc <HAL_RCC_OscConfig+0x63c>)
 80010fa:	400a      	ands	r2, r1
 80010fc:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010fe:	f7ff fa69 	bl	80005d4 <HAL_GetTick>
 8001102:	0003      	movs	r3, r0
 8001104:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001106:	e008      	b.n	800111a <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001108:	f7ff fa64 	bl	80005d4 <HAL_GetTick>
 800110c:	0002      	movs	r2, r0
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	1ad3      	subs	r3, r2, r3
 8001112:	2b02      	cmp	r3, #2
 8001114:	d901      	bls.n	800111a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001116:	2303      	movs	r3, #3
 8001118:	e040      	b.n	800119c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800111a:	4b22      	ldr	r3, [pc, #136]	; (80011a4 <HAL_RCC_OscConfig+0x624>)
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	2380      	movs	r3, #128	; 0x80
 8001120:	049b      	lsls	r3, r3, #18
 8001122:	4013      	ands	r3, r2
 8001124:	d1f0      	bne.n	8001108 <HAL_RCC_OscConfig+0x588>
 8001126:	e038      	b.n	800119a <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	69db      	ldr	r3, [r3, #28]
 800112c:	2b01      	cmp	r3, #1
 800112e:	d101      	bne.n	8001134 <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 8001130:	2301      	movs	r3, #1
 8001132:	e033      	b.n	800119c <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001134:	4b1b      	ldr	r3, [pc, #108]	; (80011a4 <HAL_RCC_OscConfig+0x624>)
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	2203      	movs	r2, #3
 800113e:	401a      	ands	r2, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6a1b      	ldr	r3, [r3, #32]
 8001144:	429a      	cmp	r2, r3
 8001146:	d126      	bne.n	8001196 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	2270      	movs	r2, #112	; 0x70
 800114c:	401a      	ands	r2, r3
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001152:	429a      	cmp	r2, r3
 8001154:	d11f      	bne.n	8001196 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001156:	697a      	ldr	r2, [r7, #20]
 8001158:	23fe      	movs	r3, #254	; 0xfe
 800115a:	01db      	lsls	r3, r3, #7
 800115c:	401a      	ands	r2, r3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001162:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001164:	429a      	cmp	r2, r3
 8001166:	d116      	bne.n	8001196 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001168:	697a      	ldr	r2, [r7, #20]
 800116a:	23f8      	movs	r3, #248	; 0xf8
 800116c:	039b      	lsls	r3, r3, #14
 800116e:	401a      	ands	r2, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001174:	429a      	cmp	r2, r3
 8001176:	d10e      	bne.n	8001196 <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001178:	697a      	ldr	r2, [r7, #20]
 800117a:	23e0      	movs	r3, #224	; 0xe0
 800117c:	051b      	lsls	r3, r3, #20
 800117e:	401a      	ands	r2, r3
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001184:	429a      	cmp	r2, r3
 8001186:	d106      	bne.n	8001196 <HAL_RCC_OscConfig+0x616>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	0f5b      	lsrs	r3, r3, #29
 800118c:	075a      	lsls	r2, r3, #29
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001192:	429a      	cmp	r2, r3
 8001194:	d001      	beq.n	800119a <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	e000      	b.n	800119c <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 800119a:	2300      	movs	r3, #0
}
 800119c:	0018      	movs	r0, r3
 800119e:	46bd      	mov	sp, r7
 80011a0:	b008      	add	sp, #32
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	40021000 	.word	0x40021000
 80011a8:	40007000 	.word	0x40007000
 80011ac:	00001388 	.word	0x00001388
 80011b0:	efffffff 	.word	0xefffffff
 80011b4:	feffffff 	.word	0xfeffffff
 80011b8:	11c1808c 	.word	0x11c1808c
 80011bc:	eefeffff 	.word	0xeefeffff

080011c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d101      	bne.n	80011d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011d0:	2301      	movs	r3, #1
 80011d2:	e0e9      	b.n	80013a8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80011d4:	4b76      	ldr	r3, [pc, #472]	; (80013b0 <HAL_RCC_ClockConfig+0x1f0>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2207      	movs	r2, #7
 80011da:	4013      	ands	r3, r2
 80011dc:	683a      	ldr	r2, [r7, #0]
 80011de:	429a      	cmp	r2, r3
 80011e0:	d91e      	bls.n	8001220 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011e2:	4b73      	ldr	r3, [pc, #460]	; (80013b0 <HAL_RCC_ClockConfig+0x1f0>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	2207      	movs	r2, #7
 80011e8:	4393      	bics	r3, r2
 80011ea:	0019      	movs	r1, r3
 80011ec:	4b70      	ldr	r3, [pc, #448]	; (80013b0 <HAL_RCC_ClockConfig+0x1f0>)
 80011ee:	683a      	ldr	r2, [r7, #0]
 80011f0:	430a      	orrs	r2, r1
 80011f2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80011f4:	f7ff f9ee 	bl	80005d4 <HAL_GetTick>
 80011f8:	0003      	movs	r3, r0
 80011fa:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80011fc:	e009      	b.n	8001212 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011fe:	f7ff f9e9 	bl	80005d4 <HAL_GetTick>
 8001202:	0002      	movs	r2, r0
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	1ad3      	subs	r3, r2, r3
 8001208:	4a6a      	ldr	r2, [pc, #424]	; (80013b4 <HAL_RCC_ClockConfig+0x1f4>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d901      	bls.n	8001212 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800120e:	2303      	movs	r3, #3
 8001210:	e0ca      	b.n	80013a8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001212:	4b67      	ldr	r3, [pc, #412]	; (80013b0 <HAL_RCC_ClockConfig+0x1f0>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	2207      	movs	r2, #7
 8001218:	4013      	ands	r3, r2
 800121a:	683a      	ldr	r2, [r7, #0]
 800121c:	429a      	cmp	r2, r3
 800121e:	d1ee      	bne.n	80011fe <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	2202      	movs	r2, #2
 8001226:	4013      	ands	r3, r2
 8001228:	d015      	beq.n	8001256 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	2204      	movs	r2, #4
 8001230:	4013      	ands	r3, r2
 8001232:	d006      	beq.n	8001242 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001234:	4b60      	ldr	r3, [pc, #384]	; (80013b8 <HAL_RCC_ClockConfig+0x1f8>)
 8001236:	689a      	ldr	r2, [r3, #8]
 8001238:	4b5f      	ldr	r3, [pc, #380]	; (80013b8 <HAL_RCC_ClockConfig+0x1f8>)
 800123a:	21e0      	movs	r1, #224	; 0xe0
 800123c:	01c9      	lsls	r1, r1, #7
 800123e:	430a      	orrs	r2, r1
 8001240:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001242:	4b5d      	ldr	r3, [pc, #372]	; (80013b8 <HAL_RCC_ClockConfig+0x1f8>)
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	4a5d      	ldr	r2, [pc, #372]	; (80013bc <HAL_RCC_ClockConfig+0x1fc>)
 8001248:	4013      	ands	r3, r2
 800124a:	0019      	movs	r1, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	689a      	ldr	r2, [r3, #8]
 8001250:	4b59      	ldr	r3, [pc, #356]	; (80013b8 <HAL_RCC_ClockConfig+0x1f8>)
 8001252:	430a      	orrs	r2, r1
 8001254:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	2201      	movs	r2, #1
 800125c:	4013      	ands	r3, r2
 800125e:	d057      	beq.n	8001310 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	2b01      	cmp	r3, #1
 8001266:	d107      	bne.n	8001278 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001268:	4b53      	ldr	r3, [pc, #332]	; (80013b8 <HAL_RCC_ClockConfig+0x1f8>)
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	2380      	movs	r3, #128	; 0x80
 800126e:	029b      	lsls	r3, r3, #10
 8001270:	4013      	ands	r3, r2
 8001272:	d12b      	bne.n	80012cc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001274:	2301      	movs	r3, #1
 8001276:	e097      	b.n	80013a8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	2b02      	cmp	r3, #2
 800127e:	d107      	bne.n	8001290 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001280:	4b4d      	ldr	r3, [pc, #308]	; (80013b8 <HAL_RCC_ClockConfig+0x1f8>)
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	2380      	movs	r3, #128	; 0x80
 8001286:	049b      	lsls	r3, r3, #18
 8001288:	4013      	ands	r3, r2
 800128a:	d11f      	bne.n	80012cc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800128c:	2301      	movs	r3, #1
 800128e:	e08b      	b.n	80013a8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d107      	bne.n	80012a8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001298:	4b47      	ldr	r3, [pc, #284]	; (80013b8 <HAL_RCC_ClockConfig+0x1f8>)
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	2380      	movs	r3, #128	; 0x80
 800129e:	00db      	lsls	r3, r3, #3
 80012a0:	4013      	ands	r3, r2
 80012a2:	d113      	bne.n	80012cc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80012a4:	2301      	movs	r3, #1
 80012a6:	e07f      	b.n	80013a8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	2b03      	cmp	r3, #3
 80012ae:	d106      	bne.n	80012be <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80012b0:	4b41      	ldr	r3, [pc, #260]	; (80013b8 <HAL_RCC_ClockConfig+0x1f8>)
 80012b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012b4:	2202      	movs	r2, #2
 80012b6:	4013      	ands	r3, r2
 80012b8:	d108      	bne.n	80012cc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e074      	b.n	80013a8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80012be:	4b3e      	ldr	r3, [pc, #248]	; (80013b8 <HAL_RCC_ClockConfig+0x1f8>)
 80012c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012c2:	2202      	movs	r2, #2
 80012c4:	4013      	ands	r3, r2
 80012c6:	d101      	bne.n	80012cc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80012c8:	2301      	movs	r3, #1
 80012ca:	e06d      	b.n	80013a8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80012cc:	4b3a      	ldr	r3, [pc, #232]	; (80013b8 <HAL_RCC_ClockConfig+0x1f8>)
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	2207      	movs	r2, #7
 80012d2:	4393      	bics	r3, r2
 80012d4:	0019      	movs	r1, r3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	685a      	ldr	r2, [r3, #4]
 80012da:	4b37      	ldr	r3, [pc, #220]	; (80013b8 <HAL_RCC_ClockConfig+0x1f8>)
 80012dc:	430a      	orrs	r2, r1
 80012de:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80012e0:	f7ff f978 	bl	80005d4 <HAL_GetTick>
 80012e4:	0003      	movs	r3, r0
 80012e6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012e8:	e009      	b.n	80012fe <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012ea:	f7ff f973 	bl	80005d4 <HAL_GetTick>
 80012ee:	0002      	movs	r2, r0
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	1ad3      	subs	r3, r2, r3
 80012f4:	4a2f      	ldr	r2, [pc, #188]	; (80013b4 <HAL_RCC_ClockConfig+0x1f4>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d901      	bls.n	80012fe <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80012fa:	2303      	movs	r3, #3
 80012fc:	e054      	b.n	80013a8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012fe:	4b2e      	ldr	r3, [pc, #184]	; (80013b8 <HAL_RCC_ClockConfig+0x1f8>)
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	2238      	movs	r2, #56	; 0x38
 8001304:	401a      	ands	r2, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	00db      	lsls	r3, r3, #3
 800130c:	429a      	cmp	r2, r3
 800130e:	d1ec      	bne.n	80012ea <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001310:	4b27      	ldr	r3, [pc, #156]	; (80013b0 <HAL_RCC_ClockConfig+0x1f0>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2207      	movs	r2, #7
 8001316:	4013      	ands	r3, r2
 8001318:	683a      	ldr	r2, [r7, #0]
 800131a:	429a      	cmp	r2, r3
 800131c:	d21e      	bcs.n	800135c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800131e:	4b24      	ldr	r3, [pc, #144]	; (80013b0 <HAL_RCC_ClockConfig+0x1f0>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	2207      	movs	r2, #7
 8001324:	4393      	bics	r3, r2
 8001326:	0019      	movs	r1, r3
 8001328:	4b21      	ldr	r3, [pc, #132]	; (80013b0 <HAL_RCC_ClockConfig+0x1f0>)
 800132a:	683a      	ldr	r2, [r7, #0]
 800132c:	430a      	orrs	r2, r1
 800132e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001330:	f7ff f950 	bl	80005d4 <HAL_GetTick>
 8001334:	0003      	movs	r3, r0
 8001336:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001338:	e009      	b.n	800134e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800133a:	f7ff f94b 	bl	80005d4 <HAL_GetTick>
 800133e:	0002      	movs	r2, r0
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	4a1b      	ldr	r2, [pc, #108]	; (80013b4 <HAL_RCC_ClockConfig+0x1f4>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d901      	bls.n	800134e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800134a:	2303      	movs	r3, #3
 800134c:	e02c      	b.n	80013a8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800134e:	4b18      	ldr	r3, [pc, #96]	; (80013b0 <HAL_RCC_ClockConfig+0x1f0>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	2207      	movs	r2, #7
 8001354:	4013      	ands	r3, r2
 8001356:	683a      	ldr	r2, [r7, #0]
 8001358:	429a      	cmp	r2, r3
 800135a:	d1ee      	bne.n	800133a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2204      	movs	r2, #4
 8001362:	4013      	ands	r3, r2
 8001364:	d009      	beq.n	800137a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001366:	4b14      	ldr	r3, [pc, #80]	; (80013b8 <HAL_RCC_ClockConfig+0x1f8>)
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	4a15      	ldr	r2, [pc, #84]	; (80013c0 <HAL_RCC_ClockConfig+0x200>)
 800136c:	4013      	ands	r3, r2
 800136e:	0019      	movs	r1, r3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	68da      	ldr	r2, [r3, #12]
 8001374:	4b10      	ldr	r3, [pc, #64]	; (80013b8 <HAL_RCC_ClockConfig+0x1f8>)
 8001376:	430a      	orrs	r2, r1
 8001378:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800137a:	f000 f829 	bl	80013d0 <HAL_RCC_GetSysClockFreq>
 800137e:	0001      	movs	r1, r0
 8001380:	4b0d      	ldr	r3, [pc, #52]	; (80013b8 <HAL_RCC_ClockConfig+0x1f8>)
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	0a1b      	lsrs	r3, r3, #8
 8001386:	220f      	movs	r2, #15
 8001388:	401a      	ands	r2, r3
 800138a:	4b0e      	ldr	r3, [pc, #56]	; (80013c4 <HAL_RCC_ClockConfig+0x204>)
 800138c:	0092      	lsls	r2, r2, #2
 800138e:	58d3      	ldr	r3, [r2, r3]
 8001390:	221f      	movs	r2, #31
 8001392:	4013      	ands	r3, r2
 8001394:	000a      	movs	r2, r1
 8001396:	40da      	lsrs	r2, r3
 8001398:	4b0b      	ldr	r3, [pc, #44]	; (80013c8 <HAL_RCC_ClockConfig+0x208>)
 800139a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800139c:	4b0b      	ldr	r3, [pc, #44]	; (80013cc <HAL_RCC_ClockConfig+0x20c>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	0018      	movs	r0, r3
 80013a2:	f7ff f8bb 	bl	800051c <HAL_InitTick>
 80013a6:	0003      	movs	r3, r0
}
 80013a8:	0018      	movs	r0, r3
 80013aa:	46bd      	mov	sp, r7
 80013ac:	b004      	add	sp, #16
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	40022000 	.word	0x40022000
 80013b4:	00001388 	.word	0x00001388
 80013b8:	40021000 	.word	0x40021000
 80013bc:	fffff0ff 	.word	0xfffff0ff
 80013c0:	ffff8fff 	.word	0xffff8fff
 80013c4:	08001544 	.word	0x08001544
 80013c8:	20000000 	.word	0x20000000
 80013cc:	20000004 	.word	0x20000004

080013d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b086      	sub	sp, #24
 80013d4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013d6:	4b3c      	ldr	r3, [pc, #240]	; (80014c8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	2238      	movs	r2, #56	; 0x38
 80013dc:	4013      	ands	r3, r2
 80013de:	d10f      	bne.n	8001400 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80013e0:	4b39      	ldr	r3, [pc, #228]	; (80014c8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	0adb      	lsrs	r3, r3, #11
 80013e6:	2207      	movs	r2, #7
 80013e8:	4013      	ands	r3, r2
 80013ea:	2201      	movs	r2, #1
 80013ec:	409a      	lsls	r2, r3
 80013ee:	0013      	movs	r3, r2
 80013f0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80013f2:	6839      	ldr	r1, [r7, #0]
 80013f4:	4835      	ldr	r0, [pc, #212]	; (80014cc <HAL_RCC_GetSysClockFreq+0xfc>)
 80013f6:	f7fe fe85 	bl	8000104 <__udivsi3>
 80013fa:	0003      	movs	r3, r0
 80013fc:	613b      	str	r3, [r7, #16]
 80013fe:	e05d      	b.n	80014bc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001400:	4b31      	ldr	r3, [pc, #196]	; (80014c8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	2238      	movs	r2, #56	; 0x38
 8001406:	4013      	ands	r3, r2
 8001408:	2b08      	cmp	r3, #8
 800140a:	d102      	bne.n	8001412 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800140c:	4b30      	ldr	r3, [pc, #192]	; (80014d0 <HAL_RCC_GetSysClockFreq+0x100>)
 800140e:	613b      	str	r3, [r7, #16]
 8001410:	e054      	b.n	80014bc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001412:	4b2d      	ldr	r3, [pc, #180]	; (80014c8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	2238      	movs	r2, #56	; 0x38
 8001418:	4013      	ands	r3, r2
 800141a:	2b10      	cmp	r3, #16
 800141c:	d138      	bne.n	8001490 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800141e:	4b2a      	ldr	r3, [pc, #168]	; (80014c8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001420:	68db      	ldr	r3, [r3, #12]
 8001422:	2203      	movs	r2, #3
 8001424:	4013      	ands	r3, r2
 8001426:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001428:	4b27      	ldr	r3, [pc, #156]	; (80014c8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	091b      	lsrs	r3, r3, #4
 800142e:	2207      	movs	r2, #7
 8001430:	4013      	ands	r3, r2
 8001432:	3301      	adds	r3, #1
 8001434:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	2b03      	cmp	r3, #3
 800143a:	d10d      	bne.n	8001458 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800143c:	68b9      	ldr	r1, [r7, #8]
 800143e:	4824      	ldr	r0, [pc, #144]	; (80014d0 <HAL_RCC_GetSysClockFreq+0x100>)
 8001440:	f7fe fe60 	bl	8000104 <__udivsi3>
 8001444:	0003      	movs	r3, r0
 8001446:	0019      	movs	r1, r3
 8001448:	4b1f      	ldr	r3, [pc, #124]	; (80014c8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	0a1b      	lsrs	r3, r3, #8
 800144e:	227f      	movs	r2, #127	; 0x7f
 8001450:	4013      	ands	r3, r2
 8001452:	434b      	muls	r3, r1
 8001454:	617b      	str	r3, [r7, #20]
        break;
 8001456:	e00d      	b.n	8001474 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001458:	68b9      	ldr	r1, [r7, #8]
 800145a:	481c      	ldr	r0, [pc, #112]	; (80014cc <HAL_RCC_GetSysClockFreq+0xfc>)
 800145c:	f7fe fe52 	bl	8000104 <__udivsi3>
 8001460:	0003      	movs	r3, r0
 8001462:	0019      	movs	r1, r3
 8001464:	4b18      	ldr	r3, [pc, #96]	; (80014c8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	0a1b      	lsrs	r3, r3, #8
 800146a:	227f      	movs	r2, #127	; 0x7f
 800146c:	4013      	ands	r3, r2
 800146e:	434b      	muls	r3, r1
 8001470:	617b      	str	r3, [r7, #20]
        break;
 8001472:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001474:	4b14      	ldr	r3, [pc, #80]	; (80014c8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	0f5b      	lsrs	r3, r3, #29
 800147a:	2207      	movs	r2, #7
 800147c:	4013      	ands	r3, r2
 800147e:	3301      	adds	r3, #1
 8001480:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001482:	6879      	ldr	r1, [r7, #4]
 8001484:	6978      	ldr	r0, [r7, #20]
 8001486:	f7fe fe3d 	bl	8000104 <__udivsi3>
 800148a:	0003      	movs	r3, r0
 800148c:	613b      	str	r3, [r7, #16]
 800148e:	e015      	b.n	80014bc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001490:	4b0d      	ldr	r3, [pc, #52]	; (80014c8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	2238      	movs	r2, #56	; 0x38
 8001496:	4013      	ands	r3, r2
 8001498:	2b20      	cmp	r3, #32
 800149a:	d103      	bne.n	80014a4 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800149c:	2380      	movs	r3, #128	; 0x80
 800149e:	021b      	lsls	r3, r3, #8
 80014a0:	613b      	str	r3, [r7, #16]
 80014a2:	e00b      	b.n	80014bc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80014a4:	4b08      	ldr	r3, [pc, #32]	; (80014c8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	2238      	movs	r2, #56	; 0x38
 80014aa:	4013      	ands	r3, r2
 80014ac:	2b18      	cmp	r3, #24
 80014ae:	d103      	bne.n	80014b8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80014b0:	23fa      	movs	r3, #250	; 0xfa
 80014b2:	01db      	lsls	r3, r3, #7
 80014b4:	613b      	str	r3, [r7, #16]
 80014b6:	e001      	b.n	80014bc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80014b8:	2300      	movs	r3, #0
 80014ba:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80014bc:	693b      	ldr	r3, [r7, #16]
}
 80014be:	0018      	movs	r0, r3
 80014c0:	46bd      	mov	sp, r7
 80014c2:	b006      	add	sp, #24
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	46c0      	nop			; (mov r8, r8)
 80014c8:	40021000 	.word	0x40021000
 80014cc:	00f42400 	.word	0x00f42400
 80014d0:	007a1200 	.word	0x007a1200

080014d4 <__libc_init_array>:
 80014d4:	b570      	push	{r4, r5, r6, lr}
 80014d6:	2600      	movs	r6, #0
 80014d8:	4d0c      	ldr	r5, [pc, #48]	; (800150c <__libc_init_array+0x38>)
 80014da:	4c0d      	ldr	r4, [pc, #52]	; (8001510 <__libc_init_array+0x3c>)
 80014dc:	1b64      	subs	r4, r4, r5
 80014de:	10a4      	asrs	r4, r4, #2
 80014e0:	42a6      	cmp	r6, r4
 80014e2:	d109      	bne.n	80014f8 <__libc_init_array+0x24>
 80014e4:	2600      	movs	r6, #0
 80014e6:	f000 f821 	bl	800152c <_init>
 80014ea:	4d0a      	ldr	r5, [pc, #40]	; (8001514 <__libc_init_array+0x40>)
 80014ec:	4c0a      	ldr	r4, [pc, #40]	; (8001518 <__libc_init_array+0x44>)
 80014ee:	1b64      	subs	r4, r4, r5
 80014f0:	10a4      	asrs	r4, r4, #2
 80014f2:	42a6      	cmp	r6, r4
 80014f4:	d105      	bne.n	8001502 <__libc_init_array+0x2e>
 80014f6:	bd70      	pop	{r4, r5, r6, pc}
 80014f8:	00b3      	lsls	r3, r6, #2
 80014fa:	58eb      	ldr	r3, [r5, r3]
 80014fc:	4798      	blx	r3
 80014fe:	3601      	adds	r6, #1
 8001500:	e7ee      	b.n	80014e0 <__libc_init_array+0xc>
 8001502:	00b3      	lsls	r3, r6, #2
 8001504:	58eb      	ldr	r3, [r5, r3]
 8001506:	4798      	blx	r3
 8001508:	3601      	adds	r6, #1
 800150a:	e7f2      	b.n	80014f2 <__libc_init_array+0x1e>
 800150c:	08001584 	.word	0x08001584
 8001510:	08001584 	.word	0x08001584
 8001514:	08001584 	.word	0x08001584
 8001518:	08001588 	.word	0x08001588

0800151c <memset>:
 800151c:	0003      	movs	r3, r0
 800151e:	1882      	adds	r2, r0, r2
 8001520:	4293      	cmp	r3, r2
 8001522:	d100      	bne.n	8001526 <memset+0xa>
 8001524:	4770      	bx	lr
 8001526:	7019      	strb	r1, [r3, #0]
 8001528:	3301      	adds	r3, #1
 800152a:	e7f9      	b.n	8001520 <memset+0x4>

0800152c <_init>:
 800152c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800152e:	46c0      	nop			; (mov r8, r8)
 8001530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001532:	bc08      	pop	{r3}
 8001534:	469e      	mov	lr, r3
 8001536:	4770      	bx	lr

08001538 <_fini>:
 8001538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800153a:	46c0      	nop			; (mov r8, r8)
 800153c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800153e:	bc08      	pop	{r3}
 8001540:	469e      	mov	lr, r3
 8001542:	4770      	bx	lr
