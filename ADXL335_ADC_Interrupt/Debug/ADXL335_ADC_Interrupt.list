
ADXL335_ADC_Interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cc0  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08004d7c  08004d7c  00014d7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e84  08004e84  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004e84  08004e84  00014e84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e8c  08004e8c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e8c  08004e8c  00014e8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e90  08004e90  00014e90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004e94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000144  20000010  08004ea0  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000154  08004ea0  00020154  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000df91  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002002  00000000  00000000  0002dfc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ad0  00000000  00000000  0002ffc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a18  00000000  00000000  00030a98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018177  00000000  00000000  000314b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ccf7  00000000  00000000  00049627  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c507  00000000  00000000  0005631e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f2825  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002728  00000000  00000000  000f2878  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000010 	.word	0x20000010
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08004d64 	.word	0x08004d64

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000014 	.word	0x20000014
 8000100:	08004d64 	.word	0x08004d64

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	; (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f001 f9f2 	bl	8001838 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f001 f9ed 	bl	8001838 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	469b      	mov	fp, r3
 8000466:	d433      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000468:	465a      	mov	r2, fp
 800046a:	4653      	mov	r3, sl
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83a      	bhi.n	80004f2 <__udivmoddi4+0xc2>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e078      	b.n	8000574 <__udivmoddi4+0x144>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e075      	b.n	800057a <__udivmoddi4+0x14a>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e028      	b.n	80004fa <__udivmoddi4+0xca>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	2320      	movs	r3, #32
 80004d4:	1a9b      	subs	r3, r3, r2
 80004d6:	4652      	mov	r2, sl
 80004d8:	40da      	lsrs	r2, r3
 80004da:	4641      	mov	r1, r8
 80004dc:	0013      	movs	r3, r2
 80004de:	464a      	mov	r2, r9
 80004e0:	408a      	lsls	r2, r1
 80004e2:	0017      	movs	r7, r2
 80004e4:	4642      	mov	r2, r8
 80004e6:	431f      	orrs	r7, r3
 80004e8:	4653      	mov	r3, sl
 80004ea:	4093      	lsls	r3, r2
 80004ec:	001e      	movs	r6, r3
 80004ee:	42af      	cmp	r7, r5
 80004f0:	d9c4      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f2:	2200      	movs	r2, #0
 80004f4:	2300      	movs	r3, #0
 80004f6:	9200      	str	r2, [sp, #0]
 80004f8:	9301      	str	r3, [sp, #4]
 80004fa:	4643      	mov	r3, r8
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d0d9      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000500:	07fb      	lsls	r3, r7, #31
 8000502:	0872      	lsrs	r2, r6, #1
 8000504:	431a      	orrs	r2, r3
 8000506:	4646      	mov	r6, r8
 8000508:	087b      	lsrs	r3, r7, #1
 800050a:	e00e      	b.n	800052a <__udivmoddi4+0xfa>
 800050c:	42ab      	cmp	r3, r5
 800050e:	d101      	bne.n	8000514 <__udivmoddi4+0xe4>
 8000510:	42a2      	cmp	r2, r4
 8000512:	d80c      	bhi.n	800052e <__udivmoddi4+0xfe>
 8000514:	1aa4      	subs	r4, r4, r2
 8000516:	419d      	sbcs	r5, r3
 8000518:	2001      	movs	r0, #1
 800051a:	1924      	adds	r4, r4, r4
 800051c:	416d      	adcs	r5, r5
 800051e:	2100      	movs	r1, #0
 8000520:	3e01      	subs	r6, #1
 8000522:	1824      	adds	r4, r4, r0
 8000524:	414d      	adcs	r5, r1
 8000526:	2e00      	cmp	r6, #0
 8000528:	d006      	beq.n	8000538 <__udivmoddi4+0x108>
 800052a:	42ab      	cmp	r3, r5
 800052c:	d9ee      	bls.n	800050c <__udivmoddi4+0xdc>
 800052e:	3e01      	subs	r6, #1
 8000530:	1924      	adds	r4, r4, r4
 8000532:	416d      	adcs	r5, r5
 8000534:	2e00      	cmp	r6, #0
 8000536:	d1f8      	bne.n	800052a <__udivmoddi4+0xfa>
 8000538:	9800      	ldr	r0, [sp, #0]
 800053a:	9901      	ldr	r1, [sp, #4]
 800053c:	465b      	mov	r3, fp
 800053e:	1900      	adds	r0, r0, r4
 8000540:	4169      	adcs	r1, r5
 8000542:	2b00      	cmp	r3, #0
 8000544:	db24      	blt.n	8000590 <__udivmoddi4+0x160>
 8000546:	002b      	movs	r3, r5
 8000548:	465a      	mov	r2, fp
 800054a:	4644      	mov	r4, r8
 800054c:	40d3      	lsrs	r3, r2
 800054e:	002a      	movs	r2, r5
 8000550:	40e2      	lsrs	r2, r4
 8000552:	001c      	movs	r4, r3
 8000554:	465b      	mov	r3, fp
 8000556:	0015      	movs	r5, r2
 8000558:	2b00      	cmp	r3, #0
 800055a:	db2a      	blt.n	80005b2 <__udivmoddi4+0x182>
 800055c:	0026      	movs	r6, r4
 800055e:	409e      	lsls	r6, r3
 8000560:	0033      	movs	r3, r6
 8000562:	0026      	movs	r6, r4
 8000564:	4647      	mov	r7, r8
 8000566:	40be      	lsls	r6, r7
 8000568:	0032      	movs	r2, r6
 800056a:	1a80      	subs	r0, r0, r2
 800056c:	4199      	sbcs	r1, r3
 800056e:	9000      	str	r0, [sp, #0]
 8000570:	9101      	str	r1, [sp, #4]
 8000572:	e79f      	b.n	80004b4 <__udivmoddi4+0x84>
 8000574:	42a3      	cmp	r3, r4
 8000576:	d8bc      	bhi.n	80004f2 <__udivmoddi4+0xc2>
 8000578:	e783      	b.n	8000482 <__udivmoddi4+0x52>
 800057a:	4642      	mov	r2, r8
 800057c:	2320      	movs	r3, #32
 800057e:	2100      	movs	r1, #0
 8000580:	1a9b      	subs	r3, r3, r2
 8000582:	2200      	movs	r2, #0
 8000584:	9100      	str	r1, [sp, #0]
 8000586:	9201      	str	r2, [sp, #4]
 8000588:	2201      	movs	r2, #1
 800058a:	40da      	lsrs	r2, r3
 800058c:	9201      	str	r2, [sp, #4]
 800058e:	e786      	b.n	800049e <__udivmoddi4+0x6e>
 8000590:	4642      	mov	r2, r8
 8000592:	2320      	movs	r3, #32
 8000594:	1a9b      	subs	r3, r3, r2
 8000596:	002a      	movs	r2, r5
 8000598:	4646      	mov	r6, r8
 800059a:	409a      	lsls	r2, r3
 800059c:	0023      	movs	r3, r4
 800059e:	40f3      	lsrs	r3, r6
 80005a0:	4644      	mov	r4, r8
 80005a2:	4313      	orrs	r3, r2
 80005a4:	002a      	movs	r2, r5
 80005a6:	40e2      	lsrs	r2, r4
 80005a8:	001c      	movs	r4, r3
 80005aa:	465b      	mov	r3, fp
 80005ac:	0015      	movs	r5, r2
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	dad4      	bge.n	800055c <__udivmoddi4+0x12c>
 80005b2:	4642      	mov	r2, r8
 80005b4:	002f      	movs	r7, r5
 80005b6:	2320      	movs	r3, #32
 80005b8:	0026      	movs	r6, r4
 80005ba:	4097      	lsls	r7, r2
 80005bc:	1a9b      	subs	r3, r3, r2
 80005be:	40de      	lsrs	r6, r3
 80005c0:	003b      	movs	r3, r7
 80005c2:	4333      	orrs	r3, r6
 80005c4:	e7cd      	b.n	8000562 <__udivmoddi4+0x132>
 80005c6:	46c0      	nop			; (mov r8, r8)

080005c8 <__aeabi_ddiv>:
 80005c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005ca:	4657      	mov	r7, sl
 80005cc:	464e      	mov	r6, r9
 80005ce:	4645      	mov	r5, r8
 80005d0:	46de      	mov	lr, fp
 80005d2:	b5e0      	push	{r5, r6, r7, lr}
 80005d4:	4681      	mov	r9, r0
 80005d6:	0005      	movs	r5, r0
 80005d8:	030c      	lsls	r4, r1, #12
 80005da:	0048      	lsls	r0, r1, #1
 80005dc:	4692      	mov	sl, r2
 80005de:	001f      	movs	r7, r3
 80005e0:	b085      	sub	sp, #20
 80005e2:	0b24      	lsrs	r4, r4, #12
 80005e4:	0d40      	lsrs	r0, r0, #21
 80005e6:	0fce      	lsrs	r6, r1, #31
 80005e8:	2800      	cmp	r0, #0
 80005ea:	d100      	bne.n	80005ee <__aeabi_ddiv+0x26>
 80005ec:	e156      	b.n	800089c <__aeabi_ddiv+0x2d4>
 80005ee:	4bd4      	ldr	r3, [pc, #848]	; (8000940 <__aeabi_ddiv+0x378>)
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d100      	bne.n	80005f6 <__aeabi_ddiv+0x2e>
 80005f4:	e172      	b.n	80008dc <__aeabi_ddiv+0x314>
 80005f6:	0f6b      	lsrs	r3, r5, #29
 80005f8:	00e4      	lsls	r4, r4, #3
 80005fa:	431c      	orrs	r4, r3
 80005fc:	2380      	movs	r3, #128	; 0x80
 80005fe:	041b      	lsls	r3, r3, #16
 8000600:	4323      	orrs	r3, r4
 8000602:	4698      	mov	r8, r3
 8000604:	4bcf      	ldr	r3, [pc, #828]	; (8000944 <__aeabi_ddiv+0x37c>)
 8000606:	00ed      	lsls	r5, r5, #3
 8000608:	469b      	mov	fp, r3
 800060a:	2300      	movs	r3, #0
 800060c:	4699      	mov	r9, r3
 800060e:	4483      	add	fp, r0
 8000610:	9300      	str	r3, [sp, #0]
 8000612:	033c      	lsls	r4, r7, #12
 8000614:	007b      	lsls	r3, r7, #1
 8000616:	4650      	mov	r0, sl
 8000618:	0b24      	lsrs	r4, r4, #12
 800061a:	0d5b      	lsrs	r3, r3, #21
 800061c:	0fff      	lsrs	r7, r7, #31
 800061e:	2b00      	cmp	r3, #0
 8000620:	d100      	bne.n	8000624 <__aeabi_ddiv+0x5c>
 8000622:	e11f      	b.n	8000864 <__aeabi_ddiv+0x29c>
 8000624:	4ac6      	ldr	r2, [pc, #792]	; (8000940 <__aeabi_ddiv+0x378>)
 8000626:	4293      	cmp	r3, r2
 8000628:	d100      	bne.n	800062c <__aeabi_ddiv+0x64>
 800062a:	e162      	b.n	80008f2 <__aeabi_ddiv+0x32a>
 800062c:	49c5      	ldr	r1, [pc, #788]	; (8000944 <__aeabi_ddiv+0x37c>)
 800062e:	0f42      	lsrs	r2, r0, #29
 8000630:	468c      	mov	ip, r1
 8000632:	00e4      	lsls	r4, r4, #3
 8000634:	4659      	mov	r1, fp
 8000636:	4314      	orrs	r4, r2
 8000638:	2280      	movs	r2, #128	; 0x80
 800063a:	4463      	add	r3, ip
 800063c:	0412      	lsls	r2, r2, #16
 800063e:	1acb      	subs	r3, r1, r3
 8000640:	4314      	orrs	r4, r2
 8000642:	469b      	mov	fp, r3
 8000644:	00c2      	lsls	r2, r0, #3
 8000646:	2000      	movs	r0, #0
 8000648:	0033      	movs	r3, r6
 800064a:	407b      	eors	r3, r7
 800064c:	469a      	mov	sl, r3
 800064e:	464b      	mov	r3, r9
 8000650:	2b0f      	cmp	r3, #15
 8000652:	d827      	bhi.n	80006a4 <__aeabi_ddiv+0xdc>
 8000654:	49bc      	ldr	r1, [pc, #752]	; (8000948 <__aeabi_ddiv+0x380>)
 8000656:	009b      	lsls	r3, r3, #2
 8000658:	58cb      	ldr	r3, [r1, r3]
 800065a:	469f      	mov	pc, r3
 800065c:	46b2      	mov	sl, r6
 800065e:	9b00      	ldr	r3, [sp, #0]
 8000660:	2b02      	cmp	r3, #2
 8000662:	d016      	beq.n	8000692 <__aeabi_ddiv+0xca>
 8000664:	2b03      	cmp	r3, #3
 8000666:	d100      	bne.n	800066a <__aeabi_ddiv+0xa2>
 8000668:	e28e      	b.n	8000b88 <__aeabi_ddiv+0x5c0>
 800066a:	2b01      	cmp	r3, #1
 800066c:	d000      	beq.n	8000670 <__aeabi_ddiv+0xa8>
 800066e:	e0d9      	b.n	8000824 <__aeabi_ddiv+0x25c>
 8000670:	2300      	movs	r3, #0
 8000672:	2400      	movs	r4, #0
 8000674:	2500      	movs	r5, #0
 8000676:	4652      	mov	r2, sl
 8000678:	051b      	lsls	r3, r3, #20
 800067a:	4323      	orrs	r3, r4
 800067c:	07d2      	lsls	r2, r2, #31
 800067e:	4313      	orrs	r3, r2
 8000680:	0028      	movs	r0, r5
 8000682:	0019      	movs	r1, r3
 8000684:	b005      	add	sp, #20
 8000686:	bcf0      	pop	{r4, r5, r6, r7}
 8000688:	46bb      	mov	fp, r7
 800068a:	46b2      	mov	sl, r6
 800068c:	46a9      	mov	r9, r5
 800068e:	46a0      	mov	r8, r4
 8000690:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000692:	2400      	movs	r4, #0
 8000694:	2500      	movs	r5, #0
 8000696:	4baa      	ldr	r3, [pc, #680]	; (8000940 <__aeabi_ddiv+0x378>)
 8000698:	e7ed      	b.n	8000676 <__aeabi_ddiv+0xae>
 800069a:	46ba      	mov	sl, r7
 800069c:	46a0      	mov	r8, r4
 800069e:	0015      	movs	r5, r2
 80006a0:	9000      	str	r0, [sp, #0]
 80006a2:	e7dc      	b.n	800065e <__aeabi_ddiv+0x96>
 80006a4:	4544      	cmp	r4, r8
 80006a6:	d200      	bcs.n	80006aa <__aeabi_ddiv+0xe2>
 80006a8:	e1c7      	b.n	8000a3a <__aeabi_ddiv+0x472>
 80006aa:	d100      	bne.n	80006ae <__aeabi_ddiv+0xe6>
 80006ac:	e1c2      	b.n	8000a34 <__aeabi_ddiv+0x46c>
 80006ae:	2301      	movs	r3, #1
 80006b0:	425b      	negs	r3, r3
 80006b2:	469c      	mov	ip, r3
 80006b4:	002e      	movs	r6, r5
 80006b6:	4640      	mov	r0, r8
 80006b8:	2500      	movs	r5, #0
 80006ba:	44e3      	add	fp, ip
 80006bc:	0223      	lsls	r3, r4, #8
 80006be:	0e14      	lsrs	r4, r2, #24
 80006c0:	431c      	orrs	r4, r3
 80006c2:	0c1b      	lsrs	r3, r3, #16
 80006c4:	4699      	mov	r9, r3
 80006c6:	0423      	lsls	r3, r4, #16
 80006c8:	0c1f      	lsrs	r7, r3, #16
 80006ca:	0212      	lsls	r2, r2, #8
 80006cc:	4649      	mov	r1, r9
 80006ce:	9200      	str	r2, [sp, #0]
 80006d0:	9701      	str	r7, [sp, #4]
 80006d2:	f7ff fd9d 	bl	8000210 <__aeabi_uidivmod>
 80006d6:	0002      	movs	r2, r0
 80006d8:	437a      	muls	r2, r7
 80006da:	040b      	lsls	r3, r1, #16
 80006dc:	0c31      	lsrs	r1, r6, #16
 80006de:	4680      	mov	r8, r0
 80006e0:	4319      	orrs	r1, r3
 80006e2:	428a      	cmp	r2, r1
 80006e4:	d907      	bls.n	80006f6 <__aeabi_ddiv+0x12e>
 80006e6:	2301      	movs	r3, #1
 80006e8:	425b      	negs	r3, r3
 80006ea:	469c      	mov	ip, r3
 80006ec:	1909      	adds	r1, r1, r4
 80006ee:	44e0      	add	r8, ip
 80006f0:	428c      	cmp	r4, r1
 80006f2:	d800      	bhi.n	80006f6 <__aeabi_ddiv+0x12e>
 80006f4:	e207      	b.n	8000b06 <__aeabi_ddiv+0x53e>
 80006f6:	1a88      	subs	r0, r1, r2
 80006f8:	4649      	mov	r1, r9
 80006fa:	f7ff fd89 	bl	8000210 <__aeabi_uidivmod>
 80006fe:	0409      	lsls	r1, r1, #16
 8000700:	468c      	mov	ip, r1
 8000702:	0431      	lsls	r1, r6, #16
 8000704:	4666      	mov	r6, ip
 8000706:	9a01      	ldr	r2, [sp, #4]
 8000708:	0c09      	lsrs	r1, r1, #16
 800070a:	4342      	muls	r2, r0
 800070c:	0003      	movs	r3, r0
 800070e:	4331      	orrs	r1, r6
 8000710:	428a      	cmp	r2, r1
 8000712:	d904      	bls.n	800071e <__aeabi_ddiv+0x156>
 8000714:	1909      	adds	r1, r1, r4
 8000716:	3b01      	subs	r3, #1
 8000718:	428c      	cmp	r4, r1
 800071a:	d800      	bhi.n	800071e <__aeabi_ddiv+0x156>
 800071c:	e1ed      	b.n	8000afa <__aeabi_ddiv+0x532>
 800071e:	1a88      	subs	r0, r1, r2
 8000720:	4642      	mov	r2, r8
 8000722:	0412      	lsls	r2, r2, #16
 8000724:	431a      	orrs	r2, r3
 8000726:	4690      	mov	r8, r2
 8000728:	4641      	mov	r1, r8
 800072a:	9b00      	ldr	r3, [sp, #0]
 800072c:	040e      	lsls	r6, r1, #16
 800072e:	0c1b      	lsrs	r3, r3, #16
 8000730:	001f      	movs	r7, r3
 8000732:	9302      	str	r3, [sp, #8]
 8000734:	9b00      	ldr	r3, [sp, #0]
 8000736:	0c36      	lsrs	r6, r6, #16
 8000738:	041b      	lsls	r3, r3, #16
 800073a:	0c19      	lsrs	r1, r3, #16
 800073c:	000b      	movs	r3, r1
 800073e:	4373      	muls	r3, r6
 8000740:	0c12      	lsrs	r2, r2, #16
 8000742:	437e      	muls	r6, r7
 8000744:	9103      	str	r1, [sp, #12]
 8000746:	4351      	muls	r1, r2
 8000748:	437a      	muls	r2, r7
 800074a:	0c1f      	lsrs	r7, r3, #16
 800074c:	46bc      	mov	ip, r7
 800074e:	1876      	adds	r6, r6, r1
 8000750:	4466      	add	r6, ip
 8000752:	42b1      	cmp	r1, r6
 8000754:	d903      	bls.n	800075e <__aeabi_ddiv+0x196>
 8000756:	2180      	movs	r1, #128	; 0x80
 8000758:	0249      	lsls	r1, r1, #9
 800075a:	468c      	mov	ip, r1
 800075c:	4462      	add	r2, ip
 800075e:	0c31      	lsrs	r1, r6, #16
 8000760:	188a      	adds	r2, r1, r2
 8000762:	0431      	lsls	r1, r6, #16
 8000764:	041e      	lsls	r6, r3, #16
 8000766:	0c36      	lsrs	r6, r6, #16
 8000768:	198e      	adds	r6, r1, r6
 800076a:	4290      	cmp	r0, r2
 800076c:	d302      	bcc.n	8000774 <__aeabi_ddiv+0x1ac>
 800076e:	d112      	bne.n	8000796 <__aeabi_ddiv+0x1ce>
 8000770:	42b5      	cmp	r5, r6
 8000772:	d210      	bcs.n	8000796 <__aeabi_ddiv+0x1ce>
 8000774:	4643      	mov	r3, r8
 8000776:	1e59      	subs	r1, r3, #1
 8000778:	9b00      	ldr	r3, [sp, #0]
 800077a:	469c      	mov	ip, r3
 800077c:	4465      	add	r5, ip
 800077e:	001f      	movs	r7, r3
 8000780:	429d      	cmp	r5, r3
 8000782:	419b      	sbcs	r3, r3
 8000784:	425b      	negs	r3, r3
 8000786:	191b      	adds	r3, r3, r4
 8000788:	18c0      	adds	r0, r0, r3
 800078a:	4284      	cmp	r4, r0
 800078c:	d200      	bcs.n	8000790 <__aeabi_ddiv+0x1c8>
 800078e:	e1a0      	b.n	8000ad2 <__aeabi_ddiv+0x50a>
 8000790:	d100      	bne.n	8000794 <__aeabi_ddiv+0x1cc>
 8000792:	e19b      	b.n	8000acc <__aeabi_ddiv+0x504>
 8000794:	4688      	mov	r8, r1
 8000796:	1bae      	subs	r6, r5, r6
 8000798:	42b5      	cmp	r5, r6
 800079a:	41ad      	sbcs	r5, r5
 800079c:	1a80      	subs	r0, r0, r2
 800079e:	426d      	negs	r5, r5
 80007a0:	1b40      	subs	r0, r0, r5
 80007a2:	4284      	cmp	r4, r0
 80007a4:	d100      	bne.n	80007a8 <__aeabi_ddiv+0x1e0>
 80007a6:	e1d5      	b.n	8000b54 <__aeabi_ddiv+0x58c>
 80007a8:	4649      	mov	r1, r9
 80007aa:	f7ff fd31 	bl	8000210 <__aeabi_uidivmod>
 80007ae:	9a01      	ldr	r2, [sp, #4]
 80007b0:	040b      	lsls	r3, r1, #16
 80007b2:	4342      	muls	r2, r0
 80007b4:	0c31      	lsrs	r1, r6, #16
 80007b6:	0005      	movs	r5, r0
 80007b8:	4319      	orrs	r1, r3
 80007ba:	428a      	cmp	r2, r1
 80007bc:	d900      	bls.n	80007c0 <__aeabi_ddiv+0x1f8>
 80007be:	e16c      	b.n	8000a9a <__aeabi_ddiv+0x4d2>
 80007c0:	1a88      	subs	r0, r1, r2
 80007c2:	4649      	mov	r1, r9
 80007c4:	f7ff fd24 	bl	8000210 <__aeabi_uidivmod>
 80007c8:	9a01      	ldr	r2, [sp, #4]
 80007ca:	0436      	lsls	r6, r6, #16
 80007cc:	4342      	muls	r2, r0
 80007ce:	0409      	lsls	r1, r1, #16
 80007d0:	0c36      	lsrs	r6, r6, #16
 80007d2:	0003      	movs	r3, r0
 80007d4:	430e      	orrs	r6, r1
 80007d6:	42b2      	cmp	r2, r6
 80007d8:	d900      	bls.n	80007dc <__aeabi_ddiv+0x214>
 80007da:	e153      	b.n	8000a84 <__aeabi_ddiv+0x4bc>
 80007dc:	9803      	ldr	r0, [sp, #12]
 80007de:	1ab6      	subs	r6, r6, r2
 80007e0:	0002      	movs	r2, r0
 80007e2:	042d      	lsls	r5, r5, #16
 80007e4:	431d      	orrs	r5, r3
 80007e6:	9f02      	ldr	r7, [sp, #8]
 80007e8:	042b      	lsls	r3, r5, #16
 80007ea:	0c1b      	lsrs	r3, r3, #16
 80007ec:	435a      	muls	r2, r3
 80007ee:	437b      	muls	r3, r7
 80007f0:	469c      	mov	ip, r3
 80007f2:	0c29      	lsrs	r1, r5, #16
 80007f4:	4348      	muls	r0, r1
 80007f6:	0c13      	lsrs	r3, r2, #16
 80007f8:	4484      	add	ip, r0
 80007fa:	4463      	add	r3, ip
 80007fc:	4379      	muls	r1, r7
 80007fe:	4298      	cmp	r0, r3
 8000800:	d903      	bls.n	800080a <__aeabi_ddiv+0x242>
 8000802:	2080      	movs	r0, #128	; 0x80
 8000804:	0240      	lsls	r0, r0, #9
 8000806:	4684      	mov	ip, r0
 8000808:	4461      	add	r1, ip
 800080a:	0c18      	lsrs	r0, r3, #16
 800080c:	0412      	lsls	r2, r2, #16
 800080e:	041b      	lsls	r3, r3, #16
 8000810:	0c12      	lsrs	r2, r2, #16
 8000812:	1841      	adds	r1, r0, r1
 8000814:	189b      	adds	r3, r3, r2
 8000816:	428e      	cmp	r6, r1
 8000818:	d200      	bcs.n	800081c <__aeabi_ddiv+0x254>
 800081a:	e0ff      	b.n	8000a1c <__aeabi_ddiv+0x454>
 800081c:	d100      	bne.n	8000820 <__aeabi_ddiv+0x258>
 800081e:	e0fa      	b.n	8000a16 <__aeabi_ddiv+0x44e>
 8000820:	2301      	movs	r3, #1
 8000822:	431d      	orrs	r5, r3
 8000824:	4a49      	ldr	r2, [pc, #292]	; (800094c <__aeabi_ddiv+0x384>)
 8000826:	445a      	add	r2, fp
 8000828:	2a00      	cmp	r2, #0
 800082a:	dc00      	bgt.n	800082e <__aeabi_ddiv+0x266>
 800082c:	e0aa      	b.n	8000984 <__aeabi_ddiv+0x3bc>
 800082e:	076b      	lsls	r3, r5, #29
 8000830:	d000      	beq.n	8000834 <__aeabi_ddiv+0x26c>
 8000832:	e13d      	b.n	8000ab0 <__aeabi_ddiv+0x4e8>
 8000834:	08ed      	lsrs	r5, r5, #3
 8000836:	4643      	mov	r3, r8
 8000838:	01db      	lsls	r3, r3, #7
 800083a:	d506      	bpl.n	800084a <__aeabi_ddiv+0x282>
 800083c:	4642      	mov	r2, r8
 800083e:	4b44      	ldr	r3, [pc, #272]	; (8000950 <__aeabi_ddiv+0x388>)
 8000840:	401a      	ands	r2, r3
 8000842:	4690      	mov	r8, r2
 8000844:	2280      	movs	r2, #128	; 0x80
 8000846:	00d2      	lsls	r2, r2, #3
 8000848:	445a      	add	r2, fp
 800084a:	4b42      	ldr	r3, [pc, #264]	; (8000954 <__aeabi_ddiv+0x38c>)
 800084c:	429a      	cmp	r2, r3
 800084e:	dd00      	ble.n	8000852 <__aeabi_ddiv+0x28a>
 8000850:	e71f      	b.n	8000692 <__aeabi_ddiv+0xca>
 8000852:	4643      	mov	r3, r8
 8000854:	075b      	lsls	r3, r3, #29
 8000856:	431d      	orrs	r5, r3
 8000858:	4643      	mov	r3, r8
 800085a:	0552      	lsls	r2, r2, #21
 800085c:	025c      	lsls	r4, r3, #9
 800085e:	0b24      	lsrs	r4, r4, #12
 8000860:	0d53      	lsrs	r3, r2, #21
 8000862:	e708      	b.n	8000676 <__aeabi_ddiv+0xae>
 8000864:	4652      	mov	r2, sl
 8000866:	4322      	orrs	r2, r4
 8000868:	d100      	bne.n	800086c <__aeabi_ddiv+0x2a4>
 800086a:	e07b      	b.n	8000964 <__aeabi_ddiv+0x39c>
 800086c:	2c00      	cmp	r4, #0
 800086e:	d100      	bne.n	8000872 <__aeabi_ddiv+0x2aa>
 8000870:	e0fa      	b.n	8000a68 <__aeabi_ddiv+0x4a0>
 8000872:	0020      	movs	r0, r4
 8000874:	f000 ffc2 	bl	80017fc <__clzsi2>
 8000878:	0002      	movs	r2, r0
 800087a:	3a0b      	subs	r2, #11
 800087c:	231d      	movs	r3, #29
 800087e:	0001      	movs	r1, r0
 8000880:	1a9b      	subs	r3, r3, r2
 8000882:	4652      	mov	r2, sl
 8000884:	3908      	subs	r1, #8
 8000886:	40da      	lsrs	r2, r3
 8000888:	408c      	lsls	r4, r1
 800088a:	4314      	orrs	r4, r2
 800088c:	4652      	mov	r2, sl
 800088e:	408a      	lsls	r2, r1
 8000890:	4b31      	ldr	r3, [pc, #196]	; (8000958 <__aeabi_ddiv+0x390>)
 8000892:	4458      	add	r0, fp
 8000894:	469b      	mov	fp, r3
 8000896:	4483      	add	fp, r0
 8000898:	2000      	movs	r0, #0
 800089a:	e6d5      	b.n	8000648 <__aeabi_ddiv+0x80>
 800089c:	464b      	mov	r3, r9
 800089e:	4323      	orrs	r3, r4
 80008a0:	4698      	mov	r8, r3
 80008a2:	d044      	beq.n	800092e <__aeabi_ddiv+0x366>
 80008a4:	2c00      	cmp	r4, #0
 80008a6:	d100      	bne.n	80008aa <__aeabi_ddiv+0x2e2>
 80008a8:	e0ce      	b.n	8000a48 <__aeabi_ddiv+0x480>
 80008aa:	0020      	movs	r0, r4
 80008ac:	f000 ffa6 	bl	80017fc <__clzsi2>
 80008b0:	0001      	movs	r1, r0
 80008b2:	0002      	movs	r2, r0
 80008b4:	390b      	subs	r1, #11
 80008b6:	231d      	movs	r3, #29
 80008b8:	1a5b      	subs	r3, r3, r1
 80008ba:	4649      	mov	r1, r9
 80008bc:	0010      	movs	r0, r2
 80008be:	40d9      	lsrs	r1, r3
 80008c0:	3808      	subs	r0, #8
 80008c2:	4084      	lsls	r4, r0
 80008c4:	000b      	movs	r3, r1
 80008c6:	464d      	mov	r5, r9
 80008c8:	4323      	orrs	r3, r4
 80008ca:	4698      	mov	r8, r3
 80008cc:	4085      	lsls	r5, r0
 80008ce:	4823      	ldr	r0, [pc, #140]	; (800095c <__aeabi_ddiv+0x394>)
 80008d0:	1a83      	subs	r3, r0, r2
 80008d2:	469b      	mov	fp, r3
 80008d4:	2300      	movs	r3, #0
 80008d6:	4699      	mov	r9, r3
 80008d8:	9300      	str	r3, [sp, #0]
 80008da:	e69a      	b.n	8000612 <__aeabi_ddiv+0x4a>
 80008dc:	464b      	mov	r3, r9
 80008de:	4323      	orrs	r3, r4
 80008e0:	4698      	mov	r8, r3
 80008e2:	d11d      	bne.n	8000920 <__aeabi_ddiv+0x358>
 80008e4:	2308      	movs	r3, #8
 80008e6:	4699      	mov	r9, r3
 80008e8:	3b06      	subs	r3, #6
 80008ea:	2500      	movs	r5, #0
 80008ec:	4683      	mov	fp, r0
 80008ee:	9300      	str	r3, [sp, #0]
 80008f0:	e68f      	b.n	8000612 <__aeabi_ddiv+0x4a>
 80008f2:	4652      	mov	r2, sl
 80008f4:	4322      	orrs	r2, r4
 80008f6:	d109      	bne.n	800090c <__aeabi_ddiv+0x344>
 80008f8:	2302      	movs	r3, #2
 80008fa:	4649      	mov	r1, r9
 80008fc:	4319      	orrs	r1, r3
 80008fe:	4b18      	ldr	r3, [pc, #96]	; (8000960 <__aeabi_ddiv+0x398>)
 8000900:	4689      	mov	r9, r1
 8000902:	469c      	mov	ip, r3
 8000904:	2400      	movs	r4, #0
 8000906:	2002      	movs	r0, #2
 8000908:	44e3      	add	fp, ip
 800090a:	e69d      	b.n	8000648 <__aeabi_ddiv+0x80>
 800090c:	2303      	movs	r3, #3
 800090e:	464a      	mov	r2, r9
 8000910:	431a      	orrs	r2, r3
 8000912:	4b13      	ldr	r3, [pc, #76]	; (8000960 <__aeabi_ddiv+0x398>)
 8000914:	4691      	mov	r9, r2
 8000916:	469c      	mov	ip, r3
 8000918:	4652      	mov	r2, sl
 800091a:	2003      	movs	r0, #3
 800091c:	44e3      	add	fp, ip
 800091e:	e693      	b.n	8000648 <__aeabi_ddiv+0x80>
 8000920:	230c      	movs	r3, #12
 8000922:	4699      	mov	r9, r3
 8000924:	3b09      	subs	r3, #9
 8000926:	46a0      	mov	r8, r4
 8000928:	4683      	mov	fp, r0
 800092a:	9300      	str	r3, [sp, #0]
 800092c:	e671      	b.n	8000612 <__aeabi_ddiv+0x4a>
 800092e:	2304      	movs	r3, #4
 8000930:	4699      	mov	r9, r3
 8000932:	2300      	movs	r3, #0
 8000934:	469b      	mov	fp, r3
 8000936:	3301      	adds	r3, #1
 8000938:	2500      	movs	r5, #0
 800093a:	9300      	str	r3, [sp, #0]
 800093c:	e669      	b.n	8000612 <__aeabi_ddiv+0x4a>
 800093e:	46c0      	nop			; (mov r8, r8)
 8000940:	000007ff 	.word	0x000007ff
 8000944:	fffffc01 	.word	0xfffffc01
 8000948:	08004d7c 	.word	0x08004d7c
 800094c:	000003ff 	.word	0x000003ff
 8000950:	feffffff 	.word	0xfeffffff
 8000954:	000007fe 	.word	0x000007fe
 8000958:	000003f3 	.word	0x000003f3
 800095c:	fffffc0d 	.word	0xfffffc0d
 8000960:	fffff801 	.word	0xfffff801
 8000964:	4649      	mov	r1, r9
 8000966:	2301      	movs	r3, #1
 8000968:	4319      	orrs	r1, r3
 800096a:	4689      	mov	r9, r1
 800096c:	2400      	movs	r4, #0
 800096e:	2001      	movs	r0, #1
 8000970:	e66a      	b.n	8000648 <__aeabi_ddiv+0x80>
 8000972:	2300      	movs	r3, #0
 8000974:	2480      	movs	r4, #128	; 0x80
 8000976:	469a      	mov	sl, r3
 8000978:	2500      	movs	r5, #0
 800097a:	4b8a      	ldr	r3, [pc, #552]	; (8000ba4 <__aeabi_ddiv+0x5dc>)
 800097c:	0324      	lsls	r4, r4, #12
 800097e:	e67a      	b.n	8000676 <__aeabi_ddiv+0xae>
 8000980:	2501      	movs	r5, #1
 8000982:	426d      	negs	r5, r5
 8000984:	2301      	movs	r3, #1
 8000986:	1a9b      	subs	r3, r3, r2
 8000988:	2b38      	cmp	r3, #56	; 0x38
 800098a:	dd00      	ble.n	800098e <__aeabi_ddiv+0x3c6>
 800098c:	e670      	b.n	8000670 <__aeabi_ddiv+0xa8>
 800098e:	2b1f      	cmp	r3, #31
 8000990:	dc00      	bgt.n	8000994 <__aeabi_ddiv+0x3cc>
 8000992:	e0bf      	b.n	8000b14 <__aeabi_ddiv+0x54c>
 8000994:	211f      	movs	r1, #31
 8000996:	4249      	negs	r1, r1
 8000998:	1a8a      	subs	r2, r1, r2
 800099a:	4641      	mov	r1, r8
 800099c:	40d1      	lsrs	r1, r2
 800099e:	000a      	movs	r2, r1
 80009a0:	2b20      	cmp	r3, #32
 80009a2:	d004      	beq.n	80009ae <__aeabi_ddiv+0x3e6>
 80009a4:	4641      	mov	r1, r8
 80009a6:	4b80      	ldr	r3, [pc, #512]	; (8000ba8 <__aeabi_ddiv+0x5e0>)
 80009a8:	445b      	add	r3, fp
 80009aa:	4099      	lsls	r1, r3
 80009ac:	430d      	orrs	r5, r1
 80009ae:	1e6b      	subs	r3, r5, #1
 80009b0:	419d      	sbcs	r5, r3
 80009b2:	2307      	movs	r3, #7
 80009b4:	432a      	orrs	r2, r5
 80009b6:	001d      	movs	r5, r3
 80009b8:	2400      	movs	r4, #0
 80009ba:	4015      	ands	r5, r2
 80009bc:	4213      	tst	r3, r2
 80009be:	d100      	bne.n	80009c2 <__aeabi_ddiv+0x3fa>
 80009c0:	e0d4      	b.n	8000b6c <__aeabi_ddiv+0x5a4>
 80009c2:	210f      	movs	r1, #15
 80009c4:	2300      	movs	r3, #0
 80009c6:	4011      	ands	r1, r2
 80009c8:	2904      	cmp	r1, #4
 80009ca:	d100      	bne.n	80009ce <__aeabi_ddiv+0x406>
 80009cc:	e0cb      	b.n	8000b66 <__aeabi_ddiv+0x59e>
 80009ce:	1d11      	adds	r1, r2, #4
 80009d0:	4291      	cmp	r1, r2
 80009d2:	4192      	sbcs	r2, r2
 80009d4:	4252      	negs	r2, r2
 80009d6:	189b      	adds	r3, r3, r2
 80009d8:	000a      	movs	r2, r1
 80009da:	0219      	lsls	r1, r3, #8
 80009dc:	d400      	bmi.n	80009e0 <__aeabi_ddiv+0x418>
 80009de:	e0c2      	b.n	8000b66 <__aeabi_ddiv+0x59e>
 80009e0:	2301      	movs	r3, #1
 80009e2:	2400      	movs	r4, #0
 80009e4:	2500      	movs	r5, #0
 80009e6:	e646      	b.n	8000676 <__aeabi_ddiv+0xae>
 80009e8:	2380      	movs	r3, #128	; 0x80
 80009ea:	4641      	mov	r1, r8
 80009ec:	031b      	lsls	r3, r3, #12
 80009ee:	4219      	tst	r1, r3
 80009f0:	d008      	beq.n	8000a04 <__aeabi_ddiv+0x43c>
 80009f2:	421c      	tst	r4, r3
 80009f4:	d106      	bne.n	8000a04 <__aeabi_ddiv+0x43c>
 80009f6:	431c      	orrs	r4, r3
 80009f8:	0324      	lsls	r4, r4, #12
 80009fa:	46ba      	mov	sl, r7
 80009fc:	0015      	movs	r5, r2
 80009fe:	4b69      	ldr	r3, [pc, #420]	; (8000ba4 <__aeabi_ddiv+0x5dc>)
 8000a00:	0b24      	lsrs	r4, r4, #12
 8000a02:	e638      	b.n	8000676 <__aeabi_ddiv+0xae>
 8000a04:	2480      	movs	r4, #128	; 0x80
 8000a06:	4643      	mov	r3, r8
 8000a08:	0324      	lsls	r4, r4, #12
 8000a0a:	431c      	orrs	r4, r3
 8000a0c:	0324      	lsls	r4, r4, #12
 8000a0e:	46b2      	mov	sl, r6
 8000a10:	4b64      	ldr	r3, [pc, #400]	; (8000ba4 <__aeabi_ddiv+0x5dc>)
 8000a12:	0b24      	lsrs	r4, r4, #12
 8000a14:	e62f      	b.n	8000676 <__aeabi_ddiv+0xae>
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d100      	bne.n	8000a1c <__aeabi_ddiv+0x454>
 8000a1a:	e703      	b.n	8000824 <__aeabi_ddiv+0x25c>
 8000a1c:	19a6      	adds	r6, r4, r6
 8000a1e:	1e68      	subs	r0, r5, #1
 8000a20:	42a6      	cmp	r6, r4
 8000a22:	d200      	bcs.n	8000a26 <__aeabi_ddiv+0x45e>
 8000a24:	e08d      	b.n	8000b42 <__aeabi_ddiv+0x57a>
 8000a26:	428e      	cmp	r6, r1
 8000a28:	d200      	bcs.n	8000a2c <__aeabi_ddiv+0x464>
 8000a2a:	e0a3      	b.n	8000b74 <__aeabi_ddiv+0x5ac>
 8000a2c:	d100      	bne.n	8000a30 <__aeabi_ddiv+0x468>
 8000a2e:	e0b3      	b.n	8000b98 <__aeabi_ddiv+0x5d0>
 8000a30:	0005      	movs	r5, r0
 8000a32:	e6f5      	b.n	8000820 <__aeabi_ddiv+0x258>
 8000a34:	42aa      	cmp	r2, r5
 8000a36:	d900      	bls.n	8000a3a <__aeabi_ddiv+0x472>
 8000a38:	e639      	b.n	80006ae <__aeabi_ddiv+0xe6>
 8000a3a:	4643      	mov	r3, r8
 8000a3c:	07de      	lsls	r6, r3, #31
 8000a3e:	0858      	lsrs	r0, r3, #1
 8000a40:	086b      	lsrs	r3, r5, #1
 8000a42:	431e      	orrs	r6, r3
 8000a44:	07ed      	lsls	r5, r5, #31
 8000a46:	e639      	b.n	80006bc <__aeabi_ddiv+0xf4>
 8000a48:	4648      	mov	r0, r9
 8000a4a:	f000 fed7 	bl	80017fc <__clzsi2>
 8000a4e:	0001      	movs	r1, r0
 8000a50:	0002      	movs	r2, r0
 8000a52:	3115      	adds	r1, #21
 8000a54:	3220      	adds	r2, #32
 8000a56:	291c      	cmp	r1, #28
 8000a58:	dc00      	bgt.n	8000a5c <__aeabi_ddiv+0x494>
 8000a5a:	e72c      	b.n	80008b6 <__aeabi_ddiv+0x2ee>
 8000a5c:	464b      	mov	r3, r9
 8000a5e:	3808      	subs	r0, #8
 8000a60:	4083      	lsls	r3, r0
 8000a62:	2500      	movs	r5, #0
 8000a64:	4698      	mov	r8, r3
 8000a66:	e732      	b.n	80008ce <__aeabi_ddiv+0x306>
 8000a68:	f000 fec8 	bl	80017fc <__clzsi2>
 8000a6c:	0003      	movs	r3, r0
 8000a6e:	001a      	movs	r2, r3
 8000a70:	3215      	adds	r2, #21
 8000a72:	3020      	adds	r0, #32
 8000a74:	2a1c      	cmp	r2, #28
 8000a76:	dc00      	bgt.n	8000a7a <__aeabi_ddiv+0x4b2>
 8000a78:	e700      	b.n	800087c <__aeabi_ddiv+0x2b4>
 8000a7a:	4654      	mov	r4, sl
 8000a7c:	3b08      	subs	r3, #8
 8000a7e:	2200      	movs	r2, #0
 8000a80:	409c      	lsls	r4, r3
 8000a82:	e705      	b.n	8000890 <__aeabi_ddiv+0x2c8>
 8000a84:	1936      	adds	r6, r6, r4
 8000a86:	3b01      	subs	r3, #1
 8000a88:	42b4      	cmp	r4, r6
 8000a8a:	d900      	bls.n	8000a8e <__aeabi_ddiv+0x4c6>
 8000a8c:	e6a6      	b.n	80007dc <__aeabi_ddiv+0x214>
 8000a8e:	42b2      	cmp	r2, r6
 8000a90:	d800      	bhi.n	8000a94 <__aeabi_ddiv+0x4cc>
 8000a92:	e6a3      	b.n	80007dc <__aeabi_ddiv+0x214>
 8000a94:	1e83      	subs	r3, r0, #2
 8000a96:	1936      	adds	r6, r6, r4
 8000a98:	e6a0      	b.n	80007dc <__aeabi_ddiv+0x214>
 8000a9a:	1909      	adds	r1, r1, r4
 8000a9c:	3d01      	subs	r5, #1
 8000a9e:	428c      	cmp	r4, r1
 8000aa0:	d900      	bls.n	8000aa4 <__aeabi_ddiv+0x4dc>
 8000aa2:	e68d      	b.n	80007c0 <__aeabi_ddiv+0x1f8>
 8000aa4:	428a      	cmp	r2, r1
 8000aa6:	d800      	bhi.n	8000aaa <__aeabi_ddiv+0x4e2>
 8000aa8:	e68a      	b.n	80007c0 <__aeabi_ddiv+0x1f8>
 8000aaa:	1e85      	subs	r5, r0, #2
 8000aac:	1909      	adds	r1, r1, r4
 8000aae:	e687      	b.n	80007c0 <__aeabi_ddiv+0x1f8>
 8000ab0:	230f      	movs	r3, #15
 8000ab2:	402b      	ands	r3, r5
 8000ab4:	2b04      	cmp	r3, #4
 8000ab6:	d100      	bne.n	8000aba <__aeabi_ddiv+0x4f2>
 8000ab8:	e6bc      	b.n	8000834 <__aeabi_ddiv+0x26c>
 8000aba:	2305      	movs	r3, #5
 8000abc:	425b      	negs	r3, r3
 8000abe:	42ab      	cmp	r3, r5
 8000ac0:	419b      	sbcs	r3, r3
 8000ac2:	3504      	adds	r5, #4
 8000ac4:	425b      	negs	r3, r3
 8000ac6:	08ed      	lsrs	r5, r5, #3
 8000ac8:	4498      	add	r8, r3
 8000aca:	e6b4      	b.n	8000836 <__aeabi_ddiv+0x26e>
 8000acc:	42af      	cmp	r7, r5
 8000ace:	d900      	bls.n	8000ad2 <__aeabi_ddiv+0x50a>
 8000ad0:	e660      	b.n	8000794 <__aeabi_ddiv+0x1cc>
 8000ad2:	4282      	cmp	r2, r0
 8000ad4:	d804      	bhi.n	8000ae0 <__aeabi_ddiv+0x518>
 8000ad6:	d000      	beq.n	8000ada <__aeabi_ddiv+0x512>
 8000ad8:	e65c      	b.n	8000794 <__aeabi_ddiv+0x1cc>
 8000ada:	42ae      	cmp	r6, r5
 8000adc:	d800      	bhi.n	8000ae0 <__aeabi_ddiv+0x518>
 8000ade:	e659      	b.n	8000794 <__aeabi_ddiv+0x1cc>
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	425b      	negs	r3, r3
 8000ae4:	469c      	mov	ip, r3
 8000ae6:	9b00      	ldr	r3, [sp, #0]
 8000ae8:	44e0      	add	r8, ip
 8000aea:	469c      	mov	ip, r3
 8000aec:	4465      	add	r5, ip
 8000aee:	429d      	cmp	r5, r3
 8000af0:	419b      	sbcs	r3, r3
 8000af2:	425b      	negs	r3, r3
 8000af4:	191b      	adds	r3, r3, r4
 8000af6:	18c0      	adds	r0, r0, r3
 8000af8:	e64d      	b.n	8000796 <__aeabi_ddiv+0x1ce>
 8000afa:	428a      	cmp	r2, r1
 8000afc:	d800      	bhi.n	8000b00 <__aeabi_ddiv+0x538>
 8000afe:	e60e      	b.n	800071e <__aeabi_ddiv+0x156>
 8000b00:	1e83      	subs	r3, r0, #2
 8000b02:	1909      	adds	r1, r1, r4
 8000b04:	e60b      	b.n	800071e <__aeabi_ddiv+0x156>
 8000b06:	428a      	cmp	r2, r1
 8000b08:	d800      	bhi.n	8000b0c <__aeabi_ddiv+0x544>
 8000b0a:	e5f4      	b.n	80006f6 <__aeabi_ddiv+0x12e>
 8000b0c:	1e83      	subs	r3, r0, #2
 8000b0e:	4698      	mov	r8, r3
 8000b10:	1909      	adds	r1, r1, r4
 8000b12:	e5f0      	b.n	80006f6 <__aeabi_ddiv+0x12e>
 8000b14:	4925      	ldr	r1, [pc, #148]	; (8000bac <__aeabi_ddiv+0x5e4>)
 8000b16:	0028      	movs	r0, r5
 8000b18:	4459      	add	r1, fp
 8000b1a:	408d      	lsls	r5, r1
 8000b1c:	4642      	mov	r2, r8
 8000b1e:	408a      	lsls	r2, r1
 8000b20:	1e69      	subs	r1, r5, #1
 8000b22:	418d      	sbcs	r5, r1
 8000b24:	4641      	mov	r1, r8
 8000b26:	40d8      	lsrs	r0, r3
 8000b28:	40d9      	lsrs	r1, r3
 8000b2a:	4302      	orrs	r2, r0
 8000b2c:	432a      	orrs	r2, r5
 8000b2e:	000b      	movs	r3, r1
 8000b30:	0751      	lsls	r1, r2, #29
 8000b32:	d100      	bne.n	8000b36 <__aeabi_ddiv+0x56e>
 8000b34:	e751      	b.n	80009da <__aeabi_ddiv+0x412>
 8000b36:	210f      	movs	r1, #15
 8000b38:	4011      	ands	r1, r2
 8000b3a:	2904      	cmp	r1, #4
 8000b3c:	d000      	beq.n	8000b40 <__aeabi_ddiv+0x578>
 8000b3e:	e746      	b.n	80009ce <__aeabi_ddiv+0x406>
 8000b40:	e74b      	b.n	80009da <__aeabi_ddiv+0x412>
 8000b42:	0005      	movs	r5, r0
 8000b44:	428e      	cmp	r6, r1
 8000b46:	d000      	beq.n	8000b4a <__aeabi_ddiv+0x582>
 8000b48:	e66a      	b.n	8000820 <__aeabi_ddiv+0x258>
 8000b4a:	9a00      	ldr	r2, [sp, #0]
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d000      	beq.n	8000b52 <__aeabi_ddiv+0x58a>
 8000b50:	e666      	b.n	8000820 <__aeabi_ddiv+0x258>
 8000b52:	e667      	b.n	8000824 <__aeabi_ddiv+0x25c>
 8000b54:	4a16      	ldr	r2, [pc, #88]	; (8000bb0 <__aeabi_ddiv+0x5e8>)
 8000b56:	445a      	add	r2, fp
 8000b58:	2a00      	cmp	r2, #0
 8000b5a:	dc00      	bgt.n	8000b5e <__aeabi_ddiv+0x596>
 8000b5c:	e710      	b.n	8000980 <__aeabi_ddiv+0x3b8>
 8000b5e:	2301      	movs	r3, #1
 8000b60:	2500      	movs	r5, #0
 8000b62:	4498      	add	r8, r3
 8000b64:	e667      	b.n	8000836 <__aeabi_ddiv+0x26e>
 8000b66:	075d      	lsls	r5, r3, #29
 8000b68:	025b      	lsls	r3, r3, #9
 8000b6a:	0b1c      	lsrs	r4, r3, #12
 8000b6c:	08d2      	lsrs	r2, r2, #3
 8000b6e:	2300      	movs	r3, #0
 8000b70:	4315      	orrs	r5, r2
 8000b72:	e580      	b.n	8000676 <__aeabi_ddiv+0xae>
 8000b74:	9800      	ldr	r0, [sp, #0]
 8000b76:	3d02      	subs	r5, #2
 8000b78:	0042      	lsls	r2, r0, #1
 8000b7a:	4282      	cmp	r2, r0
 8000b7c:	41bf      	sbcs	r7, r7
 8000b7e:	427f      	negs	r7, r7
 8000b80:	193c      	adds	r4, r7, r4
 8000b82:	1936      	adds	r6, r6, r4
 8000b84:	9200      	str	r2, [sp, #0]
 8000b86:	e7dd      	b.n	8000b44 <__aeabi_ddiv+0x57c>
 8000b88:	2480      	movs	r4, #128	; 0x80
 8000b8a:	4643      	mov	r3, r8
 8000b8c:	0324      	lsls	r4, r4, #12
 8000b8e:	431c      	orrs	r4, r3
 8000b90:	0324      	lsls	r4, r4, #12
 8000b92:	4b04      	ldr	r3, [pc, #16]	; (8000ba4 <__aeabi_ddiv+0x5dc>)
 8000b94:	0b24      	lsrs	r4, r4, #12
 8000b96:	e56e      	b.n	8000676 <__aeabi_ddiv+0xae>
 8000b98:	9a00      	ldr	r2, [sp, #0]
 8000b9a:	429a      	cmp	r2, r3
 8000b9c:	d3ea      	bcc.n	8000b74 <__aeabi_ddiv+0x5ac>
 8000b9e:	0005      	movs	r5, r0
 8000ba0:	e7d3      	b.n	8000b4a <__aeabi_ddiv+0x582>
 8000ba2:	46c0      	nop			; (mov r8, r8)
 8000ba4:	000007ff 	.word	0x000007ff
 8000ba8:	0000043e 	.word	0x0000043e
 8000bac:	0000041e 	.word	0x0000041e
 8000bb0:	000003ff 	.word	0x000003ff

08000bb4 <__aeabi_dmul>:
 8000bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bb6:	4657      	mov	r7, sl
 8000bb8:	464e      	mov	r6, r9
 8000bba:	4645      	mov	r5, r8
 8000bbc:	46de      	mov	lr, fp
 8000bbe:	b5e0      	push	{r5, r6, r7, lr}
 8000bc0:	4698      	mov	r8, r3
 8000bc2:	030c      	lsls	r4, r1, #12
 8000bc4:	004b      	lsls	r3, r1, #1
 8000bc6:	0006      	movs	r6, r0
 8000bc8:	4692      	mov	sl, r2
 8000bca:	b087      	sub	sp, #28
 8000bcc:	0b24      	lsrs	r4, r4, #12
 8000bce:	0d5b      	lsrs	r3, r3, #21
 8000bd0:	0fcf      	lsrs	r7, r1, #31
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d100      	bne.n	8000bd8 <__aeabi_dmul+0x24>
 8000bd6:	e15c      	b.n	8000e92 <__aeabi_dmul+0x2de>
 8000bd8:	4ad9      	ldr	r2, [pc, #868]	; (8000f40 <__aeabi_dmul+0x38c>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d100      	bne.n	8000be0 <__aeabi_dmul+0x2c>
 8000bde:	e175      	b.n	8000ecc <__aeabi_dmul+0x318>
 8000be0:	0f42      	lsrs	r2, r0, #29
 8000be2:	00e4      	lsls	r4, r4, #3
 8000be4:	4314      	orrs	r4, r2
 8000be6:	2280      	movs	r2, #128	; 0x80
 8000be8:	0412      	lsls	r2, r2, #16
 8000bea:	4314      	orrs	r4, r2
 8000bec:	4ad5      	ldr	r2, [pc, #852]	; (8000f44 <__aeabi_dmul+0x390>)
 8000bee:	00c5      	lsls	r5, r0, #3
 8000bf0:	4694      	mov	ip, r2
 8000bf2:	4463      	add	r3, ip
 8000bf4:	9300      	str	r3, [sp, #0]
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	4699      	mov	r9, r3
 8000bfa:	469b      	mov	fp, r3
 8000bfc:	4643      	mov	r3, r8
 8000bfe:	4642      	mov	r2, r8
 8000c00:	031e      	lsls	r6, r3, #12
 8000c02:	0fd2      	lsrs	r2, r2, #31
 8000c04:	005b      	lsls	r3, r3, #1
 8000c06:	4650      	mov	r0, sl
 8000c08:	4690      	mov	r8, r2
 8000c0a:	0b36      	lsrs	r6, r6, #12
 8000c0c:	0d5b      	lsrs	r3, r3, #21
 8000c0e:	d100      	bne.n	8000c12 <__aeabi_dmul+0x5e>
 8000c10:	e120      	b.n	8000e54 <__aeabi_dmul+0x2a0>
 8000c12:	4acb      	ldr	r2, [pc, #812]	; (8000f40 <__aeabi_dmul+0x38c>)
 8000c14:	4293      	cmp	r3, r2
 8000c16:	d100      	bne.n	8000c1a <__aeabi_dmul+0x66>
 8000c18:	e162      	b.n	8000ee0 <__aeabi_dmul+0x32c>
 8000c1a:	49ca      	ldr	r1, [pc, #808]	; (8000f44 <__aeabi_dmul+0x390>)
 8000c1c:	0f42      	lsrs	r2, r0, #29
 8000c1e:	468c      	mov	ip, r1
 8000c20:	9900      	ldr	r1, [sp, #0]
 8000c22:	4463      	add	r3, ip
 8000c24:	00f6      	lsls	r6, r6, #3
 8000c26:	468c      	mov	ip, r1
 8000c28:	4316      	orrs	r6, r2
 8000c2a:	2280      	movs	r2, #128	; 0x80
 8000c2c:	449c      	add	ip, r3
 8000c2e:	0412      	lsls	r2, r2, #16
 8000c30:	4663      	mov	r3, ip
 8000c32:	4316      	orrs	r6, r2
 8000c34:	00c2      	lsls	r2, r0, #3
 8000c36:	2000      	movs	r0, #0
 8000c38:	9300      	str	r3, [sp, #0]
 8000c3a:	9900      	ldr	r1, [sp, #0]
 8000c3c:	4643      	mov	r3, r8
 8000c3e:	3101      	adds	r1, #1
 8000c40:	468c      	mov	ip, r1
 8000c42:	4649      	mov	r1, r9
 8000c44:	407b      	eors	r3, r7
 8000c46:	9301      	str	r3, [sp, #4]
 8000c48:	290f      	cmp	r1, #15
 8000c4a:	d826      	bhi.n	8000c9a <__aeabi_dmul+0xe6>
 8000c4c:	4bbe      	ldr	r3, [pc, #760]	; (8000f48 <__aeabi_dmul+0x394>)
 8000c4e:	0089      	lsls	r1, r1, #2
 8000c50:	5859      	ldr	r1, [r3, r1]
 8000c52:	468f      	mov	pc, r1
 8000c54:	4643      	mov	r3, r8
 8000c56:	9301      	str	r3, [sp, #4]
 8000c58:	0034      	movs	r4, r6
 8000c5a:	0015      	movs	r5, r2
 8000c5c:	4683      	mov	fp, r0
 8000c5e:	465b      	mov	r3, fp
 8000c60:	2b02      	cmp	r3, #2
 8000c62:	d016      	beq.n	8000c92 <__aeabi_dmul+0xde>
 8000c64:	2b03      	cmp	r3, #3
 8000c66:	d100      	bne.n	8000c6a <__aeabi_dmul+0xb6>
 8000c68:	e203      	b.n	8001072 <__aeabi_dmul+0x4be>
 8000c6a:	2b01      	cmp	r3, #1
 8000c6c:	d000      	beq.n	8000c70 <__aeabi_dmul+0xbc>
 8000c6e:	e0cd      	b.n	8000e0c <__aeabi_dmul+0x258>
 8000c70:	2200      	movs	r2, #0
 8000c72:	2400      	movs	r4, #0
 8000c74:	2500      	movs	r5, #0
 8000c76:	9b01      	ldr	r3, [sp, #4]
 8000c78:	0512      	lsls	r2, r2, #20
 8000c7a:	4322      	orrs	r2, r4
 8000c7c:	07db      	lsls	r3, r3, #31
 8000c7e:	431a      	orrs	r2, r3
 8000c80:	0028      	movs	r0, r5
 8000c82:	0011      	movs	r1, r2
 8000c84:	b007      	add	sp, #28
 8000c86:	bcf0      	pop	{r4, r5, r6, r7}
 8000c88:	46bb      	mov	fp, r7
 8000c8a:	46b2      	mov	sl, r6
 8000c8c:	46a9      	mov	r9, r5
 8000c8e:	46a0      	mov	r8, r4
 8000c90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c92:	2400      	movs	r4, #0
 8000c94:	2500      	movs	r5, #0
 8000c96:	4aaa      	ldr	r2, [pc, #680]	; (8000f40 <__aeabi_dmul+0x38c>)
 8000c98:	e7ed      	b.n	8000c76 <__aeabi_dmul+0xc2>
 8000c9a:	0c28      	lsrs	r0, r5, #16
 8000c9c:	042d      	lsls	r5, r5, #16
 8000c9e:	0c2d      	lsrs	r5, r5, #16
 8000ca0:	002b      	movs	r3, r5
 8000ca2:	0c11      	lsrs	r1, r2, #16
 8000ca4:	0412      	lsls	r2, r2, #16
 8000ca6:	0c12      	lsrs	r2, r2, #16
 8000ca8:	4353      	muls	r3, r2
 8000caa:	4698      	mov	r8, r3
 8000cac:	0013      	movs	r3, r2
 8000cae:	002f      	movs	r7, r5
 8000cb0:	4343      	muls	r3, r0
 8000cb2:	4699      	mov	r9, r3
 8000cb4:	434f      	muls	r7, r1
 8000cb6:	444f      	add	r7, r9
 8000cb8:	46bb      	mov	fp, r7
 8000cba:	4647      	mov	r7, r8
 8000cbc:	000b      	movs	r3, r1
 8000cbe:	0c3f      	lsrs	r7, r7, #16
 8000cc0:	46ba      	mov	sl, r7
 8000cc2:	4343      	muls	r3, r0
 8000cc4:	44da      	add	sl, fp
 8000cc6:	9302      	str	r3, [sp, #8]
 8000cc8:	45d1      	cmp	r9, sl
 8000cca:	d904      	bls.n	8000cd6 <__aeabi_dmul+0x122>
 8000ccc:	2780      	movs	r7, #128	; 0x80
 8000cce:	027f      	lsls	r7, r7, #9
 8000cd0:	46b9      	mov	r9, r7
 8000cd2:	444b      	add	r3, r9
 8000cd4:	9302      	str	r3, [sp, #8]
 8000cd6:	4653      	mov	r3, sl
 8000cd8:	0c1b      	lsrs	r3, r3, #16
 8000cda:	469b      	mov	fp, r3
 8000cdc:	4653      	mov	r3, sl
 8000cde:	041f      	lsls	r7, r3, #16
 8000ce0:	4643      	mov	r3, r8
 8000ce2:	041b      	lsls	r3, r3, #16
 8000ce4:	0c1b      	lsrs	r3, r3, #16
 8000ce6:	4698      	mov	r8, r3
 8000ce8:	003b      	movs	r3, r7
 8000cea:	4443      	add	r3, r8
 8000cec:	9304      	str	r3, [sp, #16]
 8000cee:	0c33      	lsrs	r3, r6, #16
 8000cf0:	0436      	lsls	r6, r6, #16
 8000cf2:	0c36      	lsrs	r6, r6, #16
 8000cf4:	4698      	mov	r8, r3
 8000cf6:	0033      	movs	r3, r6
 8000cf8:	4343      	muls	r3, r0
 8000cfa:	4699      	mov	r9, r3
 8000cfc:	4643      	mov	r3, r8
 8000cfe:	4343      	muls	r3, r0
 8000d00:	002f      	movs	r7, r5
 8000d02:	469a      	mov	sl, r3
 8000d04:	4643      	mov	r3, r8
 8000d06:	4377      	muls	r7, r6
 8000d08:	435d      	muls	r5, r3
 8000d0a:	0c38      	lsrs	r0, r7, #16
 8000d0c:	444d      	add	r5, r9
 8000d0e:	1945      	adds	r5, r0, r5
 8000d10:	45a9      	cmp	r9, r5
 8000d12:	d903      	bls.n	8000d1c <__aeabi_dmul+0x168>
 8000d14:	2380      	movs	r3, #128	; 0x80
 8000d16:	025b      	lsls	r3, r3, #9
 8000d18:	4699      	mov	r9, r3
 8000d1a:	44ca      	add	sl, r9
 8000d1c:	043f      	lsls	r7, r7, #16
 8000d1e:	0c28      	lsrs	r0, r5, #16
 8000d20:	0c3f      	lsrs	r7, r7, #16
 8000d22:	042d      	lsls	r5, r5, #16
 8000d24:	19ed      	adds	r5, r5, r7
 8000d26:	0c27      	lsrs	r7, r4, #16
 8000d28:	0424      	lsls	r4, r4, #16
 8000d2a:	0c24      	lsrs	r4, r4, #16
 8000d2c:	0003      	movs	r3, r0
 8000d2e:	0020      	movs	r0, r4
 8000d30:	4350      	muls	r0, r2
 8000d32:	437a      	muls	r2, r7
 8000d34:	4691      	mov	r9, r2
 8000d36:	003a      	movs	r2, r7
 8000d38:	4453      	add	r3, sl
 8000d3a:	9305      	str	r3, [sp, #20]
 8000d3c:	0c03      	lsrs	r3, r0, #16
 8000d3e:	469a      	mov	sl, r3
 8000d40:	434a      	muls	r2, r1
 8000d42:	4361      	muls	r1, r4
 8000d44:	4449      	add	r1, r9
 8000d46:	4451      	add	r1, sl
 8000d48:	44ab      	add	fp, r5
 8000d4a:	4589      	cmp	r9, r1
 8000d4c:	d903      	bls.n	8000d56 <__aeabi_dmul+0x1a2>
 8000d4e:	2380      	movs	r3, #128	; 0x80
 8000d50:	025b      	lsls	r3, r3, #9
 8000d52:	4699      	mov	r9, r3
 8000d54:	444a      	add	r2, r9
 8000d56:	0400      	lsls	r0, r0, #16
 8000d58:	0c0b      	lsrs	r3, r1, #16
 8000d5a:	0c00      	lsrs	r0, r0, #16
 8000d5c:	0409      	lsls	r1, r1, #16
 8000d5e:	1809      	adds	r1, r1, r0
 8000d60:	0020      	movs	r0, r4
 8000d62:	4699      	mov	r9, r3
 8000d64:	4643      	mov	r3, r8
 8000d66:	4370      	muls	r0, r6
 8000d68:	435c      	muls	r4, r3
 8000d6a:	437e      	muls	r6, r7
 8000d6c:	435f      	muls	r7, r3
 8000d6e:	0c03      	lsrs	r3, r0, #16
 8000d70:	4698      	mov	r8, r3
 8000d72:	19a4      	adds	r4, r4, r6
 8000d74:	4444      	add	r4, r8
 8000d76:	444a      	add	r2, r9
 8000d78:	9703      	str	r7, [sp, #12]
 8000d7a:	42a6      	cmp	r6, r4
 8000d7c:	d904      	bls.n	8000d88 <__aeabi_dmul+0x1d4>
 8000d7e:	2380      	movs	r3, #128	; 0x80
 8000d80:	025b      	lsls	r3, r3, #9
 8000d82:	4698      	mov	r8, r3
 8000d84:	4447      	add	r7, r8
 8000d86:	9703      	str	r7, [sp, #12]
 8000d88:	0423      	lsls	r3, r4, #16
 8000d8a:	9e02      	ldr	r6, [sp, #8]
 8000d8c:	469a      	mov	sl, r3
 8000d8e:	9b05      	ldr	r3, [sp, #20]
 8000d90:	445e      	add	r6, fp
 8000d92:	4698      	mov	r8, r3
 8000d94:	42ae      	cmp	r6, r5
 8000d96:	41ad      	sbcs	r5, r5
 8000d98:	1876      	adds	r6, r6, r1
 8000d9a:	428e      	cmp	r6, r1
 8000d9c:	4189      	sbcs	r1, r1
 8000d9e:	0400      	lsls	r0, r0, #16
 8000da0:	0c00      	lsrs	r0, r0, #16
 8000da2:	4450      	add	r0, sl
 8000da4:	4440      	add	r0, r8
 8000da6:	426d      	negs	r5, r5
 8000da8:	1947      	adds	r7, r0, r5
 8000daa:	46b8      	mov	r8, r7
 8000dac:	4693      	mov	fp, r2
 8000dae:	4249      	negs	r1, r1
 8000db0:	4689      	mov	r9, r1
 8000db2:	44c3      	add	fp, r8
 8000db4:	44d9      	add	r9, fp
 8000db6:	4298      	cmp	r0, r3
 8000db8:	4180      	sbcs	r0, r0
 8000dba:	45a8      	cmp	r8, r5
 8000dbc:	41ad      	sbcs	r5, r5
 8000dbe:	4593      	cmp	fp, r2
 8000dc0:	4192      	sbcs	r2, r2
 8000dc2:	4589      	cmp	r9, r1
 8000dc4:	4189      	sbcs	r1, r1
 8000dc6:	426d      	negs	r5, r5
 8000dc8:	4240      	negs	r0, r0
 8000dca:	4328      	orrs	r0, r5
 8000dcc:	0c24      	lsrs	r4, r4, #16
 8000dce:	4252      	negs	r2, r2
 8000dd0:	4249      	negs	r1, r1
 8000dd2:	430a      	orrs	r2, r1
 8000dd4:	9b03      	ldr	r3, [sp, #12]
 8000dd6:	1900      	adds	r0, r0, r4
 8000dd8:	1880      	adds	r0, r0, r2
 8000dda:	18c7      	adds	r7, r0, r3
 8000ddc:	464b      	mov	r3, r9
 8000dde:	0ddc      	lsrs	r4, r3, #23
 8000de0:	9b04      	ldr	r3, [sp, #16]
 8000de2:	0275      	lsls	r5, r6, #9
 8000de4:	431d      	orrs	r5, r3
 8000de6:	1e6a      	subs	r2, r5, #1
 8000de8:	4195      	sbcs	r5, r2
 8000dea:	464b      	mov	r3, r9
 8000dec:	0df6      	lsrs	r6, r6, #23
 8000dee:	027f      	lsls	r7, r7, #9
 8000df0:	4335      	orrs	r5, r6
 8000df2:	025a      	lsls	r2, r3, #9
 8000df4:	433c      	orrs	r4, r7
 8000df6:	4315      	orrs	r5, r2
 8000df8:	01fb      	lsls	r3, r7, #7
 8000dfa:	d400      	bmi.n	8000dfe <__aeabi_dmul+0x24a>
 8000dfc:	e11c      	b.n	8001038 <__aeabi_dmul+0x484>
 8000dfe:	2101      	movs	r1, #1
 8000e00:	086a      	lsrs	r2, r5, #1
 8000e02:	400d      	ands	r5, r1
 8000e04:	4315      	orrs	r5, r2
 8000e06:	07e2      	lsls	r2, r4, #31
 8000e08:	4315      	orrs	r5, r2
 8000e0a:	0864      	lsrs	r4, r4, #1
 8000e0c:	494f      	ldr	r1, [pc, #316]	; (8000f4c <__aeabi_dmul+0x398>)
 8000e0e:	4461      	add	r1, ip
 8000e10:	2900      	cmp	r1, #0
 8000e12:	dc00      	bgt.n	8000e16 <__aeabi_dmul+0x262>
 8000e14:	e0b0      	b.n	8000f78 <__aeabi_dmul+0x3c4>
 8000e16:	076b      	lsls	r3, r5, #29
 8000e18:	d009      	beq.n	8000e2e <__aeabi_dmul+0x27a>
 8000e1a:	220f      	movs	r2, #15
 8000e1c:	402a      	ands	r2, r5
 8000e1e:	2a04      	cmp	r2, #4
 8000e20:	d005      	beq.n	8000e2e <__aeabi_dmul+0x27a>
 8000e22:	1d2a      	adds	r2, r5, #4
 8000e24:	42aa      	cmp	r2, r5
 8000e26:	41ad      	sbcs	r5, r5
 8000e28:	426d      	negs	r5, r5
 8000e2a:	1964      	adds	r4, r4, r5
 8000e2c:	0015      	movs	r5, r2
 8000e2e:	01e3      	lsls	r3, r4, #7
 8000e30:	d504      	bpl.n	8000e3c <__aeabi_dmul+0x288>
 8000e32:	2180      	movs	r1, #128	; 0x80
 8000e34:	4a46      	ldr	r2, [pc, #280]	; (8000f50 <__aeabi_dmul+0x39c>)
 8000e36:	00c9      	lsls	r1, r1, #3
 8000e38:	4014      	ands	r4, r2
 8000e3a:	4461      	add	r1, ip
 8000e3c:	4a45      	ldr	r2, [pc, #276]	; (8000f54 <__aeabi_dmul+0x3a0>)
 8000e3e:	4291      	cmp	r1, r2
 8000e40:	dd00      	ble.n	8000e44 <__aeabi_dmul+0x290>
 8000e42:	e726      	b.n	8000c92 <__aeabi_dmul+0xde>
 8000e44:	0762      	lsls	r2, r4, #29
 8000e46:	08ed      	lsrs	r5, r5, #3
 8000e48:	0264      	lsls	r4, r4, #9
 8000e4a:	0549      	lsls	r1, r1, #21
 8000e4c:	4315      	orrs	r5, r2
 8000e4e:	0b24      	lsrs	r4, r4, #12
 8000e50:	0d4a      	lsrs	r2, r1, #21
 8000e52:	e710      	b.n	8000c76 <__aeabi_dmul+0xc2>
 8000e54:	4652      	mov	r2, sl
 8000e56:	4332      	orrs	r2, r6
 8000e58:	d100      	bne.n	8000e5c <__aeabi_dmul+0x2a8>
 8000e5a:	e07f      	b.n	8000f5c <__aeabi_dmul+0x3a8>
 8000e5c:	2e00      	cmp	r6, #0
 8000e5e:	d100      	bne.n	8000e62 <__aeabi_dmul+0x2ae>
 8000e60:	e0dc      	b.n	800101c <__aeabi_dmul+0x468>
 8000e62:	0030      	movs	r0, r6
 8000e64:	f000 fcca 	bl	80017fc <__clzsi2>
 8000e68:	0002      	movs	r2, r0
 8000e6a:	3a0b      	subs	r2, #11
 8000e6c:	231d      	movs	r3, #29
 8000e6e:	0001      	movs	r1, r0
 8000e70:	1a9b      	subs	r3, r3, r2
 8000e72:	4652      	mov	r2, sl
 8000e74:	3908      	subs	r1, #8
 8000e76:	40da      	lsrs	r2, r3
 8000e78:	408e      	lsls	r6, r1
 8000e7a:	4316      	orrs	r6, r2
 8000e7c:	4652      	mov	r2, sl
 8000e7e:	408a      	lsls	r2, r1
 8000e80:	9b00      	ldr	r3, [sp, #0]
 8000e82:	4935      	ldr	r1, [pc, #212]	; (8000f58 <__aeabi_dmul+0x3a4>)
 8000e84:	1a18      	subs	r0, r3, r0
 8000e86:	0003      	movs	r3, r0
 8000e88:	468c      	mov	ip, r1
 8000e8a:	4463      	add	r3, ip
 8000e8c:	2000      	movs	r0, #0
 8000e8e:	9300      	str	r3, [sp, #0]
 8000e90:	e6d3      	b.n	8000c3a <__aeabi_dmul+0x86>
 8000e92:	0025      	movs	r5, r4
 8000e94:	4305      	orrs	r5, r0
 8000e96:	d04a      	beq.n	8000f2e <__aeabi_dmul+0x37a>
 8000e98:	2c00      	cmp	r4, #0
 8000e9a:	d100      	bne.n	8000e9e <__aeabi_dmul+0x2ea>
 8000e9c:	e0b0      	b.n	8001000 <__aeabi_dmul+0x44c>
 8000e9e:	0020      	movs	r0, r4
 8000ea0:	f000 fcac 	bl	80017fc <__clzsi2>
 8000ea4:	0001      	movs	r1, r0
 8000ea6:	0002      	movs	r2, r0
 8000ea8:	390b      	subs	r1, #11
 8000eaa:	231d      	movs	r3, #29
 8000eac:	0010      	movs	r0, r2
 8000eae:	1a5b      	subs	r3, r3, r1
 8000eb0:	0031      	movs	r1, r6
 8000eb2:	0035      	movs	r5, r6
 8000eb4:	3808      	subs	r0, #8
 8000eb6:	4084      	lsls	r4, r0
 8000eb8:	40d9      	lsrs	r1, r3
 8000eba:	4085      	lsls	r5, r0
 8000ebc:	430c      	orrs	r4, r1
 8000ebe:	4826      	ldr	r0, [pc, #152]	; (8000f58 <__aeabi_dmul+0x3a4>)
 8000ec0:	1a83      	subs	r3, r0, r2
 8000ec2:	9300      	str	r3, [sp, #0]
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	4699      	mov	r9, r3
 8000ec8:	469b      	mov	fp, r3
 8000eca:	e697      	b.n	8000bfc <__aeabi_dmul+0x48>
 8000ecc:	0005      	movs	r5, r0
 8000ece:	4325      	orrs	r5, r4
 8000ed0:	d126      	bne.n	8000f20 <__aeabi_dmul+0x36c>
 8000ed2:	2208      	movs	r2, #8
 8000ed4:	9300      	str	r3, [sp, #0]
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	2400      	movs	r4, #0
 8000eda:	4691      	mov	r9, r2
 8000edc:	469b      	mov	fp, r3
 8000ede:	e68d      	b.n	8000bfc <__aeabi_dmul+0x48>
 8000ee0:	4652      	mov	r2, sl
 8000ee2:	9b00      	ldr	r3, [sp, #0]
 8000ee4:	4332      	orrs	r2, r6
 8000ee6:	d110      	bne.n	8000f0a <__aeabi_dmul+0x356>
 8000ee8:	4915      	ldr	r1, [pc, #84]	; (8000f40 <__aeabi_dmul+0x38c>)
 8000eea:	2600      	movs	r6, #0
 8000eec:	468c      	mov	ip, r1
 8000eee:	4463      	add	r3, ip
 8000ef0:	4649      	mov	r1, r9
 8000ef2:	9300      	str	r3, [sp, #0]
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	4319      	orrs	r1, r3
 8000ef8:	4689      	mov	r9, r1
 8000efa:	2002      	movs	r0, #2
 8000efc:	e69d      	b.n	8000c3a <__aeabi_dmul+0x86>
 8000efe:	465b      	mov	r3, fp
 8000f00:	9701      	str	r7, [sp, #4]
 8000f02:	2b02      	cmp	r3, #2
 8000f04:	d000      	beq.n	8000f08 <__aeabi_dmul+0x354>
 8000f06:	e6ad      	b.n	8000c64 <__aeabi_dmul+0xb0>
 8000f08:	e6c3      	b.n	8000c92 <__aeabi_dmul+0xde>
 8000f0a:	4a0d      	ldr	r2, [pc, #52]	; (8000f40 <__aeabi_dmul+0x38c>)
 8000f0c:	2003      	movs	r0, #3
 8000f0e:	4694      	mov	ip, r2
 8000f10:	4463      	add	r3, ip
 8000f12:	464a      	mov	r2, r9
 8000f14:	9300      	str	r3, [sp, #0]
 8000f16:	2303      	movs	r3, #3
 8000f18:	431a      	orrs	r2, r3
 8000f1a:	4691      	mov	r9, r2
 8000f1c:	4652      	mov	r2, sl
 8000f1e:	e68c      	b.n	8000c3a <__aeabi_dmul+0x86>
 8000f20:	220c      	movs	r2, #12
 8000f22:	9300      	str	r3, [sp, #0]
 8000f24:	2303      	movs	r3, #3
 8000f26:	0005      	movs	r5, r0
 8000f28:	4691      	mov	r9, r2
 8000f2a:	469b      	mov	fp, r3
 8000f2c:	e666      	b.n	8000bfc <__aeabi_dmul+0x48>
 8000f2e:	2304      	movs	r3, #4
 8000f30:	4699      	mov	r9, r3
 8000f32:	2300      	movs	r3, #0
 8000f34:	9300      	str	r3, [sp, #0]
 8000f36:	3301      	adds	r3, #1
 8000f38:	2400      	movs	r4, #0
 8000f3a:	469b      	mov	fp, r3
 8000f3c:	e65e      	b.n	8000bfc <__aeabi_dmul+0x48>
 8000f3e:	46c0      	nop			; (mov r8, r8)
 8000f40:	000007ff 	.word	0x000007ff
 8000f44:	fffffc01 	.word	0xfffffc01
 8000f48:	08004dbc 	.word	0x08004dbc
 8000f4c:	000003ff 	.word	0x000003ff
 8000f50:	feffffff 	.word	0xfeffffff
 8000f54:	000007fe 	.word	0x000007fe
 8000f58:	fffffc0d 	.word	0xfffffc0d
 8000f5c:	4649      	mov	r1, r9
 8000f5e:	2301      	movs	r3, #1
 8000f60:	4319      	orrs	r1, r3
 8000f62:	4689      	mov	r9, r1
 8000f64:	2600      	movs	r6, #0
 8000f66:	2001      	movs	r0, #1
 8000f68:	e667      	b.n	8000c3a <__aeabi_dmul+0x86>
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	2480      	movs	r4, #128	; 0x80
 8000f6e:	2500      	movs	r5, #0
 8000f70:	4a43      	ldr	r2, [pc, #268]	; (8001080 <__aeabi_dmul+0x4cc>)
 8000f72:	9301      	str	r3, [sp, #4]
 8000f74:	0324      	lsls	r4, r4, #12
 8000f76:	e67e      	b.n	8000c76 <__aeabi_dmul+0xc2>
 8000f78:	2001      	movs	r0, #1
 8000f7a:	1a40      	subs	r0, r0, r1
 8000f7c:	2838      	cmp	r0, #56	; 0x38
 8000f7e:	dd00      	ble.n	8000f82 <__aeabi_dmul+0x3ce>
 8000f80:	e676      	b.n	8000c70 <__aeabi_dmul+0xbc>
 8000f82:	281f      	cmp	r0, #31
 8000f84:	dd5b      	ble.n	800103e <__aeabi_dmul+0x48a>
 8000f86:	221f      	movs	r2, #31
 8000f88:	0023      	movs	r3, r4
 8000f8a:	4252      	negs	r2, r2
 8000f8c:	1a51      	subs	r1, r2, r1
 8000f8e:	40cb      	lsrs	r3, r1
 8000f90:	0019      	movs	r1, r3
 8000f92:	2820      	cmp	r0, #32
 8000f94:	d003      	beq.n	8000f9e <__aeabi_dmul+0x3ea>
 8000f96:	4a3b      	ldr	r2, [pc, #236]	; (8001084 <__aeabi_dmul+0x4d0>)
 8000f98:	4462      	add	r2, ip
 8000f9a:	4094      	lsls	r4, r2
 8000f9c:	4325      	orrs	r5, r4
 8000f9e:	1e6a      	subs	r2, r5, #1
 8000fa0:	4195      	sbcs	r5, r2
 8000fa2:	002a      	movs	r2, r5
 8000fa4:	430a      	orrs	r2, r1
 8000fa6:	2107      	movs	r1, #7
 8000fa8:	000d      	movs	r5, r1
 8000faa:	2400      	movs	r4, #0
 8000fac:	4015      	ands	r5, r2
 8000fae:	4211      	tst	r1, r2
 8000fb0:	d05b      	beq.n	800106a <__aeabi_dmul+0x4b6>
 8000fb2:	210f      	movs	r1, #15
 8000fb4:	2400      	movs	r4, #0
 8000fb6:	4011      	ands	r1, r2
 8000fb8:	2904      	cmp	r1, #4
 8000fba:	d053      	beq.n	8001064 <__aeabi_dmul+0x4b0>
 8000fbc:	1d11      	adds	r1, r2, #4
 8000fbe:	4291      	cmp	r1, r2
 8000fc0:	4192      	sbcs	r2, r2
 8000fc2:	4252      	negs	r2, r2
 8000fc4:	18a4      	adds	r4, r4, r2
 8000fc6:	000a      	movs	r2, r1
 8000fc8:	0223      	lsls	r3, r4, #8
 8000fca:	d54b      	bpl.n	8001064 <__aeabi_dmul+0x4b0>
 8000fcc:	2201      	movs	r2, #1
 8000fce:	2400      	movs	r4, #0
 8000fd0:	2500      	movs	r5, #0
 8000fd2:	e650      	b.n	8000c76 <__aeabi_dmul+0xc2>
 8000fd4:	2380      	movs	r3, #128	; 0x80
 8000fd6:	031b      	lsls	r3, r3, #12
 8000fd8:	421c      	tst	r4, r3
 8000fda:	d009      	beq.n	8000ff0 <__aeabi_dmul+0x43c>
 8000fdc:	421e      	tst	r6, r3
 8000fde:	d107      	bne.n	8000ff0 <__aeabi_dmul+0x43c>
 8000fe0:	4333      	orrs	r3, r6
 8000fe2:	031c      	lsls	r4, r3, #12
 8000fe4:	4643      	mov	r3, r8
 8000fe6:	0015      	movs	r5, r2
 8000fe8:	0b24      	lsrs	r4, r4, #12
 8000fea:	4a25      	ldr	r2, [pc, #148]	; (8001080 <__aeabi_dmul+0x4cc>)
 8000fec:	9301      	str	r3, [sp, #4]
 8000fee:	e642      	b.n	8000c76 <__aeabi_dmul+0xc2>
 8000ff0:	2280      	movs	r2, #128	; 0x80
 8000ff2:	0312      	lsls	r2, r2, #12
 8000ff4:	4314      	orrs	r4, r2
 8000ff6:	0324      	lsls	r4, r4, #12
 8000ff8:	4a21      	ldr	r2, [pc, #132]	; (8001080 <__aeabi_dmul+0x4cc>)
 8000ffa:	0b24      	lsrs	r4, r4, #12
 8000ffc:	9701      	str	r7, [sp, #4]
 8000ffe:	e63a      	b.n	8000c76 <__aeabi_dmul+0xc2>
 8001000:	f000 fbfc 	bl	80017fc <__clzsi2>
 8001004:	0001      	movs	r1, r0
 8001006:	0002      	movs	r2, r0
 8001008:	3115      	adds	r1, #21
 800100a:	3220      	adds	r2, #32
 800100c:	291c      	cmp	r1, #28
 800100e:	dc00      	bgt.n	8001012 <__aeabi_dmul+0x45e>
 8001010:	e74b      	b.n	8000eaa <__aeabi_dmul+0x2f6>
 8001012:	0034      	movs	r4, r6
 8001014:	3808      	subs	r0, #8
 8001016:	2500      	movs	r5, #0
 8001018:	4084      	lsls	r4, r0
 800101a:	e750      	b.n	8000ebe <__aeabi_dmul+0x30a>
 800101c:	f000 fbee 	bl	80017fc <__clzsi2>
 8001020:	0003      	movs	r3, r0
 8001022:	001a      	movs	r2, r3
 8001024:	3215      	adds	r2, #21
 8001026:	3020      	adds	r0, #32
 8001028:	2a1c      	cmp	r2, #28
 800102a:	dc00      	bgt.n	800102e <__aeabi_dmul+0x47a>
 800102c:	e71e      	b.n	8000e6c <__aeabi_dmul+0x2b8>
 800102e:	4656      	mov	r6, sl
 8001030:	3b08      	subs	r3, #8
 8001032:	2200      	movs	r2, #0
 8001034:	409e      	lsls	r6, r3
 8001036:	e723      	b.n	8000e80 <__aeabi_dmul+0x2cc>
 8001038:	9b00      	ldr	r3, [sp, #0]
 800103a:	469c      	mov	ip, r3
 800103c:	e6e6      	b.n	8000e0c <__aeabi_dmul+0x258>
 800103e:	4912      	ldr	r1, [pc, #72]	; (8001088 <__aeabi_dmul+0x4d4>)
 8001040:	0022      	movs	r2, r4
 8001042:	4461      	add	r1, ip
 8001044:	002e      	movs	r6, r5
 8001046:	408d      	lsls	r5, r1
 8001048:	408a      	lsls	r2, r1
 800104a:	40c6      	lsrs	r6, r0
 800104c:	1e69      	subs	r1, r5, #1
 800104e:	418d      	sbcs	r5, r1
 8001050:	4332      	orrs	r2, r6
 8001052:	432a      	orrs	r2, r5
 8001054:	40c4      	lsrs	r4, r0
 8001056:	0753      	lsls	r3, r2, #29
 8001058:	d0b6      	beq.n	8000fc8 <__aeabi_dmul+0x414>
 800105a:	210f      	movs	r1, #15
 800105c:	4011      	ands	r1, r2
 800105e:	2904      	cmp	r1, #4
 8001060:	d1ac      	bne.n	8000fbc <__aeabi_dmul+0x408>
 8001062:	e7b1      	b.n	8000fc8 <__aeabi_dmul+0x414>
 8001064:	0765      	lsls	r5, r4, #29
 8001066:	0264      	lsls	r4, r4, #9
 8001068:	0b24      	lsrs	r4, r4, #12
 800106a:	08d2      	lsrs	r2, r2, #3
 800106c:	4315      	orrs	r5, r2
 800106e:	2200      	movs	r2, #0
 8001070:	e601      	b.n	8000c76 <__aeabi_dmul+0xc2>
 8001072:	2280      	movs	r2, #128	; 0x80
 8001074:	0312      	lsls	r2, r2, #12
 8001076:	4314      	orrs	r4, r2
 8001078:	0324      	lsls	r4, r4, #12
 800107a:	4a01      	ldr	r2, [pc, #4]	; (8001080 <__aeabi_dmul+0x4cc>)
 800107c:	0b24      	lsrs	r4, r4, #12
 800107e:	e5fa      	b.n	8000c76 <__aeabi_dmul+0xc2>
 8001080:	000007ff 	.word	0x000007ff
 8001084:	0000043e 	.word	0x0000043e
 8001088:	0000041e 	.word	0x0000041e

0800108c <__aeabi_dsub>:
 800108c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800108e:	4657      	mov	r7, sl
 8001090:	464e      	mov	r6, r9
 8001092:	4645      	mov	r5, r8
 8001094:	46de      	mov	lr, fp
 8001096:	b5e0      	push	{r5, r6, r7, lr}
 8001098:	001e      	movs	r6, r3
 800109a:	0017      	movs	r7, r2
 800109c:	004a      	lsls	r2, r1, #1
 800109e:	030b      	lsls	r3, r1, #12
 80010a0:	0d52      	lsrs	r2, r2, #21
 80010a2:	0a5b      	lsrs	r3, r3, #9
 80010a4:	4690      	mov	r8, r2
 80010a6:	0f42      	lsrs	r2, r0, #29
 80010a8:	431a      	orrs	r2, r3
 80010aa:	0fcd      	lsrs	r5, r1, #31
 80010ac:	4ccd      	ldr	r4, [pc, #820]	; (80013e4 <__aeabi_dsub+0x358>)
 80010ae:	0331      	lsls	r1, r6, #12
 80010b0:	00c3      	lsls	r3, r0, #3
 80010b2:	4694      	mov	ip, r2
 80010b4:	0070      	lsls	r0, r6, #1
 80010b6:	0f7a      	lsrs	r2, r7, #29
 80010b8:	0a49      	lsrs	r1, r1, #9
 80010ba:	00ff      	lsls	r7, r7, #3
 80010bc:	469a      	mov	sl, r3
 80010be:	46b9      	mov	r9, r7
 80010c0:	0d40      	lsrs	r0, r0, #21
 80010c2:	0ff6      	lsrs	r6, r6, #31
 80010c4:	4311      	orrs	r1, r2
 80010c6:	42a0      	cmp	r0, r4
 80010c8:	d100      	bne.n	80010cc <__aeabi_dsub+0x40>
 80010ca:	e0b1      	b.n	8001230 <__aeabi_dsub+0x1a4>
 80010cc:	2201      	movs	r2, #1
 80010ce:	4056      	eors	r6, r2
 80010d0:	46b3      	mov	fp, r6
 80010d2:	42b5      	cmp	r5, r6
 80010d4:	d100      	bne.n	80010d8 <__aeabi_dsub+0x4c>
 80010d6:	e088      	b.n	80011ea <__aeabi_dsub+0x15e>
 80010d8:	4642      	mov	r2, r8
 80010da:	1a12      	subs	r2, r2, r0
 80010dc:	2a00      	cmp	r2, #0
 80010de:	dc00      	bgt.n	80010e2 <__aeabi_dsub+0x56>
 80010e0:	e0ae      	b.n	8001240 <__aeabi_dsub+0x1b4>
 80010e2:	2800      	cmp	r0, #0
 80010e4:	d100      	bne.n	80010e8 <__aeabi_dsub+0x5c>
 80010e6:	e0c1      	b.n	800126c <__aeabi_dsub+0x1e0>
 80010e8:	48be      	ldr	r0, [pc, #760]	; (80013e4 <__aeabi_dsub+0x358>)
 80010ea:	4580      	cmp	r8, r0
 80010ec:	d100      	bne.n	80010f0 <__aeabi_dsub+0x64>
 80010ee:	e151      	b.n	8001394 <__aeabi_dsub+0x308>
 80010f0:	2080      	movs	r0, #128	; 0x80
 80010f2:	0400      	lsls	r0, r0, #16
 80010f4:	4301      	orrs	r1, r0
 80010f6:	2a38      	cmp	r2, #56	; 0x38
 80010f8:	dd00      	ble.n	80010fc <__aeabi_dsub+0x70>
 80010fa:	e17b      	b.n	80013f4 <__aeabi_dsub+0x368>
 80010fc:	2a1f      	cmp	r2, #31
 80010fe:	dd00      	ble.n	8001102 <__aeabi_dsub+0x76>
 8001100:	e1ee      	b.n	80014e0 <__aeabi_dsub+0x454>
 8001102:	2020      	movs	r0, #32
 8001104:	003e      	movs	r6, r7
 8001106:	1a80      	subs	r0, r0, r2
 8001108:	000c      	movs	r4, r1
 800110a:	40d6      	lsrs	r6, r2
 800110c:	40d1      	lsrs	r1, r2
 800110e:	4087      	lsls	r7, r0
 8001110:	4662      	mov	r2, ip
 8001112:	4084      	lsls	r4, r0
 8001114:	1a52      	subs	r2, r2, r1
 8001116:	1e78      	subs	r0, r7, #1
 8001118:	4187      	sbcs	r7, r0
 800111a:	4694      	mov	ip, r2
 800111c:	4334      	orrs	r4, r6
 800111e:	4327      	orrs	r7, r4
 8001120:	1bdc      	subs	r4, r3, r7
 8001122:	42a3      	cmp	r3, r4
 8001124:	419b      	sbcs	r3, r3
 8001126:	4662      	mov	r2, ip
 8001128:	425b      	negs	r3, r3
 800112a:	1ad3      	subs	r3, r2, r3
 800112c:	4699      	mov	r9, r3
 800112e:	464b      	mov	r3, r9
 8001130:	021b      	lsls	r3, r3, #8
 8001132:	d400      	bmi.n	8001136 <__aeabi_dsub+0xaa>
 8001134:	e118      	b.n	8001368 <__aeabi_dsub+0x2dc>
 8001136:	464b      	mov	r3, r9
 8001138:	0258      	lsls	r0, r3, #9
 800113a:	0a43      	lsrs	r3, r0, #9
 800113c:	4699      	mov	r9, r3
 800113e:	464b      	mov	r3, r9
 8001140:	2b00      	cmp	r3, #0
 8001142:	d100      	bne.n	8001146 <__aeabi_dsub+0xba>
 8001144:	e137      	b.n	80013b6 <__aeabi_dsub+0x32a>
 8001146:	4648      	mov	r0, r9
 8001148:	f000 fb58 	bl	80017fc <__clzsi2>
 800114c:	0001      	movs	r1, r0
 800114e:	3908      	subs	r1, #8
 8001150:	2320      	movs	r3, #32
 8001152:	0022      	movs	r2, r4
 8001154:	4648      	mov	r0, r9
 8001156:	1a5b      	subs	r3, r3, r1
 8001158:	40da      	lsrs	r2, r3
 800115a:	4088      	lsls	r0, r1
 800115c:	408c      	lsls	r4, r1
 800115e:	4643      	mov	r3, r8
 8001160:	4310      	orrs	r0, r2
 8001162:	4588      	cmp	r8, r1
 8001164:	dd00      	ble.n	8001168 <__aeabi_dsub+0xdc>
 8001166:	e136      	b.n	80013d6 <__aeabi_dsub+0x34a>
 8001168:	1ac9      	subs	r1, r1, r3
 800116a:	1c4b      	adds	r3, r1, #1
 800116c:	2b1f      	cmp	r3, #31
 800116e:	dd00      	ble.n	8001172 <__aeabi_dsub+0xe6>
 8001170:	e0ea      	b.n	8001348 <__aeabi_dsub+0x2bc>
 8001172:	2220      	movs	r2, #32
 8001174:	0026      	movs	r6, r4
 8001176:	1ad2      	subs	r2, r2, r3
 8001178:	0001      	movs	r1, r0
 800117a:	4094      	lsls	r4, r2
 800117c:	40de      	lsrs	r6, r3
 800117e:	40d8      	lsrs	r0, r3
 8001180:	2300      	movs	r3, #0
 8001182:	4091      	lsls	r1, r2
 8001184:	1e62      	subs	r2, r4, #1
 8001186:	4194      	sbcs	r4, r2
 8001188:	4681      	mov	r9, r0
 800118a:	4698      	mov	r8, r3
 800118c:	4331      	orrs	r1, r6
 800118e:	430c      	orrs	r4, r1
 8001190:	0763      	lsls	r3, r4, #29
 8001192:	d009      	beq.n	80011a8 <__aeabi_dsub+0x11c>
 8001194:	230f      	movs	r3, #15
 8001196:	4023      	ands	r3, r4
 8001198:	2b04      	cmp	r3, #4
 800119a:	d005      	beq.n	80011a8 <__aeabi_dsub+0x11c>
 800119c:	1d23      	adds	r3, r4, #4
 800119e:	42a3      	cmp	r3, r4
 80011a0:	41a4      	sbcs	r4, r4
 80011a2:	4264      	negs	r4, r4
 80011a4:	44a1      	add	r9, r4
 80011a6:	001c      	movs	r4, r3
 80011a8:	464b      	mov	r3, r9
 80011aa:	021b      	lsls	r3, r3, #8
 80011ac:	d400      	bmi.n	80011b0 <__aeabi_dsub+0x124>
 80011ae:	e0de      	b.n	800136e <__aeabi_dsub+0x2e2>
 80011b0:	4641      	mov	r1, r8
 80011b2:	4b8c      	ldr	r3, [pc, #560]	; (80013e4 <__aeabi_dsub+0x358>)
 80011b4:	3101      	adds	r1, #1
 80011b6:	4299      	cmp	r1, r3
 80011b8:	d100      	bne.n	80011bc <__aeabi_dsub+0x130>
 80011ba:	e0e7      	b.n	800138c <__aeabi_dsub+0x300>
 80011bc:	464b      	mov	r3, r9
 80011be:	488a      	ldr	r0, [pc, #552]	; (80013e8 <__aeabi_dsub+0x35c>)
 80011c0:	08e4      	lsrs	r4, r4, #3
 80011c2:	4003      	ands	r3, r0
 80011c4:	0018      	movs	r0, r3
 80011c6:	0549      	lsls	r1, r1, #21
 80011c8:	075b      	lsls	r3, r3, #29
 80011ca:	0240      	lsls	r0, r0, #9
 80011cc:	4323      	orrs	r3, r4
 80011ce:	0d4a      	lsrs	r2, r1, #21
 80011d0:	0b04      	lsrs	r4, r0, #12
 80011d2:	0512      	lsls	r2, r2, #20
 80011d4:	07ed      	lsls	r5, r5, #31
 80011d6:	4322      	orrs	r2, r4
 80011d8:	432a      	orrs	r2, r5
 80011da:	0018      	movs	r0, r3
 80011dc:	0011      	movs	r1, r2
 80011de:	bcf0      	pop	{r4, r5, r6, r7}
 80011e0:	46bb      	mov	fp, r7
 80011e2:	46b2      	mov	sl, r6
 80011e4:	46a9      	mov	r9, r5
 80011e6:	46a0      	mov	r8, r4
 80011e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80011ea:	4642      	mov	r2, r8
 80011ec:	1a12      	subs	r2, r2, r0
 80011ee:	2a00      	cmp	r2, #0
 80011f0:	dd52      	ble.n	8001298 <__aeabi_dsub+0x20c>
 80011f2:	2800      	cmp	r0, #0
 80011f4:	d100      	bne.n	80011f8 <__aeabi_dsub+0x16c>
 80011f6:	e09c      	b.n	8001332 <__aeabi_dsub+0x2a6>
 80011f8:	45a0      	cmp	r8, r4
 80011fa:	d100      	bne.n	80011fe <__aeabi_dsub+0x172>
 80011fc:	e0ca      	b.n	8001394 <__aeabi_dsub+0x308>
 80011fe:	2080      	movs	r0, #128	; 0x80
 8001200:	0400      	lsls	r0, r0, #16
 8001202:	4301      	orrs	r1, r0
 8001204:	2a38      	cmp	r2, #56	; 0x38
 8001206:	dd00      	ble.n	800120a <__aeabi_dsub+0x17e>
 8001208:	e149      	b.n	800149e <__aeabi_dsub+0x412>
 800120a:	2a1f      	cmp	r2, #31
 800120c:	dc00      	bgt.n	8001210 <__aeabi_dsub+0x184>
 800120e:	e197      	b.n	8001540 <__aeabi_dsub+0x4b4>
 8001210:	0010      	movs	r0, r2
 8001212:	000e      	movs	r6, r1
 8001214:	3820      	subs	r0, #32
 8001216:	40c6      	lsrs	r6, r0
 8001218:	2a20      	cmp	r2, #32
 800121a:	d004      	beq.n	8001226 <__aeabi_dsub+0x19a>
 800121c:	2040      	movs	r0, #64	; 0x40
 800121e:	1a82      	subs	r2, r0, r2
 8001220:	4091      	lsls	r1, r2
 8001222:	430f      	orrs	r7, r1
 8001224:	46b9      	mov	r9, r7
 8001226:	464c      	mov	r4, r9
 8001228:	1e62      	subs	r2, r4, #1
 800122a:	4194      	sbcs	r4, r2
 800122c:	4334      	orrs	r4, r6
 800122e:	e13a      	b.n	80014a6 <__aeabi_dsub+0x41a>
 8001230:	000a      	movs	r2, r1
 8001232:	433a      	orrs	r2, r7
 8001234:	d028      	beq.n	8001288 <__aeabi_dsub+0x1fc>
 8001236:	46b3      	mov	fp, r6
 8001238:	42b5      	cmp	r5, r6
 800123a:	d02b      	beq.n	8001294 <__aeabi_dsub+0x208>
 800123c:	4a6b      	ldr	r2, [pc, #428]	; (80013ec <__aeabi_dsub+0x360>)
 800123e:	4442      	add	r2, r8
 8001240:	2a00      	cmp	r2, #0
 8001242:	d05d      	beq.n	8001300 <__aeabi_dsub+0x274>
 8001244:	4642      	mov	r2, r8
 8001246:	4644      	mov	r4, r8
 8001248:	1a82      	subs	r2, r0, r2
 800124a:	2c00      	cmp	r4, #0
 800124c:	d000      	beq.n	8001250 <__aeabi_dsub+0x1c4>
 800124e:	e0f5      	b.n	800143c <__aeabi_dsub+0x3b0>
 8001250:	4665      	mov	r5, ip
 8001252:	431d      	orrs	r5, r3
 8001254:	d100      	bne.n	8001258 <__aeabi_dsub+0x1cc>
 8001256:	e19c      	b.n	8001592 <__aeabi_dsub+0x506>
 8001258:	1e55      	subs	r5, r2, #1
 800125a:	2a01      	cmp	r2, #1
 800125c:	d100      	bne.n	8001260 <__aeabi_dsub+0x1d4>
 800125e:	e1fb      	b.n	8001658 <__aeabi_dsub+0x5cc>
 8001260:	4c60      	ldr	r4, [pc, #384]	; (80013e4 <__aeabi_dsub+0x358>)
 8001262:	42a2      	cmp	r2, r4
 8001264:	d100      	bne.n	8001268 <__aeabi_dsub+0x1dc>
 8001266:	e1bd      	b.n	80015e4 <__aeabi_dsub+0x558>
 8001268:	002a      	movs	r2, r5
 800126a:	e0f0      	b.n	800144e <__aeabi_dsub+0x3c2>
 800126c:	0008      	movs	r0, r1
 800126e:	4338      	orrs	r0, r7
 8001270:	d100      	bne.n	8001274 <__aeabi_dsub+0x1e8>
 8001272:	e0c3      	b.n	80013fc <__aeabi_dsub+0x370>
 8001274:	1e50      	subs	r0, r2, #1
 8001276:	2a01      	cmp	r2, #1
 8001278:	d100      	bne.n	800127c <__aeabi_dsub+0x1f0>
 800127a:	e1a8      	b.n	80015ce <__aeabi_dsub+0x542>
 800127c:	4c59      	ldr	r4, [pc, #356]	; (80013e4 <__aeabi_dsub+0x358>)
 800127e:	42a2      	cmp	r2, r4
 8001280:	d100      	bne.n	8001284 <__aeabi_dsub+0x1f8>
 8001282:	e087      	b.n	8001394 <__aeabi_dsub+0x308>
 8001284:	0002      	movs	r2, r0
 8001286:	e736      	b.n	80010f6 <__aeabi_dsub+0x6a>
 8001288:	2201      	movs	r2, #1
 800128a:	4056      	eors	r6, r2
 800128c:	46b3      	mov	fp, r6
 800128e:	42b5      	cmp	r5, r6
 8001290:	d000      	beq.n	8001294 <__aeabi_dsub+0x208>
 8001292:	e721      	b.n	80010d8 <__aeabi_dsub+0x4c>
 8001294:	4a55      	ldr	r2, [pc, #340]	; (80013ec <__aeabi_dsub+0x360>)
 8001296:	4442      	add	r2, r8
 8001298:	2a00      	cmp	r2, #0
 800129a:	d100      	bne.n	800129e <__aeabi_dsub+0x212>
 800129c:	e0b5      	b.n	800140a <__aeabi_dsub+0x37e>
 800129e:	4642      	mov	r2, r8
 80012a0:	4644      	mov	r4, r8
 80012a2:	1a82      	subs	r2, r0, r2
 80012a4:	2c00      	cmp	r4, #0
 80012a6:	d100      	bne.n	80012aa <__aeabi_dsub+0x21e>
 80012a8:	e138      	b.n	800151c <__aeabi_dsub+0x490>
 80012aa:	4e4e      	ldr	r6, [pc, #312]	; (80013e4 <__aeabi_dsub+0x358>)
 80012ac:	42b0      	cmp	r0, r6
 80012ae:	d100      	bne.n	80012b2 <__aeabi_dsub+0x226>
 80012b0:	e1de      	b.n	8001670 <__aeabi_dsub+0x5e4>
 80012b2:	2680      	movs	r6, #128	; 0x80
 80012b4:	4664      	mov	r4, ip
 80012b6:	0436      	lsls	r6, r6, #16
 80012b8:	4334      	orrs	r4, r6
 80012ba:	46a4      	mov	ip, r4
 80012bc:	2a38      	cmp	r2, #56	; 0x38
 80012be:	dd00      	ble.n	80012c2 <__aeabi_dsub+0x236>
 80012c0:	e196      	b.n	80015f0 <__aeabi_dsub+0x564>
 80012c2:	2a1f      	cmp	r2, #31
 80012c4:	dd00      	ble.n	80012c8 <__aeabi_dsub+0x23c>
 80012c6:	e224      	b.n	8001712 <__aeabi_dsub+0x686>
 80012c8:	2620      	movs	r6, #32
 80012ca:	1ab4      	subs	r4, r6, r2
 80012cc:	46a2      	mov	sl, r4
 80012ce:	4664      	mov	r4, ip
 80012d0:	4656      	mov	r6, sl
 80012d2:	40b4      	lsls	r4, r6
 80012d4:	46a1      	mov	r9, r4
 80012d6:	001c      	movs	r4, r3
 80012d8:	464e      	mov	r6, r9
 80012da:	40d4      	lsrs	r4, r2
 80012dc:	4326      	orrs	r6, r4
 80012de:	0034      	movs	r4, r6
 80012e0:	4656      	mov	r6, sl
 80012e2:	40b3      	lsls	r3, r6
 80012e4:	1e5e      	subs	r6, r3, #1
 80012e6:	41b3      	sbcs	r3, r6
 80012e8:	431c      	orrs	r4, r3
 80012ea:	4663      	mov	r3, ip
 80012ec:	40d3      	lsrs	r3, r2
 80012ee:	18c9      	adds	r1, r1, r3
 80012f0:	19e4      	adds	r4, r4, r7
 80012f2:	42bc      	cmp	r4, r7
 80012f4:	41bf      	sbcs	r7, r7
 80012f6:	427f      	negs	r7, r7
 80012f8:	46b9      	mov	r9, r7
 80012fa:	4680      	mov	r8, r0
 80012fc:	4489      	add	r9, r1
 80012fe:	e0d8      	b.n	80014b2 <__aeabi_dsub+0x426>
 8001300:	4640      	mov	r0, r8
 8001302:	4c3b      	ldr	r4, [pc, #236]	; (80013f0 <__aeabi_dsub+0x364>)
 8001304:	3001      	adds	r0, #1
 8001306:	4220      	tst	r0, r4
 8001308:	d000      	beq.n	800130c <__aeabi_dsub+0x280>
 800130a:	e0b4      	b.n	8001476 <__aeabi_dsub+0x3ea>
 800130c:	4640      	mov	r0, r8
 800130e:	2800      	cmp	r0, #0
 8001310:	d000      	beq.n	8001314 <__aeabi_dsub+0x288>
 8001312:	e144      	b.n	800159e <__aeabi_dsub+0x512>
 8001314:	4660      	mov	r0, ip
 8001316:	4318      	orrs	r0, r3
 8001318:	d100      	bne.n	800131c <__aeabi_dsub+0x290>
 800131a:	e190      	b.n	800163e <__aeabi_dsub+0x5b2>
 800131c:	0008      	movs	r0, r1
 800131e:	4338      	orrs	r0, r7
 8001320:	d000      	beq.n	8001324 <__aeabi_dsub+0x298>
 8001322:	e1aa      	b.n	800167a <__aeabi_dsub+0x5ee>
 8001324:	4661      	mov	r1, ip
 8001326:	08db      	lsrs	r3, r3, #3
 8001328:	0749      	lsls	r1, r1, #29
 800132a:	430b      	orrs	r3, r1
 800132c:	4661      	mov	r1, ip
 800132e:	08cc      	lsrs	r4, r1, #3
 8001330:	e027      	b.n	8001382 <__aeabi_dsub+0x2f6>
 8001332:	0008      	movs	r0, r1
 8001334:	4338      	orrs	r0, r7
 8001336:	d061      	beq.n	80013fc <__aeabi_dsub+0x370>
 8001338:	1e50      	subs	r0, r2, #1
 800133a:	2a01      	cmp	r2, #1
 800133c:	d100      	bne.n	8001340 <__aeabi_dsub+0x2b4>
 800133e:	e139      	b.n	80015b4 <__aeabi_dsub+0x528>
 8001340:	42a2      	cmp	r2, r4
 8001342:	d027      	beq.n	8001394 <__aeabi_dsub+0x308>
 8001344:	0002      	movs	r2, r0
 8001346:	e75d      	b.n	8001204 <__aeabi_dsub+0x178>
 8001348:	0002      	movs	r2, r0
 800134a:	391f      	subs	r1, #31
 800134c:	40ca      	lsrs	r2, r1
 800134e:	0011      	movs	r1, r2
 8001350:	2b20      	cmp	r3, #32
 8001352:	d003      	beq.n	800135c <__aeabi_dsub+0x2d0>
 8001354:	2240      	movs	r2, #64	; 0x40
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	4098      	lsls	r0, r3
 800135a:	4304      	orrs	r4, r0
 800135c:	1e63      	subs	r3, r4, #1
 800135e:	419c      	sbcs	r4, r3
 8001360:	2300      	movs	r3, #0
 8001362:	4699      	mov	r9, r3
 8001364:	4698      	mov	r8, r3
 8001366:	430c      	orrs	r4, r1
 8001368:	0763      	lsls	r3, r4, #29
 800136a:	d000      	beq.n	800136e <__aeabi_dsub+0x2e2>
 800136c:	e712      	b.n	8001194 <__aeabi_dsub+0x108>
 800136e:	464b      	mov	r3, r9
 8001370:	464a      	mov	r2, r9
 8001372:	08e4      	lsrs	r4, r4, #3
 8001374:	075b      	lsls	r3, r3, #29
 8001376:	4323      	orrs	r3, r4
 8001378:	08d4      	lsrs	r4, r2, #3
 800137a:	4642      	mov	r2, r8
 800137c:	4919      	ldr	r1, [pc, #100]	; (80013e4 <__aeabi_dsub+0x358>)
 800137e:	428a      	cmp	r2, r1
 8001380:	d00e      	beq.n	80013a0 <__aeabi_dsub+0x314>
 8001382:	0324      	lsls	r4, r4, #12
 8001384:	0552      	lsls	r2, r2, #21
 8001386:	0b24      	lsrs	r4, r4, #12
 8001388:	0d52      	lsrs	r2, r2, #21
 800138a:	e722      	b.n	80011d2 <__aeabi_dsub+0x146>
 800138c:	000a      	movs	r2, r1
 800138e:	2400      	movs	r4, #0
 8001390:	2300      	movs	r3, #0
 8001392:	e71e      	b.n	80011d2 <__aeabi_dsub+0x146>
 8001394:	08db      	lsrs	r3, r3, #3
 8001396:	4662      	mov	r2, ip
 8001398:	0752      	lsls	r2, r2, #29
 800139a:	4313      	orrs	r3, r2
 800139c:	4662      	mov	r2, ip
 800139e:	08d4      	lsrs	r4, r2, #3
 80013a0:	001a      	movs	r2, r3
 80013a2:	4322      	orrs	r2, r4
 80013a4:	d100      	bne.n	80013a8 <__aeabi_dsub+0x31c>
 80013a6:	e1fc      	b.n	80017a2 <__aeabi_dsub+0x716>
 80013a8:	2280      	movs	r2, #128	; 0x80
 80013aa:	0312      	lsls	r2, r2, #12
 80013ac:	4314      	orrs	r4, r2
 80013ae:	0324      	lsls	r4, r4, #12
 80013b0:	4a0c      	ldr	r2, [pc, #48]	; (80013e4 <__aeabi_dsub+0x358>)
 80013b2:	0b24      	lsrs	r4, r4, #12
 80013b4:	e70d      	b.n	80011d2 <__aeabi_dsub+0x146>
 80013b6:	0020      	movs	r0, r4
 80013b8:	f000 fa20 	bl	80017fc <__clzsi2>
 80013bc:	0001      	movs	r1, r0
 80013be:	3118      	adds	r1, #24
 80013c0:	291f      	cmp	r1, #31
 80013c2:	dc00      	bgt.n	80013c6 <__aeabi_dsub+0x33a>
 80013c4:	e6c4      	b.n	8001150 <__aeabi_dsub+0xc4>
 80013c6:	3808      	subs	r0, #8
 80013c8:	4084      	lsls	r4, r0
 80013ca:	4643      	mov	r3, r8
 80013cc:	0020      	movs	r0, r4
 80013ce:	2400      	movs	r4, #0
 80013d0:	4588      	cmp	r8, r1
 80013d2:	dc00      	bgt.n	80013d6 <__aeabi_dsub+0x34a>
 80013d4:	e6c8      	b.n	8001168 <__aeabi_dsub+0xdc>
 80013d6:	4a04      	ldr	r2, [pc, #16]	; (80013e8 <__aeabi_dsub+0x35c>)
 80013d8:	1a5b      	subs	r3, r3, r1
 80013da:	4010      	ands	r0, r2
 80013dc:	4698      	mov	r8, r3
 80013de:	4681      	mov	r9, r0
 80013e0:	e6d6      	b.n	8001190 <__aeabi_dsub+0x104>
 80013e2:	46c0      	nop			; (mov r8, r8)
 80013e4:	000007ff 	.word	0x000007ff
 80013e8:	ff7fffff 	.word	0xff7fffff
 80013ec:	fffff801 	.word	0xfffff801
 80013f0:	000007fe 	.word	0x000007fe
 80013f4:	430f      	orrs	r7, r1
 80013f6:	1e7a      	subs	r2, r7, #1
 80013f8:	4197      	sbcs	r7, r2
 80013fa:	e691      	b.n	8001120 <__aeabi_dsub+0x94>
 80013fc:	4661      	mov	r1, ip
 80013fe:	08db      	lsrs	r3, r3, #3
 8001400:	0749      	lsls	r1, r1, #29
 8001402:	430b      	orrs	r3, r1
 8001404:	4661      	mov	r1, ip
 8001406:	08cc      	lsrs	r4, r1, #3
 8001408:	e7b8      	b.n	800137c <__aeabi_dsub+0x2f0>
 800140a:	4640      	mov	r0, r8
 800140c:	4cd3      	ldr	r4, [pc, #844]	; (800175c <__aeabi_dsub+0x6d0>)
 800140e:	3001      	adds	r0, #1
 8001410:	4220      	tst	r0, r4
 8001412:	d000      	beq.n	8001416 <__aeabi_dsub+0x38a>
 8001414:	e0a2      	b.n	800155c <__aeabi_dsub+0x4d0>
 8001416:	4640      	mov	r0, r8
 8001418:	2800      	cmp	r0, #0
 800141a:	d000      	beq.n	800141e <__aeabi_dsub+0x392>
 800141c:	e101      	b.n	8001622 <__aeabi_dsub+0x596>
 800141e:	4660      	mov	r0, ip
 8001420:	4318      	orrs	r0, r3
 8001422:	d100      	bne.n	8001426 <__aeabi_dsub+0x39a>
 8001424:	e15e      	b.n	80016e4 <__aeabi_dsub+0x658>
 8001426:	0008      	movs	r0, r1
 8001428:	4338      	orrs	r0, r7
 800142a:	d000      	beq.n	800142e <__aeabi_dsub+0x3a2>
 800142c:	e15f      	b.n	80016ee <__aeabi_dsub+0x662>
 800142e:	4661      	mov	r1, ip
 8001430:	08db      	lsrs	r3, r3, #3
 8001432:	0749      	lsls	r1, r1, #29
 8001434:	430b      	orrs	r3, r1
 8001436:	4661      	mov	r1, ip
 8001438:	08cc      	lsrs	r4, r1, #3
 800143a:	e7a2      	b.n	8001382 <__aeabi_dsub+0x2f6>
 800143c:	4dc8      	ldr	r5, [pc, #800]	; (8001760 <__aeabi_dsub+0x6d4>)
 800143e:	42a8      	cmp	r0, r5
 8001440:	d100      	bne.n	8001444 <__aeabi_dsub+0x3b8>
 8001442:	e0cf      	b.n	80015e4 <__aeabi_dsub+0x558>
 8001444:	2580      	movs	r5, #128	; 0x80
 8001446:	4664      	mov	r4, ip
 8001448:	042d      	lsls	r5, r5, #16
 800144a:	432c      	orrs	r4, r5
 800144c:	46a4      	mov	ip, r4
 800144e:	2a38      	cmp	r2, #56	; 0x38
 8001450:	dc56      	bgt.n	8001500 <__aeabi_dsub+0x474>
 8001452:	2a1f      	cmp	r2, #31
 8001454:	dd00      	ble.n	8001458 <__aeabi_dsub+0x3cc>
 8001456:	e0d1      	b.n	80015fc <__aeabi_dsub+0x570>
 8001458:	2520      	movs	r5, #32
 800145a:	001e      	movs	r6, r3
 800145c:	1aad      	subs	r5, r5, r2
 800145e:	4664      	mov	r4, ip
 8001460:	40ab      	lsls	r3, r5
 8001462:	40ac      	lsls	r4, r5
 8001464:	40d6      	lsrs	r6, r2
 8001466:	1e5d      	subs	r5, r3, #1
 8001468:	41ab      	sbcs	r3, r5
 800146a:	4334      	orrs	r4, r6
 800146c:	4323      	orrs	r3, r4
 800146e:	4664      	mov	r4, ip
 8001470:	40d4      	lsrs	r4, r2
 8001472:	1b09      	subs	r1, r1, r4
 8001474:	e049      	b.n	800150a <__aeabi_dsub+0x47e>
 8001476:	4660      	mov	r0, ip
 8001478:	1bdc      	subs	r4, r3, r7
 800147a:	1a46      	subs	r6, r0, r1
 800147c:	42a3      	cmp	r3, r4
 800147e:	4180      	sbcs	r0, r0
 8001480:	4240      	negs	r0, r0
 8001482:	4681      	mov	r9, r0
 8001484:	0030      	movs	r0, r6
 8001486:	464e      	mov	r6, r9
 8001488:	1b80      	subs	r0, r0, r6
 800148a:	4681      	mov	r9, r0
 800148c:	0200      	lsls	r0, r0, #8
 800148e:	d476      	bmi.n	800157e <__aeabi_dsub+0x4f2>
 8001490:	464b      	mov	r3, r9
 8001492:	4323      	orrs	r3, r4
 8001494:	d000      	beq.n	8001498 <__aeabi_dsub+0x40c>
 8001496:	e652      	b.n	800113e <__aeabi_dsub+0xb2>
 8001498:	2400      	movs	r4, #0
 800149a:	2500      	movs	r5, #0
 800149c:	e771      	b.n	8001382 <__aeabi_dsub+0x2f6>
 800149e:	4339      	orrs	r1, r7
 80014a0:	000c      	movs	r4, r1
 80014a2:	1e62      	subs	r2, r4, #1
 80014a4:	4194      	sbcs	r4, r2
 80014a6:	18e4      	adds	r4, r4, r3
 80014a8:	429c      	cmp	r4, r3
 80014aa:	419b      	sbcs	r3, r3
 80014ac:	425b      	negs	r3, r3
 80014ae:	4463      	add	r3, ip
 80014b0:	4699      	mov	r9, r3
 80014b2:	464b      	mov	r3, r9
 80014b4:	021b      	lsls	r3, r3, #8
 80014b6:	d400      	bmi.n	80014ba <__aeabi_dsub+0x42e>
 80014b8:	e756      	b.n	8001368 <__aeabi_dsub+0x2dc>
 80014ba:	2301      	movs	r3, #1
 80014bc:	469c      	mov	ip, r3
 80014be:	4ba8      	ldr	r3, [pc, #672]	; (8001760 <__aeabi_dsub+0x6d4>)
 80014c0:	44e0      	add	r8, ip
 80014c2:	4598      	cmp	r8, r3
 80014c4:	d038      	beq.n	8001538 <__aeabi_dsub+0x4ac>
 80014c6:	464b      	mov	r3, r9
 80014c8:	48a6      	ldr	r0, [pc, #664]	; (8001764 <__aeabi_dsub+0x6d8>)
 80014ca:	2201      	movs	r2, #1
 80014cc:	4003      	ands	r3, r0
 80014ce:	0018      	movs	r0, r3
 80014d0:	0863      	lsrs	r3, r4, #1
 80014d2:	4014      	ands	r4, r2
 80014d4:	431c      	orrs	r4, r3
 80014d6:	07c3      	lsls	r3, r0, #31
 80014d8:	431c      	orrs	r4, r3
 80014da:	0843      	lsrs	r3, r0, #1
 80014dc:	4699      	mov	r9, r3
 80014de:	e657      	b.n	8001190 <__aeabi_dsub+0x104>
 80014e0:	0010      	movs	r0, r2
 80014e2:	000e      	movs	r6, r1
 80014e4:	3820      	subs	r0, #32
 80014e6:	40c6      	lsrs	r6, r0
 80014e8:	2a20      	cmp	r2, #32
 80014ea:	d004      	beq.n	80014f6 <__aeabi_dsub+0x46a>
 80014ec:	2040      	movs	r0, #64	; 0x40
 80014ee:	1a82      	subs	r2, r0, r2
 80014f0:	4091      	lsls	r1, r2
 80014f2:	430f      	orrs	r7, r1
 80014f4:	46b9      	mov	r9, r7
 80014f6:	464f      	mov	r7, r9
 80014f8:	1e7a      	subs	r2, r7, #1
 80014fa:	4197      	sbcs	r7, r2
 80014fc:	4337      	orrs	r7, r6
 80014fe:	e60f      	b.n	8001120 <__aeabi_dsub+0x94>
 8001500:	4662      	mov	r2, ip
 8001502:	431a      	orrs	r2, r3
 8001504:	0013      	movs	r3, r2
 8001506:	1e5a      	subs	r2, r3, #1
 8001508:	4193      	sbcs	r3, r2
 800150a:	1afc      	subs	r4, r7, r3
 800150c:	42a7      	cmp	r7, r4
 800150e:	41bf      	sbcs	r7, r7
 8001510:	427f      	negs	r7, r7
 8001512:	1bcb      	subs	r3, r1, r7
 8001514:	4699      	mov	r9, r3
 8001516:	465d      	mov	r5, fp
 8001518:	4680      	mov	r8, r0
 800151a:	e608      	b.n	800112e <__aeabi_dsub+0xa2>
 800151c:	4666      	mov	r6, ip
 800151e:	431e      	orrs	r6, r3
 8001520:	d100      	bne.n	8001524 <__aeabi_dsub+0x498>
 8001522:	e0be      	b.n	80016a2 <__aeabi_dsub+0x616>
 8001524:	1e56      	subs	r6, r2, #1
 8001526:	2a01      	cmp	r2, #1
 8001528:	d100      	bne.n	800152c <__aeabi_dsub+0x4a0>
 800152a:	e109      	b.n	8001740 <__aeabi_dsub+0x6b4>
 800152c:	4c8c      	ldr	r4, [pc, #560]	; (8001760 <__aeabi_dsub+0x6d4>)
 800152e:	42a2      	cmp	r2, r4
 8001530:	d100      	bne.n	8001534 <__aeabi_dsub+0x4a8>
 8001532:	e119      	b.n	8001768 <__aeabi_dsub+0x6dc>
 8001534:	0032      	movs	r2, r6
 8001536:	e6c1      	b.n	80012bc <__aeabi_dsub+0x230>
 8001538:	4642      	mov	r2, r8
 800153a:	2400      	movs	r4, #0
 800153c:	2300      	movs	r3, #0
 800153e:	e648      	b.n	80011d2 <__aeabi_dsub+0x146>
 8001540:	2020      	movs	r0, #32
 8001542:	000c      	movs	r4, r1
 8001544:	1a80      	subs	r0, r0, r2
 8001546:	003e      	movs	r6, r7
 8001548:	4087      	lsls	r7, r0
 800154a:	4084      	lsls	r4, r0
 800154c:	40d6      	lsrs	r6, r2
 800154e:	1e78      	subs	r0, r7, #1
 8001550:	4187      	sbcs	r7, r0
 8001552:	40d1      	lsrs	r1, r2
 8001554:	4334      	orrs	r4, r6
 8001556:	433c      	orrs	r4, r7
 8001558:	448c      	add	ip, r1
 800155a:	e7a4      	b.n	80014a6 <__aeabi_dsub+0x41a>
 800155c:	4a80      	ldr	r2, [pc, #512]	; (8001760 <__aeabi_dsub+0x6d4>)
 800155e:	4290      	cmp	r0, r2
 8001560:	d100      	bne.n	8001564 <__aeabi_dsub+0x4d8>
 8001562:	e0e9      	b.n	8001738 <__aeabi_dsub+0x6ac>
 8001564:	19df      	adds	r7, r3, r7
 8001566:	429f      	cmp	r7, r3
 8001568:	419b      	sbcs	r3, r3
 800156a:	4461      	add	r1, ip
 800156c:	425b      	negs	r3, r3
 800156e:	18c9      	adds	r1, r1, r3
 8001570:	07cc      	lsls	r4, r1, #31
 8001572:	087f      	lsrs	r7, r7, #1
 8001574:	084b      	lsrs	r3, r1, #1
 8001576:	4699      	mov	r9, r3
 8001578:	4680      	mov	r8, r0
 800157a:	433c      	orrs	r4, r7
 800157c:	e6f4      	b.n	8001368 <__aeabi_dsub+0x2dc>
 800157e:	1afc      	subs	r4, r7, r3
 8001580:	42a7      	cmp	r7, r4
 8001582:	41bf      	sbcs	r7, r7
 8001584:	4663      	mov	r3, ip
 8001586:	427f      	negs	r7, r7
 8001588:	1ac9      	subs	r1, r1, r3
 800158a:	1bcb      	subs	r3, r1, r7
 800158c:	4699      	mov	r9, r3
 800158e:	465d      	mov	r5, fp
 8001590:	e5d5      	b.n	800113e <__aeabi_dsub+0xb2>
 8001592:	08ff      	lsrs	r7, r7, #3
 8001594:	074b      	lsls	r3, r1, #29
 8001596:	465d      	mov	r5, fp
 8001598:	433b      	orrs	r3, r7
 800159a:	08cc      	lsrs	r4, r1, #3
 800159c:	e6ee      	b.n	800137c <__aeabi_dsub+0x2f0>
 800159e:	4662      	mov	r2, ip
 80015a0:	431a      	orrs	r2, r3
 80015a2:	d000      	beq.n	80015a6 <__aeabi_dsub+0x51a>
 80015a4:	e082      	b.n	80016ac <__aeabi_dsub+0x620>
 80015a6:	000b      	movs	r3, r1
 80015a8:	433b      	orrs	r3, r7
 80015aa:	d11b      	bne.n	80015e4 <__aeabi_dsub+0x558>
 80015ac:	2480      	movs	r4, #128	; 0x80
 80015ae:	2500      	movs	r5, #0
 80015b0:	0324      	lsls	r4, r4, #12
 80015b2:	e6f9      	b.n	80013a8 <__aeabi_dsub+0x31c>
 80015b4:	19dc      	adds	r4, r3, r7
 80015b6:	429c      	cmp	r4, r3
 80015b8:	419b      	sbcs	r3, r3
 80015ba:	4461      	add	r1, ip
 80015bc:	4689      	mov	r9, r1
 80015be:	425b      	negs	r3, r3
 80015c0:	4499      	add	r9, r3
 80015c2:	464b      	mov	r3, r9
 80015c4:	021b      	lsls	r3, r3, #8
 80015c6:	d444      	bmi.n	8001652 <__aeabi_dsub+0x5c6>
 80015c8:	2301      	movs	r3, #1
 80015ca:	4698      	mov	r8, r3
 80015cc:	e6cc      	b.n	8001368 <__aeabi_dsub+0x2dc>
 80015ce:	1bdc      	subs	r4, r3, r7
 80015d0:	4662      	mov	r2, ip
 80015d2:	42a3      	cmp	r3, r4
 80015d4:	419b      	sbcs	r3, r3
 80015d6:	1a51      	subs	r1, r2, r1
 80015d8:	425b      	negs	r3, r3
 80015da:	1acb      	subs	r3, r1, r3
 80015dc:	4699      	mov	r9, r3
 80015de:	2301      	movs	r3, #1
 80015e0:	4698      	mov	r8, r3
 80015e2:	e5a4      	b.n	800112e <__aeabi_dsub+0xa2>
 80015e4:	08ff      	lsrs	r7, r7, #3
 80015e6:	074b      	lsls	r3, r1, #29
 80015e8:	465d      	mov	r5, fp
 80015ea:	433b      	orrs	r3, r7
 80015ec:	08cc      	lsrs	r4, r1, #3
 80015ee:	e6d7      	b.n	80013a0 <__aeabi_dsub+0x314>
 80015f0:	4662      	mov	r2, ip
 80015f2:	431a      	orrs	r2, r3
 80015f4:	0014      	movs	r4, r2
 80015f6:	1e63      	subs	r3, r4, #1
 80015f8:	419c      	sbcs	r4, r3
 80015fa:	e679      	b.n	80012f0 <__aeabi_dsub+0x264>
 80015fc:	0015      	movs	r5, r2
 80015fe:	4664      	mov	r4, ip
 8001600:	3d20      	subs	r5, #32
 8001602:	40ec      	lsrs	r4, r5
 8001604:	46a0      	mov	r8, r4
 8001606:	2a20      	cmp	r2, #32
 8001608:	d005      	beq.n	8001616 <__aeabi_dsub+0x58a>
 800160a:	2540      	movs	r5, #64	; 0x40
 800160c:	4664      	mov	r4, ip
 800160e:	1aaa      	subs	r2, r5, r2
 8001610:	4094      	lsls	r4, r2
 8001612:	4323      	orrs	r3, r4
 8001614:	469a      	mov	sl, r3
 8001616:	4654      	mov	r4, sl
 8001618:	1e63      	subs	r3, r4, #1
 800161a:	419c      	sbcs	r4, r3
 800161c:	4643      	mov	r3, r8
 800161e:	4323      	orrs	r3, r4
 8001620:	e773      	b.n	800150a <__aeabi_dsub+0x47e>
 8001622:	4662      	mov	r2, ip
 8001624:	431a      	orrs	r2, r3
 8001626:	d023      	beq.n	8001670 <__aeabi_dsub+0x5e4>
 8001628:	000a      	movs	r2, r1
 800162a:	433a      	orrs	r2, r7
 800162c:	d000      	beq.n	8001630 <__aeabi_dsub+0x5a4>
 800162e:	e0a0      	b.n	8001772 <__aeabi_dsub+0x6e6>
 8001630:	4662      	mov	r2, ip
 8001632:	08db      	lsrs	r3, r3, #3
 8001634:	0752      	lsls	r2, r2, #29
 8001636:	4313      	orrs	r3, r2
 8001638:	4662      	mov	r2, ip
 800163a:	08d4      	lsrs	r4, r2, #3
 800163c:	e6b0      	b.n	80013a0 <__aeabi_dsub+0x314>
 800163e:	000b      	movs	r3, r1
 8001640:	433b      	orrs	r3, r7
 8001642:	d100      	bne.n	8001646 <__aeabi_dsub+0x5ba>
 8001644:	e728      	b.n	8001498 <__aeabi_dsub+0x40c>
 8001646:	08ff      	lsrs	r7, r7, #3
 8001648:	074b      	lsls	r3, r1, #29
 800164a:	465d      	mov	r5, fp
 800164c:	433b      	orrs	r3, r7
 800164e:	08cc      	lsrs	r4, r1, #3
 8001650:	e697      	b.n	8001382 <__aeabi_dsub+0x2f6>
 8001652:	2302      	movs	r3, #2
 8001654:	4698      	mov	r8, r3
 8001656:	e736      	b.n	80014c6 <__aeabi_dsub+0x43a>
 8001658:	1afc      	subs	r4, r7, r3
 800165a:	42a7      	cmp	r7, r4
 800165c:	41bf      	sbcs	r7, r7
 800165e:	4663      	mov	r3, ip
 8001660:	427f      	negs	r7, r7
 8001662:	1ac9      	subs	r1, r1, r3
 8001664:	1bcb      	subs	r3, r1, r7
 8001666:	4699      	mov	r9, r3
 8001668:	2301      	movs	r3, #1
 800166a:	465d      	mov	r5, fp
 800166c:	4698      	mov	r8, r3
 800166e:	e55e      	b.n	800112e <__aeabi_dsub+0xa2>
 8001670:	074b      	lsls	r3, r1, #29
 8001672:	08ff      	lsrs	r7, r7, #3
 8001674:	433b      	orrs	r3, r7
 8001676:	08cc      	lsrs	r4, r1, #3
 8001678:	e692      	b.n	80013a0 <__aeabi_dsub+0x314>
 800167a:	1bdc      	subs	r4, r3, r7
 800167c:	4660      	mov	r0, ip
 800167e:	42a3      	cmp	r3, r4
 8001680:	41b6      	sbcs	r6, r6
 8001682:	1a40      	subs	r0, r0, r1
 8001684:	4276      	negs	r6, r6
 8001686:	1b80      	subs	r0, r0, r6
 8001688:	4681      	mov	r9, r0
 800168a:	0200      	lsls	r0, r0, #8
 800168c:	d560      	bpl.n	8001750 <__aeabi_dsub+0x6c4>
 800168e:	1afc      	subs	r4, r7, r3
 8001690:	42a7      	cmp	r7, r4
 8001692:	41bf      	sbcs	r7, r7
 8001694:	4663      	mov	r3, ip
 8001696:	427f      	negs	r7, r7
 8001698:	1ac9      	subs	r1, r1, r3
 800169a:	1bcb      	subs	r3, r1, r7
 800169c:	4699      	mov	r9, r3
 800169e:	465d      	mov	r5, fp
 80016a0:	e576      	b.n	8001190 <__aeabi_dsub+0x104>
 80016a2:	08ff      	lsrs	r7, r7, #3
 80016a4:	074b      	lsls	r3, r1, #29
 80016a6:	433b      	orrs	r3, r7
 80016a8:	08cc      	lsrs	r4, r1, #3
 80016aa:	e667      	b.n	800137c <__aeabi_dsub+0x2f0>
 80016ac:	000a      	movs	r2, r1
 80016ae:	08db      	lsrs	r3, r3, #3
 80016b0:	433a      	orrs	r2, r7
 80016b2:	d100      	bne.n	80016b6 <__aeabi_dsub+0x62a>
 80016b4:	e66f      	b.n	8001396 <__aeabi_dsub+0x30a>
 80016b6:	4662      	mov	r2, ip
 80016b8:	0752      	lsls	r2, r2, #29
 80016ba:	4313      	orrs	r3, r2
 80016bc:	4662      	mov	r2, ip
 80016be:	08d4      	lsrs	r4, r2, #3
 80016c0:	2280      	movs	r2, #128	; 0x80
 80016c2:	0312      	lsls	r2, r2, #12
 80016c4:	4214      	tst	r4, r2
 80016c6:	d007      	beq.n	80016d8 <__aeabi_dsub+0x64c>
 80016c8:	08c8      	lsrs	r0, r1, #3
 80016ca:	4210      	tst	r0, r2
 80016cc:	d104      	bne.n	80016d8 <__aeabi_dsub+0x64c>
 80016ce:	465d      	mov	r5, fp
 80016d0:	0004      	movs	r4, r0
 80016d2:	08fb      	lsrs	r3, r7, #3
 80016d4:	0749      	lsls	r1, r1, #29
 80016d6:	430b      	orrs	r3, r1
 80016d8:	0f5a      	lsrs	r2, r3, #29
 80016da:	00db      	lsls	r3, r3, #3
 80016dc:	08db      	lsrs	r3, r3, #3
 80016de:	0752      	lsls	r2, r2, #29
 80016e0:	4313      	orrs	r3, r2
 80016e2:	e65d      	b.n	80013a0 <__aeabi_dsub+0x314>
 80016e4:	074b      	lsls	r3, r1, #29
 80016e6:	08ff      	lsrs	r7, r7, #3
 80016e8:	433b      	orrs	r3, r7
 80016ea:	08cc      	lsrs	r4, r1, #3
 80016ec:	e649      	b.n	8001382 <__aeabi_dsub+0x2f6>
 80016ee:	19dc      	adds	r4, r3, r7
 80016f0:	429c      	cmp	r4, r3
 80016f2:	419b      	sbcs	r3, r3
 80016f4:	4461      	add	r1, ip
 80016f6:	4689      	mov	r9, r1
 80016f8:	425b      	negs	r3, r3
 80016fa:	4499      	add	r9, r3
 80016fc:	464b      	mov	r3, r9
 80016fe:	021b      	lsls	r3, r3, #8
 8001700:	d400      	bmi.n	8001704 <__aeabi_dsub+0x678>
 8001702:	e631      	b.n	8001368 <__aeabi_dsub+0x2dc>
 8001704:	464a      	mov	r2, r9
 8001706:	4b17      	ldr	r3, [pc, #92]	; (8001764 <__aeabi_dsub+0x6d8>)
 8001708:	401a      	ands	r2, r3
 800170a:	2301      	movs	r3, #1
 800170c:	4691      	mov	r9, r2
 800170e:	4698      	mov	r8, r3
 8001710:	e62a      	b.n	8001368 <__aeabi_dsub+0x2dc>
 8001712:	0016      	movs	r6, r2
 8001714:	4664      	mov	r4, ip
 8001716:	3e20      	subs	r6, #32
 8001718:	40f4      	lsrs	r4, r6
 800171a:	46a0      	mov	r8, r4
 800171c:	2a20      	cmp	r2, #32
 800171e:	d005      	beq.n	800172c <__aeabi_dsub+0x6a0>
 8001720:	2640      	movs	r6, #64	; 0x40
 8001722:	4664      	mov	r4, ip
 8001724:	1ab2      	subs	r2, r6, r2
 8001726:	4094      	lsls	r4, r2
 8001728:	4323      	orrs	r3, r4
 800172a:	469a      	mov	sl, r3
 800172c:	4654      	mov	r4, sl
 800172e:	1e63      	subs	r3, r4, #1
 8001730:	419c      	sbcs	r4, r3
 8001732:	4643      	mov	r3, r8
 8001734:	431c      	orrs	r4, r3
 8001736:	e5db      	b.n	80012f0 <__aeabi_dsub+0x264>
 8001738:	0002      	movs	r2, r0
 800173a:	2400      	movs	r4, #0
 800173c:	2300      	movs	r3, #0
 800173e:	e548      	b.n	80011d2 <__aeabi_dsub+0x146>
 8001740:	19dc      	adds	r4, r3, r7
 8001742:	42bc      	cmp	r4, r7
 8001744:	41bf      	sbcs	r7, r7
 8001746:	4461      	add	r1, ip
 8001748:	4689      	mov	r9, r1
 800174a:	427f      	negs	r7, r7
 800174c:	44b9      	add	r9, r7
 800174e:	e738      	b.n	80015c2 <__aeabi_dsub+0x536>
 8001750:	464b      	mov	r3, r9
 8001752:	4323      	orrs	r3, r4
 8001754:	d100      	bne.n	8001758 <__aeabi_dsub+0x6cc>
 8001756:	e69f      	b.n	8001498 <__aeabi_dsub+0x40c>
 8001758:	e606      	b.n	8001368 <__aeabi_dsub+0x2dc>
 800175a:	46c0      	nop			; (mov r8, r8)
 800175c:	000007fe 	.word	0x000007fe
 8001760:	000007ff 	.word	0x000007ff
 8001764:	ff7fffff 	.word	0xff7fffff
 8001768:	08ff      	lsrs	r7, r7, #3
 800176a:	074b      	lsls	r3, r1, #29
 800176c:	433b      	orrs	r3, r7
 800176e:	08cc      	lsrs	r4, r1, #3
 8001770:	e616      	b.n	80013a0 <__aeabi_dsub+0x314>
 8001772:	4662      	mov	r2, ip
 8001774:	08db      	lsrs	r3, r3, #3
 8001776:	0752      	lsls	r2, r2, #29
 8001778:	4313      	orrs	r3, r2
 800177a:	4662      	mov	r2, ip
 800177c:	08d4      	lsrs	r4, r2, #3
 800177e:	2280      	movs	r2, #128	; 0x80
 8001780:	0312      	lsls	r2, r2, #12
 8001782:	4214      	tst	r4, r2
 8001784:	d007      	beq.n	8001796 <__aeabi_dsub+0x70a>
 8001786:	08c8      	lsrs	r0, r1, #3
 8001788:	4210      	tst	r0, r2
 800178a:	d104      	bne.n	8001796 <__aeabi_dsub+0x70a>
 800178c:	465d      	mov	r5, fp
 800178e:	0004      	movs	r4, r0
 8001790:	08fb      	lsrs	r3, r7, #3
 8001792:	0749      	lsls	r1, r1, #29
 8001794:	430b      	orrs	r3, r1
 8001796:	0f5a      	lsrs	r2, r3, #29
 8001798:	00db      	lsls	r3, r3, #3
 800179a:	0752      	lsls	r2, r2, #29
 800179c:	08db      	lsrs	r3, r3, #3
 800179e:	4313      	orrs	r3, r2
 80017a0:	e5fe      	b.n	80013a0 <__aeabi_dsub+0x314>
 80017a2:	2300      	movs	r3, #0
 80017a4:	4a01      	ldr	r2, [pc, #4]	; (80017ac <__aeabi_dsub+0x720>)
 80017a6:	001c      	movs	r4, r3
 80017a8:	e513      	b.n	80011d2 <__aeabi_dsub+0x146>
 80017aa:	46c0      	nop			; (mov r8, r8)
 80017ac:	000007ff 	.word	0x000007ff

080017b0 <__aeabi_ui2d>:
 80017b0:	b510      	push	{r4, lr}
 80017b2:	1e04      	subs	r4, r0, #0
 80017b4:	d010      	beq.n	80017d8 <__aeabi_ui2d+0x28>
 80017b6:	f000 f821 	bl	80017fc <__clzsi2>
 80017ba:	4b0f      	ldr	r3, [pc, #60]	; (80017f8 <__aeabi_ui2d+0x48>)
 80017bc:	1a1b      	subs	r3, r3, r0
 80017be:	280a      	cmp	r0, #10
 80017c0:	dc11      	bgt.n	80017e6 <__aeabi_ui2d+0x36>
 80017c2:	220b      	movs	r2, #11
 80017c4:	0021      	movs	r1, r4
 80017c6:	1a12      	subs	r2, r2, r0
 80017c8:	40d1      	lsrs	r1, r2
 80017ca:	3015      	adds	r0, #21
 80017cc:	030a      	lsls	r2, r1, #12
 80017ce:	055b      	lsls	r3, r3, #21
 80017d0:	4084      	lsls	r4, r0
 80017d2:	0b12      	lsrs	r2, r2, #12
 80017d4:	0d5b      	lsrs	r3, r3, #21
 80017d6:	e001      	b.n	80017dc <__aeabi_ui2d+0x2c>
 80017d8:	2300      	movs	r3, #0
 80017da:	2200      	movs	r2, #0
 80017dc:	051b      	lsls	r3, r3, #20
 80017de:	4313      	orrs	r3, r2
 80017e0:	0020      	movs	r0, r4
 80017e2:	0019      	movs	r1, r3
 80017e4:	bd10      	pop	{r4, pc}
 80017e6:	0022      	movs	r2, r4
 80017e8:	380b      	subs	r0, #11
 80017ea:	4082      	lsls	r2, r0
 80017ec:	055b      	lsls	r3, r3, #21
 80017ee:	0312      	lsls	r2, r2, #12
 80017f0:	2400      	movs	r4, #0
 80017f2:	0b12      	lsrs	r2, r2, #12
 80017f4:	0d5b      	lsrs	r3, r3, #21
 80017f6:	e7f1      	b.n	80017dc <__aeabi_ui2d+0x2c>
 80017f8:	0000041e 	.word	0x0000041e

080017fc <__clzsi2>:
 80017fc:	211c      	movs	r1, #28
 80017fe:	2301      	movs	r3, #1
 8001800:	041b      	lsls	r3, r3, #16
 8001802:	4298      	cmp	r0, r3
 8001804:	d301      	bcc.n	800180a <__clzsi2+0xe>
 8001806:	0c00      	lsrs	r0, r0, #16
 8001808:	3910      	subs	r1, #16
 800180a:	0a1b      	lsrs	r3, r3, #8
 800180c:	4298      	cmp	r0, r3
 800180e:	d301      	bcc.n	8001814 <__clzsi2+0x18>
 8001810:	0a00      	lsrs	r0, r0, #8
 8001812:	3908      	subs	r1, #8
 8001814:	091b      	lsrs	r3, r3, #4
 8001816:	4298      	cmp	r0, r3
 8001818:	d301      	bcc.n	800181e <__clzsi2+0x22>
 800181a:	0900      	lsrs	r0, r0, #4
 800181c:	3904      	subs	r1, #4
 800181e:	a202      	add	r2, pc, #8	; (adr r2, 8001828 <__clzsi2+0x2c>)
 8001820:	5c10      	ldrb	r0, [r2, r0]
 8001822:	1840      	adds	r0, r0, r1
 8001824:	4770      	bx	lr
 8001826:	46c0      	nop			; (mov r8, r8)
 8001828:	02020304 	.word	0x02020304
 800182c:	01010101 	.word	0x01010101
	...

08001838 <__clzdi2>:
 8001838:	b510      	push	{r4, lr}
 800183a:	2900      	cmp	r1, #0
 800183c:	d103      	bne.n	8001846 <__clzdi2+0xe>
 800183e:	f7ff ffdd 	bl	80017fc <__clzsi2>
 8001842:	3020      	adds	r0, #32
 8001844:	e002      	b.n	800184c <__clzdi2+0x14>
 8001846:	0008      	movs	r0, r1
 8001848:	f7ff ffd8 	bl	80017fc <__clzsi2>
 800184c:	bd10      	pop	{r4, pc}
 800184e:	46c0      	nop			; (mov r8, r8)

08001850 <HAL_ADC_ConvCpltCallback>:
__IO uint8_t uADCConversionCpltFlag = 0;
uint32_t uiADCRawValueBuffer[3];
double Xout, Yout, Zout;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
  uADCConversionCpltFlag = 1;
 8001858:	4b03      	ldr	r3, [pc, #12]	; (8001868 <HAL_ADC_ConvCpltCallback+0x18>)
 800185a:	2201      	movs	r2, #1
 800185c:	701a      	strb	r2, [r3, #0]
}
 800185e:	46c0      	nop			; (mov r8, r8)
 8001860:	46bd      	mov	sp, r7
 8001862:	b002      	add	sp, #8
 8001864:	bd80      	pop	{r7, pc}
 8001866:	46c0      	nop			; (mov r8, r8)
 8001868:	20000124 	.word	0x20000124

0800186c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001872:	f000 fb6d 	bl	8001f50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001876:	f000 f8b9 	bl	80019ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800187a:	f000 f9ef 	bl	8001c5c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800187e:	f000 f99f 	bl	8001bc0 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001882:	f000 f911 	bl	8001aa8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_IT(&hadc1);
 8001886:	4b4b      	ldr	r3, [pc, #300]	; (80019b4 <main+0x148>)
 8001888:	0018      	movs	r0, r3
 800188a:	f000 fef5 	bl	8002678 <HAL_ADC_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (uADCConversionCpltFlag) {
 800188e:	4b4a      	ldr	r3, [pc, #296]	; (80019b8 <main+0x14c>)
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	b2db      	uxtb	r3, r3
 8001894:	2b00      	cmp	r3, #0
 8001896:	d0fa      	beq.n	800188e <main+0x22>
		for (int var = 0; var < 3; var++) {
 8001898:	2300      	movs	r3, #0
 800189a:	607b      	str	r3, [r7, #4]
 800189c:	e00b      	b.n	80018b6 <main+0x4a>
			uiADCRawValueBuffer[var] = HAL_ADC_GetValue(&hadc1);
 800189e:	4b45      	ldr	r3, [pc, #276]	; (80019b4 <main+0x148>)
 80018a0:	0018      	movs	r0, r3
 80018a2:	f000 ff61 	bl	8002768 <HAL_ADC_GetValue>
 80018a6:	0001      	movs	r1, r0
 80018a8:	4b44      	ldr	r3, [pc, #272]	; (80019bc <main+0x150>)
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	0092      	lsls	r2, r2, #2
 80018ae:	50d1      	str	r1, [r2, r3]
		for (int var = 0; var < 3; var++) {
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	3301      	adds	r3, #1
 80018b4:	607b      	str	r3, [r7, #4]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	ddf0      	ble.n	800189e <main+0x32>
		}

		Xout = ( (((double)(uiADCRawValueBuffer[0]*3.3)/4095.0) - 1.65) / 0.330 );
 80018bc:	4b3f      	ldr	r3, [pc, #252]	; (80019bc <main+0x150>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	0018      	movs	r0, r3
 80018c2:	f7ff ff75 	bl	80017b0 <__aeabi_ui2d>
 80018c6:	4a3e      	ldr	r2, [pc, #248]	; (80019c0 <main+0x154>)
 80018c8:	4b3e      	ldr	r3, [pc, #248]	; (80019c4 <main+0x158>)
 80018ca:	f7ff f973 	bl	8000bb4 <__aeabi_dmul>
 80018ce:	0002      	movs	r2, r0
 80018d0:	000b      	movs	r3, r1
 80018d2:	0010      	movs	r0, r2
 80018d4:	0019      	movs	r1, r3
 80018d6:	2200      	movs	r2, #0
 80018d8:	4b3b      	ldr	r3, [pc, #236]	; (80019c8 <main+0x15c>)
 80018da:	f7fe fe75 	bl	80005c8 <__aeabi_ddiv>
 80018de:	0002      	movs	r2, r0
 80018e0:	000b      	movs	r3, r1
 80018e2:	0010      	movs	r0, r2
 80018e4:	0019      	movs	r1, r3
 80018e6:	4a36      	ldr	r2, [pc, #216]	; (80019c0 <main+0x154>)
 80018e8:	4b38      	ldr	r3, [pc, #224]	; (80019cc <main+0x160>)
 80018ea:	f7ff fbcf 	bl	800108c <__aeabi_dsub>
 80018ee:	0002      	movs	r2, r0
 80018f0:	000b      	movs	r3, r1
 80018f2:	0010      	movs	r0, r2
 80018f4:	0019      	movs	r1, r3
 80018f6:	4a36      	ldr	r2, [pc, #216]	; (80019d0 <main+0x164>)
 80018f8:	4b36      	ldr	r3, [pc, #216]	; (80019d4 <main+0x168>)
 80018fa:	f7fe fe65 	bl	80005c8 <__aeabi_ddiv>
 80018fe:	0002      	movs	r2, r0
 8001900:	000b      	movs	r3, r1
 8001902:	4935      	ldr	r1, [pc, #212]	; (80019d8 <main+0x16c>)
 8001904:	600a      	str	r2, [r1, #0]
 8001906:	604b      	str	r3, [r1, #4]
		Yout = ( (((double)(uiADCRawValueBuffer[1]*3.3)/4095.0) - 1.65) / 0.330 );
 8001908:	4b2c      	ldr	r3, [pc, #176]	; (80019bc <main+0x150>)
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	0018      	movs	r0, r3
 800190e:	f7ff ff4f 	bl	80017b0 <__aeabi_ui2d>
 8001912:	4a2b      	ldr	r2, [pc, #172]	; (80019c0 <main+0x154>)
 8001914:	4b2b      	ldr	r3, [pc, #172]	; (80019c4 <main+0x158>)
 8001916:	f7ff f94d 	bl	8000bb4 <__aeabi_dmul>
 800191a:	0002      	movs	r2, r0
 800191c:	000b      	movs	r3, r1
 800191e:	0010      	movs	r0, r2
 8001920:	0019      	movs	r1, r3
 8001922:	2200      	movs	r2, #0
 8001924:	4b28      	ldr	r3, [pc, #160]	; (80019c8 <main+0x15c>)
 8001926:	f7fe fe4f 	bl	80005c8 <__aeabi_ddiv>
 800192a:	0002      	movs	r2, r0
 800192c:	000b      	movs	r3, r1
 800192e:	0010      	movs	r0, r2
 8001930:	0019      	movs	r1, r3
 8001932:	4a23      	ldr	r2, [pc, #140]	; (80019c0 <main+0x154>)
 8001934:	4b25      	ldr	r3, [pc, #148]	; (80019cc <main+0x160>)
 8001936:	f7ff fba9 	bl	800108c <__aeabi_dsub>
 800193a:	0002      	movs	r2, r0
 800193c:	000b      	movs	r3, r1
 800193e:	0010      	movs	r0, r2
 8001940:	0019      	movs	r1, r3
 8001942:	4a23      	ldr	r2, [pc, #140]	; (80019d0 <main+0x164>)
 8001944:	4b23      	ldr	r3, [pc, #140]	; (80019d4 <main+0x168>)
 8001946:	f7fe fe3f 	bl	80005c8 <__aeabi_ddiv>
 800194a:	0002      	movs	r2, r0
 800194c:	000b      	movs	r3, r1
 800194e:	4923      	ldr	r1, [pc, #140]	; (80019dc <main+0x170>)
 8001950:	600a      	str	r2, [r1, #0]
 8001952:	604b      	str	r3, [r1, #4]
		Zout = ( (((double)(uiADCRawValueBuffer[2]*3.3)/4095.0) - 1.80) / 0.330 );
 8001954:	4b19      	ldr	r3, [pc, #100]	; (80019bc <main+0x150>)
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	0018      	movs	r0, r3
 800195a:	f7ff ff29 	bl	80017b0 <__aeabi_ui2d>
 800195e:	4a18      	ldr	r2, [pc, #96]	; (80019c0 <main+0x154>)
 8001960:	4b18      	ldr	r3, [pc, #96]	; (80019c4 <main+0x158>)
 8001962:	f7ff f927 	bl	8000bb4 <__aeabi_dmul>
 8001966:	0002      	movs	r2, r0
 8001968:	000b      	movs	r3, r1
 800196a:	0010      	movs	r0, r2
 800196c:	0019      	movs	r1, r3
 800196e:	2200      	movs	r2, #0
 8001970:	4b15      	ldr	r3, [pc, #84]	; (80019c8 <main+0x15c>)
 8001972:	f7fe fe29 	bl	80005c8 <__aeabi_ddiv>
 8001976:	0002      	movs	r2, r0
 8001978:	000b      	movs	r3, r1
 800197a:	0010      	movs	r0, r2
 800197c:	0019      	movs	r1, r3
 800197e:	4a18      	ldr	r2, [pc, #96]	; (80019e0 <main+0x174>)
 8001980:	4b18      	ldr	r3, [pc, #96]	; (80019e4 <main+0x178>)
 8001982:	f7ff fb83 	bl	800108c <__aeabi_dsub>
 8001986:	0002      	movs	r2, r0
 8001988:	000b      	movs	r3, r1
 800198a:	0010      	movs	r0, r2
 800198c:	0019      	movs	r1, r3
 800198e:	4a10      	ldr	r2, [pc, #64]	; (80019d0 <main+0x164>)
 8001990:	4b10      	ldr	r3, [pc, #64]	; (80019d4 <main+0x168>)
 8001992:	f7fe fe19 	bl	80005c8 <__aeabi_ddiv>
 8001996:	0002      	movs	r2, r0
 8001998:	000b      	movs	r3, r1
 800199a:	4913      	ldr	r1, [pc, #76]	; (80019e8 <main+0x17c>)
 800199c:	600a      	str	r2, [r1, #0]
 800199e:	604b      	str	r3, [r1, #4]

		uADCConversionCpltFlag = 0;
 80019a0:	4b05      	ldr	r3, [pc, #20]	; (80019b8 <main+0x14c>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	701a      	strb	r2, [r3, #0]
		HAL_Delay(1000);
 80019a6:	23fa      	movs	r3, #250	; 0xfa
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	0018      	movs	r0, r3
 80019ac:	f000 fb56 	bl	800205c <HAL_Delay>
	  if (uADCConversionCpltFlag) {
 80019b0:	e76d      	b.n	800188e <main+0x22>
 80019b2:	46c0      	nop			; (mov r8, r8)
 80019b4:	2000002c 	.word	0x2000002c
 80019b8:	20000124 	.word	0x20000124
 80019bc:	20000128 	.word	0x20000128
 80019c0:	66666666 	.word	0x66666666
 80019c4:	400a6666 	.word	0x400a6666
 80019c8:	40affe00 	.word	0x40affe00
 80019cc:	3ffa6666 	.word	0x3ffa6666
 80019d0:	51eb851f 	.word	0x51eb851f
 80019d4:	3fd51eb8 	.word	0x3fd51eb8
 80019d8:	20000138 	.word	0x20000138
 80019dc:	20000140 	.word	0x20000140
 80019e0:	cccccccd 	.word	0xcccccccd
 80019e4:	3ffccccc 	.word	0x3ffccccc
 80019e8:	20000148 	.word	0x20000148

080019ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019ec:	b590      	push	{r4, r7, lr}
 80019ee:	b093      	sub	sp, #76	; 0x4c
 80019f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019f2:	2410      	movs	r4, #16
 80019f4:	193b      	adds	r3, r7, r4
 80019f6:	0018      	movs	r0, r3
 80019f8:	2338      	movs	r3, #56	; 0x38
 80019fa:	001a      	movs	r2, r3
 80019fc:	2100      	movs	r1, #0
 80019fe:	f003 f9a9 	bl	8004d54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a02:	003b      	movs	r3, r7
 8001a04:	0018      	movs	r0, r3
 8001a06:	2310      	movs	r3, #16
 8001a08:	001a      	movs	r2, r3
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	f003 f9a2 	bl	8004d54 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a10:	2380      	movs	r3, #128	; 0x80
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	0018      	movs	r0, r3
 8001a16:	f001 fcb9 	bl	800338c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a1a:	193b      	adds	r3, r7, r4
 8001a1c:	2202      	movs	r2, #2
 8001a1e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a20:	193b      	adds	r3, r7, r4
 8001a22:	2280      	movs	r2, #128	; 0x80
 8001a24:	0052      	lsls	r2, r2, #1
 8001a26:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8001a28:	0021      	movs	r1, r4
 8001a2a:	187b      	adds	r3, r7, r1
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a30:	187b      	adds	r3, r7, r1
 8001a32:	2240      	movs	r2, #64	; 0x40
 8001a34:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a36:	187b      	adds	r3, r7, r1
 8001a38:	2202      	movs	r2, #2
 8001a3a:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a3c:	187b      	adds	r3, r7, r1
 8001a3e:	2202      	movs	r2, #2
 8001a40:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001a42:	187b      	adds	r3, r7, r1
 8001a44:	2200      	movs	r2, #0
 8001a46:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001a48:	187b      	adds	r3, r7, r1
 8001a4a:	2208      	movs	r2, #8
 8001a4c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a4e:	187b      	adds	r3, r7, r1
 8001a50:	2280      	movs	r2, #128	; 0x80
 8001a52:	0292      	lsls	r2, r2, #10
 8001a54:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001a56:	187b      	adds	r3, r7, r1
 8001a58:	2280      	movs	r2, #128	; 0x80
 8001a5a:	0492      	lsls	r2, r2, #18
 8001a5c:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001a5e:	187b      	adds	r3, r7, r1
 8001a60:	2280      	movs	r2, #128	; 0x80
 8001a62:	0592      	lsls	r2, r2, #22
 8001a64:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a66:	187b      	adds	r3, r7, r1
 8001a68:	0018      	movs	r0, r3
 8001a6a:	f001 fcdb 	bl	8003424 <HAL_RCC_OscConfig>
 8001a6e:	1e03      	subs	r3, r0, #0
 8001a70:	d001      	beq.n	8001a76 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001a72:	f000 f943 	bl	8001cfc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a76:	003b      	movs	r3, r7
 8001a78:	2207      	movs	r2, #7
 8001a7a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a7c:	003b      	movs	r3, r7
 8001a7e:	2202      	movs	r2, #2
 8001a80:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a82:	003b      	movs	r3, r7
 8001a84:	2200      	movs	r2, #0
 8001a86:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a88:	003b      	movs	r3, r7
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a8e:	003b      	movs	r3, r7
 8001a90:	2102      	movs	r1, #2
 8001a92:	0018      	movs	r0, r3
 8001a94:	f001 ffe0 	bl	8003a58 <HAL_RCC_ClockConfig>
 8001a98:	1e03      	subs	r3, r0, #0
 8001a9a:	d001      	beq.n	8001aa0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001a9c:	f000 f92e 	bl	8001cfc <Error_Handler>
  }
}
 8001aa0:	46c0      	nop			; (mov r8, r8)
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	b013      	add	sp, #76	; 0x4c
 8001aa6:	bd90      	pop	{r4, r7, pc}

08001aa8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001aae:	1d3b      	adds	r3, r7, #4
 8001ab0:	0018      	movs	r0, r3
 8001ab2:	230c      	movs	r3, #12
 8001ab4:	001a      	movs	r2, r3
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	f003 f94c 	bl	8004d54 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001abc:	4b3c      	ldr	r3, [pc, #240]	; (8001bb0 <MX_ADC1_Init+0x108>)
 8001abe:	4a3d      	ldr	r2, [pc, #244]	; (8001bb4 <MX_ADC1_Init+0x10c>)
 8001ac0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001ac2:	4b3b      	ldr	r3, [pc, #236]	; (8001bb0 <MX_ADC1_Init+0x108>)
 8001ac4:	2280      	movs	r2, #128	; 0x80
 8001ac6:	0612      	lsls	r2, r2, #24
 8001ac8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001aca:	4b39      	ldr	r3, [pc, #228]	; (8001bb0 <MX_ADC1_Init+0x108>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ad0:	4b37      	ldr	r3, [pc, #220]	; (8001bb0 <MX_ADC1_Init+0x108>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001ad6:	4b36      	ldr	r3, [pc, #216]	; (8001bb0 <MX_ADC1_Init+0x108>)
 8001ad8:	2280      	movs	r2, #128	; 0x80
 8001ada:	0392      	lsls	r2, r2, #14
 8001adc:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001ade:	4b34      	ldr	r3, [pc, #208]	; (8001bb0 <MX_ADC1_Init+0x108>)
 8001ae0:	2208      	movs	r2, #8
 8001ae2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001ae4:	4b32      	ldr	r3, [pc, #200]	; (8001bb0 <MX_ADC1_Init+0x108>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8001aea:	4b31      	ldr	r3, [pc, #196]	; (8001bb0 <MX_ADC1_Init+0x108>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001af0:	4b2f      	ldr	r3, [pc, #188]	; (8001bb0 <MX_ADC1_Init+0x108>)
 8001af2:	2201      	movs	r2, #1
 8001af4:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 3;
 8001af6:	4b2e      	ldr	r3, [pc, #184]	; (8001bb0 <MX_ADC1_Init+0x108>)
 8001af8:	2203      	movs	r2, #3
 8001afa:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001afc:	4b2c      	ldr	r3, [pc, #176]	; (8001bb0 <MX_ADC1_Init+0x108>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b02:	4b2b      	ldr	r3, [pc, #172]	; (8001bb0 <MX_ADC1_Init+0x108>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001b08:	4b29      	ldr	r3, [pc, #164]	; (8001bb0 <MX_ADC1_Init+0x108>)
 8001b0a:	222c      	movs	r2, #44	; 0x2c
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001b10:	4b27      	ldr	r3, [pc, #156]	; (8001bb0 <MX_ADC1_Init+0x108>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8001b16:	4b26      	ldr	r3, [pc, #152]	; (8001bb0 <MX_ADC1_Init+0x108>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8001b1c:	4b24      	ldr	r3, [pc, #144]	; (8001bb0 <MX_ADC1_Init+0x108>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8001b22:	4b23      	ldr	r3, [pc, #140]	; (8001bb0 <MX_ADC1_Init+0x108>)
 8001b24:	223c      	movs	r2, #60	; 0x3c
 8001b26:	2100      	movs	r1, #0
 8001b28:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001b2a:	4b21      	ldr	r3, [pc, #132]	; (8001bb0 <MX_ADC1_Init+0x108>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b30:	4b1f      	ldr	r3, [pc, #124]	; (8001bb0 <MX_ADC1_Init+0x108>)
 8001b32:	0018      	movs	r0, r3
 8001b34:	f000 fbf8 	bl	8002328 <HAL_ADC_Init>
 8001b38:	1e03      	subs	r3, r0, #0
 8001b3a:	d001      	beq.n	8001b40 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001b3c:	f000 f8de 	bl	8001cfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001b40:	1d3b      	adds	r3, r7, #4
 8001b42:	2201      	movs	r2, #1
 8001b44:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b46:	1d3b      	adds	r3, r7, #4
 8001b48:	2200      	movs	r2, #0
 8001b4a:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001b4c:	1d3b      	adds	r3, r7, #4
 8001b4e:	2200      	movs	r2, #0
 8001b50:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b52:	1d3a      	adds	r2, r7, #4
 8001b54:	4b16      	ldr	r3, [pc, #88]	; (8001bb0 <MX_ADC1_Init+0x108>)
 8001b56:	0011      	movs	r1, r2
 8001b58:	0018      	movs	r0, r3
 8001b5a:	f000 ff39 	bl	80029d0 <HAL_ADC_ConfigChannel>
 8001b5e:	1e03      	subs	r3, r0, #0
 8001b60:	d001      	beq.n	8001b66 <MX_ADC1_Init+0xbe>
  {
    Error_Handler();
 8001b62:	f000 f8cb 	bl	8001cfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001b66:	1d3b      	adds	r3, r7, #4
 8001b68:	4a13      	ldr	r2, [pc, #76]	; (8001bb8 <MX_ADC1_Init+0x110>)
 8001b6a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001b6c:	1d3b      	adds	r3, r7, #4
 8001b6e:	2204      	movs	r2, #4
 8001b70:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b72:	1d3a      	adds	r2, r7, #4
 8001b74:	4b0e      	ldr	r3, [pc, #56]	; (8001bb0 <MX_ADC1_Init+0x108>)
 8001b76:	0011      	movs	r1, r2
 8001b78:	0018      	movs	r0, r3
 8001b7a:	f000 ff29 	bl	80029d0 <HAL_ADC_ConfigChannel>
 8001b7e:	1e03      	subs	r3, r0, #0
 8001b80:	d001      	beq.n	8001b86 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001b82:	f000 f8bb 	bl	8001cfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001b86:	1d3b      	adds	r3, r7, #4
 8001b88:	4a0c      	ldr	r2, [pc, #48]	; (8001bbc <MX_ADC1_Init+0x114>)
 8001b8a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001b8c:	1d3b      	adds	r3, r7, #4
 8001b8e:	2208      	movs	r2, #8
 8001b90:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b92:	1d3a      	adds	r2, r7, #4
 8001b94:	4b06      	ldr	r3, [pc, #24]	; (8001bb0 <MX_ADC1_Init+0x108>)
 8001b96:	0011      	movs	r1, r2
 8001b98:	0018      	movs	r0, r3
 8001b9a:	f000 ff19 	bl	80029d0 <HAL_ADC_ConfigChannel>
 8001b9e:	1e03      	subs	r3, r0, #0
 8001ba0:	d001      	beq.n	8001ba6 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8001ba2:	f000 f8ab 	bl	8001cfc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001ba6:	46c0      	nop			; (mov r8, r8)
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	b004      	add	sp, #16
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	46c0      	nop			; (mov r8, r8)
 8001bb0:	2000002c 	.word	0x2000002c
 8001bb4:	40012400 	.word	0x40012400
 8001bb8:	04000002 	.word	0x04000002
 8001bbc:	10000010 	.word	0x10000010

08001bc0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001bc4:	4b23      	ldr	r3, [pc, #140]	; (8001c54 <MX_USART2_UART_Init+0x94>)
 8001bc6:	4a24      	ldr	r2, [pc, #144]	; (8001c58 <MX_USART2_UART_Init+0x98>)
 8001bc8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001bca:	4b22      	ldr	r3, [pc, #136]	; (8001c54 <MX_USART2_UART_Init+0x94>)
 8001bcc:	22e1      	movs	r2, #225	; 0xe1
 8001bce:	0252      	lsls	r2, r2, #9
 8001bd0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001bd2:	4b20      	ldr	r3, [pc, #128]	; (8001c54 <MX_USART2_UART_Init+0x94>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001bd8:	4b1e      	ldr	r3, [pc, #120]	; (8001c54 <MX_USART2_UART_Init+0x94>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001bde:	4b1d      	ldr	r3, [pc, #116]	; (8001c54 <MX_USART2_UART_Init+0x94>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001be4:	4b1b      	ldr	r3, [pc, #108]	; (8001c54 <MX_USART2_UART_Init+0x94>)
 8001be6:	220c      	movs	r2, #12
 8001be8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bea:	4b1a      	ldr	r3, [pc, #104]	; (8001c54 <MX_USART2_UART_Init+0x94>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bf0:	4b18      	ldr	r3, [pc, #96]	; (8001c54 <MX_USART2_UART_Init+0x94>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bf6:	4b17      	ldr	r3, [pc, #92]	; (8001c54 <MX_USART2_UART_Init+0x94>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001bfc:	4b15      	ldr	r3, [pc, #84]	; (8001c54 <MX_USART2_UART_Init+0x94>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c02:	4b14      	ldr	r3, [pc, #80]	; (8001c54 <MX_USART2_UART_Init+0x94>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c08:	4b12      	ldr	r3, [pc, #72]	; (8001c54 <MX_USART2_UART_Init+0x94>)
 8001c0a:	0018      	movs	r0, r3
 8001c0c:	f002 fa86 	bl	800411c <HAL_UART_Init>
 8001c10:	1e03      	subs	r3, r0, #0
 8001c12:	d001      	beq.n	8001c18 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001c14:	f000 f872 	bl	8001cfc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c18:	4b0e      	ldr	r3, [pc, #56]	; (8001c54 <MX_USART2_UART_Init+0x94>)
 8001c1a:	2100      	movs	r1, #0
 8001c1c:	0018      	movs	r0, r3
 8001c1e:	f002 ff95 	bl	8004b4c <HAL_UARTEx_SetTxFifoThreshold>
 8001c22:	1e03      	subs	r3, r0, #0
 8001c24:	d001      	beq.n	8001c2a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001c26:	f000 f869 	bl	8001cfc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c2a:	4b0a      	ldr	r3, [pc, #40]	; (8001c54 <MX_USART2_UART_Init+0x94>)
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	0018      	movs	r0, r3
 8001c30:	f002 ffcc 	bl	8004bcc <HAL_UARTEx_SetRxFifoThreshold>
 8001c34:	1e03      	subs	r3, r0, #0
 8001c36:	d001      	beq.n	8001c3c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001c38:	f000 f860 	bl	8001cfc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001c3c:	4b05      	ldr	r3, [pc, #20]	; (8001c54 <MX_USART2_UART_Init+0x94>)
 8001c3e:	0018      	movs	r0, r3
 8001c40:	f002 ff4a 	bl	8004ad8 <HAL_UARTEx_DisableFifoMode>
 8001c44:	1e03      	subs	r3, r0, #0
 8001c46:	d001      	beq.n	8001c4c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001c48:	f000 f858 	bl	8001cfc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c4c:	46c0      	nop			; (mov r8, r8)
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	46c0      	nop			; (mov r8, r8)
 8001c54:	20000090 	.word	0x20000090
 8001c58:	40004400 	.word	0x40004400

08001c5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c5c:	b590      	push	{r4, r7, lr}
 8001c5e:	b089      	sub	sp, #36	; 0x24
 8001c60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c62:	240c      	movs	r4, #12
 8001c64:	193b      	adds	r3, r7, r4
 8001c66:	0018      	movs	r0, r3
 8001c68:	2314      	movs	r3, #20
 8001c6a:	001a      	movs	r2, r3
 8001c6c:	2100      	movs	r1, #0
 8001c6e:	f003 f871 	bl	8004d54 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c72:	4b21      	ldr	r3, [pc, #132]	; (8001cf8 <MX_GPIO_Init+0x9c>)
 8001c74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c76:	4b20      	ldr	r3, [pc, #128]	; (8001cf8 <MX_GPIO_Init+0x9c>)
 8001c78:	2104      	movs	r1, #4
 8001c7a:	430a      	orrs	r2, r1
 8001c7c:	635a      	str	r2, [r3, #52]	; 0x34
 8001c7e:	4b1e      	ldr	r3, [pc, #120]	; (8001cf8 <MX_GPIO_Init+0x9c>)
 8001c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c82:	2204      	movs	r2, #4
 8001c84:	4013      	ands	r3, r2
 8001c86:	60bb      	str	r3, [r7, #8]
 8001c88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c8a:	4b1b      	ldr	r3, [pc, #108]	; (8001cf8 <MX_GPIO_Init+0x9c>)
 8001c8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c8e:	4b1a      	ldr	r3, [pc, #104]	; (8001cf8 <MX_GPIO_Init+0x9c>)
 8001c90:	2120      	movs	r1, #32
 8001c92:	430a      	orrs	r2, r1
 8001c94:	635a      	str	r2, [r3, #52]	; 0x34
 8001c96:	4b18      	ldr	r3, [pc, #96]	; (8001cf8 <MX_GPIO_Init+0x9c>)
 8001c98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c9a:	2220      	movs	r2, #32
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	607b      	str	r3, [r7, #4]
 8001ca0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ca2:	4b15      	ldr	r3, [pc, #84]	; (8001cf8 <MX_GPIO_Init+0x9c>)
 8001ca4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ca6:	4b14      	ldr	r3, [pc, #80]	; (8001cf8 <MX_GPIO_Init+0x9c>)
 8001ca8:	2101      	movs	r1, #1
 8001caa:	430a      	orrs	r2, r1
 8001cac:	635a      	str	r2, [r3, #52]	; 0x34
 8001cae:	4b12      	ldr	r3, [pc, #72]	; (8001cf8 <MX_GPIO_Init+0x9c>)
 8001cb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	603b      	str	r3, [r7, #0]
 8001cb8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8001cba:	23a0      	movs	r3, #160	; 0xa0
 8001cbc:	05db      	lsls	r3, r3, #23
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	2120      	movs	r1, #32
 8001cc2:	0018      	movs	r0, r3
 8001cc4:	f001 fb44 	bl	8003350 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8001cc8:	0021      	movs	r1, r4
 8001cca:	187b      	adds	r3, r7, r1
 8001ccc:	2220      	movs	r2, #32
 8001cce:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cd0:	187b      	adds	r3, r7, r1
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd6:	187b      	adds	r3, r7, r1
 8001cd8:	2200      	movs	r2, #0
 8001cda:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cdc:	187b      	adds	r3, r7, r1
 8001cde:	2202      	movs	r2, #2
 8001ce0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8001ce2:	187a      	adds	r2, r7, r1
 8001ce4:	23a0      	movs	r3, #160	; 0xa0
 8001ce6:	05db      	lsls	r3, r3, #23
 8001ce8:	0011      	movs	r1, r2
 8001cea:	0018      	movs	r0, r3
 8001cec:	f001 f9cc 	bl	8003088 <HAL_GPIO_Init>

}
 8001cf0:	46c0      	nop			; (mov r8, r8)
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	b009      	add	sp, #36	; 0x24
 8001cf6:	bd90      	pop	{r4, r7, pc}
 8001cf8:	40021000 	.word	0x40021000

08001cfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d00:	b672      	cpsid	i
}
 8001d02:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d04:	e7fe      	b.n	8001d04 <Error_Handler+0x8>
	...

08001d08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d0e:	4b0f      	ldr	r3, [pc, #60]	; (8001d4c <HAL_MspInit+0x44>)
 8001d10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d12:	4b0e      	ldr	r3, [pc, #56]	; (8001d4c <HAL_MspInit+0x44>)
 8001d14:	2101      	movs	r1, #1
 8001d16:	430a      	orrs	r2, r1
 8001d18:	641a      	str	r2, [r3, #64]	; 0x40
 8001d1a:	4b0c      	ldr	r3, [pc, #48]	; (8001d4c <HAL_MspInit+0x44>)
 8001d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1e:	2201      	movs	r2, #1
 8001d20:	4013      	ands	r3, r2
 8001d22:	607b      	str	r3, [r7, #4]
 8001d24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d26:	4b09      	ldr	r3, [pc, #36]	; (8001d4c <HAL_MspInit+0x44>)
 8001d28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d2a:	4b08      	ldr	r3, [pc, #32]	; (8001d4c <HAL_MspInit+0x44>)
 8001d2c:	2180      	movs	r1, #128	; 0x80
 8001d2e:	0549      	lsls	r1, r1, #21
 8001d30:	430a      	orrs	r2, r1
 8001d32:	63da      	str	r2, [r3, #60]	; 0x3c
 8001d34:	4b05      	ldr	r3, [pc, #20]	; (8001d4c <HAL_MspInit+0x44>)
 8001d36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d38:	2380      	movs	r3, #128	; 0x80
 8001d3a:	055b      	lsls	r3, r3, #21
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	603b      	str	r3, [r7, #0]
 8001d40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d42:	46c0      	nop			; (mov r8, r8)
 8001d44:	46bd      	mov	sp, r7
 8001d46:	b002      	add	sp, #8
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	46c0      	nop			; (mov r8, r8)
 8001d4c:	40021000 	.word	0x40021000

08001d50 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d50:	b590      	push	{r4, r7, lr}
 8001d52:	b08b      	sub	sp, #44	; 0x2c
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d58:	2414      	movs	r4, #20
 8001d5a:	193b      	adds	r3, r7, r4
 8001d5c:	0018      	movs	r0, r3
 8001d5e:	2314      	movs	r3, #20
 8001d60:	001a      	movs	r2, r3
 8001d62:	2100      	movs	r1, #0
 8001d64:	f002 fff6 	bl	8004d54 <memset>
  if(hadc->Instance==ADC1)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a1c      	ldr	r2, [pc, #112]	; (8001de0 <HAL_ADC_MspInit+0x90>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d131      	bne.n	8001dd6 <HAL_ADC_MspInit+0x86>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001d72:	4b1c      	ldr	r3, [pc, #112]	; (8001de4 <HAL_ADC_MspInit+0x94>)
 8001d74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d76:	4b1b      	ldr	r3, [pc, #108]	; (8001de4 <HAL_ADC_MspInit+0x94>)
 8001d78:	2180      	movs	r1, #128	; 0x80
 8001d7a:	0349      	lsls	r1, r1, #13
 8001d7c:	430a      	orrs	r2, r1
 8001d7e:	641a      	str	r2, [r3, #64]	; 0x40
 8001d80:	4b18      	ldr	r3, [pc, #96]	; (8001de4 <HAL_ADC_MspInit+0x94>)
 8001d82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d84:	2380      	movs	r3, #128	; 0x80
 8001d86:	035b      	lsls	r3, r3, #13
 8001d88:	4013      	ands	r3, r2
 8001d8a:	613b      	str	r3, [r7, #16]
 8001d8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d8e:	4b15      	ldr	r3, [pc, #84]	; (8001de4 <HAL_ADC_MspInit+0x94>)
 8001d90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d92:	4b14      	ldr	r3, [pc, #80]	; (8001de4 <HAL_ADC_MspInit+0x94>)
 8001d94:	2101      	movs	r1, #1
 8001d96:	430a      	orrs	r2, r1
 8001d98:	635a      	str	r2, [r3, #52]	; 0x34
 8001d9a:	4b12      	ldr	r3, [pc, #72]	; (8001de4 <HAL_ADC_MspInit+0x94>)
 8001d9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d9e:	2201      	movs	r2, #1
 8001da0:	4013      	ands	r3, r2
 8001da2:	60fb      	str	r3, [r7, #12]
 8001da4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8001da6:	193b      	adds	r3, r7, r4
 8001da8:	2213      	movs	r2, #19
 8001daa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dac:	193b      	adds	r3, r7, r4
 8001dae:	2203      	movs	r2, #3
 8001db0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db2:	193b      	adds	r3, r7, r4
 8001db4:	2200      	movs	r2, #0
 8001db6:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001db8:	193a      	adds	r2, r7, r4
 8001dba:	23a0      	movs	r3, #160	; 0xa0
 8001dbc:	05db      	lsls	r3, r3, #23
 8001dbe:	0011      	movs	r1, r2
 8001dc0:	0018      	movs	r0, r3
 8001dc2:	f001 f961 	bl	8003088 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 1, 0);
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	2101      	movs	r1, #1
 8001dca:	200c      	movs	r0, #12
 8001dcc:	f001 f92a 	bl	8003024 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 8001dd0:	200c      	movs	r0, #12
 8001dd2:	f001 f93c 	bl	800304e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001dd6:	46c0      	nop			; (mov r8, r8)
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	b00b      	add	sp, #44	; 0x2c
 8001ddc:	bd90      	pop	{r4, r7, pc}
 8001dde:	46c0      	nop			; (mov r8, r8)
 8001de0:	40012400 	.word	0x40012400
 8001de4:	40021000 	.word	0x40021000

08001de8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001de8:	b590      	push	{r4, r7, lr}
 8001dea:	b097      	sub	sp, #92	; 0x5c
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df0:	2344      	movs	r3, #68	; 0x44
 8001df2:	18fb      	adds	r3, r7, r3
 8001df4:	0018      	movs	r0, r3
 8001df6:	2314      	movs	r3, #20
 8001df8:	001a      	movs	r2, r3
 8001dfa:	2100      	movs	r1, #0
 8001dfc:	f002 ffaa 	bl	8004d54 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e00:	2410      	movs	r4, #16
 8001e02:	193b      	adds	r3, r7, r4
 8001e04:	0018      	movs	r0, r3
 8001e06:	2334      	movs	r3, #52	; 0x34
 8001e08:	001a      	movs	r2, r3
 8001e0a:	2100      	movs	r1, #0
 8001e0c:	f002 ffa2 	bl	8004d54 <memset>
  if(huart->Instance==USART2)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a22      	ldr	r2, [pc, #136]	; (8001ea0 <HAL_UART_MspInit+0xb8>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d13e      	bne.n	8001e98 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001e1a:	193b      	adds	r3, r7, r4
 8001e1c:	2202      	movs	r2, #2
 8001e1e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001e20:	193b      	adds	r3, r7, r4
 8001e22:	2200      	movs	r2, #0
 8001e24:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e26:	193b      	adds	r3, r7, r4
 8001e28:	0018      	movs	r0, r3
 8001e2a:	f001 ffbf 	bl	8003dac <HAL_RCCEx_PeriphCLKConfig>
 8001e2e:	1e03      	subs	r3, r0, #0
 8001e30:	d001      	beq.n	8001e36 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001e32:	f7ff ff63 	bl	8001cfc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e36:	4b1b      	ldr	r3, [pc, #108]	; (8001ea4 <HAL_UART_MspInit+0xbc>)
 8001e38:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e3a:	4b1a      	ldr	r3, [pc, #104]	; (8001ea4 <HAL_UART_MspInit+0xbc>)
 8001e3c:	2180      	movs	r1, #128	; 0x80
 8001e3e:	0289      	lsls	r1, r1, #10
 8001e40:	430a      	orrs	r2, r1
 8001e42:	63da      	str	r2, [r3, #60]	; 0x3c
 8001e44:	4b17      	ldr	r3, [pc, #92]	; (8001ea4 <HAL_UART_MspInit+0xbc>)
 8001e46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e48:	2380      	movs	r3, #128	; 0x80
 8001e4a:	029b      	lsls	r3, r3, #10
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	60fb      	str	r3, [r7, #12]
 8001e50:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e52:	4b14      	ldr	r3, [pc, #80]	; (8001ea4 <HAL_UART_MspInit+0xbc>)
 8001e54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e56:	4b13      	ldr	r3, [pc, #76]	; (8001ea4 <HAL_UART_MspInit+0xbc>)
 8001e58:	2101      	movs	r1, #1
 8001e5a:	430a      	orrs	r2, r1
 8001e5c:	635a      	str	r2, [r3, #52]	; 0x34
 8001e5e:	4b11      	ldr	r3, [pc, #68]	; (8001ea4 <HAL_UART_MspInit+0xbc>)
 8001e60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e62:	2201      	movs	r2, #1
 8001e64:	4013      	ands	r3, r2
 8001e66:	60bb      	str	r3, [r7, #8]
 8001e68:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8001e6a:	2144      	movs	r1, #68	; 0x44
 8001e6c:	187b      	adds	r3, r7, r1
 8001e6e:	220c      	movs	r2, #12
 8001e70:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e72:	187b      	adds	r3, r7, r1
 8001e74:	2202      	movs	r2, #2
 8001e76:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e78:	187b      	adds	r3, r7, r1
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e7e:	187b      	adds	r3, r7, r1
 8001e80:	2200      	movs	r2, #0
 8001e82:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001e84:	187b      	adds	r3, r7, r1
 8001e86:	2201      	movs	r2, #1
 8001e88:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e8a:	187a      	adds	r2, r7, r1
 8001e8c:	23a0      	movs	r3, #160	; 0xa0
 8001e8e:	05db      	lsls	r3, r3, #23
 8001e90:	0011      	movs	r1, r2
 8001e92:	0018      	movs	r0, r3
 8001e94:	f001 f8f8 	bl	8003088 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001e98:	46c0      	nop			; (mov r8, r8)
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	b017      	add	sp, #92	; 0x5c
 8001e9e:	bd90      	pop	{r4, r7, pc}
 8001ea0:	40004400 	.word	0x40004400
 8001ea4:	40021000 	.word	0x40021000

08001ea8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001eac:	e7fe      	b.n	8001eac <NMI_Handler+0x4>

08001eae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001eb2:	e7fe      	b.n	8001eb2 <HardFault_Handler+0x4>

08001eb4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001eb8:	46c0      	nop			; (mov r8, r8)
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ec2:	46c0      	nop			; (mov r8, r8)
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ecc:	f000 f8aa 	bl	8002024 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ed0:	46c0      	nop			; (mov r8, r8)
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
	...

08001ed8 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC1, COMP1 and COMP2 interrupts (COMP interrupts through EXTI lines 17 and 18).
  */
void ADC1_COMP_IRQHandler(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001edc:	4b03      	ldr	r3, [pc, #12]	; (8001eec <ADC1_COMP_IRQHandler+0x14>)
 8001ede:	0018      	movs	r0, r3
 8001ee0:	f000 fc4e 	bl	8002780 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 8001ee4:	46c0      	nop			; (mov r8, r8)
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	46c0      	nop			; (mov r8, r8)
 8001eec:	2000002c 	.word	0x2000002c

08001ef0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ef4:	46c0      	nop			; (mov r8, r8)
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
	...

08001efc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001efc:	480d      	ldr	r0, [pc, #52]	; (8001f34 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001efe:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001f00:	f7ff fff6 	bl	8001ef0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f04:	480c      	ldr	r0, [pc, #48]	; (8001f38 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f06:	490d      	ldr	r1, [pc, #52]	; (8001f3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f08:	4a0d      	ldr	r2, [pc, #52]	; (8001f40 <LoopForever+0xe>)
  movs r3, #0
 8001f0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f0c:	e002      	b.n	8001f14 <LoopCopyDataInit>

08001f0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f12:	3304      	adds	r3, #4

08001f14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f18:	d3f9      	bcc.n	8001f0e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f1a:	4a0a      	ldr	r2, [pc, #40]	; (8001f44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f1c:	4c0a      	ldr	r4, [pc, #40]	; (8001f48 <LoopForever+0x16>)
  movs r3, #0
 8001f1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f20:	e001      	b.n	8001f26 <LoopFillZerobss>

08001f22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f24:	3204      	adds	r2, #4

08001f26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f28:	d3fb      	bcc.n	8001f22 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001f2a:	f002 feef 	bl	8004d0c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001f2e:	f7ff fc9d 	bl	800186c <main>

08001f32 <LoopForever>:

LoopForever:
  b LoopForever
 8001f32:	e7fe      	b.n	8001f32 <LoopForever>
  ldr   r0, =_estack
 8001f34:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8001f38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f3c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001f40:	08004e94 	.word	0x08004e94
  ldr r2, =_sbss
 8001f44:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001f48:	20000154 	.word	0x20000154

08001f4c <CEC_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f4c:	e7fe      	b.n	8001f4c <CEC_IRQHandler>
	...

08001f50 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f56:	1dfb      	adds	r3, r7, #7
 8001f58:	2200      	movs	r2, #0
 8001f5a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f5c:	4b0b      	ldr	r3, [pc, #44]	; (8001f8c <HAL_Init+0x3c>)
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	4b0a      	ldr	r3, [pc, #40]	; (8001f8c <HAL_Init+0x3c>)
 8001f62:	2180      	movs	r1, #128	; 0x80
 8001f64:	0049      	lsls	r1, r1, #1
 8001f66:	430a      	orrs	r2, r1
 8001f68:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f6a:	2000      	movs	r0, #0
 8001f6c:	f000 f810 	bl	8001f90 <HAL_InitTick>
 8001f70:	1e03      	subs	r3, r0, #0
 8001f72:	d003      	beq.n	8001f7c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001f74:	1dfb      	adds	r3, r7, #7
 8001f76:	2201      	movs	r2, #1
 8001f78:	701a      	strb	r2, [r3, #0]
 8001f7a:	e001      	b.n	8001f80 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001f7c:	f7ff fec4 	bl	8001d08 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f80:	1dfb      	adds	r3, r7, #7
 8001f82:	781b      	ldrb	r3, [r3, #0]
}
 8001f84:	0018      	movs	r0, r3
 8001f86:	46bd      	mov	sp, r7
 8001f88:	b002      	add	sp, #8
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	40022000 	.word	0x40022000

08001f90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f90:	b590      	push	{r4, r7, lr}
 8001f92:	b085      	sub	sp, #20
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f98:	230f      	movs	r3, #15
 8001f9a:	18fb      	adds	r3, r7, r3
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001fa0:	4b1d      	ldr	r3, [pc, #116]	; (8002018 <HAL_InitTick+0x88>)
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d02b      	beq.n	8002000 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001fa8:	4b1c      	ldr	r3, [pc, #112]	; (800201c <HAL_InitTick+0x8c>)
 8001faa:	681c      	ldr	r4, [r3, #0]
 8001fac:	4b1a      	ldr	r3, [pc, #104]	; (8002018 <HAL_InitTick+0x88>)
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	0019      	movs	r1, r3
 8001fb2:	23fa      	movs	r3, #250	; 0xfa
 8001fb4:	0098      	lsls	r0, r3, #2
 8001fb6:	f7fe f8a5 	bl	8000104 <__udivsi3>
 8001fba:	0003      	movs	r3, r0
 8001fbc:	0019      	movs	r1, r3
 8001fbe:	0020      	movs	r0, r4
 8001fc0:	f7fe f8a0 	bl	8000104 <__udivsi3>
 8001fc4:	0003      	movs	r3, r0
 8001fc6:	0018      	movs	r0, r3
 8001fc8:	f001 f851 	bl	800306e <HAL_SYSTICK_Config>
 8001fcc:	1e03      	subs	r3, r0, #0
 8001fce:	d112      	bne.n	8001ff6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2b03      	cmp	r3, #3
 8001fd4:	d80a      	bhi.n	8001fec <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fd6:	6879      	ldr	r1, [r7, #4]
 8001fd8:	2301      	movs	r3, #1
 8001fda:	425b      	negs	r3, r3
 8001fdc:	2200      	movs	r2, #0
 8001fde:	0018      	movs	r0, r3
 8001fe0:	f001 f820 	bl	8003024 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001fe4:	4b0e      	ldr	r3, [pc, #56]	; (8002020 <HAL_InitTick+0x90>)
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	601a      	str	r2, [r3, #0]
 8001fea:	e00d      	b.n	8002008 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001fec:	230f      	movs	r3, #15
 8001fee:	18fb      	adds	r3, r7, r3
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	701a      	strb	r2, [r3, #0]
 8001ff4:	e008      	b.n	8002008 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ff6:	230f      	movs	r3, #15
 8001ff8:	18fb      	adds	r3, r7, r3
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	701a      	strb	r2, [r3, #0]
 8001ffe:	e003      	b.n	8002008 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002000:	230f      	movs	r3, #15
 8002002:	18fb      	adds	r3, r7, r3
 8002004:	2201      	movs	r2, #1
 8002006:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002008:	230f      	movs	r3, #15
 800200a:	18fb      	adds	r3, r7, r3
 800200c:	781b      	ldrb	r3, [r3, #0]
}
 800200e:	0018      	movs	r0, r3
 8002010:	46bd      	mov	sp, r7
 8002012:	b005      	add	sp, #20
 8002014:	bd90      	pop	{r4, r7, pc}
 8002016:	46c0      	nop			; (mov r8, r8)
 8002018:	20000008 	.word	0x20000008
 800201c:	20000000 	.word	0x20000000
 8002020:	20000004 	.word	0x20000004

08002024 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002028:	4b05      	ldr	r3, [pc, #20]	; (8002040 <HAL_IncTick+0x1c>)
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	001a      	movs	r2, r3
 800202e:	4b05      	ldr	r3, [pc, #20]	; (8002044 <HAL_IncTick+0x20>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	18d2      	adds	r2, r2, r3
 8002034:	4b03      	ldr	r3, [pc, #12]	; (8002044 <HAL_IncTick+0x20>)
 8002036:	601a      	str	r2, [r3, #0]
}
 8002038:	46c0      	nop			; (mov r8, r8)
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	46c0      	nop			; (mov r8, r8)
 8002040:	20000008 	.word	0x20000008
 8002044:	20000150 	.word	0x20000150

08002048 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
  return uwTick;
 800204c:	4b02      	ldr	r3, [pc, #8]	; (8002058 <HAL_GetTick+0x10>)
 800204e:	681b      	ldr	r3, [r3, #0]
}
 8002050:	0018      	movs	r0, r3
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	46c0      	nop			; (mov r8, r8)
 8002058:	20000150 	.word	0x20000150

0800205c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002064:	f7ff fff0 	bl	8002048 <HAL_GetTick>
 8002068:	0003      	movs	r3, r0
 800206a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	3301      	adds	r3, #1
 8002074:	d005      	beq.n	8002082 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002076:	4b0a      	ldr	r3, [pc, #40]	; (80020a0 <HAL_Delay+0x44>)
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	001a      	movs	r2, r3
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	189b      	adds	r3, r3, r2
 8002080:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002082:	46c0      	nop			; (mov r8, r8)
 8002084:	f7ff ffe0 	bl	8002048 <HAL_GetTick>
 8002088:	0002      	movs	r2, r0
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	68fa      	ldr	r2, [r7, #12]
 8002090:	429a      	cmp	r2, r3
 8002092:	d8f7      	bhi.n	8002084 <HAL_Delay+0x28>
  {
  }
}
 8002094:	46c0      	nop			; (mov r8, r8)
 8002096:	46c0      	nop			; (mov r8, r8)
 8002098:	46bd      	mov	sp, r7
 800209a:	b004      	add	sp, #16
 800209c:	bd80      	pop	{r7, pc}
 800209e:	46c0      	nop			; (mov r8, r8)
 80020a0:	20000008 	.word	0x20000008

080020a4 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a05      	ldr	r2, [pc, #20]	; (80020c8 <LL_ADC_SetCommonPathInternalCh+0x24>)
 80020b4:	401a      	ands	r2, r3
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	431a      	orrs	r2, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	601a      	str	r2, [r3, #0]
}
 80020be:	46c0      	nop			; (mov r8, r8)
 80020c0:	46bd      	mov	sp, r7
 80020c2:	b002      	add	sp, #8
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	46c0      	nop			; (mov r8, r8)
 80020c8:	fe3fffff 	.word	0xfe3fffff

080020cc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	23e0      	movs	r3, #224	; 0xe0
 80020da:	045b      	lsls	r3, r3, #17
 80020dc:	4013      	ands	r3, r2
}
 80020de:	0018      	movs	r0, r3
 80020e0:	46bd      	mov	sp, r7
 80020e2:	b002      	add	sp, #8
 80020e4:	bd80      	pop	{r7, pc}

080020e6 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80020e6:	b580      	push	{r7, lr}
 80020e8:	b084      	sub	sp, #16
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	60f8      	str	r0, [r7, #12]
 80020ee:	60b9      	str	r1, [r7, #8]
 80020f0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	695b      	ldr	r3, [r3, #20]
 80020f6:	68ba      	ldr	r2, [r7, #8]
 80020f8:	2104      	movs	r1, #4
 80020fa:	400a      	ands	r2, r1
 80020fc:	2107      	movs	r1, #7
 80020fe:	4091      	lsls	r1, r2
 8002100:	000a      	movs	r2, r1
 8002102:	43d2      	mvns	r2, r2
 8002104:	401a      	ands	r2, r3
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	2104      	movs	r1, #4
 800210a:	400b      	ands	r3, r1
 800210c:	6879      	ldr	r1, [r7, #4]
 800210e:	4099      	lsls	r1, r3
 8002110:	000b      	movs	r3, r1
 8002112:	431a      	orrs	r2, r3
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002118:	46c0      	nop			; (mov r8, r8)
 800211a:	46bd      	mov	sp, r7
 800211c:	b004      	add	sp, #16
 800211e:	bd80      	pop	{r7, pc}

08002120 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	695b      	ldr	r3, [r3, #20]
 800212e:	683a      	ldr	r2, [r7, #0]
 8002130:	2104      	movs	r1, #4
 8002132:	400a      	ands	r2, r1
 8002134:	2107      	movs	r1, #7
 8002136:	4091      	lsls	r1, r2
 8002138:	000a      	movs	r2, r1
 800213a:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	2104      	movs	r1, #4
 8002140:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002142:	40da      	lsrs	r2, r3
 8002144:	0013      	movs	r3, r2
}
 8002146:	0018      	movs	r0, r3
 8002148:	46bd      	mov	sp, r7
 800214a:	b002      	add	sp, #8
 800214c:	bd80      	pop	{r7, pc}

0800214e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800214e:	b580      	push	{r7, lr}
 8002150:	b082      	sub	sp, #8
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	68da      	ldr	r2, [r3, #12]
 800215a:	23c0      	movs	r3, #192	; 0xc0
 800215c:	011b      	lsls	r3, r3, #4
 800215e:	4013      	ands	r3, r2
 8002160:	d101      	bne.n	8002166 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002162:	2301      	movs	r3, #1
 8002164:	e000      	b.n	8002168 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002166:	2300      	movs	r3, #0
}
 8002168:	0018      	movs	r0, r3
 800216a:	46bd      	mov	sp, r7
 800216c:	b002      	add	sp, #8
 800216e:	bd80      	pop	{r7, pc}

08002170 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	60b9      	str	r1, [r7, #8]
 800217a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002180:	68ba      	ldr	r2, [r7, #8]
 8002182:	211f      	movs	r1, #31
 8002184:	400a      	ands	r2, r1
 8002186:	210f      	movs	r1, #15
 8002188:	4091      	lsls	r1, r2
 800218a:	000a      	movs	r2, r1
 800218c:	43d2      	mvns	r2, r2
 800218e:	401a      	ands	r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	0e9b      	lsrs	r3, r3, #26
 8002194:	210f      	movs	r1, #15
 8002196:	4019      	ands	r1, r3
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	201f      	movs	r0, #31
 800219c:	4003      	ands	r3, r0
 800219e:	4099      	lsls	r1, r3
 80021a0:	000b      	movs	r3, r1
 80021a2:	431a      	orrs	r2, r3
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80021a8:	46c0      	nop			; (mov r8, r8)
 80021aa:	46bd      	mov	sp, r7
 80021ac:	b004      	add	sp, #16
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	035b      	lsls	r3, r3, #13
 80021c2:	0b5b      	lsrs	r3, r3, #13
 80021c4:	431a      	orrs	r2, r3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80021ca:	46c0      	nop			; (mov r8, r8)
 80021cc:	46bd      	mov	sp, r7
 80021ce:	b002      	add	sp, #8
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80021d2:	b580      	push	{r7, lr}
 80021d4:	b082      	sub	sp, #8
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
 80021da:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e0:	683a      	ldr	r2, [r7, #0]
 80021e2:	0352      	lsls	r2, r2, #13
 80021e4:	0b52      	lsrs	r2, r2, #13
 80021e6:	43d2      	mvns	r2, r2
 80021e8:	401a      	ands	r2, r3
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	629a      	str	r2, [r3, #40]	; 0x28
}
 80021ee:	46c0      	nop			; (mov r8, r8)
 80021f0:	46bd      	mov	sp, r7
 80021f2:	b002      	add	sp, #8
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(ADC_TypeDef *ADCx)
{
 80021f6:	b580      	push	{r7, lr}
 80021f8:	b082      	sub	sp, #8
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	2203      	movs	r2, #3
 8002204:	4013      	ands	r3, r2
}
 8002206:	0018      	movs	r0, r3
 8002208:	46bd      	mov	sp, r7
 800220a:	b002      	add	sp, #8
 800220c:	bd80      	pop	{r7, pc}
	...

08002210 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	60b9      	str	r1, [r7, #8]
 800221a:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	695b      	ldr	r3, [r3, #20]
 8002220:	68ba      	ldr	r2, [r7, #8]
 8002222:	0212      	lsls	r2, r2, #8
 8002224:	43d2      	mvns	r2, r2
 8002226:	401a      	ands	r2, r3
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	021b      	lsls	r3, r3, #8
 800222c:	6879      	ldr	r1, [r7, #4]
 800222e:	400b      	ands	r3, r1
 8002230:	4904      	ldr	r1, [pc, #16]	; (8002244 <LL_ADC_SetChannelSamplingTime+0x34>)
 8002232:	400b      	ands	r3, r1
 8002234:	431a      	orrs	r2, r3
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800223a:	46c0      	nop			; (mov r8, r8)
 800223c:	46bd      	mov	sp, r7
 800223e:	b004      	add	sp, #16
 8002240:	bd80      	pop	{r7, pc}
 8002242:	46c0      	nop			; (mov r8, r8)
 8002244:	07ffff00 	.word	0x07ffff00

08002248 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	4a05      	ldr	r2, [pc, #20]	; (800226c <LL_ADC_EnableInternalRegulator+0x24>)
 8002256:	4013      	ands	r3, r2
 8002258:	2280      	movs	r2, #128	; 0x80
 800225a:	0552      	lsls	r2, r2, #21
 800225c:	431a      	orrs	r2, r3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002262:	46c0      	nop			; (mov r8, r8)
 8002264:	46bd      	mov	sp, r7
 8002266:	b002      	add	sp, #8
 8002268:	bd80      	pop	{r7, pc}
 800226a:	46c0      	nop			; (mov r8, r8)
 800226c:	6fffffe8 	.word	0x6fffffe8

08002270 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	689a      	ldr	r2, [r3, #8]
 800227c:	2380      	movs	r3, #128	; 0x80
 800227e:	055b      	lsls	r3, r3, #21
 8002280:	401a      	ands	r2, r3
 8002282:	2380      	movs	r3, #128	; 0x80
 8002284:	055b      	lsls	r3, r3, #21
 8002286:	429a      	cmp	r2, r3
 8002288:	d101      	bne.n	800228e <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 800228a:	2301      	movs	r3, #1
 800228c:	e000      	b.n	8002290 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800228e:	2300      	movs	r3, #0
}
 8002290:	0018      	movs	r0, r3
 8002292:	46bd      	mov	sp, r7
 8002294:	b002      	add	sp, #8
 8002296:	bd80      	pop	{r7, pc}

08002298 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	4a04      	ldr	r2, [pc, #16]	; (80022b8 <LL_ADC_Enable+0x20>)
 80022a6:	4013      	ands	r3, r2
 80022a8:	2201      	movs	r2, #1
 80022aa:	431a      	orrs	r2, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80022b0:	46c0      	nop			; (mov r8, r8)
 80022b2:	46bd      	mov	sp, r7
 80022b4:	b002      	add	sp, #8
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	7fffffe8 	.word	0x7fffffe8

080022bc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	2201      	movs	r2, #1
 80022ca:	4013      	ands	r3, r2
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d101      	bne.n	80022d4 <LL_ADC_IsEnabled+0x18>
 80022d0:	2301      	movs	r3, #1
 80022d2:	e000      	b.n	80022d6 <LL_ADC_IsEnabled+0x1a>
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	0018      	movs	r0, r3
 80022d8:	46bd      	mov	sp, r7
 80022da:	b002      	add	sp, #8
 80022dc:	bd80      	pop	{r7, pc}
	...

080022e0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	4a04      	ldr	r2, [pc, #16]	; (8002300 <LL_ADC_REG_StartConversion+0x20>)
 80022ee:	4013      	ands	r3, r2
 80022f0:	2204      	movs	r2, #4
 80022f2:	431a      	orrs	r2, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80022f8:	46c0      	nop			; (mov r8, r8)
 80022fa:	46bd      	mov	sp, r7
 80022fc:	b002      	add	sp, #8
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	7fffffe8 	.word	0x7fffffe8

08002304 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	2204      	movs	r2, #4
 8002312:	4013      	ands	r3, r2
 8002314:	2b04      	cmp	r3, #4
 8002316:	d101      	bne.n	800231c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002318:	2301      	movs	r3, #1
 800231a:	e000      	b.n	800231e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800231c:	2300      	movs	r3, #0
}
 800231e:	0018      	movs	r0, r3
 8002320:	46bd      	mov	sp, r7
 8002322:	b002      	add	sp, #8
 8002324:	bd80      	pop	{r7, pc}
	...

08002328 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b088      	sub	sp, #32
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002330:	231f      	movs	r3, #31
 8002332:	18fb      	adds	r3, r7, r3
 8002334:	2200      	movs	r2, #0
 8002336:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8002338:	2300      	movs	r3, #0
 800233a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 800233c:	2300      	movs	r3, #0
 800233e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002340:	2300      	movs	r3, #0
 8002342:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d101      	bne.n	800234e <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e17f      	b.n	800264e <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002352:	2b00      	cmp	r3, #0
 8002354:	d10a      	bne.n	800236c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	0018      	movs	r0, r3
 800235a:	f7ff fcf9 	bl	8001d50 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2200      	movs	r2, #0
 8002362:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2254      	movs	r2, #84	; 0x54
 8002368:	2100      	movs	r1, #0
 800236a:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	0018      	movs	r0, r3
 8002372:	f7ff ff7d 	bl	8002270 <LL_ADC_IsInternalRegulatorEnabled>
 8002376:	1e03      	subs	r3, r0, #0
 8002378:	d115      	bne.n	80023a6 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	0018      	movs	r0, r3
 8002380:	f7ff ff62 	bl	8002248 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002384:	4bb4      	ldr	r3, [pc, #720]	; (8002658 <HAL_ADC_Init+0x330>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	49b4      	ldr	r1, [pc, #720]	; (800265c <HAL_ADC_Init+0x334>)
 800238a:	0018      	movs	r0, r3
 800238c:	f7fd feba 	bl	8000104 <__udivsi3>
 8002390:	0003      	movs	r3, r0
 8002392:	3301      	adds	r3, #1
 8002394:	005b      	lsls	r3, r3, #1
 8002396:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002398:	e002      	b.n	80023a0 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	3b01      	subs	r3, #1
 800239e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d1f9      	bne.n	800239a <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	0018      	movs	r0, r3
 80023ac:	f7ff ff60 	bl	8002270 <LL_ADC_IsInternalRegulatorEnabled>
 80023b0:	1e03      	subs	r3, r0, #0
 80023b2:	d10f      	bne.n	80023d4 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023b8:	2210      	movs	r2, #16
 80023ba:	431a      	orrs	r2, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023c4:	2201      	movs	r2, #1
 80023c6:	431a      	orrs	r2, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80023cc:	231f      	movs	r3, #31
 80023ce:	18fb      	adds	r3, r7, r3
 80023d0:	2201      	movs	r2, #1
 80023d2:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	0018      	movs	r0, r3
 80023da:	f7ff ff93 	bl	8002304 <LL_ADC_REG_IsConversionOngoing>
 80023de:	0003      	movs	r3, r0
 80023e0:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e6:	2210      	movs	r2, #16
 80023e8:	4013      	ands	r3, r2
 80023ea:	d000      	beq.n	80023ee <HAL_ADC_Init+0xc6>
 80023ec:	e122      	b.n	8002634 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d000      	beq.n	80023f6 <HAL_ADC_Init+0xce>
 80023f4:	e11e      	b.n	8002634 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023fa:	4a99      	ldr	r2, [pc, #612]	; (8002660 <HAL_ADC_Init+0x338>)
 80023fc:	4013      	ands	r3, r2
 80023fe:	2202      	movs	r2, #2
 8002400:	431a      	orrs	r2, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	0018      	movs	r0, r3
 800240c:	f7ff ff56 	bl	80022bc <LL_ADC_IsEnabled>
 8002410:	1e03      	subs	r3, r0, #0
 8002412:	d000      	beq.n	8002416 <HAL_ADC_Init+0xee>
 8002414:	e0ad      	b.n	8002572 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	7e1b      	ldrb	r3, [r3, #24]
 800241e:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002420:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	7e5b      	ldrb	r3, [r3, #25]
 8002426:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002428:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	7e9b      	ldrb	r3, [r3, #26]
 800242e:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002430:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002436:	2b00      	cmp	r3, #0
 8002438:	d002      	beq.n	8002440 <HAL_ADC_Init+0x118>
 800243a:	2380      	movs	r3, #128	; 0x80
 800243c:	015b      	lsls	r3, r3, #5
 800243e:	e000      	b.n	8002442 <HAL_ADC_Init+0x11a>
 8002440:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002442:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002448:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	691b      	ldr	r3, [r3, #16]
 800244e:	2b00      	cmp	r3, #0
 8002450:	da04      	bge.n	800245c <HAL_ADC_Init+0x134>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	085b      	lsrs	r3, r3, #1
 800245a:	e001      	b.n	8002460 <HAL_ADC_Init+0x138>
 800245c:	2380      	movs	r3, #128	; 0x80
 800245e:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8002460:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	212c      	movs	r1, #44	; 0x2c
 8002466:	5c5b      	ldrb	r3, [r3, r1]
 8002468:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800246a:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	4313      	orrs	r3, r2
 8002470:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2220      	movs	r2, #32
 8002476:	5c9b      	ldrb	r3, [r3, r2]
 8002478:	2b01      	cmp	r3, #1
 800247a:	d115      	bne.n	80024a8 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	7e9b      	ldrb	r3, [r3, #26]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d105      	bne.n	8002490 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	2280      	movs	r2, #128	; 0x80
 8002488:	0252      	lsls	r2, r2, #9
 800248a:	4313      	orrs	r3, r2
 800248c:	61bb      	str	r3, [r7, #24]
 800248e:	e00b      	b.n	80024a8 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002494:	2220      	movs	r2, #32
 8002496:	431a      	orrs	r2, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024a0:	2201      	movs	r2, #1
 80024a2:	431a      	orrs	r2, r3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d00a      	beq.n	80024c6 <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024b4:	23e0      	movs	r3, #224	; 0xe0
 80024b6:	005b      	lsls	r3, r3, #1
 80024b8:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80024be:	4313      	orrs	r3, r2
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	4a65      	ldr	r2, [pc, #404]	; (8002664 <HAL_ADC_Init+0x33c>)
 80024ce:	4013      	ands	r3, r2
 80024d0:	0019      	movs	r1, r3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	430a      	orrs	r2, r1
 80024da:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	0f9b      	lsrs	r3, r3, #30
 80024e2:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80024e8:	4313      	orrs	r3, r2
 80024ea:	697a      	ldr	r2, [r7, #20]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	223c      	movs	r2, #60	; 0x3c
 80024f4:	5c9b      	ldrb	r3, [r3, r2]
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d111      	bne.n	800251e <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	0f9b      	lsrs	r3, r3, #30
 8002500:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002506:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 800250c:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8002512:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	4313      	orrs	r3, r2
 8002518:	2201      	movs	r2, #1
 800251a:	4313      	orrs	r3, r2
 800251c:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	691b      	ldr	r3, [r3, #16]
 8002524:	4a50      	ldr	r2, [pc, #320]	; (8002668 <HAL_ADC_Init+0x340>)
 8002526:	4013      	ands	r3, r2
 8002528:	0019      	movs	r1, r3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	697a      	ldr	r2, [r7, #20]
 8002530:	430a      	orrs	r2, r1
 8002532:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685a      	ldr	r2, [r3, #4]
 8002538:	23c0      	movs	r3, #192	; 0xc0
 800253a:	061b      	lsls	r3, r3, #24
 800253c:	429a      	cmp	r2, r3
 800253e:	d018      	beq.n	8002572 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002544:	2380      	movs	r3, #128	; 0x80
 8002546:	05db      	lsls	r3, r3, #23
 8002548:	429a      	cmp	r2, r3
 800254a:	d012      	beq.n	8002572 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002550:	2380      	movs	r3, #128	; 0x80
 8002552:	061b      	lsls	r3, r3, #24
 8002554:	429a      	cmp	r2, r3
 8002556:	d00c      	beq.n	8002572 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8002558:	4b44      	ldr	r3, [pc, #272]	; (800266c <HAL_ADC_Init+0x344>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a44      	ldr	r2, [pc, #272]	; (8002670 <HAL_ADC_Init+0x348>)
 800255e:	4013      	ands	r3, r2
 8002560:	0019      	movs	r1, r3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685a      	ldr	r2, [r3, #4]
 8002566:	23f0      	movs	r3, #240	; 0xf0
 8002568:	039b      	lsls	r3, r3, #14
 800256a:	401a      	ands	r2, r3
 800256c:	4b3f      	ldr	r3, [pc, #252]	; (800266c <HAL_ADC_Init+0x344>)
 800256e:	430a      	orrs	r2, r1
 8002570:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6818      	ldr	r0, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800257a:	001a      	movs	r2, r3
 800257c:	2100      	movs	r1, #0
 800257e:	f7ff fdb2 	bl	80020e6 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6818      	ldr	r0, [r3, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800258a:	493a      	ldr	r1, [pc, #232]	; (8002674 <HAL_ADC_Init+0x34c>)
 800258c:	001a      	movs	r2, r3
 800258e:	f7ff fdaa 	bl	80020e6 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	691b      	ldr	r3, [r3, #16]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d109      	bne.n	80025ae <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2110      	movs	r1, #16
 80025a6:	4249      	negs	r1, r1
 80025a8:	430a      	orrs	r2, r1
 80025aa:	629a      	str	r2, [r3, #40]	; 0x28
 80025ac:	e018      	b.n	80025e0 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	691a      	ldr	r2, [r3, #16]
 80025b2:	2380      	movs	r3, #128	; 0x80
 80025b4:	039b      	lsls	r3, r3, #14
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d112      	bne.n	80025e0 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	69db      	ldr	r3, [r3, #28]
 80025c4:	3b01      	subs	r3, #1
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	221c      	movs	r2, #28
 80025ca:	4013      	ands	r3, r2
 80025cc:	2210      	movs	r2, #16
 80025ce:	4252      	negs	r2, r2
 80025d0:	409a      	lsls	r2, r3
 80025d2:	0011      	movs	r1, r2
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	430a      	orrs	r2, r1
 80025de:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2100      	movs	r1, #0
 80025e6:	0018      	movs	r0, r3
 80025e8:	f7ff fd9a 	bl	8002120 <LL_ADC_GetSamplingTimeCommonChannels>
 80025ec:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d10b      	bne.n	800260e <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002600:	2203      	movs	r2, #3
 8002602:	4393      	bics	r3, r2
 8002604:	2201      	movs	r2, #1
 8002606:	431a      	orrs	r2, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800260c:	e01c      	b.n	8002648 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002612:	2212      	movs	r2, #18
 8002614:	4393      	bics	r3, r2
 8002616:	2210      	movs	r2, #16
 8002618:	431a      	orrs	r2, r3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002622:	2201      	movs	r2, #1
 8002624:	431a      	orrs	r2, r3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 800262a:	231f      	movs	r3, #31
 800262c:	18fb      	adds	r3, r7, r3
 800262e:	2201      	movs	r2, #1
 8002630:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002632:	e009      	b.n	8002648 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002638:	2210      	movs	r2, #16
 800263a:	431a      	orrs	r2, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002640:	231f      	movs	r3, #31
 8002642:	18fb      	adds	r3, r7, r3
 8002644:	2201      	movs	r2, #1
 8002646:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8002648:	231f      	movs	r3, #31
 800264a:	18fb      	adds	r3, r7, r3
 800264c:	781b      	ldrb	r3, [r3, #0]
}
 800264e:	0018      	movs	r0, r3
 8002650:	46bd      	mov	sp, r7
 8002652:	b008      	add	sp, #32
 8002654:	bd80      	pop	{r7, pc}
 8002656:	46c0      	nop			; (mov r8, r8)
 8002658:	20000000 	.word	0x20000000
 800265c:	00030d40 	.word	0x00030d40
 8002660:	fffffefd 	.word	0xfffffefd
 8002664:	fffe0201 	.word	0xfffe0201
 8002668:	1ffffc02 	.word	0x1ffffc02
 800266c:	40012708 	.word	0x40012708
 8002670:	ffc3ffff 	.word	0xffc3ffff
 8002674:	07ffff04 	.word	0x07ffff04

08002678 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8002678:	b5b0      	push	{r4, r5, r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	0018      	movs	r0, r3
 8002686:	f7ff fe3d 	bl	8002304 <LL_ADC_REG_IsConversionOngoing>
 800268a:	1e03      	subs	r3, r0, #0
 800268c:	d15f      	bne.n	800274e <HAL_ADC_Start_IT+0xd6>
  {
    __HAL_LOCK(hadc);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2254      	movs	r2, #84	; 0x54
 8002692:	5c9b      	ldrb	r3, [r3, r2]
 8002694:	2b01      	cmp	r3, #1
 8002696:	d101      	bne.n	800269c <HAL_ADC_Start_IT+0x24>
 8002698:	2302      	movs	r3, #2
 800269a:	e05f      	b.n	800275c <HAL_ADC_Start_IT+0xe4>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2254      	movs	r2, #84	; 0x54
 80026a0:	2101      	movs	r1, #1
 80026a2:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80026a4:	250f      	movs	r5, #15
 80026a6:	197c      	adds	r4, r7, r5
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	0018      	movs	r0, r3
 80026ac:	f000 fb68 	bl	8002d80 <ADC_Enable>
 80026b0:	0003      	movs	r3, r0
 80026b2:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80026b4:	197b      	adds	r3, r7, r5
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d143      	bne.n	8002744 <HAL_ADC_Start_IT+0xcc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026c0:	4a28      	ldr	r2, [pc, #160]	; (8002764 <HAL_ADC_Start_IT+0xec>)
 80026c2:	4013      	ands	r3, r2
 80026c4:	2280      	movs	r2, #128	; 0x80
 80026c6:	0052      	lsls	r2, r2, #1
 80026c8:	431a      	orrs	r2, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY);


      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	221c      	movs	r2, #28
 80026da:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2254      	movs	r2, #84	; 0x54
 80026e0:	2100      	movs	r1, #0
 80026e2:	5499      	strb	r1, [r3, r2]

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	685a      	ldr	r2, [r3, #4]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	211c      	movs	r1, #28
 80026f0:	438a      	bics	r2, r1
 80026f2:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	695b      	ldr	r3, [r3, #20]
 80026f8:	2b08      	cmp	r3, #8
 80026fa:	d108      	bne.n	800270e <HAL_ADC_Start_IT+0x96>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	685a      	ldr	r2, [r3, #4]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	2108      	movs	r1, #8
 8002708:	430a      	orrs	r2, r1
 800270a:	605a      	str	r2, [r3, #4]
          break;
 800270c:	e008      	b.n	8002720 <HAL_ADC_Start_IT+0xa8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	685a      	ldr	r2, [r3, #4]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2104      	movs	r1, #4
 800271a:	430a      	orrs	r2, r1
 800271c:	605a      	str	r2, [r3, #4]
          break;
 800271e:	46c0      	nop			; (mov r8, r8)

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002724:	2b00      	cmp	r3, #0
 8002726:	d107      	bne.n	8002738 <HAL_ADC_Start_IT+0xc0>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	685a      	ldr	r2, [r3, #4]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	2110      	movs	r1, #16
 8002734:	430a      	orrs	r2, r1
 8002736:	605a      	str	r2, [r3, #4]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	0018      	movs	r0, r3
 800273e:	f7ff fdcf 	bl	80022e0 <LL_ADC_REG_StartConversion>
 8002742:	e008      	b.n	8002756 <HAL_ADC_Start_IT+0xde>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2254      	movs	r2, #84	; 0x54
 8002748:	2100      	movs	r1, #0
 800274a:	5499      	strb	r1, [r3, r2]
 800274c:	e003      	b.n	8002756 <HAL_ADC_Start_IT+0xde>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800274e:	230f      	movs	r3, #15
 8002750:	18fb      	adds	r3, r7, r3
 8002752:	2202      	movs	r2, #2
 8002754:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8002756:	230f      	movs	r3, #15
 8002758:	18fb      	adds	r3, r7, r3
 800275a:	781b      	ldrb	r3, [r3, #0]
}
 800275c:	0018      	movs	r0, r3
 800275e:	46bd      	mov	sp, r7
 8002760:	b004      	add	sp, #16
 8002762:	bdb0      	pop	{r4, r5, r7, pc}
 8002764:	fffff0fe 	.word	0xfffff0fe

08002768 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002776:	0018      	movs	r0, r3
 8002778:	46bd      	mov	sp, r7
 800277a:	b002      	add	sp, #8
 800277c:	bd80      	pop	{r7, pc}
	...

08002780 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b086      	sub	sp, #24
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002788:	2300      	movs	r3, #0
 800278a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	2202      	movs	r2, #2
 80027a0:	4013      	ands	r3, r2
 80027a2:	d017      	beq.n	80027d4 <HAL_ADC_IRQHandler+0x54>
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2202      	movs	r2, #2
 80027a8:	4013      	ands	r3, r2
 80027aa:	d013      	beq.n	80027d4 <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027b0:	2210      	movs	r2, #16
 80027b2:	4013      	ands	r3, r2
 80027b4:	d106      	bne.n	80027c4 <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ba:	2280      	movs	r2, #128	; 0x80
 80027bc:	0112      	lsls	r2, r2, #4
 80027be:	431a      	orrs	r2, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	0018      	movs	r0, r3
 80027c8:	f000 fb70 	bl	8002eac <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2202      	movs	r2, #2
 80027d2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	2204      	movs	r2, #4
 80027d8:	4013      	ands	r3, r2
 80027da:	d003      	beq.n	80027e4 <HAL_ADC_IRQHandler+0x64>
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2204      	movs	r2, #4
 80027e0:	4013      	ands	r3, r2
 80027e2:	d107      	bne.n	80027f4 <HAL_ADC_IRQHandler+0x74>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	2208      	movs	r2, #8
 80027e8:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80027ea:	d04d      	beq.n	8002888 <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2208      	movs	r2, #8
 80027f0:	4013      	ands	r3, r2
 80027f2:	d049      	beq.n	8002888 <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027f8:	2210      	movs	r2, #16
 80027fa:	4013      	ands	r3, r2
 80027fc:	d106      	bne.n	800280c <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002802:	2280      	movs	r2, #128	; 0x80
 8002804:	0092      	lsls	r2, r2, #2
 8002806:	431a      	orrs	r2, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	0018      	movs	r0, r3
 8002812:	f7ff fc9c 	bl	800214e <LL_ADC_REG_IsTriggerSourceSWStart>
 8002816:	1e03      	subs	r3, r0, #0
 8002818:	d02e      	beq.n	8002878 <HAL_ADC_IRQHandler+0xf8>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	7e9b      	ldrb	r3, [r3, #26]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d12a      	bne.n	8002878 <HAL_ADC_IRQHandler+0xf8>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	2208      	movs	r2, #8
 800282a:	4013      	ands	r3, r2
 800282c:	2b08      	cmp	r3, #8
 800282e:	d123      	bne.n	8002878 <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	0018      	movs	r0, r3
 8002836:	f7ff fd65 	bl	8002304 <LL_ADC_REG_IsConversionOngoing>
 800283a:	1e03      	subs	r3, r0, #0
 800283c:	d110      	bne.n	8002860 <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	685a      	ldr	r2, [r3, #4]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	210c      	movs	r1, #12
 800284a:	438a      	bics	r2, r1
 800284c:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002852:	4a56      	ldr	r2, [pc, #344]	; (80029ac <HAL_ADC_IRQHandler+0x22c>)
 8002854:	4013      	ands	r3, r2
 8002856:	2201      	movs	r2, #1
 8002858:	431a      	orrs	r2, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	659a      	str	r2, [r3, #88]	; 0x58
 800285e:	e00b      	b.n	8002878 <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002864:	2220      	movs	r2, #32
 8002866:	431a      	orrs	r2, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002870:	2201      	movs	r2, #1
 8002872:	431a      	orrs	r2, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	0018      	movs	r0, r3
 800287c:	f7fe ffe8 	bl	8001850 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	220c      	movs	r2, #12
 8002886:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	2280      	movs	r2, #128	; 0x80
 800288c:	4013      	ands	r3, r2
 800288e:	d012      	beq.n	80028b6 <HAL_ADC_IRQHandler+0x136>
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2280      	movs	r2, #128	; 0x80
 8002894:	4013      	ands	r3, r2
 8002896:	d00e      	beq.n	80028b6 <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800289c:	2280      	movs	r2, #128	; 0x80
 800289e:	0252      	lsls	r2, r2, #9
 80028a0:	431a      	orrs	r2, r3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	0018      	movs	r0, r3
 80028aa:	f000 f881 	bl	80029b0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2280      	movs	r2, #128	; 0x80
 80028b4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80028b6:	693a      	ldr	r2, [r7, #16]
 80028b8:	2380      	movs	r3, #128	; 0x80
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	4013      	ands	r3, r2
 80028be:	d014      	beq.n	80028ea <HAL_ADC_IRQHandler+0x16a>
 80028c0:	68fa      	ldr	r2, [r7, #12]
 80028c2:	2380      	movs	r3, #128	; 0x80
 80028c4:	005b      	lsls	r3, r3, #1
 80028c6:	4013      	ands	r3, r2
 80028c8:	d00f      	beq.n	80028ea <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ce:	2280      	movs	r2, #128	; 0x80
 80028d0:	0292      	lsls	r2, r2, #10
 80028d2:	431a      	orrs	r2, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	0018      	movs	r0, r3
 80028dc:	f000 fad6 	bl	8002e8c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	2280      	movs	r2, #128	; 0x80
 80028e6:	0052      	lsls	r2, r2, #1
 80028e8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80028ea:	693a      	ldr	r2, [r7, #16]
 80028ec:	2380      	movs	r3, #128	; 0x80
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	4013      	ands	r3, r2
 80028f2:	d014      	beq.n	800291e <HAL_ADC_IRQHandler+0x19e>
 80028f4:	68fa      	ldr	r2, [r7, #12]
 80028f6:	2380      	movs	r3, #128	; 0x80
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	4013      	ands	r3, r2
 80028fc:	d00f      	beq.n	800291e <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002902:	2280      	movs	r2, #128	; 0x80
 8002904:	02d2      	lsls	r2, r2, #11
 8002906:	431a      	orrs	r2, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	0018      	movs	r0, r3
 8002910:	f000 fac4 	bl	8002e9c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2280      	movs	r2, #128	; 0x80
 800291a:	0092      	lsls	r2, r2, #2
 800291c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	2210      	movs	r2, #16
 8002922:	4013      	ands	r3, r2
 8002924:	d02b      	beq.n	800297e <HAL_ADC_IRQHandler+0x1fe>
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2210      	movs	r2, #16
 800292a:	4013      	ands	r3, r2
 800292c:	d027      	beq.n	800297e <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002932:	2b00      	cmp	r3, #0
 8002934:	d102      	bne.n	800293c <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 8002936:	2301      	movs	r3, #1
 8002938:	617b      	str	r3, [r7, #20]
 800293a:	e008      	b.n	800294e <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	0018      	movs	r0, r3
 8002942:	f7ff fc58 	bl	80021f6 <LL_ADC_REG_GetDMATransfer>
 8002946:	1e03      	subs	r3, r0, #0
 8002948:	d001      	beq.n	800294e <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 800294a:	2301      	movs	r3, #1
 800294c:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	2b01      	cmp	r3, #1
 8002952:	d110      	bne.n	8002976 <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002958:	2280      	movs	r2, #128	; 0x80
 800295a:	00d2      	lsls	r2, r2, #3
 800295c:	431a      	orrs	r2, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002966:	2202      	movs	r2, #2
 8002968:	431a      	orrs	r2, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	0018      	movs	r0, r3
 8002972:	f000 f825 	bl	80029c0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	2210      	movs	r2, #16
 800297c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 800297e:	693a      	ldr	r2, [r7, #16]
 8002980:	2380      	movs	r3, #128	; 0x80
 8002982:	019b      	lsls	r3, r3, #6
 8002984:	4013      	ands	r3, r2
 8002986:	d00d      	beq.n	80029a4 <HAL_ADC_IRQHandler+0x224>
 8002988:	68fa      	ldr	r2, [r7, #12]
 800298a:	2380      	movs	r3, #128	; 0x80
 800298c:	019b      	lsls	r3, r3, #6
 800298e:	4013      	ands	r3, r2
 8002990:	d008      	beq.n	80029a4 <HAL_ADC_IRQHandler+0x224>
  {
    /* Channel configuration ready callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	0018      	movs	r0, r3
 8002996:	f000 fa91 	bl	8002ebc <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2280      	movs	r2, #128	; 0x80
 80029a0:	0192      	lsls	r2, r2, #6
 80029a2:	601a      	str	r2, [r3, #0]
  }
}
 80029a4:	46c0      	nop			; (mov r8, r8)
 80029a6:	46bd      	mov	sp, r7
 80029a8:	b006      	add	sp, #24
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	fffffefe 	.word	0xfffffefe

080029b0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80029b8:	46c0      	nop			; (mov r8, r8)
 80029ba:	46bd      	mov	sp, r7
 80029bc:	b002      	add	sp, #8
 80029be:	bd80      	pop	{r7, pc}

080029c0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b082      	sub	sp, #8
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80029c8:	46c0      	nop			; (mov r8, r8)
 80029ca:	46bd      	mov	sp, r7
 80029cc:	b002      	add	sp, #8
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b086      	sub	sp, #24
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029da:	2317      	movs	r3, #23
 80029dc:	18fb      	adds	r3, r7, r3
 80029de:	2200      	movs	r2, #0
 80029e0:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80029e2:	2300      	movs	r3, #0
 80029e4:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2254      	movs	r2, #84	; 0x54
 80029ea:	5c9b      	ldrb	r3, [r3, r2]
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d101      	bne.n	80029f4 <HAL_ADC_ConfigChannel+0x24>
 80029f0:	2302      	movs	r3, #2
 80029f2:	e1c0      	b.n	8002d76 <HAL_ADC_ConfigChannel+0x3a6>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2254      	movs	r2, #84	; 0x54
 80029f8:	2101      	movs	r1, #1
 80029fa:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	0018      	movs	r0, r3
 8002a02:	f7ff fc7f 	bl	8002304 <LL_ADC_REG_IsConversionOngoing>
 8002a06:	1e03      	subs	r3, r0, #0
 8002a08:	d000      	beq.n	8002a0c <HAL_ADC_ConfigChannel+0x3c>
 8002a0a:	e1a3      	b.n	8002d54 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d100      	bne.n	8002a16 <HAL_ADC_ConfigChannel+0x46>
 8002a14:	e143      	b.n	8002c9e <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	691a      	ldr	r2, [r3, #16]
 8002a1a:	2380      	movs	r3, #128	; 0x80
 8002a1c:	061b      	lsls	r3, r3, #24
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d004      	beq.n	8002a2c <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002a26:	4ac1      	ldr	r2, [pc, #772]	; (8002d2c <HAL_ADC_ConfigChannel+0x35c>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d108      	bne.n	8002a3e <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	0019      	movs	r1, r3
 8002a36:	0010      	movs	r0, r2
 8002a38:	f7ff fbba 	bl	80021b0 <LL_ADC_REG_SetSequencerChAdd>
 8002a3c:	e0c9      	b.n	8002bd2 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	211f      	movs	r1, #31
 8002a48:	400b      	ands	r3, r1
 8002a4a:	210f      	movs	r1, #15
 8002a4c:	4099      	lsls	r1, r3
 8002a4e:	000b      	movs	r3, r1
 8002a50:	43db      	mvns	r3, r3
 8002a52:	4013      	ands	r3, r2
 8002a54:	0019      	movs	r1, r3
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	035b      	lsls	r3, r3, #13
 8002a5c:	0b5b      	lsrs	r3, r3, #13
 8002a5e:	d105      	bne.n	8002a6c <HAL_ADC_ConfigChannel+0x9c>
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	0e9b      	lsrs	r3, r3, #26
 8002a66:	221f      	movs	r2, #31
 8002a68:	4013      	ands	r3, r2
 8002a6a:	e098      	b.n	8002b9e <HAL_ADC_ConfigChannel+0x1ce>
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	2201      	movs	r2, #1
 8002a72:	4013      	ands	r3, r2
 8002a74:	d000      	beq.n	8002a78 <HAL_ADC_ConfigChannel+0xa8>
 8002a76:	e091      	b.n	8002b9c <HAL_ADC_ConfigChannel+0x1cc>
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	2202      	movs	r2, #2
 8002a7e:	4013      	ands	r3, r2
 8002a80:	d000      	beq.n	8002a84 <HAL_ADC_ConfigChannel+0xb4>
 8002a82:	e089      	b.n	8002b98 <HAL_ADC_ConfigChannel+0x1c8>
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	2204      	movs	r2, #4
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	d000      	beq.n	8002a90 <HAL_ADC_ConfigChannel+0xc0>
 8002a8e:	e081      	b.n	8002b94 <HAL_ADC_ConfigChannel+0x1c4>
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2208      	movs	r2, #8
 8002a96:	4013      	ands	r3, r2
 8002a98:	d000      	beq.n	8002a9c <HAL_ADC_ConfigChannel+0xcc>
 8002a9a:	e079      	b.n	8002b90 <HAL_ADC_ConfigChannel+0x1c0>
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	2210      	movs	r2, #16
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	d000      	beq.n	8002aa8 <HAL_ADC_ConfigChannel+0xd8>
 8002aa6:	e071      	b.n	8002b8c <HAL_ADC_ConfigChannel+0x1bc>
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	2220      	movs	r2, #32
 8002aae:	4013      	ands	r3, r2
 8002ab0:	d000      	beq.n	8002ab4 <HAL_ADC_ConfigChannel+0xe4>
 8002ab2:	e069      	b.n	8002b88 <HAL_ADC_ConfigChannel+0x1b8>
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	2240      	movs	r2, #64	; 0x40
 8002aba:	4013      	ands	r3, r2
 8002abc:	d000      	beq.n	8002ac0 <HAL_ADC_ConfigChannel+0xf0>
 8002abe:	e061      	b.n	8002b84 <HAL_ADC_ConfigChannel+0x1b4>
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2280      	movs	r2, #128	; 0x80
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	d000      	beq.n	8002acc <HAL_ADC_ConfigChannel+0xfc>
 8002aca:	e059      	b.n	8002b80 <HAL_ADC_ConfigChannel+0x1b0>
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	2380      	movs	r3, #128	; 0x80
 8002ad2:	005b      	lsls	r3, r3, #1
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	d151      	bne.n	8002b7c <HAL_ADC_ConfigChannel+0x1ac>
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	2380      	movs	r3, #128	; 0x80
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	d149      	bne.n	8002b78 <HAL_ADC_ConfigChannel+0x1a8>
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	2380      	movs	r3, #128	; 0x80
 8002aea:	00db      	lsls	r3, r3, #3
 8002aec:	4013      	ands	r3, r2
 8002aee:	d141      	bne.n	8002b74 <HAL_ADC_ConfigChannel+0x1a4>
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	2380      	movs	r3, #128	; 0x80
 8002af6:	011b      	lsls	r3, r3, #4
 8002af8:	4013      	ands	r3, r2
 8002afa:	d139      	bne.n	8002b70 <HAL_ADC_ConfigChannel+0x1a0>
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	2380      	movs	r3, #128	; 0x80
 8002b02:	015b      	lsls	r3, r3, #5
 8002b04:	4013      	ands	r3, r2
 8002b06:	d131      	bne.n	8002b6c <HAL_ADC_ConfigChannel+0x19c>
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	2380      	movs	r3, #128	; 0x80
 8002b0e:	019b      	lsls	r3, r3, #6
 8002b10:	4013      	ands	r3, r2
 8002b12:	d129      	bne.n	8002b68 <HAL_ADC_ConfigChannel+0x198>
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	2380      	movs	r3, #128	; 0x80
 8002b1a:	01db      	lsls	r3, r3, #7
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	d121      	bne.n	8002b64 <HAL_ADC_ConfigChannel+0x194>
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	2380      	movs	r3, #128	; 0x80
 8002b26:	021b      	lsls	r3, r3, #8
 8002b28:	4013      	ands	r3, r2
 8002b2a:	d119      	bne.n	8002b60 <HAL_ADC_ConfigChannel+0x190>
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	2380      	movs	r3, #128	; 0x80
 8002b32:	025b      	lsls	r3, r3, #9
 8002b34:	4013      	ands	r3, r2
 8002b36:	d111      	bne.n	8002b5c <HAL_ADC_ConfigChannel+0x18c>
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	2380      	movs	r3, #128	; 0x80
 8002b3e:	029b      	lsls	r3, r3, #10
 8002b40:	4013      	ands	r3, r2
 8002b42:	d109      	bne.n	8002b58 <HAL_ADC_ConfigChannel+0x188>
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	2380      	movs	r3, #128	; 0x80
 8002b4a:	02db      	lsls	r3, r3, #11
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	d001      	beq.n	8002b54 <HAL_ADC_ConfigChannel+0x184>
 8002b50:	2312      	movs	r3, #18
 8002b52:	e024      	b.n	8002b9e <HAL_ADC_ConfigChannel+0x1ce>
 8002b54:	2300      	movs	r3, #0
 8002b56:	e022      	b.n	8002b9e <HAL_ADC_ConfigChannel+0x1ce>
 8002b58:	2311      	movs	r3, #17
 8002b5a:	e020      	b.n	8002b9e <HAL_ADC_ConfigChannel+0x1ce>
 8002b5c:	2310      	movs	r3, #16
 8002b5e:	e01e      	b.n	8002b9e <HAL_ADC_ConfigChannel+0x1ce>
 8002b60:	230f      	movs	r3, #15
 8002b62:	e01c      	b.n	8002b9e <HAL_ADC_ConfigChannel+0x1ce>
 8002b64:	230e      	movs	r3, #14
 8002b66:	e01a      	b.n	8002b9e <HAL_ADC_ConfigChannel+0x1ce>
 8002b68:	230d      	movs	r3, #13
 8002b6a:	e018      	b.n	8002b9e <HAL_ADC_ConfigChannel+0x1ce>
 8002b6c:	230c      	movs	r3, #12
 8002b6e:	e016      	b.n	8002b9e <HAL_ADC_ConfigChannel+0x1ce>
 8002b70:	230b      	movs	r3, #11
 8002b72:	e014      	b.n	8002b9e <HAL_ADC_ConfigChannel+0x1ce>
 8002b74:	230a      	movs	r3, #10
 8002b76:	e012      	b.n	8002b9e <HAL_ADC_ConfigChannel+0x1ce>
 8002b78:	2309      	movs	r3, #9
 8002b7a:	e010      	b.n	8002b9e <HAL_ADC_ConfigChannel+0x1ce>
 8002b7c:	2308      	movs	r3, #8
 8002b7e:	e00e      	b.n	8002b9e <HAL_ADC_ConfigChannel+0x1ce>
 8002b80:	2307      	movs	r3, #7
 8002b82:	e00c      	b.n	8002b9e <HAL_ADC_ConfigChannel+0x1ce>
 8002b84:	2306      	movs	r3, #6
 8002b86:	e00a      	b.n	8002b9e <HAL_ADC_ConfigChannel+0x1ce>
 8002b88:	2305      	movs	r3, #5
 8002b8a:	e008      	b.n	8002b9e <HAL_ADC_ConfigChannel+0x1ce>
 8002b8c:	2304      	movs	r3, #4
 8002b8e:	e006      	b.n	8002b9e <HAL_ADC_ConfigChannel+0x1ce>
 8002b90:	2303      	movs	r3, #3
 8002b92:	e004      	b.n	8002b9e <HAL_ADC_ConfigChannel+0x1ce>
 8002b94:	2302      	movs	r3, #2
 8002b96:	e002      	b.n	8002b9e <HAL_ADC_ConfigChannel+0x1ce>
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e000      	b.n	8002b9e <HAL_ADC_ConfigChannel+0x1ce>
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	683a      	ldr	r2, [r7, #0]
 8002ba0:	6852      	ldr	r2, [r2, #4]
 8002ba2:	201f      	movs	r0, #31
 8002ba4:	4002      	ands	r2, r0
 8002ba6:	4093      	lsls	r3, r2
 8002ba8:	000a      	movs	r2, r1
 8002baa:	431a      	orrs	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	089b      	lsrs	r3, r3, #2
 8002bb6:	1c5a      	adds	r2, r3, #1
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	69db      	ldr	r3, [r3, #28]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d808      	bhi.n	8002bd2 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6818      	ldr	r0, [r3, #0]
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	6859      	ldr	r1, [r3, #4]
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	001a      	movs	r2, r3
 8002bce:	f7ff facf 	bl	8002170 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6818      	ldr	r0, [r3, #0]
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	6819      	ldr	r1, [r3, #0]
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	001a      	movs	r2, r3
 8002be0:	f7ff fb16 	bl	8002210 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	db00      	blt.n	8002bee <HAL_ADC_ConfigChannel+0x21e>
 8002bec:	e0bc      	b.n	8002d68 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002bee:	4b50      	ldr	r3, [pc, #320]	; (8002d30 <HAL_ADC_ConfigChannel+0x360>)
 8002bf0:	0018      	movs	r0, r3
 8002bf2:	f7ff fa6b 	bl	80020cc <LL_ADC_GetCommonPathInternalCh>
 8002bf6:	0003      	movs	r3, r0
 8002bf8:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a4d      	ldr	r2, [pc, #308]	; (8002d34 <HAL_ADC_ConfigChannel+0x364>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d122      	bne.n	8002c4a <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002c04:	693a      	ldr	r2, [r7, #16]
 8002c06:	2380      	movs	r3, #128	; 0x80
 8002c08:	041b      	lsls	r3, r3, #16
 8002c0a:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002c0c:	d11d      	bne.n	8002c4a <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	2280      	movs	r2, #128	; 0x80
 8002c12:	0412      	lsls	r2, r2, #16
 8002c14:	4313      	orrs	r3, r2
 8002c16:	4a46      	ldr	r2, [pc, #280]	; (8002d30 <HAL_ADC_ConfigChannel+0x360>)
 8002c18:	0019      	movs	r1, r3
 8002c1a:	0010      	movs	r0, r2
 8002c1c:	f7ff fa42 	bl	80020a4 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c20:	4b45      	ldr	r3, [pc, #276]	; (8002d38 <HAL_ADC_ConfigChannel+0x368>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4945      	ldr	r1, [pc, #276]	; (8002d3c <HAL_ADC_ConfigChannel+0x36c>)
 8002c26:	0018      	movs	r0, r3
 8002c28:	f7fd fa6c 	bl	8000104 <__udivsi3>
 8002c2c:	0003      	movs	r3, r0
 8002c2e:	1c5a      	adds	r2, r3, #1
 8002c30:	0013      	movs	r3, r2
 8002c32:	005b      	lsls	r3, r3, #1
 8002c34:	189b      	adds	r3, r3, r2
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002c3a:	e002      	b.n	8002c42 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d1f9      	bne.n	8002c3c <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002c48:	e08e      	b.n	8002d68 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a3c      	ldr	r2, [pc, #240]	; (8002d40 <HAL_ADC_ConfigChannel+0x370>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d10e      	bne.n	8002c72 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002c54:	693a      	ldr	r2, [r7, #16]
 8002c56:	2380      	movs	r3, #128	; 0x80
 8002c58:	045b      	lsls	r3, r3, #17
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	d109      	bne.n	8002c72 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	2280      	movs	r2, #128	; 0x80
 8002c62:	0452      	lsls	r2, r2, #17
 8002c64:	4313      	orrs	r3, r2
 8002c66:	4a32      	ldr	r2, [pc, #200]	; (8002d30 <HAL_ADC_ConfigChannel+0x360>)
 8002c68:	0019      	movs	r1, r3
 8002c6a:	0010      	movs	r0, r2
 8002c6c:	f7ff fa1a 	bl	80020a4 <LL_ADC_SetCommonPathInternalCh>
 8002c70:	e07a      	b.n	8002d68 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a33      	ldr	r2, [pc, #204]	; (8002d44 <HAL_ADC_ConfigChannel+0x374>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d000      	beq.n	8002c7e <HAL_ADC_ConfigChannel+0x2ae>
 8002c7c:	e074      	b.n	8002d68 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002c7e:	693a      	ldr	r2, [r7, #16]
 8002c80:	2380      	movs	r3, #128	; 0x80
 8002c82:	03db      	lsls	r3, r3, #15
 8002c84:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002c86:	d000      	beq.n	8002c8a <HAL_ADC_ConfigChannel+0x2ba>
 8002c88:	e06e      	b.n	8002d68 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	2280      	movs	r2, #128	; 0x80
 8002c8e:	03d2      	lsls	r2, r2, #15
 8002c90:	4313      	orrs	r3, r2
 8002c92:	4a27      	ldr	r2, [pc, #156]	; (8002d30 <HAL_ADC_ConfigChannel+0x360>)
 8002c94:	0019      	movs	r1, r3
 8002c96:	0010      	movs	r0, r2
 8002c98:	f7ff fa04 	bl	80020a4 <LL_ADC_SetCommonPathInternalCh>
 8002c9c:	e064      	b.n	8002d68 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	691a      	ldr	r2, [r3, #16]
 8002ca2:	2380      	movs	r3, #128	; 0x80
 8002ca4:	061b      	lsls	r3, r3, #24
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d004      	beq.n	8002cb4 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002cae:	4a1f      	ldr	r2, [pc, #124]	; (8002d2c <HAL_ADC_ConfigChannel+0x35c>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d107      	bne.n	8002cc4 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	0019      	movs	r1, r3
 8002cbe:	0010      	movs	r0, r2
 8002cc0:	f7ff fa87 	bl	80021d2 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	da4d      	bge.n	8002d68 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ccc:	4b18      	ldr	r3, [pc, #96]	; (8002d30 <HAL_ADC_ConfigChannel+0x360>)
 8002cce:	0018      	movs	r0, r3
 8002cd0:	f7ff f9fc 	bl	80020cc <LL_ADC_GetCommonPathInternalCh>
 8002cd4:	0003      	movs	r3, r0
 8002cd6:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a15      	ldr	r2, [pc, #84]	; (8002d34 <HAL_ADC_ConfigChannel+0x364>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d108      	bne.n	8002cf4 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	4a18      	ldr	r2, [pc, #96]	; (8002d48 <HAL_ADC_ConfigChannel+0x378>)
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	4a11      	ldr	r2, [pc, #68]	; (8002d30 <HAL_ADC_ConfigChannel+0x360>)
 8002cea:	0019      	movs	r1, r3
 8002cec:	0010      	movs	r0, r2
 8002cee:	f7ff f9d9 	bl	80020a4 <LL_ADC_SetCommonPathInternalCh>
 8002cf2:	e039      	b.n	8002d68 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a11      	ldr	r2, [pc, #68]	; (8002d40 <HAL_ADC_ConfigChannel+0x370>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d108      	bne.n	8002d10 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	4a12      	ldr	r2, [pc, #72]	; (8002d4c <HAL_ADC_ConfigChannel+0x37c>)
 8002d02:	4013      	ands	r3, r2
 8002d04:	4a0a      	ldr	r2, [pc, #40]	; (8002d30 <HAL_ADC_ConfigChannel+0x360>)
 8002d06:	0019      	movs	r1, r3
 8002d08:	0010      	movs	r0, r2
 8002d0a:	f7ff f9cb 	bl	80020a4 <LL_ADC_SetCommonPathInternalCh>
 8002d0e:	e02b      	b.n	8002d68 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a0b      	ldr	r2, [pc, #44]	; (8002d44 <HAL_ADC_ConfigChannel+0x374>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d126      	bne.n	8002d68 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	4a0c      	ldr	r2, [pc, #48]	; (8002d50 <HAL_ADC_ConfigChannel+0x380>)
 8002d1e:	4013      	ands	r3, r2
 8002d20:	4a03      	ldr	r2, [pc, #12]	; (8002d30 <HAL_ADC_ConfigChannel+0x360>)
 8002d22:	0019      	movs	r1, r3
 8002d24:	0010      	movs	r0, r2
 8002d26:	f7ff f9bd 	bl	80020a4 <LL_ADC_SetCommonPathInternalCh>
 8002d2a:	e01d      	b.n	8002d68 <HAL_ADC_ConfigChannel+0x398>
 8002d2c:	80000004 	.word	0x80000004
 8002d30:	40012708 	.word	0x40012708
 8002d34:	b0001000 	.word	0xb0001000
 8002d38:	20000000 	.word	0x20000000
 8002d3c:	00030d40 	.word	0x00030d40
 8002d40:	b8004000 	.word	0xb8004000
 8002d44:	b4002000 	.word	0xb4002000
 8002d48:	ff7fffff 	.word	0xff7fffff
 8002d4c:	feffffff 	.word	0xfeffffff
 8002d50:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d58:	2220      	movs	r2, #32
 8002d5a:	431a      	orrs	r2, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002d60:	2317      	movs	r3, #23
 8002d62:	18fb      	adds	r3, r7, r3
 8002d64:	2201      	movs	r2, #1
 8002d66:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2254      	movs	r2, #84	; 0x54
 8002d6c:	2100      	movs	r1, #0
 8002d6e:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002d70:	2317      	movs	r3, #23
 8002d72:	18fb      	adds	r3, r7, r3
 8002d74:	781b      	ldrb	r3, [r3, #0]
}
 8002d76:	0018      	movs	r0, r3
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	b006      	add	sp, #24
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	46c0      	nop			; (mov r8, r8)

08002d80 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b084      	sub	sp, #16
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	0018      	movs	r0, r3
 8002d92:	f7ff fa93 	bl	80022bc <LL_ADC_IsEnabled>
 8002d96:	1e03      	subs	r3, r0, #0
 8002d98:	d000      	beq.n	8002d9c <ADC_Enable+0x1c>
 8002d9a:	e069      	b.n	8002e70 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	4a36      	ldr	r2, [pc, #216]	; (8002e7c <ADC_Enable+0xfc>)
 8002da4:	4013      	ands	r3, r2
 8002da6:	d00d      	beq.n	8002dc4 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dac:	2210      	movs	r2, #16
 8002dae:	431a      	orrs	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002db8:	2201      	movs	r2, #1
 8002dba:	431a      	orrs	r2, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e056      	b.n	8002e72 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	0018      	movs	r0, r3
 8002dca:	f7ff fa65 	bl	8002298 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8002dce:	4b2c      	ldr	r3, [pc, #176]	; (8002e80 <ADC_Enable+0x100>)
 8002dd0:	0018      	movs	r0, r3
 8002dd2:	f7ff f97b 	bl	80020cc <LL_ADC_GetCommonPathInternalCh>
 8002dd6:	0002      	movs	r2, r0
 8002dd8:	2380      	movs	r3, #128	; 0x80
 8002dda:	041b      	lsls	r3, r3, #16
 8002ddc:	4013      	ands	r3, r2
 8002dde:	d00f      	beq.n	8002e00 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002de0:	4b28      	ldr	r3, [pc, #160]	; (8002e84 <ADC_Enable+0x104>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4928      	ldr	r1, [pc, #160]	; (8002e88 <ADC_Enable+0x108>)
 8002de6:	0018      	movs	r0, r3
 8002de8:	f7fd f98c 	bl	8000104 <__udivsi3>
 8002dec:	0003      	movs	r3, r0
 8002dee:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8002df0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002df2:	e002      	b.n	8002dfa <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	3b01      	subs	r3, #1
 8002df8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d1f9      	bne.n	8002df4 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	7e5b      	ldrb	r3, [r3, #25]
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d033      	beq.n	8002e70 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8002e08:	f7ff f91e 	bl	8002048 <HAL_GetTick>
 8002e0c:	0003      	movs	r3, r0
 8002e0e:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e10:	e027      	b.n	8002e62 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	0018      	movs	r0, r3
 8002e18:	f7ff fa50 	bl	80022bc <LL_ADC_IsEnabled>
 8002e1c:	1e03      	subs	r3, r0, #0
 8002e1e:	d104      	bne.n	8002e2a <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	0018      	movs	r0, r3
 8002e26:	f7ff fa37 	bl	8002298 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002e2a:	f7ff f90d 	bl	8002048 <HAL_GetTick>
 8002e2e:	0002      	movs	r2, r0
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d914      	bls.n	8002e62 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	4013      	ands	r3, r2
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d00d      	beq.n	8002e62 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e4a:	2210      	movs	r2, #16
 8002e4c:	431a      	orrs	r2, r3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e56:	2201      	movs	r2, #1
 8002e58:	431a      	orrs	r2, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e007      	b.n	8002e72 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2201      	movs	r2, #1
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d1d0      	bne.n	8002e12 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002e70:	2300      	movs	r3, #0
}
 8002e72:	0018      	movs	r0, r3
 8002e74:	46bd      	mov	sp, r7
 8002e76:	b004      	add	sp, #16
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	46c0      	nop			; (mov r8, r8)
 8002e7c:	80000017 	.word	0x80000017
 8002e80:	40012708 	.word	0x40012708
 8002e84:	20000000 	.word	0x20000000
 8002e88:	00030d40 	.word	0x00030d40

08002e8c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002e94:	46c0      	nop			; (mov r8, r8)
 8002e96:	46bd      	mov	sp, r7
 8002e98:	b002      	add	sp, #8
 8002e9a:	bd80      	pop	{r7, pc}

08002e9c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002ea4:	46c0      	nop			; (mov r8, r8)
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	b002      	add	sp, #8
 8002eaa:	bd80      	pop	{r7, pc}

08002eac <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002eb4:	46c0      	nop			; (mov r8, r8)
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	b002      	add	sp, #8
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 8002ec4:	46c0      	nop			; (mov r8, r8)
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	b002      	add	sp, #8
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	0002      	movs	r2, r0
 8002ed4:	1dfb      	adds	r3, r7, #7
 8002ed6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002ed8:	1dfb      	adds	r3, r7, #7
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	2b7f      	cmp	r3, #127	; 0x7f
 8002ede:	d809      	bhi.n	8002ef4 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ee0:	1dfb      	adds	r3, r7, #7
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	001a      	movs	r2, r3
 8002ee6:	231f      	movs	r3, #31
 8002ee8:	401a      	ands	r2, r3
 8002eea:	4b04      	ldr	r3, [pc, #16]	; (8002efc <__NVIC_EnableIRQ+0x30>)
 8002eec:	2101      	movs	r1, #1
 8002eee:	4091      	lsls	r1, r2
 8002ef0:	000a      	movs	r2, r1
 8002ef2:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002ef4:	46c0      	nop			; (mov r8, r8)
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	b002      	add	sp, #8
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	e000e100 	.word	0xe000e100

08002f00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f00:	b590      	push	{r4, r7, lr}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	0002      	movs	r2, r0
 8002f08:	6039      	str	r1, [r7, #0]
 8002f0a:	1dfb      	adds	r3, r7, #7
 8002f0c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002f0e:	1dfb      	adds	r3, r7, #7
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	2b7f      	cmp	r3, #127	; 0x7f
 8002f14:	d828      	bhi.n	8002f68 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f16:	4a2f      	ldr	r2, [pc, #188]	; (8002fd4 <__NVIC_SetPriority+0xd4>)
 8002f18:	1dfb      	adds	r3, r7, #7
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	b25b      	sxtb	r3, r3
 8002f1e:	089b      	lsrs	r3, r3, #2
 8002f20:	33c0      	adds	r3, #192	; 0xc0
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	589b      	ldr	r3, [r3, r2]
 8002f26:	1dfa      	adds	r2, r7, #7
 8002f28:	7812      	ldrb	r2, [r2, #0]
 8002f2a:	0011      	movs	r1, r2
 8002f2c:	2203      	movs	r2, #3
 8002f2e:	400a      	ands	r2, r1
 8002f30:	00d2      	lsls	r2, r2, #3
 8002f32:	21ff      	movs	r1, #255	; 0xff
 8002f34:	4091      	lsls	r1, r2
 8002f36:	000a      	movs	r2, r1
 8002f38:	43d2      	mvns	r2, r2
 8002f3a:	401a      	ands	r2, r3
 8002f3c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	019b      	lsls	r3, r3, #6
 8002f42:	22ff      	movs	r2, #255	; 0xff
 8002f44:	401a      	ands	r2, r3
 8002f46:	1dfb      	adds	r3, r7, #7
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	0018      	movs	r0, r3
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	4003      	ands	r3, r0
 8002f50:	00db      	lsls	r3, r3, #3
 8002f52:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f54:	481f      	ldr	r0, [pc, #124]	; (8002fd4 <__NVIC_SetPriority+0xd4>)
 8002f56:	1dfb      	adds	r3, r7, #7
 8002f58:	781b      	ldrb	r3, [r3, #0]
 8002f5a:	b25b      	sxtb	r3, r3
 8002f5c:	089b      	lsrs	r3, r3, #2
 8002f5e:	430a      	orrs	r2, r1
 8002f60:	33c0      	adds	r3, #192	; 0xc0
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002f66:	e031      	b.n	8002fcc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f68:	4a1b      	ldr	r2, [pc, #108]	; (8002fd8 <__NVIC_SetPriority+0xd8>)
 8002f6a:	1dfb      	adds	r3, r7, #7
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	0019      	movs	r1, r3
 8002f70:	230f      	movs	r3, #15
 8002f72:	400b      	ands	r3, r1
 8002f74:	3b08      	subs	r3, #8
 8002f76:	089b      	lsrs	r3, r3, #2
 8002f78:	3306      	adds	r3, #6
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	18d3      	adds	r3, r2, r3
 8002f7e:	3304      	adds	r3, #4
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	1dfa      	adds	r2, r7, #7
 8002f84:	7812      	ldrb	r2, [r2, #0]
 8002f86:	0011      	movs	r1, r2
 8002f88:	2203      	movs	r2, #3
 8002f8a:	400a      	ands	r2, r1
 8002f8c:	00d2      	lsls	r2, r2, #3
 8002f8e:	21ff      	movs	r1, #255	; 0xff
 8002f90:	4091      	lsls	r1, r2
 8002f92:	000a      	movs	r2, r1
 8002f94:	43d2      	mvns	r2, r2
 8002f96:	401a      	ands	r2, r3
 8002f98:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	019b      	lsls	r3, r3, #6
 8002f9e:	22ff      	movs	r2, #255	; 0xff
 8002fa0:	401a      	ands	r2, r3
 8002fa2:	1dfb      	adds	r3, r7, #7
 8002fa4:	781b      	ldrb	r3, [r3, #0]
 8002fa6:	0018      	movs	r0, r3
 8002fa8:	2303      	movs	r3, #3
 8002faa:	4003      	ands	r3, r0
 8002fac:	00db      	lsls	r3, r3, #3
 8002fae:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002fb0:	4809      	ldr	r0, [pc, #36]	; (8002fd8 <__NVIC_SetPriority+0xd8>)
 8002fb2:	1dfb      	adds	r3, r7, #7
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	001c      	movs	r4, r3
 8002fb8:	230f      	movs	r3, #15
 8002fba:	4023      	ands	r3, r4
 8002fbc:	3b08      	subs	r3, #8
 8002fbe:	089b      	lsrs	r3, r3, #2
 8002fc0:	430a      	orrs	r2, r1
 8002fc2:	3306      	adds	r3, #6
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	18c3      	adds	r3, r0, r3
 8002fc8:	3304      	adds	r3, #4
 8002fca:	601a      	str	r2, [r3, #0]
}
 8002fcc:	46c0      	nop			; (mov r8, r8)
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	b003      	add	sp, #12
 8002fd2:	bd90      	pop	{r4, r7, pc}
 8002fd4:	e000e100 	.word	0xe000e100
 8002fd8:	e000ed00 	.word	0xe000ed00

08002fdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	1e5a      	subs	r2, r3, #1
 8002fe8:	2380      	movs	r3, #128	; 0x80
 8002fea:	045b      	lsls	r3, r3, #17
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d301      	bcc.n	8002ff4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e010      	b.n	8003016 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ff4:	4b0a      	ldr	r3, [pc, #40]	; (8003020 <SysTick_Config+0x44>)
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	3a01      	subs	r2, #1
 8002ffa:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	425b      	negs	r3, r3
 8003000:	2103      	movs	r1, #3
 8003002:	0018      	movs	r0, r3
 8003004:	f7ff ff7c 	bl	8002f00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003008:	4b05      	ldr	r3, [pc, #20]	; (8003020 <SysTick_Config+0x44>)
 800300a:	2200      	movs	r2, #0
 800300c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800300e:	4b04      	ldr	r3, [pc, #16]	; (8003020 <SysTick_Config+0x44>)
 8003010:	2207      	movs	r2, #7
 8003012:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003014:	2300      	movs	r3, #0
}
 8003016:	0018      	movs	r0, r3
 8003018:	46bd      	mov	sp, r7
 800301a:	b002      	add	sp, #8
 800301c:	bd80      	pop	{r7, pc}
 800301e:	46c0      	nop			; (mov r8, r8)
 8003020:	e000e010 	.word	0xe000e010

08003024 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af00      	add	r7, sp, #0
 800302a:	60b9      	str	r1, [r7, #8]
 800302c:	607a      	str	r2, [r7, #4]
 800302e:	210f      	movs	r1, #15
 8003030:	187b      	adds	r3, r7, r1
 8003032:	1c02      	adds	r2, r0, #0
 8003034:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8003036:	68ba      	ldr	r2, [r7, #8]
 8003038:	187b      	adds	r3, r7, r1
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	b25b      	sxtb	r3, r3
 800303e:	0011      	movs	r1, r2
 8003040:	0018      	movs	r0, r3
 8003042:	f7ff ff5d 	bl	8002f00 <__NVIC_SetPriority>
}
 8003046:	46c0      	nop			; (mov r8, r8)
 8003048:	46bd      	mov	sp, r7
 800304a:	b004      	add	sp, #16
 800304c:	bd80      	pop	{r7, pc}

0800304e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800304e:	b580      	push	{r7, lr}
 8003050:	b082      	sub	sp, #8
 8003052:	af00      	add	r7, sp, #0
 8003054:	0002      	movs	r2, r0
 8003056:	1dfb      	adds	r3, r7, #7
 8003058:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800305a:	1dfb      	adds	r3, r7, #7
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	b25b      	sxtb	r3, r3
 8003060:	0018      	movs	r0, r3
 8003062:	f7ff ff33 	bl	8002ecc <__NVIC_EnableIRQ>
}
 8003066:	46c0      	nop			; (mov r8, r8)
 8003068:	46bd      	mov	sp, r7
 800306a:	b002      	add	sp, #8
 800306c:	bd80      	pop	{r7, pc}

0800306e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800306e:	b580      	push	{r7, lr}
 8003070:	b082      	sub	sp, #8
 8003072:	af00      	add	r7, sp, #0
 8003074:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	0018      	movs	r0, r3
 800307a:	f7ff ffaf 	bl	8002fdc <SysTick_Config>
 800307e:	0003      	movs	r3, r0
}
 8003080:	0018      	movs	r0, r3
 8003082:	46bd      	mov	sp, r7
 8003084:	b002      	add	sp, #8
 8003086:	bd80      	pop	{r7, pc}

08003088 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b086      	sub	sp, #24
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003092:	2300      	movs	r3, #0
 8003094:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003096:	e147      	b.n	8003328 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2101      	movs	r1, #1
 800309e:	697a      	ldr	r2, [r7, #20]
 80030a0:	4091      	lsls	r1, r2
 80030a2:	000a      	movs	r2, r1
 80030a4:	4013      	ands	r3, r2
 80030a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d100      	bne.n	80030b0 <HAL_GPIO_Init+0x28>
 80030ae:	e138      	b.n	8003322 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	2203      	movs	r2, #3
 80030b6:	4013      	ands	r3, r2
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d005      	beq.n	80030c8 <HAL_GPIO_Init+0x40>
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	2203      	movs	r2, #3
 80030c2:	4013      	ands	r3, r2
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d130      	bne.n	800312a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	005b      	lsls	r3, r3, #1
 80030d2:	2203      	movs	r2, #3
 80030d4:	409a      	lsls	r2, r3
 80030d6:	0013      	movs	r3, r2
 80030d8:	43da      	mvns	r2, r3
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	4013      	ands	r3, r2
 80030de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	68da      	ldr	r2, [r3, #12]
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	005b      	lsls	r3, r3, #1
 80030e8:	409a      	lsls	r2, r3
 80030ea:	0013      	movs	r3, r2
 80030ec:	693a      	ldr	r2, [r7, #16]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	693a      	ldr	r2, [r7, #16]
 80030f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80030fe:	2201      	movs	r2, #1
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	409a      	lsls	r2, r3
 8003104:	0013      	movs	r3, r2
 8003106:	43da      	mvns	r2, r3
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	4013      	ands	r3, r2
 800310c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	091b      	lsrs	r3, r3, #4
 8003114:	2201      	movs	r2, #1
 8003116:	401a      	ands	r2, r3
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	409a      	lsls	r2, r3
 800311c:	0013      	movs	r3, r2
 800311e:	693a      	ldr	r2, [r7, #16]
 8003120:	4313      	orrs	r3, r2
 8003122:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	693a      	ldr	r2, [r7, #16]
 8003128:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	2203      	movs	r2, #3
 8003130:	4013      	ands	r3, r2
 8003132:	2b03      	cmp	r3, #3
 8003134:	d017      	beq.n	8003166 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	005b      	lsls	r3, r3, #1
 8003140:	2203      	movs	r2, #3
 8003142:	409a      	lsls	r2, r3
 8003144:	0013      	movs	r3, r2
 8003146:	43da      	mvns	r2, r3
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	4013      	ands	r3, r2
 800314c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	689a      	ldr	r2, [r3, #8]
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	005b      	lsls	r3, r3, #1
 8003156:	409a      	lsls	r2, r3
 8003158:	0013      	movs	r3, r2
 800315a:	693a      	ldr	r2, [r7, #16]
 800315c:	4313      	orrs	r3, r2
 800315e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	693a      	ldr	r2, [r7, #16]
 8003164:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	2203      	movs	r2, #3
 800316c:	4013      	ands	r3, r2
 800316e:	2b02      	cmp	r3, #2
 8003170:	d123      	bne.n	80031ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	08da      	lsrs	r2, r3, #3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	3208      	adds	r2, #8
 800317a:	0092      	lsls	r2, r2, #2
 800317c:	58d3      	ldr	r3, [r2, r3]
 800317e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	2207      	movs	r2, #7
 8003184:	4013      	ands	r3, r2
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	220f      	movs	r2, #15
 800318a:	409a      	lsls	r2, r3
 800318c:	0013      	movs	r3, r2
 800318e:	43da      	mvns	r2, r3
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	4013      	ands	r3, r2
 8003194:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	691a      	ldr	r2, [r3, #16]
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	2107      	movs	r1, #7
 800319e:	400b      	ands	r3, r1
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	409a      	lsls	r2, r3
 80031a4:	0013      	movs	r3, r2
 80031a6:	693a      	ldr	r2, [r7, #16]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	08da      	lsrs	r2, r3, #3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	3208      	adds	r2, #8
 80031b4:	0092      	lsls	r2, r2, #2
 80031b6:	6939      	ldr	r1, [r7, #16]
 80031b8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	005b      	lsls	r3, r3, #1
 80031c4:	2203      	movs	r2, #3
 80031c6:	409a      	lsls	r2, r3
 80031c8:	0013      	movs	r3, r2
 80031ca:	43da      	mvns	r2, r3
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	4013      	ands	r3, r2
 80031d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	2203      	movs	r2, #3
 80031d8:	401a      	ands	r2, r3
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	005b      	lsls	r3, r3, #1
 80031de:	409a      	lsls	r2, r3
 80031e0:	0013      	movs	r3, r2
 80031e2:	693a      	ldr	r2, [r7, #16]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	693a      	ldr	r2, [r7, #16]
 80031ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	685a      	ldr	r2, [r3, #4]
 80031f2:	23c0      	movs	r3, #192	; 0xc0
 80031f4:	029b      	lsls	r3, r3, #10
 80031f6:	4013      	ands	r3, r2
 80031f8:	d100      	bne.n	80031fc <HAL_GPIO_Init+0x174>
 80031fa:	e092      	b.n	8003322 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80031fc:	4a50      	ldr	r2, [pc, #320]	; (8003340 <HAL_GPIO_Init+0x2b8>)
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	089b      	lsrs	r3, r3, #2
 8003202:	3318      	adds	r3, #24
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	589b      	ldr	r3, [r3, r2]
 8003208:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	2203      	movs	r2, #3
 800320e:	4013      	ands	r3, r2
 8003210:	00db      	lsls	r3, r3, #3
 8003212:	220f      	movs	r2, #15
 8003214:	409a      	lsls	r2, r3
 8003216:	0013      	movs	r3, r2
 8003218:	43da      	mvns	r2, r3
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	4013      	ands	r3, r2
 800321e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	23a0      	movs	r3, #160	; 0xa0
 8003224:	05db      	lsls	r3, r3, #23
 8003226:	429a      	cmp	r2, r3
 8003228:	d013      	beq.n	8003252 <HAL_GPIO_Init+0x1ca>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4a45      	ldr	r2, [pc, #276]	; (8003344 <HAL_GPIO_Init+0x2bc>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d00d      	beq.n	800324e <HAL_GPIO_Init+0x1c6>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4a44      	ldr	r2, [pc, #272]	; (8003348 <HAL_GPIO_Init+0x2c0>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d007      	beq.n	800324a <HAL_GPIO_Init+0x1c2>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4a43      	ldr	r2, [pc, #268]	; (800334c <HAL_GPIO_Init+0x2c4>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d101      	bne.n	8003246 <HAL_GPIO_Init+0x1be>
 8003242:	2303      	movs	r3, #3
 8003244:	e006      	b.n	8003254 <HAL_GPIO_Init+0x1cc>
 8003246:	2305      	movs	r3, #5
 8003248:	e004      	b.n	8003254 <HAL_GPIO_Init+0x1cc>
 800324a:	2302      	movs	r3, #2
 800324c:	e002      	b.n	8003254 <HAL_GPIO_Init+0x1cc>
 800324e:	2301      	movs	r3, #1
 8003250:	e000      	b.n	8003254 <HAL_GPIO_Init+0x1cc>
 8003252:	2300      	movs	r3, #0
 8003254:	697a      	ldr	r2, [r7, #20]
 8003256:	2103      	movs	r1, #3
 8003258:	400a      	ands	r2, r1
 800325a:	00d2      	lsls	r2, r2, #3
 800325c:	4093      	lsls	r3, r2
 800325e:	693a      	ldr	r2, [r7, #16]
 8003260:	4313      	orrs	r3, r2
 8003262:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003264:	4936      	ldr	r1, [pc, #216]	; (8003340 <HAL_GPIO_Init+0x2b8>)
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	089b      	lsrs	r3, r3, #2
 800326a:	3318      	adds	r3, #24
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	693a      	ldr	r2, [r7, #16]
 8003270:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003272:	4b33      	ldr	r3, [pc, #204]	; (8003340 <HAL_GPIO_Init+0x2b8>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	43da      	mvns	r2, r3
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	4013      	ands	r3, r2
 8003280:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	685a      	ldr	r2, [r3, #4]
 8003286:	2380      	movs	r3, #128	; 0x80
 8003288:	035b      	lsls	r3, r3, #13
 800328a:	4013      	ands	r3, r2
 800328c:	d003      	beq.n	8003296 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800328e:	693a      	ldr	r2, [r7, #16]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	4313      	orrs	r3, r2
 8003294:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003296:	4b2a      	ldr	r3, [pc, #168]	; (8003340 <HAL_GPIO_Init+0x2b8>)
 8003298:	693a      	ldr	r2, [r7, #16]
 800329a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800329c:	4b28      	ldr	r3, [pc, #160]	; (8003340 <HAL_GPIO_Init+0x2b8>)
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	43da      	mvns	r2, r3
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	4013      	ands	r3, r2
 80032aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	685a      	ldr	r2, [r3, #4]
 80032b0:	2380      	movs	r3, #128	; 0x80
 80032b2:	039b      	lsls	r3, r3, #14
 80032b4:	4013      	ands	r3, r2
 80032b6:	d003      	beq.n	80032c0 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80032b8:	693a      	ldr	r2, [r7, #16]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	4313      	orrs	r3, r2
 80032be:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80032c0:	4b1f      	ldr	r3, [pc, #124]	; (8003340 <HAL_GPIO_Init+0x2b8>)
 80032c2:	693a      	ldr	r2, [r7, #16]
 80032c4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80032c6:	4a1e      	ldr	r2, [pc, #120]	; (8003340 <HAL_GPIO_Init+0x2b8>)
 80032c8:	2384      	movs	r3, #132	; 0x84
 80032ca:	58d3      	ldr	r3, [r2, r3]
 80032cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	43da      	mvns	r2, r3
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	4013      	ands	r3, r2
 80032d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	685a      	ldr	r2, [r3, #4]
 80032dc:	2380      	movs	r3, #128	; 0x80
 80032de:	029b      	lsls	r3, r3, #10
 80032e0:	4013      	ands	r3, r2
 80032e2:	d003      	beq.n	80032ec <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80032e4:	693a      	ldr	r2, [r7, #16]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80032ec:	4914      	ldr	r1, [pc, #80]	; (8003340 <HAL_GPIO_Init+0x2b8>)
 80032ee:	2284      	movs	r2, #132	; 0x84
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80032f4:	4a12      	ldr	r2, [pc, #72]	; (8003340 <HAL_GPIO_Init+0x2b8>)
 80032f6:	2380      	movs	r3, #128	; 0x80
 80032f8:	58d3      	ldr	r3, [r2, r3]
 80032fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	43da      	mvns	r2, r3
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	4013      	ands	r3, r2
 8003304:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	685a      	ldr	r2, [r3, #4]
 800330a:	2380      	movs	r3, #128	; 0x80
 800330c:	025b      	lsls	r3, r3, #9
 800330e:	4013      	ands	r3, r2
 8003310:	d003      	beq.n	800331a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8003312:	693a      	ldr	r2, [r7, #16]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	4313      	orrs	r3, r2
 8003318:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800331a:	4909      	ldr	r1, [pc, #36]	; (8003340 <HAL_GPIO_Init+0x2b8>)
 800331c:	2280      	movs	r2, #128	; 0x80
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	3301      	adds	r3, #1
 8003326:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	40da      	lsrs	r2, r3
 8003330:	1e13      	subs	r3, r2, #0
 8003332:	d000      	beq.n	8003336 <HAL_GPIO_Init+0x2ae>
 8003334:	e6b0      	b.n	8003098 <HAL_GPIO_Init+0x10>
  }
}
 8003336:	46c0      	nop			; (mov r8, r8)
 8003338:	46c0      	nop			; (mov r8, r8)
 800333a:	46bd      	mov	sp, r7
 800333c:	b006      	add	sp, #24
 800333e:	bd80      	pop	{r7, pc}
 8003340:	40021800 	.word	0x40021800
 8003344:	50000400 	.word	0x50000400
 8003348:	50000800 	.word	0x50000800
 800334c:	50000c00 	.word	0x50000c00

08003350 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	0008      	movs	r0, r1
 800335a:	0011      	movs	r1, r2
 800335c:	1cbb      	adds	r3, r7, #2
 800335e:	1c02      	adds	r2, r0, #0
 8003360:	801a      	strh	r2, [r3, #0]
 8003362:	1c7b      	adds	r3, r7, #1
 8003364:	1c0a      	adds	r2, r1, #0
 8003366:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003368:	1c7b      	adds	r3, r7, #1
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d004      	beq.n	800337a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003370:	1cbb      	adds	r3, r7, #2
 8003372:	881a      	ldrh	r2, [r3, #0]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003378:	e003      	b.n	8003382 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800337a:	1cbb      	adds	r3, r7, #2
 800337c:	881a      	ldrh	r2, [r3, #0]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003382:	46c0      	nop			; (mov r8, r8)
 8003384:	46bd      	mov	sp, r7
 8003386:	b002      	add	sp, #8
 8003388:	bd80      	pop	{r7, pc}
	...

0800338c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b084      	sub	sp, #16
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003394:	4b19      	ldr	r3, [pc, #100]	; (80033fc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a19      	ldr	r2, [pc, #100]	; (8003400 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800339a:	4013      	ands	r3, r2
 800339c:	0019      	movs	r1, r3
 800339e:	4b17      	ldr	r3, [pc, #92]	; (80033fc <HAL_PWREx_ControlVoltageScaling+0x70>)
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	430a      	orrs	r2, r1
 80033a4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	2380      	movs	r3, #128	; 0x80
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d11f      	bne.n	80033f0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80033b0:	4b14      	ldr	r3, [pc, #80]	; (8003404 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	0013      	movs	r3, r2
 80033b6:	005b      	lsls	r3, r3, #1
 80033b8:	189b      	adds	r3, r3, r2
 80033ba:	005b      	lsls	r3, r3, #1
 80033bc:	4912      	ldr	r1, [pc, #72]	; (8003408 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80033be:	0018      	movs	r0, r3
 80033c0:	f7fc fea0 	bl	8000104 <__udivsi3>
 80033c4:	0003      	movs	r3, r0
 80033c6:	3301      	adds	r3, #1
 80033c8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80033ca:	e008      	b.n	80033de <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d003      	beq.n	80033da <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	3b01      	subs	r3, #1
 80033d6:	60fb      	str	r3, [r7, #12]
 80033d8:	e001      	b.n	80033de <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e009      	b.n	80033f2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80033de:	4b07      	ldr	r3, [pc, #28]	; (80033fc <HAL_PWREx_ControlVoltageScaling+0x70>)
 80033e0:	695a      	ldr	r2, [r3, #20]
 80033e2:	2380      	movs	r3, #128	; 0x80
 80033e4:	00db      	lsls	r3, r3, #3
 80033e6:	401a      	ands	r2, r3
 80033e8:	2380      	movs	r3, #128	; 0x80
 80033ea:	00db      	lsls	r3, r3, #3
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d0ed      	beq.n	80033cc <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80033f0:	2300      	movs	r3, #0
}
 80033f2:	0018      	movs	r0, r3
 80033f4:	46bd      	mov	sp, r7
 80033f6:	b004      	add	sp, #16
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	46c0      	nop			; (mov r8, r8)
 80033fc:	40007000 	.word	0x40007000
 8003400:	fffff9ff 	.word	0xfffff9ff
 8003404:	20000000 	.word	0x20000000
 8003408:	000f4240 	.word	0x000f4240

0800340c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003410:	4b03      	ldr	r3, [pc, #12]	; (8003420 <LL_RCC_GetAPB1Prescaler+0x14>)
 8003412:	689a      	ldr	r2, [r3, #8]
 8003414:	23e0      	movs	r3, #224	; 0xe0
 8003416:	01db      	lsls	r3, r3, #7
 8003418:	4013      	ands	r3, r2
}
 800341a:	0018      	movs	r0, r3
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}
 8003420:	40021000 	.word	0x40021000

08003424 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b088      	sub	sp, #32
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d101      	bne.n	8003436 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e2fe      	b.n	8003a34 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	2201      	movs	r2, #1
 800343c:	4013      	ands	r3, r2
 800343e:	d100      	bne.n	8003442 <HAL_RCC_OscConfig+0x1e>
 8003440:	e07c      	b.n	800353c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003442:	4bc3      	ldr	r3, [pc, #780]	; (8003750 <HAL_RCC_OscConfig+0x32c>)
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	2238      	movs	r2, #56	; 0x38
 8003448:	4013      	ands	r3, r2
 800344a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800344c:	4bc0      	ldr	r3, [pc, #768]	; (8003750 <HAL_RCC_OscConfig+0x32c>)
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	2203      	movs	r2, #3
 8003452:	4013      	ands	r3, r2
 8003454:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003456:	69bb      	ldr	r3, [r7, #24]
 8003458:	2b10      	cmp	r3, #16
 800345a:	d102      	bne.n	8003462 <HAL_RCC_OscConfig+0x3e>
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	2b03      	cmp	r3, #3
 8003460:	d002      	beq.n	8003468 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	2b08      	cmp	r3, #8
 8003466:	d10b      	bne.n	8003480 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003468:	4bb9      	ldr	r3, [pc, #740]	; (8003750 <HAL_RCC_OscConfig+0x32c>)
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	2380      	movs	r3, #128	; 0x80
 800346e:	029b      	lsls	r3, r3, #10
 8003470:	4013      	ands	r3, r2
 8003472:	d062      	beq.n	800353a <HAL_RCC_OscConfig+0x116>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d15e      	bne.n	800353a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e2d9      	b.n	8003a34 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	685a      	ldr	r2, [r3, #4]
 8003484:	2380      	movs	r3, #128	; 0x80
 8003486:	025b      	lsls	r3, r3, #9
 8003488:	429a      	cmp	r2, r3
 800348a:	d107      	bne.n	800349c <HAL_RCC_OscConfig+0x78>
 800348c:	4bb0      	ldr	r3, [pc, #704]	; (8003750 <HAL_RCC_OscConfig+0x32c>)
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	4baf      	ldr	r3, [pc, #700]	; (8003750 <HAL_RCC_OscConfig+0x32c>)
 8003492:	2180      	movs	r1, #128	; 0x80
 8003494:	0249      	lsls	r1, r1, #9
 8003496:	430a      	orrs	r2, r1
 8003498:	601a      	str	r2, [r3, #0]
 800349a:	e020      	b.n	80034de <HAL_RCC_OscConfig+0xba>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	685a      	ldr	r2, [r3, #4]
 80034a0:	23a0      	movs	r3, #160	; 0xa0
 80034a2:	02db      	lsls	r3, r3, #11
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d10e      	bne.n	80034c6 <HAL_RCC_OscConfig+0xa2>
 80034a8:	4ba9      	ldr	r3, [pc, #676]	; (8003750 <HAL_RCC_OscConfig+0x32c>)
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	4ba8      	ldr	r3, [pc, #672]	; (8003750 <HAL_RCC_OscConfig+0x32c>)
 80034ae:	2180      	movs	r1, #128	; 0x80
 80034b0:	02c9      	lsls	r1, r1, #11
 80034b2:	430a      	orrs	r2, r1
 80034b4:	601a      	str	r2, [r3, #0]
 80034b6:	4ba6      	ldr	r3, [pc, #664]	; (8003750 <HAL_RCC_OscConfig+0x32c>)
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	4ba5      	ldr	r3, [pc, #660]	; (8003750 <HAL_RCC_OscConfig+0x32c>)
 80034bc:	2180      	movs	r1, #128	; 0x80
 80034be:	0249      	lsls	r1, r1, #9
 80034c0:	430a      	orrs	r2, r1
 80034c2:	601a      	str	r2, [r3, #0]
 80034c4:	e00b      	b.n	80034de <HAL_RCC_OscConfig+0xba>
 80034c6:	4ba2      	ldr	r3, [pc, #648]	; (8003750 <HAL_RCC_OscConfig+0x32c>)
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	4ba1      	ldr	r3, [pc, #644]	; (8003750 <HAL_RCC_OscConfig+0x32c>)
 80034cc:	49a1      	ldr	r1, [pc, #644]	; (8003754 <HAL_RCC_OscConfig+0x330>)
 80034ce:	400a      	ands	r2, r1
 80034d0:	601a      	str	r2, [r3, #0]
 80034d2:	4b9f      	ldr	r3, [pc, #636]	; (8003750 <HAL_RCC_OscConfig+0x32c>)
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	4b9e      	ldr	r3, [pc, #632]	; (8003750 <HAL_RCC_OscConfig+0x32c>)
 80034d8:	499f      	ldr	r1, [pc, #636]	; (8003758 <HAL_RCC_OscConfig+0x334>)
 80034da:	400a      	ands	r2, r1
 80034dc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d014      	beq.n	8003510 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e6:	f7fe fdaf 	bl	8002048 <HAL_GetTick>
 80034ea:	0003      	movs	r3, r0
 80034ec:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034ee:	e008      	b.n	8003502 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034f0:	f7fe fdaa 	bl	8002048 <HAL_GetTick>
 80034f4:	0002      	movs	r2, r0
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	2b64      	cmp	r3, #100	; 0x64
 80034fc:	d901      	bls.n	8003502 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e298      	b.n	8003a34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003502:	4b93      	ldr	r3, [pc, #588]	; (8003750 <HAL_RCC_OscConfig+0x32c>)
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	2380      	movs	r3, #128	; 0x80
 8003508:	029b      	lsls	r3, r3, #10
 800350a:	4013      	ands	r3, r2
 800350c:	d0f0      	beq.n	80034f0 <HAL_RCC_OscConfig+0xcc>
 800350e:	e015      	b.n	800353c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003510:	f7fe fd9a 	bl	8002048 <HAL_GetTick>
 8003514:	0003      	movs	r3, r0
 8003516:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003518:	e008      	b.n	800352c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800351a:	f7fe fd95 	bl	8002048 <HAL_GetTick>
 800351e:	0002      	movs	r2, r0
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	2b64      	cmp	r3, #100	; 0x64
 8003526:	d901      	bls.n	800352c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003528:	2303      	movs	r3, #3
 800352a:	e283      	b.n	8003a34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800352c:	4b88      	ldr	r3, [pc, #544]	; (8003750 <HAL_RCC_OscConfig+0x32c>)
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	2380      	movs	r3, #128	; 0x80
 8003532:	029b      	lsls	r3, r3, #10
 8003534:	4013      	ands	r3, r2
 8003536:	d1f0      	bne.n	800351a <HAL_RCC_OscConfig+0xf6>
 8003538:	e000      	b.n	800353c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800353a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2202      	movs	r2, #2
 8003542:	4013      	ands	r3, r2
 8003544:	d100      	bne.n	8003548 <HAL_RCC_OscConfig+0x124>
 8003546:	e099      	b.n	800367c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003548:	4b81      	ldr	r3, [pc, #516]	; (8003750 <HAL_RCC_OscConfig+0x32c>)
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	2238      	movs	r2, #56	; 0x38
 800354e:	4013      	ands	r3, r2
 8003550:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003552:	4b7f      	ldr	r3, [pc, #508]	; (8003750 <HAL_RCC_OscConfig+0x32c>)
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	2203      	movs	r2, #3
 8003558:	4013      	ands	r3, r2
 800355a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	2b10      	cmp	r3, #16
 8003560:	d102      	bne.n	8003568 <HAL_RCC_OscConfig+0x144>
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	2b02      	cmp	r3, #2
 8003566:	d002      	beq.n	800356e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d135      	bne.n	80035da <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800356e:	4b78      	ldr	r3, [pc, #480]	; (8003750 <HAL_RCC_OscConfig+0x32c>)
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	2380      	movs	r3, #128	; 0x80
 8003574:	00db      	lsls	r3, r3, #3
 8003576:	4013      	ands	r3, r2
 8003578:	d005      	beq.n	8003586 <HAL_RCC_OscConfig+0x162>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d101      	bne.n	8003586 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e256      	b.n	8003a34 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003586:	4b72      	ldr	r3, [pc, #456]	; (8003750 <HAL_RCC_OscConfig+0x32c>)
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	4a74      	ldr	r2, [pc, #464]	; (800375c <HAL_RCC_OscConfig+0x338>)
 800358c:	4013      	ands	r3, r2
 800358e:	0019      	movs	r1, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	695b      	ldr	r3, [r3, #20]
 8003594:	021a      	lsls	r2, r3, #8
 8003596:	4b6e      	ldr	r3, [pc, #440]	; (8003750 <HAL_RCC_OscConfig+0x32c>)
 8003598:	430a      	orrs	r2, r1
 800359a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800359c:	69bb      	ldr	r3, [r7, #24]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d112      	bne.n	80035c8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80035a2:	4b6b      	ldr	r3, [pc, #428]	; (8003750 <HAL_RCC_OscConfig+0x32c>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a6e      	ldr	r2, [pc, #440]	; (8003760 <HAL_RCC_OscConfig+0x33c>)
 80035a8:	4013      	ands	r3, r2
 80035aa:	0019      	movs	r1, r3
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	691a      	ldr	r2, [r3, #16]
 80035b0:	4b67      	ldr	r3, [pc, #412]	; (8003750 <HAL_RCC_OscConfig+0x32c>)
 80035b2:	430a      	orrs	r2, r1
 80035b4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80035b6:	4b66      	ldr	r3, [pc, #408]	; (8003750 <HAL_RCC_OscConfig+0x32c>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	0adb      	lsrs	r3, r3, #11
 80035bc:	2207      	movs	r2, #7
 80035be:	4013      	ands	r3, r2
 80035c0:	4a68      	ldr	r2, [pc, #416]	; (8003764 <HAL_RCC_OscConfig+0x340>)
 80035c2:	40da      	lsrs	r2, r3
 80035c4:	4b68      	ldr	r3, [pc, #416]	; (8003768 <HAL_RCC_OscConfig+0x344>)
 80035c6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80035c8:	4b68      	ldr	r3, [pc, #416]	; (800376c <HAL_RCC_OscConfig+0x348>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	0018      	movs	r0, r3
 80035ce:	f7fe fcdf 	bl	8001f90 <HAL_InitTick>
 80035d2:	1e03      	subs	r3, r0, #0
 80035d4:	d051      	beq.n	800367a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e22c      	b.n	8003a34 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d030      	beq.n	8003644 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80035e2:	4b5b      	ldr	r3, [pc, #364]	; (8003750 <HAL_RCC_OscConfig+0x32c>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a5e      	ldr	r2, [pc, #376]	; (8003760 <HAL_RCC_OscConfig+0x33c>)
 80035e8:	4013      	ands	r3, r2
 80035ea:	0019      	movs	r1, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	691a      	ldr	r2, [r3, #16]
 80035f0:	4b57      	ldr	r3, [pc, #348]	; (8003750 <HAL_RCC_OscConfig+0x32c>)
 80035f2:	430a      	orrs	r2, r1
 80035f4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80035f6:	4b56      	ldr	r3, [pc, #344]	; (8003750 <HAL_RCC_OscConfig+0x32c>)
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	4b55      	ldr	r3, [pc, #340]	; (8003750 <HAL_RCC_OscConfig+0x32c>)
 80035fc:	2180      	movs	r1, #128	; 0x80
 80035fe:	0049      	lsls	r1, r1, #1
 8003600:	430a      	orrs	r2, r1
 8003602:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003604:	f7fe fd20 	bl	8002048 <HAL_GetTick>
 8003608:	0003      	movs	r3, r0
 800360a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800360c:	e008      	b.n	8003620 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800360e:	f7fe fd1b 	bl	8002048 <HAL_GetTick>
 8003612:	0002      	movs	r2, r0
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	2b02      	cmp	r3, #2
 800361a:	d901      	bls.n	8003620 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800361c:	2303      	movs	r3, #3
 800361e:	e209      	b.n	8003a34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003620:	4b4b      	ldr	r3, [pc, #300]	; (8003750 <HAL_RCC_OscConfig+0x32c>)
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	2380      	movs	r3, #128	; 0x80
 8003626:	00db      	lsls	r3, r3, #3
 8003628:	4013      	ands	r3, r2
 800362a:	d0f0      	beq.n	800360e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800362c:	4b48      	ldr	r3, [pc, #288]	; (8003750 <HAL_RCC_OscConfig+0x32c>)
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	4a4a      	ldr	r2, [pc, #296]	; (800375c <HAL_RCC_OscConfig+0x338>)
 8003632:	4013      	ands	r3, r2
 8003634:	0019      	movs	r1, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	695b      	ldr	r3, [r3, #20]
 800363a:	021a      	lsls	r2, r3, #8
 800363c:	4b44      	ldr	r3, [pc, #272]	; (8003750 <HAL_RCC_OscConfig+0x32c>)
 800363e:	430a      	orrs	r2, r1
 8003640:	605a      	str	r2, [r3, #4]
 8003642:	e01b      	b.n	800367c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003644:	4b42      	ldr	r3, [pc, #264]	; (8003750 <HAL_RCC_OscConfig+0x32c>)
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	4b41      	ldr	r3, [pc, #260]	; (8003750 <HAL_RCC_OscConfig+0x32c>)
 800364a:	4949      	ldr	r1, [pc, #292]	; (8003770 <HAL_RCC_OscConfig+0x34c>)
 800364c:	400a      	ands	r2, r1
 800364e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003650:	f7fe fcfa 	bl	8002048 <HAL_GetTick>
 8003654:	0003      	movs	r3, r0
 8003656:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003658:	e008      	b.n	800366c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800365a:	f7fe fcf5 	bl	8002048 <HAL_GetTick>
 800365e:	0002      	movs	r2, r0
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	2b02      	cmp	r3, #2
 8003666:	d901      	bls.n	800366c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	e1e3      	b.n	8003a34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800366c:	4b38      	ldr	r3, [pc, #224]	; (8003750 <HAL_RCC_OscConfig+0x32c>)
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	2380      	movs	r3, #128	; 0x80
 8003672:	00db      	lsls	r3, r3, #3
 8003674:	4013      	ands	r3, r2
 8003676:	d1f0      	bne.n	800365a <HAL_RCC_OscConfig+0x236>
 8003678:	e000      	b.n	800367c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800367a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2208      	movs	r2, #8
 8003682:	4013      	ands	r3, r2
 8003684:	d047      	beq.n	8003716 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003686:	4b32      	ldr	r3, [pc, #200]	; (8003750 <HAL_RCC_OscConfig+0x32c>)
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	2238      	movs	r2, #56	; 0x38
 800368c:	4013      	ands	r3, r2
 800368e:	2b18      	cmp	r3, #24
 8003690:	d10a      	bne.n	80036a8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003692:	4b2f      	ldr	r3, [pc, #188]	; (8003750 <HAL_RCC_OscConfig+0x32c>)
 8003694:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003696:	2202      	movs	r2, #2
 8003698:	4013      	ands	r3, r2
 800369a:	d03c      	beq.n	8003716 <HAL_RCC_OscConfig+0x2f2>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	699b      	ldr	r3, [r3, #24]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d138      	bne.n	8003716 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e1c5      	b.n	8003a34 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	699b      	ldr	r3, [r3, #24]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d019      	beq.n	80036e4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80036b0:	4b27      	ldr	r3, [pc, #156]	; (8003750 <HAL_RCC_OscConfig+0x32c>)
 80036b2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80036b4:	4b26      	ldr	r3, [pc, #152]	; (8003750 <HAL_RCC_OscConfig+0x32c>)
 80036b6:	2101      	movs	r1, #1
 80036b8:	430a      	orrs	r2, r1
 80036ba:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036bc:	f7fe fcc4 	bl	8002048 <HAL_GetTick>
 80036c0:	0003      	movs	r3, r0
 80036c2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80036c4:	e008      	b.n	80036d8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036c6:	f7fe fcbf 	bl	8002048 <HAL_GetTick>
 80036ca:	0002      	movs	r2, r0
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d901      	bls.n	80036d8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80036d4:	2303      	movs	r3, #3
 80036d6:	e1ad      	b.n	8003a34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80036d8:	4b1d      	ldr	r3, [pc, #116]	; (8003750 <HAL_RCC_OscConfig+0x32c>)
 80036da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036dc:	2202      	movs	r2, #2
 80036de:	4013      	ands	r3, r2
 80036e0:	d0f1      	beq.n	80036c6 <HAL_RCC_OscConfig+0x2a2>
 80036e2:	e018      	b.n	8003716 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80036e4:	4b1a      	ldr	r3, [pc, #104]	; (8003750 <HAL_RCC_OscConfig+0x32c>)
 80036e6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80036e8:	4b19      	ldr	r3, [pc, #100]	; (8003750 <HAL_RCC_OscConfig+0x32c>)
 80036ea:	2101      	movs	r1, #1
 80036ec:	438a      	bics	r2, r1
 80036ee:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036f0:	f7fe fcaa 	bl	8002048 <HAL_GetTick>
 80036f4:	0003      	movs	r3, r0
 80036f6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80036f8:	e008      	b.n	800370c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036fa:	f7fe fca5 	bl	8002048 <HAL_GetTick>
 80036fe:	0002      	movs	r2, r0
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	2b02      	cmp	r3, #2
 8003706:	d901      	bls.n	800370c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	e193      	b.n	8003a34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800370c:	4b10      	ldr	r3, [pc, #64]	; (8003750 <HAL_RCC_OscConfig+0x32c>)
 800370e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003710:	2202      	movs	r2, #2
 8003712:	4013      	ands	r3, r2
 8003714:	d1f1      	bne.n	80036fa <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	2204      	movs	r2, #4
 800371c:	4013      	ands	r3, r2
 800371e:	d100      	bne.n	8003722 <HAL_RCC_OscConfig+0x2fe>
 8003720:	e0c6      	b.n	80038b0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003722:	231f      	movs	r3, #31
 8003724:	18fb      	adds	r3, r7, r3
 8003726:	2200      	movs	r2, #0
 8003728:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800372a:	4b09      	ldr	r3, [pc, #36]	; (8003750 <HAL_RCC_OscConfig+0x32c>)
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	2238      	movs	r2, #56	; 0x38
 8003730:	4013      	ands	r3, r2
 8003732:	2b20      	cmp	r3, #32
 8003734:	d11e      	bne.n	8003774 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003736:	4b06      	ldr	r3, [pc, #24]	; (8003750 <HAL_RCC_OscConfig+0x32c>)
 8003738:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800373a:	2202      	movs	r2, #2
 800373c:	4013      	ands	r3, r2
 800373e:	d100      	bne.n	8003742 <HAL_RCC_OscConfig+0x31e>
 8003740:	e0b6      	b.n	80038b0 <HAL_RCC_OscConfig+0x48c>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d000      	beq.n	800374c <HAL_RCC_OscConfig+0x328>
 800374a:	e0b1      	b.n	80038b0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e171      	b.n	8003a34 <HAL_RCC_OscConfig+0x610>
 8003750:	40021000 	.word	0x40021000
 8003754:	fffeffff 	.word	0xfffeffff
 8003758:	fffbffff 	.word	0xfffbffff
 800375c:	ffff80ff 	.word	0xffff80ff
 8003760:	ffffc7ff 	.word	0xffffc7ff
 8003764:	00f42400 	.word	0x00f42400
 8003768:	20000000 	.word	0x20000000
 800376c:	20000004 	.word	0x20000004
 8003770:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003774:	4bb1      	ldr	r3, [pc, #708]	; (8003a3c <HAL_RCC_OscConfig+0x618>)
 8003776:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003778:	2380      	movs	r3, #128	; 0x80
 800377a:	055b      	lsls	r3, r3, #21
 800377c:	4013      	ands	r3, r2
 800377e:	d101      	bne.n	8003784 <HAL_RCC_OscConfig+0x360>
 8003780:	2301      	movs	r3, #1
 8003782:	e000      	b.n	8003786 <HAL_RCC_OscConfig+0x362>
 8003784:	2300      	movs	r3, #0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d011      	beq.n	80037ae <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800378a:	4bac      	ldr	r3, [pc, #688]	; (8003a3c <HAL_RCC_OscConfig+0x618>)
 800378c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800378e:	4bab      	ldr	r3, [pc, #684]	; (8003a3c <HAL_RCC_OscConfig+0x618>)
 8003790:	2180      	movs	r1, #128	; 0x80
 8003792:	0549      	lsls	r1, r1, #21
 8003794:	430a      	orrs	r2, r1
 8003796:	63da      	str	r2, [r3, #60]	; 0x3c
 8003798:	4ba8      	ldr	r3, [pc, #672]	; (8003a3c <HAL_RCC_OscConfig+0x618>)
 800379a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800379c:	2380      	movs	r3, #128	; 0x80
 800379e:	055b      	lsls	r3, r3, #21
 80037a0:	4013      	ands	r3, r2
 80037a2:	60fb      	str	r3, [r7, #12]
 80037a4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80037a6:	231f      	movs	r3, #31
 80037a8:	18fb      	adds	r3, r7, r3
 80037aa:	2201      	movs	r2, #1
 80037ac:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037ae:	4ba4      	ldr	r3, [pc, #656]	; (8003a40 <HAL_RCC_OscConfig+0x61c>)
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	2380      	movs	r3, #128	; 0x80
 80037b4:	005b      	lsls	r3, r3, #1
 80037b6:	4013      	ands	r3, r2
 80037b8:	d11a      	bne.n	80037f0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037ba:	4ba1      	ldr	r3, [pc, #644]	; (8003a40 <HAL_RCC_OscConfig+0x61c>)
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	4ba0      	ldr	r3, [pc, #640]	; (8003a40 <HAL_RCC_OscConfig+0x61c>)
 80037c0:	2180      	movs	r1, #128	; 0x80
 80037c2:	0049      	lsls	r1, r1, #1
 80037c4:	430a      	orrs	r2, r1
 80037c6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80037c8:	f7fe fc3e 	bl	8002048 <HAL_GetTick>
 80037cc:	0003      	movs	r3, r0
 80037ce:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037d0:	e008      	b.n	80037e4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037d2:	f7fe fc39 	bl	8002048 <HAL_GetTick>
 80037d6:	0002      	movs	r2, r0
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d901      	bls.n	80037e4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80037e0:	2303      	movs	r3, #3
 80037e2:	e127      	b.n	8003a34 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037e4:	4b96      	ldr	r3, [pc, #600]	; (8003a40 <HAL_RCC_OscConfig+0x61c>)
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	2380      	movs	r3, #128	; 0x80
 80037ea:	005b      	lsls	r3, r3, #1
 80037ec:	4013      	ands	r3, r2
 80037ee:	d0f0      	beq.n	80037d2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d106      	bne.n	8003806 <HAL_RCC_OscConfig+0x3e2>
 80037f8:	4b90      	ldr	r3, [pc, #576]	; (8003a3c <HAL_RCC_OscConfig+0x618>)
 80037fa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80037fc:	4b8f      	ldr	r3, [pc, #572]	; (8003a3c <HAL_RCC_OscConfig+0x618>)
 80037fe:	2101      	movs	r1, #1
 8003800:	430a      	orrs	r2, r1
 8003802:	65da      	str	r2, [r3, #92]	; 0x5c
 8003804:	e01c      	b.n	8003840 <HAL_RCC_OscConfig+0x41c>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	2b05      	cmp	r3, #5
 800380c:	d10c      	bne.n	8003828 <HAL_RCC_OscConfig+0x404>
 800380e:	4b8b      	ldr	r3, [pc, #556]	; (8003a3c <HAL_RCC_OscConfig+0x618>)
 8003810:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003812:	4b8a      	ldr	r3, [pc, #552]	; (8003a3c <HAL_RCC_OscConfig+0x618>)
 8003814:	2104      	movs	r1, #4
 8003816:	430a      	orrs	r2, r1
 8003818:	65da      	str	r2, [r3, #92]	; 0x5c
 800381a:	4b88      	ldr	r3, [pc, #544]	; (8003a3c <HAL_RCC_OscConfig+0x618>)
 800381c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800381e:	4b87      	ldr	r3, [pc, #540]	; (8003a3c <HAL_RCC_OscConfig+0x618>)
 8003820:	2101      	movs	r1, #1
 8003822:	430a      	orrs	r2, r1
 8003824:	65da      	str	r2, [r3, #92]	; 0x5c
 8003826:	e00b      	b.n	8003840 <HAL_RCC_OscConfig+0x41c>
 8003828:	4b84      	ldr	r3, [pc, #528]	; (8003a3c <HAL_RCC_OscConfig+0x618>)
 800382a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800382c:	4b83      	ldr	r3, [pc, #524]	; (8003a3c <HAL_RCC_OscConfig+0x618>)
 800382e:	2101      	movs	r1, #1
 8003830:	438a      	bics	r2, r1
 8003832:	65da      	str	r2, [r3, #92]	; 0x5c
 8003834:	4b81      	ldr	r3, [pc, #516]	; (8003a3c <HAL_RCC_OscConfig+0x618>)
 8003836:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003838:	4b80      	ldr	r3, [pc, #512]	; (8003a3c <HAL_RCC_OscConfig+0x618>)
 800383a:	2104      	movs	r1, #4
 800383c:	438a      	bics	r2, r1
 800383e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d014      	beq.n	8003872 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003848:	f7fe fbfe 	bl	8002048 <HAL_GetTick>
 800384c:	0003      	movs	r3, r0
 800384e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003850:	e009      	b.n	8003866 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003852:	f7fe fbf9 	bl	8002048 <HAL_GetTick>
 8003856:	0002      	movs	r2, r0
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	1ad3      	subs	r3, r2, r3
 800385c:	4a79      	ldr	r2, [pc, #484]	; (8003a44 <HAL_RCC_OscConfig+0x620>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d901      	bls.n	8003866 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e0e6      	b.n	8003a34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003866:	4b75      	ldr	r3, [pc, #468]	; (8003a3c <HAL_RCC_OscConfig+0x618>)
 8003868:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800386a:	2202      	movs	r2, #2
 800386c:	4013      	ands	r3, r2
 800386e:	d0f0      	beq.n	8003852 <HAL_RCC_OscConfig+0x42e>
 8003870:	e013      	b.n	800389a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003872:	f7fe fbe9 	bl	8002048 <HAL_GetTick>
 8003876:	0003      	movs	r3, r0
 8003878:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800387a:	e009      	b.n	8003890 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800387c:	f7fe fbe4 	bl	8002048 <HAL_GetTick>
 8003880:	0002      	movs	r2, r0
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	4a6f      	ldr	r2, [pc, #444]	; (8003a44 <HAL_RCC_OscConfig+0x620>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d901      	bls.n	8003890 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800388c:	2303      	movs	r3, #3
 800388e:	e0d1      	b.n	8003a34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003890:	4b6a      	ldr	r3, [pc, #424]	; (8003a3c <HAL_RCC_OscConfig+0x618>)
 8003892:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003894:	2202      	movs	r2, #2
 8003896:	4013      	ands	r3, r2
 8003898:	d1f0      	bne.n	800387c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800389a:	231f      	movs	r3, #31
 800389c:	18fb      	adds	r3, r7, r3
 800389e:	781b      	ldrb	r3, [r3, #0]
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d105      	bne.n	80038b0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80038a4:	4b65      	ldr	r3, [pc, #404]	; (8003a3c <HAL_RCC_OscConfig+0x618>)
 80038a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038a8:	4b64      	ldr	r3, [pc, #400]	; (8003a3c <HAL_RCC_OscConfig+0x618>)
 80038aa:	4967      	ldr	r1, [pc, #412]	; (8003a48 <HAL_RCC_OscConfig+0x624>)
 80038ac:	400a      	ands	r2, r1
 80038ae:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	69db      	ldr	r3, [r3, #28]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d100      	bne.n	80038ba <HAL_RCC_OscConfig+0x496>
 80038b8:	e0bb      	b.n	8003a32 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038ba:	4b60      	ldr	r3, [pc, #384]	; (8003a3c <HAL_RCC_OscConfig+0x618>)
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	2238      	movs	r2, #56	; 0x38
 80038c0:	4013      	ands	r3, r2
 80038c2:	2b10      	cmp	r3, #16
 80038c4:	d100      	bne.n	80038c8 <HAL_RCC_OscConfig+0x4a4>
 80038c6:	e07b      	b.n	80039c0 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	69db      	ldr	r3, [r3, #28]
 80038cc:	2b02      	cmp	r3, #2
 80038ce:	d156      	bne.n	800397e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038d0:	4b5a      	ldr	r3, [pc, #360]	; (8003a3c <HAL_RCC_OscConfig+0x618>)
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	4b59      	ldr	r3, [pc, #356]	; (8003a3c <HAL_RCC_OscConfig+0x618>)
 80038d6:	495d      	ldr	r1, [pc, #372]	; (8003a4c <HAL_RCC_OscConfig+0x628>)
 80038d8:	400a      	ands	r2, r1
 80038da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038dc:	f7fe fbb4 	bl	8002048 <HAL_GetTick>
 80038e0:	0003      	movs	r3, r0
 80038e2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038e4:	e008      	b.n	80038f8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038e6:	f7fe fbaf 	bl	8002048 <HAL_GetTick>
 80038ea:	0002      	movs	r2, r0
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	d901      	bls.n	80038f8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80038f4:	2303      	movs	r3, #3
 80038f6:	e09d      	b.n	8003a34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038f8:	4b50      	ldr	r3, [pc, #320]	; (8003a3c <HAL_RCC_OscConfig+0x618>)
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	2380      	movs	r3, #128	; 0x80
 80038fe:	049b      	lsls	r3, r3, #18
 8003900:	4013      	ands	r3, r2
 8003902:	d1f0      	bne.n	80038e6 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003904:	4b4d      	ldr	r3, [pc, #308]	; (8003a3c <HAL_RCC_OscConfig+0x618>)
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	4a51      	ldr	r2, [pc, #324]	; (8003a50 <HAL_RCC_OscConfig+0x62c>)
 800390a:	4013      	ands	r3, r2
 800390c:	0019      	movs	r1, r3
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6a1a      	ldr	r2, [r3, #32]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003916:	431a      	orrs	r2, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800391c:	021b      	lsls	r3, r3, #8
 800391e:	431a      	orrs	r2, r3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003924:	431a      	orrs	r2, r3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800392a:	431a      	orrs	r2, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003930:	431a      	orrs	r2, r3
 8003932:	4b42      	ldr	r3, [pc, #264]	; (8003a3c <HAL_RCC_OscConfig+0x618>)
 8003934:	430a      	orrs	r2, r1
 8003936:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003938:	4b40      	ldr	r3, [pc, #256]	; (8003a3c <HAL_RCC_OscConfig+0x618>)
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	4b3f      	ldr	r3, [pc, #252]	; (8003a3c <HAL_RCC_OscConfig+0x618>)
 800393e:	2180      	movs	r1, #128	; 0x80
 8003940:	0449      	lsls	r1, r1, #17
 8003942:	430a      	orrs	r2, r1
 8003944:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003946:	4b3d      	ldr	r3, [pc, #244]	; (8003a3c <HAL_RCC_OscConfig+0x618>)
 8003948:	68da      	ldr	r2, [r3, #12]
 800394a:	4b3c      	ldr	r3, [pc, #240]	; (8003a3c <HAL_RCC_OscConfig+0x618>)
 800394c:	2180      	movs	r1, #128	; 0x80
 800394e:	0549      	lsls	r1, r1, #21
 8003950:	430a      	orrs	r2, r1
 8003952:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003954:	f7fe fb78 	bl	8002048 <HAL_GetTick>
 8003958:	0003      	movs	r3, r0
 800395a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800395c:	e008      	b.n	8003970 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800395e:	f7fe fb73 	bl	8002048 <HAL_GetTick>
 8003962:	0002      	movs	r2, r0
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	2b02      	cmp	r3, #2
 800396a:	d901      	bls.n	8003970 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 800396c:	2303      	movs	r3, #3
 800396e:	e061      	b.n	8003a34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003970:	4b32      	ldr	r3, [pc, #200]	; (8003a3c <HAL_RCC_OscConfig+0x618>)
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	2380      	movs	r3, #128	; 0x80
 8003976:	049b      	lsls	r3, r3, #18
 8003978:	4013      	ands	r3, r2
 800397a:	d0f0      	beq.n	800395e <HAL_RCC_OscConfig+0x53a>
 800397c:	e059      	b.n	8003a32 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800397e:	4b2f      	ldr	r3, [pc, #188]	; (8003a3c <HAL_RCC_OscConfig+0x618>)
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	4b2e      	ldr	r3, [pc, #184]	; (8003a3c <HAL_RCC_OscConfig+0x618>)
 8003984:	4931      	ldr	r1, [pc, #196]	; (8003a4c <HAL_RCC_OscConfig+0x628>)
 8003986:	400a      	ands	r2, r1
 8003988:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800398a:	f7fe fb5d 	bl	8002048 <HAL_GetTick>
 800398e:	0003      	movs	r3, r0
 8003990:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003992:	e008      	b.n	80039a6 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003994:	f7fe fb58 	bl	8002048 <HAL_GetTick>
 8003998:	0002      	movs	r2, r0
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d901      	bls.n	80039a6 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	e046      	b.n	8003a34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039a6:	4b25      	ldr	r3, [pc, #148]	; (8003a3c <HAL_RCC_OscConfig+0x618>)
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	2380      	movs	r3, #128	; 0x80
 80039ac:	049b      	lsls	r3, r3, #18
 80039ae:	4013      	ands	r3, r2
 80039b0:	d1f0      	bne.n	8003994 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80039b2:	4b22      	ldr	r3, [pc, #136]	; (8003a3c <HAL_RCC_OscConfig+0x618>)
 80039b4:	68da      	ldr	r2, [r3, #12]
 80039b6:	4b21      	ldr	r3, [pc, #132]	; (8003a3c <HAL_RCC_OscConfig+0x618>)
 80039b8:	4926      	ldr	r1, [pc, #152]	; (8003a54 <HAL_RCC_OscConfig+0x630>)
 80039ba:	400a      	ands	r2, r1
 80039bc:	60da      	str	r2, [r3, #12]
 80039be:	e038      	b.n	8003a32 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	69db      	ldr	r3, [r3, #28]
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d101      	bne.n	80039cc <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e033      	b.n	8003a34 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80039cc:	4b1b      	ldr	r3, [pc, #108]	; (8003a3c <HAL_RCC_OscConfig+0x618>)
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	2203      	movs	r2, #3
 80039d6:	401a      	ands	r2, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6a1b      	ldr	r3, [r3, #32]
 80039dc:	429a      	cmp	r2, r3
 80039de:	d126      	bne.n	8003a2e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	2270      	movs	r2, #112	; 0x70
 80039e4:	401a      	ands	r2, r3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d11f      	bne.n	8003a2e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039ee:	697a      	ldr	r2, [r7, #20]
 80039f0:	23fe      	movs	r3, #254	; 0xfe
 80039f2:	01db      	lsls	r3, r3, #7
 80039f4:	401a      	ands	r2, r3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039fa:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d116      	bne.n	8003a2e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003a00:	697a      	ldr	r2, [r7, #20]
 8003a02:	23f8      	movs	r3, #248	; 0xf8
 8003a04:	039b      	lsls	r3, r3, #14
 8003a06:	401a      	ands	r2, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d10e      	bne.n	8003a2e <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003a10:	697a      	ldr	r2, [r7, #20]
 8003a12:	23e0      	movs	r3, #224	; 0xe0
 8003a14:	051b      	lsls	r3, r3, #20
 8003a16:	401a      	ands	r2, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d106      	bne.n	8003a2e <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	0f5b      	lsrs	r3, r3, #29
 8003a24:	075a      	lsls	r2, r3, #29
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d001      	beq.n	8003a32 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e000      	b.n	8003a34 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8003a32:	2300      	movs	r3, #0
}
 8003a34:	0018      	movs	r0, r3
 8003a36:	46bd      	mov	sp, r7
 8003a38:	b008      	add	sp, #32
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	40021000 	.word	0x40021000
 8003a40:	40007000 	.word	0x40007000
 8003a44:	00001388 	.word	0x00001388
 8003a48:	efffffff 	.word	0xefffffff
 8003a4c:	feffffff 	.word	0xfeffffff
 8003a50:	11c1808c 	.word	0x11c1808c
 8003a54:	eefefffc 	.word	0xeefefffc

08003a58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b084      	sub	sp, #16
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d101      	bne.n	8003a6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e0e9      	b.n	8003c40 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a6c:	4b76      	ldr	r3, [pc, #472]	; (8003c48 <HAL_RCC_ClockConfig+0x1f0>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	2207      	movs	r2, #7
 8003a72:	4013      	ands	r3, r2
 8003a74:	683a      	ldr	r2, [r7, #0]
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d91e      	bls.n	8003ab8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a7a:	4b73      	ldr	r3, [pc, #460]	; (8003c48 <HAL_RCC_ClockConfig+0x1f0>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	2207      	movs	r2, #7
 8003a80:	4393      	bics	r3, r2
 8003a82:	0019      	movs	r1, r3
 8003a84:	4b70      	ldr	r3, [pc, #448]	; (8003c48 <HAL_RCC_ClockConfig+0x1f0>)
 8003a86:	683a      	ldr	r2, [r7, #0]
 8003a88:	430a      	orrs	r2, r1
 8003a8a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003a8c:	f7fe fadc 	bl	8002048 <HAL_GetTick>
 8003a90:	0003      	movs	r3, r0
 8003a92:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003a94:	e009      	b.n	8003aaa <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a96:	f7fe fad7 	bl	8002048 <HAL_GetTick>
 8003a9a:	0002      	movs	r2, r0
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	4a6a      	ldr	r2, [pc, #424]	; (8003c4c <HAL_RCC_ClockConfig+0x1f4>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d901      	bls.n	8003aaa <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e0ca      	b.n	8003c40 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003aaa:	4b67      	ldr	r3, [pc, #412]	; (8003c48 <HAL_RCC_ClockConfig+0x1f0>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	2207      	movs	r2, #7
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	683a      	ldr	r2, [r7, #0]
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d1ee      	bne.n	8003a96 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	2202      	movs	r2, #2
 8003abe:	4013      	ands	r3, r2
 8003ac0:	d015      	beq.n	8003aee <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	2204      	movs	r2, #4
 8003ac8:	4013      	ands	r3, r2
 8003aca:	d006      	beq.n	8003ada <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003acc:	4b60      	ldr	r3, [pc, #384]	; (8003c50 <HAL_RCC_ClockConfig+0x1f8>)
 8003ace:	689a      	ldr	r2, [r3, #8]
 8003ad0:	4b5f      	ldr	r3, [pc, #380]	; (8003c50 <HAL_RCC_ClockConfig+0x1f8>)
 8003ad2:	21e0      	movs	r1, #224	; 0xe0
 8003ad4:	01c9      	lsls	r1, r1, #7
 8003ad6:	430a      	orrs	r2, r1
 8003ad8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ada:	4b5d      	ldr	r3, [pc, #372]	; (8003c50 <HAL_RCC_ClockConfig+0x1f8>)
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	4a5d      	ldr	r2, [pc, #372]	; (8003c54 <HAL_RCC_ClockConfig+0x1fc>)
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	0019      	movs	r1, r3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	689a      	ldr	r2, [r3, #8]
 8003ae8:	4b59      	ldr	r3, [pc, #356]	; (8003c50 <HAL_RCC_ClockConfig+0x1f8>)
 8003aea:	430a      	orrs	r2, r1
 8003aec:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	2201      	movs	r2, #1
 8003af4:	4013      	ands	r3, r2
 8003af6:	d057      	beq.n	8003ba8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d107      	bne.n	8003b10 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b00:	4b53      	ldr	r3, [pc, #332]	; (8003c50 <HAL_RCC_ClockConfig+0x1f8>)
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	2380      	movs	r3, #128	; 0x80
 8003b06:	029b      	lsls	r3, r3, #10
 8003b08:	4013      	ands	r3, r2
 8003b0a:	d12b      	bne.n	8003b64 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e097      	b.n	8003c40 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	2b02      	cmp	r3, #2
 8003b16:	d107      	bne.n	8003b28 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b18:	4b4d      	ldr	r3, [pc, #308]	; (8003c50 <HAL_RCC_ClockConfig+0x1f8>)
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	2380      	movs	r3, #128	; 0x80
 8003b1e:	049b      	lsls	r3, r3, #18
 8003b20:	4013      	ands	r3, r2
 8003b22:	d11f      	bne.n	8003b64 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e08b      	b.n	8003c40 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d107      	bne.n	8003b40 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b30:	4b47      	ldr	r3, [pc, #284]	; (8003c50 <HAL_RCC_ClockConfig+0x1f8>)
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	2380      	movs	r3, #128	; 0x80
 8003b36:	00db      	lsls	r3, r3, #3
 8003b38:	4013      	ands	r3, r2
 8003b3a:	d113      	bne.n	8003b64 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e07f      	b.n	8003c40 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	2b03      	cmp	r3, #3
 8003b46:	d106      	bne.n	8003b56 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b48:	4b41      	ldr	r3, [pc, #260]	; (8003c50 <HAL_RCC_ClockConfig+0x1f8>)
 8003b4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b4c:	2202      	movs	r2, #2
 8003b4e:	4013      	ands	r3, r2
 8003b50:	d108      	bne.n	8003b64 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e074      	b.n	8003c40 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b56:	4b3e      	ldr	r3, [pc, #248]	; (8003c50 <HAL_RCC_ClockConfig+0x1f8>)
 8003b58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b5a:	2202      	movs	r2, #2
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	d101      	bne.n	8003b64 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e06d      	b.n	8003c40 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b64:	4b3a      	ldr	r3, [pc, #232]	; (8003c50 <HAL_RCC_ClockConfig+0x1f8>)
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	2207      	movs	r2, #7
 8003b6a:	4393      	bics	r3, r2
 8003b6c:	0019      	movs	r1, r3
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	685a      	ldr	r2, [r3, #4]
 8003b72:	4b37      	ldr	r3, [pc, #220]	; (8003c50 <HAL_RCC_ClockConfig+0x1f8>)
 8003b74:	430a      	orrs	r2, r1
 8003b76:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b78:	f7fe fa66 	bl	8002048 <HAL_GetTick>
 8003b7c:	0003      	movs	r3, r0
 8003b7e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b80:	e009      	b.n	8003b96 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b82:	f7fe fa61 	bl	8002048 <HAL_GetTick>
 8003b86:	0002      	movs	r2, r0
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	4a2f      	ldr	r2, [pc, #188]	; (8003c4c <HAL_RCC_ClockConfig+0x1f4>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d901      	bls.n	8003b96 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e054      	b.n	8003c40 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b96:	4b2e      	ldr	r3, [pc, #184]	; (8003c50 <HAL_RCC_ClockConfig+0x1f8>)
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	2238      	movs	r2, #56	; 0x38
 8003b9c:	401a      	ands	r2, r3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	00db      	lsls	r3, r3, #3
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d1ec      	bne.n	8003b82 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ba8:	4b27      	ldr	r3, [pc, #156]	; (8003c48 <HAL_RCC_ClockConfig+0x1f0>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	2207      	movs	r2, #7
 8003bae:	4013      	ands	r3, r2
 8003bb0:	683a      	ldr	r2, [r7, #0]
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d21e      	bcs.n	8003bf4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bb6:	4b24      	ldr	r3, [pc, #144]	; (8003c48 <HAL_RCC_ClockConfig+0x1f0>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	2207      	movs	r2, #7
 8003bbc:	4393      	bics	r3, r2
 8003bbe:	0019      	movs	r1, r3
 8003bc0:	4b21      	ldr	r3, [pc, #132]	; (8003c48 <HAL_RCC_ClockConfig+0x1f0>)
 8003bc2:	683a      	ldr	r2, [r7, #0]
 8003bc4:	430a      	orrs	r2, r1
 8003bc6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003bc8:	f7fe fa3e 	bl	8002048 <HAL_GetTick>
 8003bcc:	0003      	movs	r3, r0
 8003bce:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003bd0:	e009      	b.n	8003be6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bd2:	f7fe fa39 	bl	8002048 <HAL_GetTick>
 8003bd6:	0002      	movs	r2, r0
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	4a1b      	ldr	r2, [pc, #108]	; (8003c4c <HAL_RCC_ClockConfig+0x1f4>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d901      	bls.n	8003be6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e02c      	b.n	8003c40 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003be6:	4b18      	ldr	r3, [pc, #96]	; (8003c48 <HAL_RCC_ClockConfig+0x1f0>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	2207      	movs	r2, #7
 8003bec:	4013      	ands	r3, r2
 8003bee:	683a      	ldr	r2, [r7, #0]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d1ee      	bne.n	8003bd2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2204      	movs	r2, #4
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	d009      	beq.n	8003c12 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003bfe:	4b14      	ldr	r3, [pc, #80]	; (8003c50 <HAL_RCC_ClockConfig+0x1f8>)
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	4a15      	ldr	r2, [pc, #84]	; (8003c58 <HAL_RCC_ClockConfig+0x200>)
 8003c04:	4013      	ands	r3, r2
 8003c06:	0019      	movs	r1, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	68da      	ldr	r2, [r3, #12]
 8003c0c:	4b10      	ldr	r3, [pc, #64]	; (8003c50 <HAL_RCC_ClockConfig+0x1f8>)
 8003c0e:	430a      	orrs	r2, r1
 8003c10:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003c12:	f000 f829 	bl	8003c68 <HAL_RCC_GetSysClockFreq>
 8003c16:	0001      	movs	r1, r0
 8003c18:	4b0d      	ldr	r3, [pc, #52]	; (8003c50 <HAL_RCC_ClockConfig+0x1f8>)
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	0a1b      	lsrs	r3, r3, #8
 8003c1e:	220f      	movs	r2, #15
 8003c20:	401a      	ands	r2, r3
 8003c22:	4b0e      	ldr	r3, [pc, #56]	; (8003c5c <HAL_RCC_ClockConfig+0x204>)
 8003c24:	0092      	lsls	r2, r2, #2
 8003c26:	58d3      	ldr	r3, [r2, r3]
 8003c28:	221f      	movs	r2, #31
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	000a      	movs	r2, r1
 8003c2e:	40da      	lsrs	r2, r3
 8003c30:	4b0b      	ldr	r3, [pc, #44]	; (8003c60 <HAL_RCC_ClockConfig+0x208>)
 8003c32:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003c34:	4b0b      	ldr	r3, [pc, #44]	; (8003c64 <HAL_RCC_ClockConfig+0x20c>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	0018      	movs	r0, r3
 8003c3a:	f7fe f9a9 	bl	8001f90 <HAL_InitTick>
 8003c3e:	0003      	movs	r3, r0
}
 8003c40:	0018      	movs	r0, r3
 8003c42:	46bd      	mov	sp, r7
 8003c44:	b004      	add	sp, #16
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	40022000 	.word	0x40022000
 8003c4c:	00001388 	.word	0x00001388
 8003c50:	40021000 	.word	0x40021000
 8003c54:	fffff0ff 	.word	0xfffff0ff
 8003c58:	ffff8fff 	.word	0xffff8fff
 8003c5c:	08004dfc 	.word	0x08004dfc
 8003c60:	20000000 	.word	0x20000000
 8003c64:	20000004 	.word	0x20000004

08003c68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b086      	sub	sp, #24
 8003c6c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c6e:	4b3c      	ldr	r3, [pc, #240]	; (8003d60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	2238      	movs	r2, #56	; 0x38
 8003c74:	4013      	ands	r3, r2
 8003c76:	d10f      	bne.n	8003c98 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003c78:	4b39      	ldr	r3, [pc, #228]	; (8003d60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	0adb      	lsrs	r3, r3, #11
 8003c7e:	2207      	movs	r2, #7
 8003c80:	4013      	ands	r3, r2
 8003c82:	2201      	movs	r2, #1
 8003c84:	409a      	lsls	r2, r3
 8003c86:	0013      	movs	r3, r2
 8003c88:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003c8a:	6839      	ldr	r1, [r7, #0]
 8003c8c:	4835      	ldr	r0, [pc, #212]	; (8003d64 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003c8e:	f7fc fa39 	bl	8000104 <__udivsi3>
 8003c92:	0003      	movs	r3, r0
 8003c94:	613b      	str	r3, [r7, #16]
 8003c96:	e05d      	b.n	8003d54 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c98:	4b31      	ldr	r3, [pc, #196]	; (8003d60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	2238      	movs	r2, #56	; 0x38
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	2b08      	cmp	r3, #8
 8003ca2:	d102      	bne.n	8003caa <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003ca4:	4b30      	ldr	r3, [pc, #192]	; (8003d68 <HAL_RCC_GetSysClockFreq+0x100>)
 8003ca6:	613b      	str	r3, [r7, #16]
 8003ca8:	e054      	b.n	8003d54 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003caa:	4b2d      	ldr	r3, [pc, #180]	; (8003d60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	2238      	movs	r2, #56	; 0x38
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	2b10      	cmp	r3, #16
 8003cb4:	d138      	bne.n	8003d28 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003cb6:	4b2a      	ldr	r3, [pc, #168]	; (8003d60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	2203      	movs	r2, #3
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003cc0:	4b27      	ldr	r3, [pc, #156]	; (8003d60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	091b      	lsrs	r3, r3, #4
 8003cc6:	2207      	movs	r2, #7
 8003cc8:	4013      	ands	r3, r2
 8003cca:	3301      	adds	r3, #1
 8003ccc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2b03      	cmp	r3, #3
 8003cd2:	d10d      	bne.n	8003cf0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003cd4:	68b9      	ldr	r1, [r7, #8]
 8003cd6:	4824      	ldr	r0, [pc, #144]	; (8003d68 <HAL_RCC_GetSysClockFreq+0x100>)
 8003cd8:	f7fc fa14 	bl	8000104 <__udivsi3>
 8003cdc:	0003      	movs	r3, r0
 8003cde:	0019      	movs	r1, r3
 8003ce0:	4b1f      	ldr	r3, [pc, #124]	; (8003d60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	0a1b      	lsrs	r3, r3, #8
 8003ce6:	227f      	movs	r2, #127	; 0x7f
 8003ce8:	4013      	ands	r3, r2
 8003cea:	434b      	muls	r3, r1
 8003cec:	617b      	str	r3, [r7, #20]
        break;
 8003cee:	e00d      	b.n	8003d0c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003cf0:	68b9      	ldr	r1, [r7, #8]
 8003cf2:	481c      	ldr	r0, [pc, #112]	; (8003d64 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003cf4:	f7fc fa06 	bl	8000104 <__udivsi3>
 8003cf8:	0003      	movs	r3, r0
 8003cfa:	0019      	movs	r1, r3
 8003cfc:	4b18      	ldr	r3, [pc, #96]	; (8003d60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	0a1b      	lsrs	r3, r3, #8
 8003d02:	227f      	movs	r2, #127	; 0x7f
 8003d04:	4013      	ands	r3, r2
 8003d06:	434b      	muls	r3, r1
 8003d08:	617b      	str	r3, [r7, #20]
        break;
 8003d0a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003d0c:	4b14      	ldr	r3, [pc, #80]	; (8003d60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	0f5b      	lsrs	r3, r3, #29
 8003d12:	2207      	movs	r2, #7
 8003d14:	4013      	ands	r3, r2
 8003d16:	3301      	adds	r3, #1
 8003d18:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003d1a:	6879      	ldr	r1, [r7, #4]
 8003d1c:	6978      	ldr	r0, [r7, #20]
 8003d1e:	f7fc f9f1 	bl	8000104 <__udivsi3>
 8003d22:	0003      	movs	r3, r0
 8003d24:	613b      	str	r3, [r7, #16]
 8003d26:	e015      	b.n	8003d54 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003d28:	4b0d      	ldr	r3, [pc, #52]	; (8003d60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	2238      	movs	r2, #56	; 0x38
 8003d2e:	4013      	ands	r3, r2
 8003d30:	2b20      	cmp	r3, #32
 8003d32:	d103      	bne.n	8003d3c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003d34:	2380      	movs	r3, #128	; 0x80
 8003d36:	021b      	lsls	r3, r3, #8
 8003d38:	613b      	str	r3, [r7, #16]
 8003d3a:	e00b      	b.n	8003d54 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003d3c:	4b08      	ldr	r3, [pc, #32]	; (8003d60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	2238      	movs	r2, #56	; 0x38
 8003d42:	4013      	ands	r3, r2
 8003d44:	2b18      	cmp	r3, #24
 8003d46:	d103      	bne.n	8003d50 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003d48:	23fa      	movs	r3, #250	; 0xfa
 8003d4a:	01db      	lsls	r3, r3, #7
 8003d4c:	613b      	str	r3, [r7, #16]
 8003d4e:	e001      	b.n	8003d54 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003d50:	2300      	movs	r3, #0
 8003d52:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003d54:	693b      	ldr	r3, [r7, #16]
}
 8003d56:	0018      	movs	r0, r3
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	b006      	add	sp, #24
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	46c0      	nop			; (mov r8, r8)
 8003d60:	40021000 	.word	0x40021000
 8003d64:	00f42400 	.word	0x00f42400
 8003d68:	007a1200 	.word	0x007a1200

08003d6c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d70:	4b02      	ldr	r3, [pc, #8]	; (8003d7c <HAL_RCC_GetHCLKFreq+0x10>)
 8003d72:	681b      	ldr	r3, [r3, #0]
}
 8003d74:	0018      	movs	r0, r3
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	46c0      	nop			; (mov r8, r8)
 8003d7c:	20000000 	.word	0x20000000

08003d80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d80:	b5b0      	push	{r4, r5, r7, lr}
 8003d82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003d84:	f7ff fff2 	bl	8003d6c <HAL_RCC_GetHCLKFreq>
 8003d88:	0004      	movs	r4, r0
 8003d8a:	f7ff fb3f 	bl	800340c <LL_RCC_GetAPB1Prescaler>
 8003d8e:	0003      	movs	r3, r0
 8003d90:	0b1a      	lsrs	r2, r3, #12
 8003d92:	4b05      	ldr	r3, [pc, #20]	; (8003da8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003d94:	0092      	lsls	r2, r2, #2
 8003d96:	58d3      	ldr	r3, [r2, r3]
 8003d98:	221f      	movs	r2, #31
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	40dc      	lsrs	r4, r3
 8003d9e:	0023      	movs	r3, r4
}
 8003da0:	0018      	movs	r0, r3
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bdb0      	pop	{r4, r5, r7, pc}
 8003da6:	46c0      	nop			; (mov r8, r8)
 8003da8:	08004e3c 	.word	0x08004e3c

08003dac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b086      	sub	sp, #24
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003db4:	2313      	movs	r3, #19
 8003db6:	18fb      	adds	r3, r7, r3
 8003db8:	2200      	movs	r2, #0
 8003dba:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003dbc:	2312      	movs	r3, #18
 8003dbe:	18fb      	adds	r3, r7, r3
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	2380      	movs	r3, #128	; 0x80
 8003dca:	029b      	lsls	r3, r3, #10
 8003dcc:	4013      	ands	r3, r2
 8003dce:	d100      	bne.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003dd0:	e0a3      	b.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dd2:	2011      	movs	r0, #17
 8003dd4:	183b      	adds	r3, r7, r0
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dda:	4bc3      	ldr	r3, [pc, #780]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003ddc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003dde:	2380      	movs	r3, #128	; 0x80
 8003de0:	055b      	lsls	r3, r3, #21
 8003de2:	4013      	ands	r3, r2
 8003de4:	d110      	bne.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003de6:	4bc0      	ldr	r3, [pc, #768]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003de8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003dea:	4bbf      	ldr	r3, [pc, #764]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003dec:	2180      	movs	r1, #128	; 0x80
 8003dee:	0549      	lsls	r1, r1, #21
 8003df0:	430a      	orrs	r2, r1
 8003df2:	63da      	str	r2, [r3, #60]	; 0x3c
 8003df4:	4bbc      	ldr	r3, [pc, #752]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003df6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003df8:	2380      	movs	r3, #128	; 0x80
 8003dfa:	055b      	lsls	r3, r3, #21
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	60bb      	str	r3, [r7, #8]
 8003e00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e02:	183b      	adds	r3, r7, r0
 8003e04:	2201      	movs	r2, #1
 8003e06:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e08:	4bb8      	ldr	r3, [pc, #736]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	4bb7      	ldr	r3, [pc, #732]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003e0e:	2180      	movs	r1, #128	; 0x80
 8003e10:	0049      	lsls	r1, r1, #1
 8003e12:	430a      	orrs	r2, r1
 8003e14:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e16:	f7fe f917 	bl	8002048 <HAL_GetTick>
 8003e1a:	0003      	movs	r3, r0
 8003e1c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e1e:	e00b      	b.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e20:	f7fe f912 	bl	8002048 <HAL_GetTick>
 8003e24:	0002      	movs	r2, r0
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	1ad3      	subs	r3, r2, r3
 8003e2a:	2b02      	cmp	r3, #2
 8003e2c:	d904      	bls.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8003e2e:	2313      	movs	r3, #19
 8003e30:	18fb      	adds	r3, r7, r3
 8003e32:	2203      	movs	r2, #3
 8003e34:	701a      	strb	r2, [r3, #0]
        break;
 8003e36:	e005      	b.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e38:	4bac      	ldr	r3, [pc, #688]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	2380      	movs	r3, #128	; 0x80
 8003e3e:	005b      	lsls	r3, r3, #1
 8003e40:	4013      	ands	r3, r2
 8003e42:	d0ed      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003e44:	2313      	movs	r3, #19
 8003e46:	18fb      	adds	r3, r7, r3
 8003e48:	781b      	ldrb	r3, [r3, #0]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d154      	bne.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003e4e:	4ba6      	ldr	r3, [pc, #664]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003e50:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003e52:	23c0      	movs	r3, #192	; 0xc0
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	4013      	ands	r3, r2
 8003e58:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d019      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e64:	697a      	ldr	r2, [r7, #20]
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d014      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003e6a:	4b9f      	ldr	r3, [pc, #636]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003e6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e6e:	4aa0      	ldr	r2, [pc, #640]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003e70:	4013      	ands	r3, r2
 8003e72:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e74:	4b9c      	ldr	r3, [pc, #624]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003e76:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003e78:	4b9b      	ldr	r3, [pc, #620]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003e7a:	2180      	movs	r1, #128	; 0x80
 8003e7c:	0249      	lsls	r1, r1, #9
 8003e7e:	430a      	orrs	r2, r1
 8003e80:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e82:	4b99      	ldr	r3, [pc, #612]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003e84:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003e86:	4b98      	ldr	r3, [pc, #608]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003e88:	499a      	ldr	r1, [pc, #616]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8003e8a:	400a      	ands	r2, r1
 8003e8c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003e8e:	4b96      	ldr	r3, [pc, #600]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003e90:	697a      	ldr	r2, [r7, #20]
 8003e92:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	2201      	movs	r2, #1
 8003e98:	4013      	ands	r3, r2
 8003e9a:	d016      	beq.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e9c:	f7fe f8d4 	bl	8002048 <HAL_GetTick>
 8003ea0:	0003      	movs	r3, r0
 8003ea2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ea4:	e00c      	b.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ea6:	f7fe f8cf 	bl	8002048 <HAL_GetTick>
 8003eaa:	0002      	movs	r2, r0
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	1ad3      	subs	r3, r2, r3
 8003eb0:	4a91      	ldr	r2, [pc, #580]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d904      	bls.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003eb6:	2313      	movs	r3, #19
 8003eb8:	18fb      	adds	r3, r7, r3
 8003eba:	2203      	movs	r2, #3
 8003ebc:	701a      	strb	r2, [r3, #0]
            break;
 8003ebe:	e004      	b.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ec0:	4b89      	ldr	r3, [pc, #548]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003ec2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ec4:	2202      	movs	r2, #2
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	d0ed      	beq.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8003eca:	2313      	movs	r3, #19
 8003ecc:	18fb      	adds	r3, r7, r3
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d10a      	bne.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ed4:	4b84      	ldr	r3, [pc, #528]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003ed6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ed8:	4a85      	ldr	r2, [pc, #532]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003eda:	4013      	ands	r3, r2
 8003edc:	0019      	movs	r1, r3
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ee2:	4b81      	ldr	r3, [pc, #516]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003ee4:	430a      	orrs	r2, r1
 8003ee6:	65da      	str	r2, [r3, #92]	; 0x5c
 8003ee8:	e00c      	b.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003eea:	2312      	movs	r3, #18
 8003eec:	18fb      	adds	r3, r7, r3
 8003eee:	2213      	movs	r2, #19
 8003ef0:	18ba      	adds	r2, r7, r2
 8003ef2:	7812      	ldrb	r2, [r2, #0]
 8003ef4:	701a      	strb	r2, [r3, #0]
 8003ef6:	e005      	b.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ef8:	2312      	movs	r3, #18
 8003efa:	18fb      	adds	r3, r7, r3
 8003efc:	2213      	movs	r2, #19
 8003efe:	18ba      	adds	r2, r7, r2
 8003f00:	7812      	ldrb	r2, [r2, #0]
 8003f02:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003f04:	2311      	movs	r3, #17
 8003f06:	18fb      	adds	r3, r7, r3
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d105      	bne.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f0e:	4b76      	ldr	r3, [pc, #472]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003f10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f12:	4b75      	ldr	r3, [pc, #468]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003f14:	4979      	ldr	r1, [pc, #484]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8003f16:	400a      	ands	r2, r1
 8003f18:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	4013      	ands	r3, r2
 8003f22:	d009      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f24:	4b70      	ldr	r3, [pc, #448]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003f26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f28:	2203      	movs	r2, #3
 8003f2a:	4393      	bics	r3, r2
 8003f2c:	0019      	movs	r1, r3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	685a      	ldr	r2, [r3, #4]
 8003f32:	4b6d      	ldr	r3, [pc, #436]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003f34:	430a      	orrs	r2, r1
 8003f36:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	2202      	movs	r2, #2
 8003f3e:	4013      	ands	r3, r2
 8003f40:	d009      	beq.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f42:	4b69      	ldr	r3, [pc, #420]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f46:	220c      	movs	r2, #12
 8003f48:	4393      	bics	r3, r2
 8003f4a:	0019      	movs	r1, r3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	689a      	ldr	r2, [r3, #8]
 8003f50:	4b65      	ldr	r3, [pc, #404]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003f52:	430a      	orrs	r2, r1
 8003f54:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	2210      	movs	r2, #16
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	d009      	beq.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f60:	4b61      	ldr	r3, [pc, #388]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003f62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f64:	4a66      	ldr	r2, [pc, #408]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8003f66:	4013      	ands	r3, r2
 8003f68:	0019      	movs	r1, r3
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	68da      	ldr	r2, [r3, #12]
 8003f6e:	4b5e      	ldr	r3, [pc, #376]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003f70:	430a      	orrs	r2, r1
 8003f72:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	2380      	movs	r3, #128	; 0x80
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	d009      	beq.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f80:	4b59      	ldr	r3, [pc, #356]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f84:	4a5f      	ldr	r2, [pc, #380]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003f86:	4013      	ands	r3, r2
 8003f88:	0019      	movs	r1, r3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	699a      	ldr	r2, [r3, #24]
 8003f8e:	4b56      	ldr	r3, [pc, #344]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003f90:	430a      	orrs	r2, r1
 8003f92:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	2380      	movs	r3, #128	; 0x80
 8003f9a:	00db      	lsls	r3, r3, #3
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	d009      	beq.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003fa0:	4b51      	ldr	r3, [pc, #324]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003fa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fa4:	4a58      	ldr	r2, [pc, #352]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	0019      	movs	r1, r3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	69da      	ldr	r2, [r3, #28]
 8003fae:	4b4e      	ldr	r3, [pc, #312]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003fb0:	430a      	orrs	r2, r1
 8003fb2:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2220      	movs	r2, #32
 8003fba:	4013      	ands	r3, r2
 8003fbc:	d009      	beq.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003fbe:	4b4a      	ldr	r3, [pc, #296]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fc2:	4a52      	ldr	r2, [pc, #328]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	0019      	movs	r1, r3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	691a      	ldr	r2, [r3, #16]
 8003fcc:	4b46      	ldr	r3, [pc, #280]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003fce:	430a      	orrs	r2, r1
 8003fd0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	2380      	movs	r3, #128	; 0x80
 8003fd8:	01db      	lsls	r3, r3, #7
 8003fda:	4013      	ands	r3, r2
 8003fdc:	d015      	beq.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003fde:	4b42      	ldr	r3, [pc, #264]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	0899      	lsrs	r1, r3, #2
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a1a      	ldr	r2, [r3, #32]
 8003fea:	4b3f      	ldr	r3, [pc, #252]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003fec:	430a      	orrs	r2, r1
 8003fee:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6a1a      	ldr	r2, [r3, #32]
 8003ff4:	2380      	movs	r3, #128	; 0x80
 8003ff6:	05db      	lsls	r3, r3, #23
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d106      	bne.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003ffc:	4b3a      	ldr	r3, [pc, #232]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003ffe:	68da      	ldr	r2, [r3, #12]
 8004000:	4b39      	ldr	r3, [pc, #228]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004002:	2180      	movs	r1, #128	; 0x80
 8004004:	0249      	lsls	r1, r1, #9
 8004006:	430a      	orrs	r2, r1
 8004008:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	2380      	movs	r3, #128	; 0x80
 8004010:	031b      	lsls	r3, r3, #12
 8004012:	4013      	ands	r3, r2
 8004014:	d009      	beq.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004016:	4b34      	ldr	r3, [pc, #208]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800401a:	2240      	movs	r2, #64	; 0x40
 800401c:	4393      	bics	r3, r2
 800401e:	0019      	movs	r1, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004024:	4b30      	ldr	r3, [pc, #192]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004026:	430a      	orrs	r2, r1
 8004028:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	2380      	movs	r3, #128	; 0x80
 8004030:	039b      	lsls	r3, r3, #14
 8004032:	4013      	ands	r3, r2
 8004034:	d016      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004036:	4b2c      	ldr	r3, [pc, #176]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800403a:	4a35      	ldr	r2, [pc, #212]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800403c:	4013      	ands	r3, r2
 800403e:	0019      	movs	r1, r3
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004044:	4b28      	ldr	r3, [pc, #160]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004046:	430a      	orrs	r2, r1
 8004048:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800404e:	2380      	movs	r3, #128	; 0x80
 8004050:	03db      	lsls	r3, r3, #15
 8004052:	429a      	cmp	r2, r3
 8004054:	d106      	bne.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004056:	4b24      	ldr	r3, [pc, #144]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004058:	68da      	ldr	r2, [r3, #12]
 800405a:	4b23      	ldr	r3, [pc, #140]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800405c:	2180      	movs	r1, #128	; 0x80
 800405e:	0449      	lsls	r1, r1, #17
 8004060:	430a      	orrs	r2, r1
 8004062:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	2380      	movs	r3, #128	; 0x80
 800406a:	03db      	lsls	r3, r3, #15
 800406c:	4013      	ands	r3, r2
 800406e:	d016      	beq.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004070:	4b1d      	ldr	r3, [pc, #116]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004072:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004074:	4a27      	ldr	r2, [pc, #156]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8004076:	4013      	ands	r3, r2
 8004078:	0019      	movs	r1, r3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800407e:	4b1a      	ldr	r3, [pc, #104]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004080:	430a      	orrs	r2, r1
 8004082:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004088:	2380      	movs	r3, #128	; 0x80
 800408a:	045b      	lsls	r3, r3, #17
 800408c:	429a      	cmp	r2, r3
 800408e:	d106      	bne.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004090:	4b15      	ldr	r3, [pc, #84]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004092:	68da      	ldr	r2, [r3, #12]
 8004094:	4b14      	ldr	r3, [pc, #80]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004096:	2180      	movs	r1, #128	; 0x80
 8004098:	0449      	lsls	r1, r1, #17
 800409a:	430a      	orrs	r2, r1
 800409c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	2380      	movs	r3, #128	; 0x80
 80040a4:	011b      	lsls	r3, r3, #4
 80040a6:	4013      	ands	r3, r2
 80040a8:	d016      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80040aa:	4b0f      	ldr	r3, [pc, #60]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80040ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ae:	4a1a      	ldr	r2, [pc, #104]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 80040b0:	4013      	ands	r3, r2
 80040b2:	0019      	movs	r1, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	695a      	ldr	r2, [r3, #20]
 80040b8:	4b0b      	ldr	r3, [pc, #44]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80040ba:	430a      	orrs	r2, r1
 80040bc:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	695a      	ldr	r2, [r3, #20]
 80040c2:	2380      	movs	r3, #128	; 0x80
 80040c4:	01db      	lsls	r3, r3, #7
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d106      	bne.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80040ca:	4b07      	ldr	r3, [pc, #28]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80040cc:	68da      	ldr	r2, [r3, #12]
 80040ce:	4b06      	ldr	r3, [pc, #24]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80040d0:	2180      	movs	r1, #128	; 0x80
 80040d2:	0249      	lsls	r1, r1, #9
 80040d4:	430a      	orrs	r2, r1
 80040d6:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80040d8:	2312      	movs	r3, #18
 80040da:	18fb      	adds	r3, r7, r3
 80040dc:	781b      	ldrb	r3, [r3, #0]
}
 80040de:	0018      	movs	r0, r3
 80040e0:	46bd      	mov	sp, r7
 80040e2:	b006      	add	sp, #24
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	46c0      	nop			; (mov r8, r8)
 80040e8:	40021000 	.word	0x40021000
 80040ec:	40007000 	.word	0x40007000
 80040f0:	fffffcff 	.word	0xfffffcff
 80040f4:	fffeffff 	.word	0xfffeffff
 80040f8:	00001388 	.word	0x00001388
 80040fc:	efffffff 	.word	0xefffffff
 8004100:	fffff3ff 	.word	0xfffff3ff
 8004104:	fff3ffff 	.word	0xfff3ffff
 8004108:	ffcfffff 	.word	0xffcfffff
 800410c:	ffffcfff 	.word	0xffffcfff
 8004110:	ffbfffff 	.word	0xffbfffff
 8004114:	feffffff 	.word	0xfeffffff
 8004118:	ffff3fff 	.word	0xffff3fff

0800411c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b082      	sub	sp, #8
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d101      	bne.n	800412e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e046      	b.n	80041bc <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2288      	movs	r2, #136	; 0x88
 8004132:	589b      	ldr	r3, [r3, r2]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d107      	bne.n	8004148 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2284      	movs	r2, #132	; 0x84
 800413c:	2100      	movs	r1, #0
 800413e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	0018      	movs	r0, r3
 8004144:	f7fd fe50 	bl	8001de8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2288      	movs	r2, #136	; 0x88
 800414c:	2124      	movs	r1, #36	; 0x24
 800414e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	2101      	movs	r1, #1
 800415c:	438a      	bics	r2, r1
 800415e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	0018      	movs	r0, r3
 8004164:	f000 f830 	bl	80041c8 <UART_SetConfig>
 8004168:	0003      	movs	r3, r0
 800416a:	2b01      	cmp	r3, #1
 800416c:	d101      	bne.n	8004172 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e024      	b.n	80041bc <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004176:	2b00      	cmp	r3, #0
 8004178:	d003      	beq.n	8004182 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	0018      	movs	r0, r3
 800417e:	f000 fae1 	bl	8004744 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	685a      	ldr	r2, [r3, #4]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	490d      	ldr	r1, [pc, #52]	; (80041c4 <HAL_UART_Init+0xa8>)
 800418e:	400a      	ands	r2, r1
 8004190:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	689a      	ldr	r2, [r3, #8]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	212a      	movs	r1, #42	; 0x2a
 800419e:	438a      	bics	r2, r1
 80041a0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	2101      	movs	r1, #1
 80041ae:	430a      	orrs	r2, r1
 80041b0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	0018      	movs	r0, r3
 80041b6:	f000 fb79 	bl	80048ac <UART_CheckIdleState>
 80041ba:	0003      	movs	r3, r0
}
 80041bc:	0018      	movs	r0, r3
 80041be:	46bd      	mov	sp, r7
 80041c0:	b002      	add	sp, #8
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	ffffb7ff 	.word	0xffffb7ff

080041c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041c8:	b5b0      	push	{r4, r5, r7, lr}
 80041ca:	b090      	sub	sp, #64	; 0x40
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80041d0:	231a      	movs	r3, #26
 80041d2:	2220      	movs	r2, #32
 80041d4:	189b      	adds	r3, r3, r2
 80041d6:	19db      	adds	r3, r3, r7
 80041d8:	2200      	movs	r2, #0
 80041da:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80041dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041de:	689a      	ldr	r2, [r3, #8]
 80041e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e2:	691b      	ldr	r3, [r3, #16]
 80041e4:	431a      	orrs	r2, r3
 80041e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e8:	695b      	ldr	r3, [r3, #20]
 80041ea:	431a      	orrs	r2, r3
 80041ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ee:	69db      	ldr	r3, [r3, #28]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80041f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4aaf      	ldr	r2, [pc, #700]	; (80044b8 <UART_SetConfig+0x2f0>)
 80041fc:	4013      	ands	r3, r2
 80041fe:	0019      	movs	r1, r3
 8004200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004206:	430b      	orrs	r3, r1
 8004208:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800420a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	4aaa      	ldr	r2, [pc, #680]	; (80044bc <UART_SetConfig+0x2f4>)
 8004212:	4013      	ands	r3, r2
 8004214:	0018      	movs	r0, r3
 8004216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004218:	68d9      	ldr	r1, [r3, #12]
 800421a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	0003      	movs	r3, r0
 8004220:	430b      	orrs	r3, r1
 8004222:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004226:	699b      	ldr	r3, [r3, #24]
 8004228:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800422a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4aa4      	ldr	r2, [pc, #656]	; (80044c0 <UART_SetConfig+0x2f8>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d004      	beq.n	800423e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004236:	6a1b      	ldr	r3, [r3, #32]
 8004238:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800423a:	4313      	orrs	r3, r2
 800423c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800423e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	4a9f      	ldr	r2, [pc, #636]	; (80044c4 <UART_SetConfig+0x2fc>)
 8004246:	4013      	ands	r3, r2
 8004248:	0019      	movs	r1, r3
 800424a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004250:	430b      	orrs	r3, r1
 8004252:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800425a:	220f      	movs	r2, #15
 800425c:	4393      	bics	r3, r2
 800425e:	0018      	movs	r0, r3
 8004260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004262:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	0003      	movs	r3, r0
 800426a:	430b      	orrs	r3, r1
 800426c:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800426e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a95      	ldr	r2, [pc, #596]	; (80044c8 <UART_SetConfig+0x300>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d131      	bne.n	80042dc <UART_SetConfig+0x114>
 8004278:	4b94      	ldr	r3, [pc, #592]	; (80044cc <UART_SetConfig+0x304>)
 800427a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800427c:	2203      	movs	r2, #3
 800427e:	4013      	ands	r3, r2
 8004280:	2b03      	cmp	r3, #3
 8004282:	d01d      	beq.n	80042c0 <UART_SetConfig+0xf8>
 8004284:	d823      	bhi.n	80042ce <UART_SetConfig+0x106>
 8004286:	2b02      	cmp	r3, #2
 8004288:	d00c      	beq.n	80042a4 <UART_SetConfig+0xdc>
 800428a:	d820      	bhi.n	80042ce <UART_SetConfig+0x106>
 800428c:	2b00      	cmp	r3, #0
 800428e:	d002      	beq.n	8004296 <UART_SetConfig+0xce>
 8004290:	2b01      	cmp	r3, #1
 8004292:	d00e      	beq.n	80042b2 <UART_SetConfig+0xea>
 8004294:	e01b      	b.n	80042ce <UART_SetConfig+0x106>
 8004296:	231b      	movs	r3, #27
 8004298:	2220      	movs	r2, #32
 800429a:	189b      	adds	r3, r3, r2
 800429c:	19db      	adds	r3, r3, r7
 800429e:	2200      	movs	r2, #0
 80042a0:	701a      	strb	r2, [r3, #0]
 80042a2:	e0b4      	b.n	800440e <UART_SetConfig+0x246>
 80042a4:	231b      	movs	r3, #27
 80042a6:	2220      	movs	r2, #32
 80042a8:	189b      	adds	r3, r3, r2
 80042aa:	19db      	adds	r3, r3, r7
 80042ac:	2202      	movs	r2, #2
 80042ae:	701a      	strb	r2, [r3, #0]
 80042b0:	e0ad      	b.n	800440e <UART_SetConfig+0x246>
 80042b2:	231b      	movs	r3, #27
 80042b4:	2220      	movs	r2, #32
 80042b6:	189b      	adds	r3, r3, r2
 80042b8:	19db      	adds	r3, r3, r7
 80042ba:	2204      	movs	r2, #4
 80042bc:	701a      	strb	r2, [r3, #0]
 80042be:	e0a6      	b.n	800440e <UART_SetConfig+0x246>
 80042c0:	231b      	movs	r3, #27
 80042c2:	2220      	movs	r2, #32
 80042c4:	189b      	adds	r3, r3, r2
 80042c6:	19db      	adds	r3, r3, r7
 80042c8:	2208      	movs	r2, #8
 80042ca:	701a      	strb	r2, [r3, #0]
 80042cc:	e09f      	b.n	800440e <UART_SetConfig+0x246>
 80042ce:	231b      	movs	r3, #27
 80042d0:	2220      	movs	r2, #32
 80042d2:	189b      	adds	r3, r3, r2
 80042d4:	19db      	adds	r3, r3, r7
 80042d6:	2210      	movs	r2, #16
 80042d8:	701a      	strb	r2, [r3, #0]
 80042da:	e098      	b.n	800440e <UART_SetConfig+0x246>
 80042dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a7b      	ldr	r2, [pc, #492]	; (80044d0 <UART_SetConfig+0x308>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d131      	bne.n	800434a <UART_SetConfig+0x182>
 80042e6:	4b79      	ldr	r3, [pc, #484]	; (80044cc <UART_SetConfig+0x304>)
 80042e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ea:	220c      	movs	r2, #12
 80042ec:	4013      	ands	r3, r2
 80042ee:	2b0c      	cmp	r3, #12
 80042f0:	d01d      	beq.n	800432e <UART_SetConfig+0x166>
 80042f2:	d823      	bhi.n	800433c <UART_SetConfig+0x174>
 80042f4:	2b08      	cmp	r3, #8
 80042f6:	d00c      	beq.n	8004312 <UART_SetConfig+0x14a>
 80042f8:	d820      	bhi.n	800433c <UART_SetConfig+0x174>
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d002      	beq.n	8004304 <UART_SetConfig+0x13c>
 80042fe:	2b04      	cmp	r3, #4
 8004300:	d00e      	beq.n	8004320 <UART_SetConfig+0x158>
 8004302:	e01b      	b.n	800433c <UART_SetConfig+0x174>
 8004304:	231b      	movs	r3, #27
 8004306:	2220      	movs	r2, #32
 8004308:	189b      	adds	r3, r3, r2
 800430a:	19db      	adds	r3, r3, r7
 800430c:	2200      	movs	r2, #0
 800430e:	701a      	strb	r2, [r3, #0]
 8004310:	e07d      	b.n	800440e <UART_SetConfig+0x246>
 8004312:	231b      	movs	r3, #27
 8004314:	2220      	movs	r2, #32
 8004316:	189b      	adds	r3, r3, r2
 8004318:	19db      	adds	r3, r3, r7
 800431a:	2202      	movs	r2, #2
 800431c:	701a      	strb	r2, [r3, #0]
 800431e:	e076      	b.n	800440e <UART_SetConfig+0x246>
 8004320:	231b      	movs	r3, #27
 8004322:	2220      	movs	r2, #32
 8004324:	189b      	adds	r3, r3, r2
 8004326:	19db      	adds	r3, r3, r7
 8004328:	2204      	movs	r2, #4
 800432a:	701a      	strb	r2, [r3, #0]
 800432c:	e06f      	b.n	800440e <UART_SetConfig+0x246>
 800432e:	231b      	movs	r3, #27
 8004330:	2220      	movs	r2, #32
 8004332:	189b      	adds	r3, r3, r2
 8004334:	19db      	adds	r3, r3, r7
 8004336:	2208      	movs	r2, #8
 8004338:	701a      	strb	r2, [r3, #0]
 800433a:	e068      	b.n	800440e <UART_SetConfig+0x246>
 800433c:	231b      	movs	r3, #27
 800433e:	2220      	movs	r2, #32
 8004340:	189b      	adds	r3, r3, r2
 8004342:	19db      	adds	r3, r3, r7
 8004344:	2210      	movs	r2, #16
 8004346:	701a      	strb	r2, [r3, #0]
 8004348:	e061      	b.n	800440e <UART_SetConfig+0x246>
 800434a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a61      	ldr	r2, [pc, #388]	; (80044d4 <UART_SetConfig+0x30c>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d106      	bne.n	8004362 <UART_SetConfig+0x19a>
 8004354:	231b      	movs	r3, #27
 8004356:	2220      	movs	r2, #32
 8004358:	189b      	adds	r3, r3, r2
 800435a:	19db      	adds	r3, r3, r7
 800435c:	2200      	movs	r2, #0
 800435e:	701a      	strb	r2, [r3, #0]
 8004360:	e055      	b.n	800440e <UART_SetConfig+0x246>
 8004362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a5c      	ldr	r2, [pc, #368]	; (80044d8 <UART_SetConfig+0x310>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d106      	bne.n	800437a <UART_SetConfig+0x1b2>
 800436c:	231b      	movs	r3, #27
 800436e:	2220      	movs	r2, #32
 8004370:	189b      	adds	r3, r3, r2
 8004372:	19db      	adds	r3, r3, r7
 8004374:	2200      	movs	r2, #0
 8004376:	701a      	strb	r2, [r3, #0]
 8004378:	e049      	b.n	800440e <UART_SetConfig+0x246>
 800437a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a50      	ldr	r2, [pc, #320]	; (80044c0 <UART_SetConfig+0x2f8>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d13e      	bne.n	8004402 <UART_SetConfig+0x23a>
 8004384:	4b51      	ldr	r3, [pc, #324]	; (80044cc <UART_SetConfig+0x304>)
 8004386:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004388:	23c0      	movs	r3, #192	; 0xc0
 800438a:	011b      	lsls	r3, r3, #4
 800438c:	4013      	ands	r3, r2
 800438e:	22c0      	movs	r2, #192	; 0xc0
 8004390:	0112      	lsls	r2, r2, #4
 8004392:	4293      	cmp	r3, r2
 8004394:	d027      	beq.n	80043e6 <UART_SetConfig+0x21e>
 8004396:	22c0      	movs	r2, #192	; 0xc0
 8004398:	0112      	lsls	r2, r2, #4
 800439a:	4293      	cmp	r3, r2
 800439c:	d82a      	bhi.n	80043f4 <UART_SetConfig+0x22c>
 800439e:	2280      	movs	r2, #128	; 0x80
 80043a0:	0112      	lsls	r2, r2, #4
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d011      	beq.n	80043ca <UART_SetConfig+0x202>
 80043a6:	2280      	movs	r2, #128	; 0x80
 80043a8:	0112      	lsls	r2, r2, #4
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d822      	bhi.n	80043f4 <UART_SetConfig+0x22c>
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d004      	beq.n	80043bc <UART_SetConfig+0x1f4>
 80043b2:	2280      	movs	r2, #128	; 0x80
 80043b4:	00d2      	lsls	r2, r2, #3
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d00e      	beq.n	80043d8 <UART_SetConfig+0x210>
 80043ba:	e01b      	b.n	80043f4 <UART_SetConfig+0x22c>
 80043bc:	231b      	movs	r3, #27
 80043be:	2220      	movs	r2, #32
 80043c0:	189b      	adds	r3, r3, r2
 80043c2:	19db      	adds	r3, r3, r7
 80043c4:	2200      	movs	r2, #0
 80043c6:	701a      	strb	r2, [r3, #0]
 80043c8:	e021      	b.n	800440e <UART_SetConfig+0x246>
 80043ca:	231b      	movs	r3, #27
 80043cc:	2220      	movs	r2, #32
 80043ce:	189b      	adds	r3, r3, r2
 80043d0:	19db      	adds	r3, r3, r7
 80043d2:	2202      	movs	r2, #2
 80043d4:	701a      	strb	r2, [r3, #0]
 80043d6:	e01a      	b.n	800440e <UART_SetConfig+0x246>
 80043d8:	231b      	movs	r3, #27
 80043da:	2220      	movs	r2, #32
 80043dc:	189b      	adds	r3, r3, r2
 80043de:	19db      	adds	r3, r3, r7
 80043e0:	2204      	movs	r2, #4
 80043e2:	701a      	strb	r2, [r3, #0]
 80043e4:	e013      	b.n	800440e <UART_SetConfig+0x246>
 80043e6:	231b      	movs	r3, #27
 80043e8:	2220      	movs	r2, #32
 80043ea:	189b      	adds	r3, r3, r2
 80043ec:	19db      	adds	r3, r3, r7
 80043ee:	2208      	movs	r2, #8
 80043f0:	701a      	strb	r2, [r3, #0]
 80043f2:	e00c      	b.n	800440e <UART_SetConfig+0x246>
 80043f4:	231b      	movs	r3, #27
 80043f6:	2220      	movs	r2, #32
 80043f8:	189b      	adds	r3, r3, r2
 80043fa:	19db      	adds	r3, r3, r7
 80043fc:	2210      	movs	r2, #16
 80043fe:	701a      	strb	r2, [r3, #0]
 8004400:	e005      	b.n	800440e <UART_SetConfig+0x246>
 8004402:	231b      	movs	r3, #27
 8004404:	2220      	movs	r2, #32
 8004406:	189b      	adds	r3, r3, r2
 8004408:	19db      	adds	r3, r3, r7
 800440a:	2210      	movs	r2, #16
 800440c:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800440e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a2b      	ldr	r2, [pc, #172]	; (80044c0 <UART_SetConfig+0x2f8>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d000      	beq.n	800441a <UART_SetConfig+0x252>
 8004418:	e0a9      	b.n	800456e <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800441a:	231b      	movs	r3, #27
 800441c:	2220      	movs	r2, #32
 800441e:	189b      	adds	r3, r3, r2
 8004420:	19db      	adds	r3, r3, r7
 8004422:	781b      	ldrb	r3, [r3, #0]
 8004424:	2b08      	cmp	r3, #8
 8004426:	d015      	beq.n	8004454 <UART_SetConfig+0x28c>
 8004428:	dc18      	bgt.n	800445c <UART_SetConfig+0x294>
 800442a:	2b04      	cmp	r3, #4
 800442c:	d00d      	beq.n	800444a <UART_SetConfig+0x282>
 800442e:	dc15      	bgt.n	800445c <UART_SetConfig+0x294>
 8004430:	2b00      	cmp	r3, #0
 8004432:	d002      	beq.n	800443a <UART_SetConfig+0x272>
 8004434:	2b02      	cmp	r3, #2
 8004436:	d005      	beq.n	8004444 <UART_SetConfig+0x27c>
 8004438:	e010      	b.n	800445c <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800443a:	f7ff fca1 	bl	8003d80 <HAL_RCC_GetPCLK1Freq>
 800443e:	0003      	movs	r3, r0
 8004440:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004442:	e014      	b.n	800446e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004444:	4b25      	ldr	r3, [pc, #148]	; (80044dc <UART_SetConfig+0x314>)
 8004446:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004448:	e011      	b.n	800446e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800444a:	f7ff fc0d 	bl	8003c68 <HAL_RCC_GetSysClockFreq>
 800444e:	0003      	movs	r3, r0
 8004450:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004452:	e00c      	b.n	800446e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004454:	2380      	movs	r3, #128	; 0x80
 8004456:	021b      	lsls	r3, r3, #8
 8004458:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800445a:	e008      	b.n	800446e <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 800445c:	2300      	movs	r3, #0
 800445e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004460:	231a      	movs	r3, #26
 8004462:	2220      	movs	r2, #32
 8004464:	189b      	adds	r3, r3, r2
 8004466:	19db      	adds	r3, r3, r7
 8004468:	2201      	movs	r2, #1
 800446a:	701a      	strb	r2, [r3, #0]
        break;
 800446c:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800446e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004470:	2b00      	cmp	r3, #0
 8004472:	d100      	bne.n	8004476 <UART_SetConfig+0x2ae>
 8004474:	e14b      	b.n	800470e <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004478:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800447a:	4b19      	ldr	r3, [pc, #100]	; (80044e0 <UART_SetConfig+0x318>)
 800447c:	0052      	lsls	r2, r2, #1
 800447e:	5ad3      	ldrh	r3, [r2, r3]
 8004480:	0019      	movs	r1, r3
 8004482:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004484:	f7fb fe3e 	bl	8000104 <__udivsi3>
 8004488:	0003      	movs	r3, r0
 800448a:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800448c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448e:	685a      	ldr	r2, [r3, #4]
 8004490:	0013      	movs	r3, r2
 8004492:	005b      	lsls	r3, r3, #1
 8004494:	189b      	adds	r3, r3, r2
 8004496:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004498:	429a      	cmp	r2, r3
 800449a:	d305      	bcc.n	80044a8 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800449c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80044a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d91d      	bls.n	80044e4 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 80044a8:	231a      	movs	r3, #26
 80044aa:	2220      	movs	r2, #32
 80044ac:	189b      	adds	r3, r3, r2
 80044ae:	19db      	adds	r3, r3, r7
 80044b0:	2201      	movs	r2, #1
 80044b2:	701a      	strb	r2, [r3, #0]
 80044b4:	e12b      	b.n	800470e <UART_SetConfig+0x546>
 80044b6:	46c0      	nop			; (mov r8, r8)
 80044b8:	cfff69f3 	.word	0xcfff69f3
 80044bc:	ffffcfff 	.word	0xffffcfff
 80044c0:	40008000 	.word	0x40008000
 80044c4:	11fff4ff 	.word	0x11fff4ff
 80044c8:	40013800 	.word	0x40013800
 80044cc:	40021000 	.word	0x40021000
 80044d0:	40004400 	.word	0x40004400
 80044d4:	40004800 	.word	0x40004800
 80044d8:	40004c00 	.word	0x40004c00
 80044dc:	00f42400 	.word	0x00f42400
 80044e0:	08004e5c 	.word	0x08004e5c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80044e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044e6:	61bb      	str	r3, [r7, #24]
 80044e8:	2300      	movs	r3, #0
 80044ea:	61fb      	str	r3, [r7, #28]
 80044ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044f0:	4b92      	ldr	r3, [pc, #584]	; (800473c <UART_SetConfig+0x574>)
 80044f2:	0052      	lsls	r2, r2, #1
 80044f4:	5ad3      	ldrh	r3, [r2, r3]
 80044f6:	613b      	str	r3, [r7, #16]
 80044f8:	2300      	movs	r3, #0
 80044fa:	617b      	str	r3, [r7, #20]
 80044fc:	693a      	ldr	r2, [r7, #16]
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	69b8      	ldr	r0, [r7, #24]
 8004502:	69f9      	ldr	r1, [r7, #28]
 8004504:	f7fb ff74 	bl	80003f0 <__aeabi_uldivmod>
 8004508:	0002      	movs	r2, r0
 800450a:	000b      	movs	r3, r1
 800450c:	0e11      	lsrs	r1, r2, #24
 800450e:	021d      	lsls	r5, r3, #8
 8004510:	430d      	orrs	r5, r1
 8004512:	0214      	lsls	r4, r2, #8
 8004514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	085b      	lsrs	r3, r3, #1
 800451a:	60bb      	str	r3, [r7, #8]
 800451c:	2300      	movs	r3, #0
 800451e:	60fb      	str	r3, [r7, #12]
 8004520:	68b8      	ldr	r0, [r7, #8]
 8004522:	68f9      	ldr	r1, [r7, #12]
 8004524:	1900      	adds	r0, r0, r4
 8004526:	4169      	adcs	r1, r5
 8004528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	603b      	str	r3, [r7, #0]
 800452e:	2300      	movs	r3, #0
 8004530:	607b      	str	r3, [r7, #4]
 8004532:	683a      	ldr	r2, [r7, #0]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f7fb ff5b 	bl	80003f0 <__aeabi_uldivmod>
 800453a:	0002      	movs	r2, r0
 800453c:	000b      	movs	r3, r1
 800453e:	0013      	movs	r3, r2
 8004540:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004542:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004544:	23c0      	movs	r3, #192	; 0xc0
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	429a      	cmp	r2, r3
 800454a:	d309      	bcc.n	8004560 <UART_SetConfig+0x398>
 800454c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800454e:	2380      	movs	r3, #128	; 0x80
 8004550:	035b      	lsls	r3, r3, #13
 8004552:	429a      	cmp	r2, r3
 8004554:	d204      	bcs.n	8004560 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8004556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800455c:	60da      	str	r2, [r3, #12]
 800455e:	e0d6      	b.n	800470e <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8004560:	231a      	movs	r3, #26
 8004562:	2220      	movs	r2, #32
 8004564:	189b      	adds	r3, r3, r2
 8004566:	19db      	adds	r3, r3, r7
 8004568:	2201      	movs	r2, #1
 800456a:	701a      	strb	r2, [r3, #0]
 800456c:	e0cf      	b.n	800470e <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800456e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004570:	69da      	ldr	r2, [r3, #28]
 8004572:	2380      	movs	r3, #128	; 0x80
 8004574:	021b      	lsls	r3, r3, #8
 8004576:	429a      	cmp	r2, r3
 8004578:	d000      	beq.n	800457c <UART_SetConfig+0x3b4>
 800457a:	e070      	b.n	800465e <UART_SetConfig+0x496>
  {
    switch (clocksource)
 800457c:	231b      	movs	r3, #27
 800457e:	2220      	movs	r2, #32
 8004580:	189b      	adds	r3, r3, r2
 8004582:	19db      	adds	r3, r3, r7
 8004584:	781b      	ldrb	r3, [r3, #0]
 8004586:	2b08      	cmp	r3, #8
 8004588:	d015      	beq.n	80045b6 <UART_SetConfig+0x3ee>
 800458a:	dc18      	bgt.n	80045be <UART_SetConfig+0x3f6>
 800458c:	2b04      	cmp	r3, #4
 800458e:	d00d      	beq.n	80045ac <UART_SetConfig+0x3e4>
 8004590:	dc15      	bgt.n	80045be <UART_SetConfig+0x3f6>
 8004592:	2b00      	cmp	r3, #0
 8004594:	d002      	beq.n	800459c <UART_SetConfig+0x3d4>
 8004596:	2b02      	cmp	r3, #2
 8004598:	d005      	beq.n	80045a6 <UART_SetConfig+0x3de>
 800459a:	e010      	b.n	80045be <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800459c:	f7ff fbf0 	bl	8003d80 <HAL_RCC_GetPCLK1Freq>
 80045a0:	0003      	movs	r3, r0
 80045a2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80045a4:	e014      	b.n	80045d0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045a6:	4b66      	ldr	r3, [pc, #408]	; (8004740 <UART_SetConfig+0x578>)
 80045a8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80045aa:	e011      	b.n	80045d0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045ac:	f7ff fb5c 	bl	8003c68 <HAL_RCC_GetSysClockFreq>
 80045b0:	0003      	movs	r3, r0
 80045b2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80045b4:	e00c      	b.n	80045d0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045b6:	2380      	movs	r3, #128	; 0x80
 80045b8:	021b      	lsls	r3, r3, #8
 80045ba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80045bc:	e008      	b.n	80045d0 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80045be:	2300      	movs	r3, #0
 80045c0:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80045c2:	231a      	movs	r3, #26
 80045c4:	2220      	movs	r2, #32
 80045c6:	189b      	adds	r3, r3, r2
 80045c8:	19db      	adds	r3, r3, r7
 80045ca:	2201      	movs	r2, #1
 80045cc:	701a      	strb	r2, [r3, #0]
        break;
 80045ce:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80045d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d100      	bne.n	80045d8 <UART_SetConfig+0x410>
 80045d6:	e09a      	b.n	800470e <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80045d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045dc:	4b57      	ldr	r3, [pc, #348]	; (800473c <UART_SetConfig+0x574>)
 80045de:	0052      	lsls	r2, r2, #1
 80045e0:	5ad3      	ldrh	r3, [r2, r3]
 80045e2:	0019      	movs	r1, r3
 80045e4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80045e6:	f7fb fd8d 	bl	8000104 <__udivsi3>
 80045ea:	0003      	movs	r3, r0
 80045ec:	005a      	lsls	r2, r3, #1
 80045ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	085b      	lsrs	r3, r3, #1
 80045f4:	18d2      	adds	r2, r2, r3
 80045f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	0019      	movs	r1, r3
 80045fc:	0010      	movs	r0, r2
 80045fe:	f7fb fd81 	bl	8000104 <__udivsi3>
 8004602:	0003      	movs	r3, r0
 8004604:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004608:	2b0f      	cmp	r3, #15
 800460a:	d921      	bls.n	8004650 <UART_SetConfig+0x488>
 800460c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800460e:	2380      	movs	r3, #128	; 0x80
 8004610:	025b      	lsls	r3, r3, #9
 8004612:	429a      	cmp	r2, r3
 8004614:	d21c      	bcs.n	8004650 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004618:	b29a      	uxth	r2, r3
 800461a:	200e      	movs	r0, #14
 800461c:	2420      	movs	r4, #32
 800461e:	1903      	adds	r3, r0, r4
 8004620:	19db      	adds	r3, r3, r7
 8004622:	210f      	movs	r1, #15
 8004624:	438a      	bics	r2, r1
 8004626:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800462a:	085b      	lsrs	r3, r3, #1
 800462c:	b29b      	uxth	r3, r3
 800462e:	2207      	movs	r2, #7
 8004630:	4013      	ands	r3, r2
 8004632:	b299      	uxth	r1, r3
 8004634:	1903      	adds	r3, r0, r4
 8004636:	19db      	adds	r3, r3, r7
 8004638:	1902      	adds	r2, r0, r4
 800463a:	19d2      	adds	r2, r2, r7
 800463c:	8812      	ldrh	r2, [r2, #0]
 800463e:	430a      	orrs	r2, r1
 8004640:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	1902      	adds	r2, r0, r4
 8004648:	19d2      	adds	r2, r2, r7
 800464a:	8812      	ldrh	r2, [r2, #0]
 800464c:	60da      	str	r2, [r3, #12]
 800464e:	e05e      	b.n	800470e <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8004650:	231a      	movs	r3, #26
 8004652:	2220      	movs	r2, #32
 8004654:	189b      	adds	r3, r3, r2
 8004656:	19db      	adds	r3, r3, r7
 8004658:	2201      	movs	r2, #1
 800465a:	701a      	strb	r2, [r3, #0]
 800465c:	e057      	b.n	800470e <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 800465e:	231b      	movs	r3, #27
 8004660:	2220      	movs	r2, #32
 8004662:	189b      	adds	r3, r3, r2
 8004664:	19db      	adds	r3, r3, r7
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	2b08      	cmp	r3, #8
 800466a:	d015      	beq.n	8004698 <UART_SetConfig+0x4d0>
 800466c:	dc18      	bgt.n	80046a0 <UART_SetConfig+0x4d8>
 800466e:	2b04      	cmp	r3, #4
 8004670:	d00d      	beq.n	800468e <UART_SetConfig+0x4c6>
 8004672:	dc15      	bgt.n	80046a0 <UART_SetConfig+0x4d8>
 8004674:	2b00      	cmp	r3, #0
 8004676:	d002      	beq.n	800467e <UART_SetConfig+0x4b6>
 8004678:	2b02      	cmp	r3, #2
 800467a:	d005      	beq.n	8004688 <UART_SetConfig+0x4c0>
 800467c:	e010      	b.n	80046a0 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800467e:	f7ff fb7f 	bl	8003d80 <HAL_RCC_GetPCLK1Freq>
 8004682:	0003      	movs	r3, r0
 8004684:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004686:	e014      	b.n	80046b2 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004688:	4b2d      	ldr	r3, [pc, #180]	; (8004740 <UART_SetConfig+0x578>)
 800468a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800468c:	e011      	b.n	80046b2 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800468e:	f7ff faeb 	bl	8003c68 <HAL_RCC_GetSysClockFreq>
 8004692:	0003      	movs	r3, r0
 8004694:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004696:	e00c      	b.n	80046b2 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004698:	2380      	movs	r3, #128	; 0x80
 800469a:	021b      	lsls	r3, r3, #8
 800469c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800469e:	e008      	b.n	80046b2 <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 80046a0:	2300      	movs	r3, #0
 80046a2:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80046a4:	231a      	movs	r3, #26
 80046a6:	2220      	movs	r2, #32
 80046a8:	189b      	adds	r3, r3, r2
 80046aa:	19db      	adds	r3, r3, r7
 80046ac:	2201      	movs	r2, #1
 80046ae:	701a      	strb	r2, [r3, #0]
        break;
 80046b0:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80046b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d02a      	beq.n	800470e <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80046b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046bc:	4b1f      	ldr	r3, [pc, #124]	; (800473c <UART_SetConfig+0x574>)
 80046be:	0052      	lsls	r2, r2, #1
 80046c0:	5ad3      	ldrh	r3, [r2, r3]
 80046c2:	0019      	movs	r1, r3
 80046c4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80046c6:	f7fb fd1d 	bl	8000104 <__udivsi3>
 80046ca:	0003      	movs	r3, r0
 80046cc:	001a      	movs	r2, r3
 80046ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	085b      	lsrs	r3, r3, #1
 80046d4:	18d2      	adds	r2, r2, r3
 80046d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	0019      	movs	r1, r3
 80046dc:	0010      	movs	r0, r2
 80046de:	f7fb fd11 	bl	8000104 <__udivsi3>
 80046e2:	0003      	movs	r3, r0
 80046e4:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046e8:	2b0f      	cmp	r3, #15
 80046ea:	d90a      	bls.n	8004702 <UART_SetConfig+0x53a>
 80046ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046ee:	2380      	movs	r3, #128	; 0x80
 80046f0:	025b      	lsls	r3, r3, #9
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d205      	bcs.n	8004702 <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80046f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046f8:	b29a      	uxth	r2, r3
 80046fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	60da      	str	r2, [r3, #12]
 8004700:	e005      	b.n	800470e <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8004702:	231a      	movs	r3, #26
 8004704:	2220      	movs	r2, #32
 8004706:	189b      	adds	r3, r3, r2
 8004708:	19db      	adds	r3, r3, r7
 800470a:	2201      	movs	r2, #1
 800470c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800470e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004710:	226a      	movs	r2, #106	; 0x6a
 8004712:	2101      	movs	r1, #1
 8004714:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004718:	2268      	movs	r2, #104	; 0x68
 800471a:	2101      	movs	r1, #1
 800471c:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800471e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004720:	2200      	movs	r2, #0
 8004722:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004726:	2200      	movs	r2, #0
 8004728:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800472a:	231a      	movs	r3, #26
 800472c:	2220      	movs	r2, #32
 800472e:	189b      	adds	r3, r3, r2
 8004730:	19db      	adds	r3, r3, r7
 8004732:	781b      	ldrb	r3, [r3, #0]
}
 8004734:	0018      	movs	r0, r3
 8004736:	46bd      	mov	sp, r7
 8004738:	b010      	add	sp, #64	; 0x40
 800473a:	bdb0      	pop	{r4, r5, r7, pc}
 800473c:	08004e5c 	.word	0x08004e5c
 8004740:	00f42400 	.word	0x00f42400

08004744 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b082      	sub	sp, #8
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004750:	2201      	movs	r2, #1
 8004752:	4013      	ands	r3, r2
 8004754:	d00b      	beq.n	800476e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	4a4a      	ldr	r2, [pc, #296]	; (8004888 <UART_AdvFeatureConfig+0x144>)
 800475e:	4013      	ands	r3, r2
 8004760:	0019      	movs	r1, r3
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	430a      	orrs	r2, r1
 800476c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004772:	2202      	movs	r2, #2
 8004774:	4013      	ands	r3, r2
 8004776:	d00b      	beq.n	8004790 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	4a43      	ldr	r2, [pc, #268]	; (800488c <UART_AdvFeatureConfig+0x148>)
 8004780:	4013      	ands	r3, r2
 8004782:	0019      	movs	r1, r3
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	430a      	orrs	r2, r1
 800478e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004794:	2204      	movs	r2, #4
 8004796:	4013      	ands	r3, r2
 8004798:	d00b      	beq.n	80047b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	4a3b      	ldr	r2, [pc, #236]	; (8004890 <UART_AdvFeatureConfig+0x14c>)
 80047a2:	4013      	ands	r3, r2
 80047a4:	0019      	movs	r1, r3
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	430a      	orrs	r2, r1
 80047b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047b6:	2208      	movs	r2, #8
 80047b8:	4013      	ands	r3, r2
 80047ba:	d00b      	beq.n	80047d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	4a34      	ldr	r2, [pc, #208]	; (8004894 <UART_AdvFeatureConfig+0x150>)
 80047c4:	4013      	ands	r3, r2
 80047c6:	0019      	movs	r1, r3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	430a      	orrs	r2, r1
 80047d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d8:	2210      	movs	r2, #16
 80047da:	4013      	ands	r3, r2
 80047dc:	d00b      	beq.n	80047f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	4a2c      	ldr	r2, [pc, #176]	; (8004898 <UART_AdvFeatureConfig+0x154>)
 80047e6:	4013      	ands	r3, r2
 80047e8:	0019      	movs	r1, r3
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	430a      	orrs	r2, r1
 80047f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047fa:	2220      	movs	r2, #32
 80047fc:	4013      	ands	r3, r2
 80047fe:	d00b      	beq.n	8004818 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	4a25      	ldr	r2, [pc, #148]	; (800489c <UART_AdvFeatureConfig+0x158>)
 8004808:	4013      	ands	r3, r2
 800480a:	0019      	movs	r1, r3
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	430a      	orrs	r2, r1
 8004816:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800481c:	2240      	movs	r2, #64	; 0x40
 800481e:	4013      	ands	r3, r2
 8004820:	d01d      	beq.n	800485e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	4a1d      	ldr	r2, [pc, #116]	; (80048a0 <UART_AdvFeatureConfig+0x15c>)
 800482a:	4013      	ands	r3, r2
 800482c:	0019      	movs	r1, r3
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	430a      	orrs	r2, r1
 8004838:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800483e:	2380      	movs	r3, #128	; 0x80
 8004840:	035b      	lsls	r3, r3, #13
 8004842:	429a      	cmp	r2, r3
 8004844:	d10b      	bne.n	800485e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	4a15      	ldr	r2, [pc, #84]	; (80048a4 <UART_AdvFeatureConfig+0x160>)
 800484e:	4013      	ands	r3, r2
 8004850:	0019      	movs	r1, r3
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	430a      	orrs	r2, r1
 800485c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004862:	2280      	movs	r2, #128	; 0x80
 8004864:	4013      	ands	r3, r2
 8004866:	d00b      	beq.n	8004880 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	4a0e      	ldr	r2, [pc, #56]	; (80048a8 <UART_AdvFeatureConfig+0x164>)
 8004870:	4013      	ands	r3, r2
 8004872:	0019      	movs	r1, r3
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	430a      	orrs	r2, r1
 800487e:	605a      	str	r2, [r3, #4]
  }
}
 8004880:	46c0      	nop			; (mov r8, r8)
 8004882:	46bd      	mov	sp, r7
 8004884:	b002      	add	sp, #8
 8004886:	bd80      	pop	{r7, pc}
 8004888:	fffdffff 	.word	0xfffdffff
 800488c:	fffeffff 	.word	0xfffeffff
 8004890:	fffbffff 	.word	0xfffbffff
 8004894:	ffff7fff 	.word	0xffff7fff
 8004898:	ffffefff 	.word	0xffffefff
 800489c:	ffffdfff 	.word	0xffffdfff
 80048a0:	ffefffff 	.word	0xffefffff
 80048a4:	ff9fffff 	.word	0xff9fffff
 80048a8:	fff7ffff 	.word	0xfff7ffff

080048ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b086      	sub	sp, #24
 80048b0:	af02      	add	r7, sp, #8
 80048b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2290      	movs	r2, #144	; 0x90
 80048b8:	2100      	movs	r1, #0
 80048ba:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80048bc:	f7fd fbc4 	bl	8002048 <HAL_GetTick>
 80048c0:	0003      	movs	r3, r0
 80048c2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	2208      	movs	r2, #8
 80048cc:	4013      	ands	r3, r2
 80048ce:	2b08      	cmp	r3, #8
 80048d0:	d10c      	bne.n	80048ec <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2280      	movs	r2, #128	; 0x80
 80048d6:	0391      	lsls	r1, r2, #14
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	4a1a      	ldr	r2, [pc, #104]	; (8004944 <UART_CheckIdleState+0x98>)
 80048dc:	9200      	str	r2, [sp, #0]
 80048de:	2200      	movs	r2, #0
 80048e0:	f000 f832 	bl	8004948 <UART_WaitOnFlagUntilTimeout>
 80048e4:	1e03      	subs	r3, r0, #0
 80048e6:	d001      	beq.n	80048ec <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048e8:	2303      	movs	r3, #3
 80048ea:	e026      	b.n	800493a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	2204      	movs	r2, #4
 80048f4:	4013      	ands	r3, r2
 80048f6:	2b04      	cmp	r3, #4
 80048f8:	d10c      	bne.n	8004914 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2280      	movs	r2, #128	; 0x80
 80048fe:	03d1      	lsls	r1, r2, #15
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	4a10      	ldr	r2, [pc, #64]	; (8004944 <UART_CheckIdleState+0x98>)
 8004904:	9200      	str	r2, [sp, #0]
 8004906:	2200      	movs	r2, #0
 8004908:	f000 f81e 	bl	8004948 <UART_WaitOnFlagUntilTimeout>
 800490c:	1e03      	subs	r3, r0, #0
 800490e:	d001      	beq.n	8004914 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004910:	2303      	movs	r3, #3
 8004912:	e012      	b.n	800493a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2288      	movs	r2, #136	; 0x88
 8004918:	2120      	movs	r1, #32
 800491a:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	228c      	movs	r2, #140	; 0x8c
 8004920:	2120      	movs	r1, #32
 8004922:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2200      	movs	r2, #0
 8004928:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2284      	movs	r2, #132	; 0x84
 8004934:	2100      	movs	r1, #0
 8004936:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004938:	2300      	movs	r3, #0
}
 800493a:	0018      	movs	r0, r3
 800493c:	46bd      	mov	sp, r7
 800493e:	b004      	add	sp, #16
 8004940:	bd80      	pop	{r7, pc}
 8004942:	46c0      	nop			; (mov r8, r8)
 8004944:	01ffffff 	.word	0x01ffffff

08004948 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b094      	sub	sp, #80	; 0x50
 800494c:	af00      	add	r7, sp, #0
 800494e:	60f8      	str	r0, [r7, #12]
 8004950:	60b9      	str	r1, [r7, #8]
 8004952:	603b      	str	r3, [r7, #0]
 8004954:	1dfb      	adds	r3, r7, #7
 8004956:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004958:	e0a7      	b.n	8004aaa <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800495a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800495c:	3301      	adds	r3, #1
 800495e:	d100      	bne.n	8004962 <UART_WaitOnFlagUntilTimeout+0x1a>
 8004960:	e0a3      	b.n	8004aaa <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004962:	f7fd fb71 	bl	8002048 <HAL_GetTick>
 8004966:	0002      	movs	r2, r0
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	1ad3      	subs	r3, r2, r3
 800496c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800496e:	429a      	cmp	r2, r3
 8004970:	d302      	bcc.n	8004978 <UART_WaitOnFlagUntilTimeout+0x30>
 8004972:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004974:	2b00      	cmp	r3, #0
 8004976:	d13f      	bne.n	80049f8 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004978:	f3ef 8310 	mrs	r3, PRIMASK
 800497c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800497e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004980:	647b      	str	r3, [r7, #68]	; 0x44
 8004982:	2301      	movs	r3, #1
 8004984:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004988:	f383 8810 	msr	PRIMASK, r3
}
 800498c:	46c0      	nop			; (mov r8, r8)
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	494e      	ldr	r1, [pc, #312]	; (8004ad4 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800499a:	400a      	ands	r2, r1
 800499c:	601a      	str	r2, [r3, #0]
 800499e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049a0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a4:	f383 8810 	msr	PRIMASK, r3
}
 80049a8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049aa:	f3ef 8310 	mrs	r3, PRIMASK
 80049ae:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80049b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049b2:	643b      	str	r3, [r7, #64]	; 0x40
 80049b4:	2301      	movs	r3, #1
 80049b6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ba:	f383 8810 	msr	PRIMASK, r3
}
 80049be:	46c0      	nop			; (mov r8, r8)
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	689a      	ldr	r2, [r3, #8]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	2101      	movs	r1, #1
 80049cc:	438a      	bics	r2, r1
 80049ce:	609a      	str	r2, [r3, #8]
 80049d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049d6:	f383 8810 	msr	PRIMASK, r3
}
 80049da:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2288      	movs	r2, #136	; 0x88
 80049e0:	2120      	movs	r1, #32
 80049e2:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	228c      	movs	r2, #140	; 0x8c
 80049e8:	2120      	movs	r1, #32
 80049ea:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2284      	movs	r2, #132	; 0x84
 80049f0:	2100      	movs	r1, #0
 80049f2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80049f4:	2303      	movs	r3, #3
 80049f6:	e069      	b.n	8004acc <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	2204      	movs	r2, #4
 8004a00:	4013      	ands	r3, r2
 8004a02:	d052      	beq.n	8004aaa <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	69da      	ldr	r2, [r3, #28]
 8004a0a:	2380      	movs	r3, #128	; 0x80
 8004a0c:	011b      	lsls	r3, r3, #4
 8004a0e:	401a      	ands	r2, r3
 8004a10:	2380      	movs	r3, #128	; 0x80
 8004a12:	011b      	lsls	r3, r3, #4
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d148      	bne.n	8004aaa <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	2280      	movs	r2, #128	; 0x80
 8004a1e:	0112      	lsls	r2, r2, #4
 8004a20:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a22:	f3ef 8310 	mrs	r3, PRIMASK
 8004a26:	613b      	str	r3, [r7, #16]
  return(result);
 8004a28:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004a2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	f383 8810 	msr	PRIMASK, r3
}
 8004a36:	46c0      	nop			; (mov r8, r8)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4924      	ldr	r1, [pc, #144]	; (8004ad4 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8004a44:	400a      	ands	r2, r1
 8004a46:	601a      	str	r2, [r3, #0]
 8004a48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a4a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a4c:	69bb      	ldr	r3, [r7, #24]
 8004a4e:	f383 8810 	msr	PRIMASK, r3
}
 8004a52:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a54:	f3ef 8310 	mrs	r3, PRIMASK
 8004a58:	61fb      	str	r3, [r7, #28]
  return(result);
 8004a5a:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a5c:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a5e:	2301      	movs	r3, #1
 8004a60:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a62:	6a3b      	ldr	r3, [r7, #32]
 8004a64:	f383 8810 	msr	PRIMASK, r3
}
 8004a68:	46c0      	nop			; (mov r8, r8)
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	689a      	ldr	r2, [r3, #8]
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	2101      	movs	r1, #1
 8004a76:	438a      	bics	r2, r1
 8004a78:	609a      	str	r2, [r3, #8]
 8004a7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a7c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a80:	f383 8810 	msr	PRIMASK, r3
}
 8004a84:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2288      	movs	r2, #136	; 0x88
 8004a8a:	2120      	movs	r1, #32
 8004a8c:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	228c      	movs	r2, #140	; 0x8c
 8004a92:	2120      	movs	r1, #32
 8004a94:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2290      	movs	r2, #144	; 0x90
 8004a9a:	2120      	movs	r1, #32
 8004a9c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2284      	movs	r2, #132	; 0x84
 8004aa2:	2100      	movs	r1, #0
 8004aa4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	e010      	b.n	8004acc <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	69db      	ldr	r3, [r3, #28]
 8004ab0:	68ba      	ldr	r2, [r7, #8]
 8004ab2:	4013      	ands	r3, r2
 8004ab4:	68ba      	ldr	r2, [r7, #8]
 8004ab6:	1ad3      	subs	r3, r2, r3
 8004ab8:	425a      	negs	r2, r3
 8004aba:	4153      	adcs	r3, r2
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	001a      	movs	r2, r3
 8004ac0:	1dfb      	adds	r3, r7, #7
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d100      	bne.n	8004aca <UART_WaitOnFlagUntilTimeout+0x182>
 8004ac8:	e747      	b.n	800495a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004aca:	2300      	movs	r3, #0
}
 8004acc:	0018      	movs	r0, r3
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	b014      	add	sp, #80	; 0x50
 8004ad2:	bd80      	pop	{r7, pc}
 8004ad4:	fffffe5f 	.word	0xfffffe5f

08004ad8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b084      	sub	sp, #16
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2284      	movs	r2, #132	; 0x84
 8004ae4:	5c9b      	ldrb	r3, [r3, r2]
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d101      	bne.n	8004aee <HAL_UARTEx_DisableFifoMode+0x16>
 8004aea:	2302      	movs	r3, #2
 8004aec:	e027      	b.n	8004b3e <HAL_UARTEx_DisableFifoMode+0x66>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2284      	movs	r2, #132	; 0x84
 8004af2:	2101      	movs	r1, #1
 8004af4:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2288      	movs	r2, #136	; 0x88
 8004afa:	2124      	movs	r1, #36	; 0x24
 8004afc:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	2101      	movs	r1, #1
 8004b12:	438a      	bics	r2, r1
 8004b14:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	4a0b      	ldr	r2, [pc, #44]	; (8004b48 <HAL_UARTEx_DisableFifoMode+0x70>)
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	68fa      	ldr	r2, [r7, #12]
 8004b2a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2288      	movs	r2, #136	; 0x88
 8004b30:	2120      	movs	r1, #32
 8004b32:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2284      	movs	r2, #132	; 0x84
 8004b38:	2100      	movs	r1, #0
 8004b3a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004b3c:	2300      	movs	r3, #0
}
 8004b3e:	0018      	movs	r0, r3
 8004b40:	46bd      	mov	sp, r7
 8004b42:	b004      	add	sp, #16
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	46c0      	nop			; (mov r8, r8)
 8004b48:	dfffffff 	.word	0xdfffffff

08004b4c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b084      	sub	sp, #16
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2284      	movs	r2, #132	; 0x84
 8004b5a:	5c9b      	ldrb	r3, [r3, r2]
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d101      	bne.n	8004b64 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004b60:	2302      	movs	r3, #2
 8004b62:	e02e      	b.n	8004bc2 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2284      	movs	r2, #132	; 0x84
 8004b68:	2101      	movs	r1, #1
 8004b6a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2288      	movs	r2, #136	; 0x88
 8004b70:	2124      	movs	r1, #36	; 0x24
 8004b72:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	2101      	movs	r1, #1
 8004b88:	438a      	bics	r2, r1
 8004b8a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	00db      	lsls	r3, r3, #3
 8004b94:	08d9      	lsrs	r1, r3, #3
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	683a      	ldr	r2, [r7, #0]
 8004b9c:	430a      	orrs	r2, r1
 8004b9e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	0018      	movs	r0, r3
 8004ba4:	f000 f854 	bl	8004c50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	68fa      	ldr	r2, [r7, #12]
 8004bae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2288      	movs	r2, #136	; 0x88
 8004bb4:	2120      	movs	r1, #32
 8004bb6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2284      	movs	r2, #132	; 0x84
 8004bbc:	2100      	movs	r1, #0
 8004bbe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004bc0:	2300      	movs	r3, #0
}
 8004bc2:	0018      	movs	r0, r3
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	b004      	add	sp, #16
 8004bc8:	bd80      	pop	{r7, pc}
	...

08004bcc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b084      	sub	sp, #16
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2284      	movs	r2, #132	; 0x84
 8004bda:	5c9b      	ldrb	r3, [r3, r2]
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d101      	bne.n	8004be4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004be0:	2302      	movs	r3, #2
 8004be2:	e02f      	b.n	8004c44 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2284      	movs	r2, #132	; 0x84
 8004be8:	2101      	movs	r1, #1
 8004bea:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2288      	movs	r2, #136	; 0x88
 8004bf0:	2124      	movs	r1, #36	; 0x24
 8004bf2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	2101      	movs	r1, #1
 8004c08:	438a      	bics	r2, r1
 8004c0a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	4a0e      	ldr	r2, [pc, #56]	; (8004c4c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004c14:	4013      	ands	r3, r2
 8004c16:	0019      	movs	r1, r3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	683a      	ldr	r2, [r7, #0]
 8004c1e:	430a      	orrs	r2, r1
 8004c20:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	0018      	movs	r0, r3
 8004c26:	f000 f813 	bl	8004c50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	68fa      	ldr	r2, [r7, #12]
 8004c30:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2288      	movs	r2, #136	; 0x88
 8004c36:	2120      	movs	r1, #32
 8004c38:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2284      	movs	r2, #132	; 0x84
 8004c3e:	2100      	movs	r1, #0
 8004c40:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004c42:	2300      	movs	r3, #0
}
 8004c44:	0018      	movs	r0, r3
 8004c46:	46bd      	mov	sp, r7
 8004c48:	b004      	add	sp, #16
 8004c4a:	bd80      	pop	{r7, pc}
 8004c4c:	f1ffffff 	.word	0xf1ffffff

08004c50 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004c50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c52:	b085      	sub	sp, #20
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d108      	bne.n	8004c72 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	226a      	movs	r2, #106	; 0x6a
 8004c64:	2101      	movs	r1, #1
 8004c66:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2268      	movs	r2, #104	; 0x68
 8004c6c:	2101      	movs	r1, #1
 8004c6e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004c70:	e043      	b.n	8004cfa <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004c72:	260f      	movs	r6, #15
 8004c74:	19bb      	adds	r3, r7, r6
 8004c76:	2208      	movs	r2, #8
 8004c78:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004c7a:	200e      	movs	r0, #14
 8004c7c:	183b      	adds	r3, r7, r0
 8004c7e:	2208      	movs	r2, #8
 8004c80:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	0e5b      	lsrs	r3, r3, #25
 8004c8a:	b2da      	uxtb	r2, r3
 8004c8c:	240d      	movs	r4, #13
 8004c8e:	193b      	adds	r3, r7, r4
 8004c90:	2107      	movs	r1, #7
 8004c92:	400a      	ands	r2, r1
 8004c94:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	0f5b      	lsrs	r3, r3, #29
 8004c9e:	b2da      	uxtb	r2, r3
 8004ca0:	250c      	movs	r5, #12
 8004ca2:	197b      	adds	r3, r7, r5
 8004ca4:	2107      	movs	r1, #7
 8004ca6:	400a      	ands	r2, r1
 8004ca8:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004caa:	183b      	adds	r3, r7, r0
 8004cac:	781b      	ldrb	r3, [r3, #0]
 8004cae:	197a      	adds	r2, r7, r5
 8004cb0:	7812      	ldrb	r2, [r2, #0]
 8004cb2:	4914      	ldr	r1, [pc, #80]	; (8004d04 <UARTEx_SetNbDataToProcess+0xb4>)
 8004cb4:	5c8a      	ldrb	r2, [r1, r2]
 8004cb6:	435a      	muls	r2, r3
 8004cb8:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8004cba:	197b      	adds	r3, r7, r5
 8004cbc:	781b      	ldrb	r3, [r3, #0]
 8004cbe:	4a12      	ldr	r2, [pc, #72]	; (8004d08 <UARTEx_SetNbDataToProcess+0xb8>)
 8004cc0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004cc2:	0019      	movs	r1, r3
 8004cc4:	f7fb faa8 	bl	8000218 <__divsi3>
 8004cc8:	0003      	movs	r3, r0
 8004cca:	b299      	uxth	r1, r3
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	226a      	movs	r2, #106	; 0x6a
 8004cd0:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004cd2:	19bb      	adds	r3, r7, r6
 8004cd4:	781b      	ldrb	r3, [r3, #0]
 8004cd6:	193a      	adds	r2, r7, r4
 8004cd8:	7812      	ldrb	r2, [r2, #0]
 8004cda:	490a      	ldr	r1, [pc, #40]	; (8004d04 <UARTEx_SetNbDataToProcess+0xb4>)
 8004cdc:	5c8a      	ldrb	r2, [r1, r2]
 8004cde:	435a      	muls	r2, r3
 8004ce0:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8004ce2:	193b      	adds	r3, r7, r4
 8004ce4:	781b      	ldrb	r3, [r3, #0]
 8004ce6:	4a08      	ldr	r2, [pc, #32]	; (8004d08 <UARTEx_SetNbDataToProcess+0xb8>)
 8004ce8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004cea:	0019      	movs	r1, r3
 8004cec:	f7fb fa94 	bl	8000218 <__divsi3>
 8004cf0:	0003      	movs	r3, r0
 8004cf2:	b299      	uxth	r1, r3
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2268      	movs	r2, #104	; 0x68
 8004cf8:	5299      	strh	r1, [r3, r2]
}
 8004cfa:	46c0      	nop			; (mov r8, r8)
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	b005      	add	sp, #20
 8004d00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d02:	46c0      	nop			; (mov r8, r8)
 8004d04:	08004e74 	.word	0x08004e74
 8004d08:	08004e7c 	.word	0x08004e7c

08004d0c <__libc_init_array>:
 8004d0c:	b570      	push	{r4, r5, r6, lr}
 8004d0e:	2600      	movs	r6, #0
 8004d10:	4d0c      	ldr	r5, [pc, #48]	; (8004d44 <__libc_init_array+0x38>)
 8004d12:	4c0d      	ldr	r4, [pc, #52]	; (8004d48 <__libc_init_array+0x3c>)
 8004d14:	1b64      	subs	r4, r4, r5
 8004d16:	10a4      	asrs	r4, r4, #2
 8004d18:	42a6      	cmp	r6, r4
 8004d1a:	d109      	bne.n	8004d30 <__libc_init_array+0x24>
 8004d1c:	2600      	movs	r6, #0
 8004d1e:	f000 f821 	bl	8004d64 <_init>
 8004d22:	4d0a      	ldr	r5, [pc, #40]	; (8004d4c <__libc_init_array+0x40>)
 8004d24:	4c0a      	ldr	r4, [pc, #40]	; (8004d50 <__libc_init_array+0x44>)
 8004d26:	1b64      	subs	r4, r4, r5
 8004d28:	10a4      	asrs	r4, r4, #2
 8004d2a:	42a6      	cmp	r6, r4
 8004d2c:	d105      	bne.n	8004d3a <__libc_init_array+0x2e>
 8004d2e:	bd70      	pop	{r4, r5, r6, pc}
 8004d30:	00b3      	lsls	r3, r6, #2
 8004d32:	58eb      	ldr	r3, [r5, r3]
 8004d34:	4798      	blx	r3
 8004d36:	3601      	adds	r6, #1
 8004d38:	e7ee      	b.n	8004d18 <__libc_init_array+0xc>
 8004d3a:	00b3      	lsls	r3, r6, #2
 8004d3c:	58eb      	ldr	r3, [r5, r3]
 8004d3e:	4798      	blx	r3
 8004d40:	3601      	adds	r6, #1
 8004d42:	e7f2      	b.n	8004d2a <__libc_init_array+0x1e>
 8004d44:	08004e8c 	.word	0x08004e8c
 8004d48:	08004e8c 	.word	0x08004e8c
 8004d4c:	08004e8c 	.word	0x08004e8c
 8004d50:	08004e90 	.word	0x08004e90

08004d54 <memset>:
 8004d54:	0003      	movs	r3, r0
 8004d56:	1882      	adds	r2, r0, r2
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d100      	bne.n	8004d5e <memset+0xa>
 8004d5c:	4770      	bx	lr
 8004d5e:	7019      	strb	r1, [r3, #0]
 8004d60:	3301      	adds	r3, #1
 8004d62:	e7f9      	b.n	8004d58 <memset+0x4>

08004d64 <_init>:
 8004d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d66:	46c0      	nop			; (mov r8, r8)
 8004d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d6a:	bc08      	pop	{r3}
 8004d6c:	469e      	mov	lr, r3
 8004d6e:	4770      	bx	lr

08004d70 <_fini>:
 8004d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d72:	46c0      	nop			; (mov r8, r8)
 8004d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d76:	bc08      	pop	{r3}
 8004d78:	469e      	mov	lr, r3
 8004d7a:	4770      	bx	lr
